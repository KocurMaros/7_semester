
cvicenie_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001f84  08001f84  00011f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fac  08001fac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001fac  08001fac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fac  08001fac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fac  08001fac  00011fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fb0  08001fb0  00011fb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000b4  200000b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009e0f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cee  00000000  00000000  00029e8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000900  00000000  00000000  0002bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006c6  00000000  00000000  0002c480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b2af  00000000  00000000  0002cb46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000afed  00000000  00000000  00047df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009e9d0  00000000  00000000  00052de2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002368  00000000  00000000  000f17b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  000f3b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001f6c 	.word	0x08001f6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001f6c 	.word	0x08001f6c

080001c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__NVIC_GetPriorityGrouping+0x18>)
 80001ce:	68db      	ldr	r3, [r3, #12]
 80001d0:	0a1b      	lsrs	r3, r3, #8
 80001d2:	f003 0307 	and.w	r3, r3, #7
}
 80001d6:	4618      	mov	r0, r3
 80001d8:	46bd      	mov	sp, r7
 80001da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001de:	4770      	bx	lr
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	db0b      	blt.n	800020e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	f003 021f 	and.w	r2, r3, #31
 80001fc:	4907      	ldr	r1, [pc, #28]	; (800021c <__NVIC_EnableIRQ+0x38>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	095b      	lsrs	r3, r3, #5
 8000204:	2001      	movs	r0, #1
 8000206:	fa00 f202 	lsl.w	r2, r0, r2
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800020e:	bf00      	nop
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	e000e100 	.word	0xe000e100

08000220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000220:	b480      	push	{r7}
 8000222:	b083      	sub	sp, #12
 8000224:	af00      	add	r7, sp, #0
 8000226:	4603      	mov	r3, r0
 8000228:	6039      	str	r1, [r7, #0]
 800022a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000230:	2b00      	cmp	r3, #0
 8000232:	db0a      	blt.n	800024a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	b2da      	uxtb	r2, r3
 8000238:	490c      	ldr	r1, [pc, #48]	; (800026c <__NVIC_SetPriority+0x4c>)
 800023a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023e:	0112      	lsls	r2, r2, #4
 8000240:	b2d2      	uxtb	r2, r2
 8000242:	440b      	add	r3, r1
 8000244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000248:	e00a      	b.n	8000260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	b2da      	uxtb	r2, r3
 800024e:	4908      	ldr	r1, [pc, #32]	; (8000270 <__NVIC_SetPriority+0x50>)
 8000250:	79fb      	ldrb	r3, [r7, #7]
 8000252:	f003 030f 	and.w	r3, r3, #15
 8000256:	3b04      	subs	r3, #4
 8000258:	0112      	lsls	r2, r2, #4
 800025a:	b2d2      	uxtb	r2, r2
 800025c:	440b      	add	r3, r1
 800025e:	761a      	strb	r2, [r3, #24]
}
 8000260:	bf00      	nop
 8000262:	370c      	adds	r7, #12
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	e000e100 	.word	0xe000e100
 8000270:	e000ed00 	.word	0xe000ed00

08000274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000274:	b480      	push	{r7}
 8000276:	b089      	sub	sp, #36	; 0x24
 8000278:	af00      	add	r7, sp, #0
 800027a:	60f8      	str	r0, [r7, #12]
 800027c:	60b9      	str	r1, [r7, #8]
 800027e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	f003 0307 	and.w	r3, r3, #7
 8000286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	f1c3 0307 	rsb	r3, r3, #7
 800028e:	2b04      	cmp	r3, #4
 8000290:	bf28      	it	cs
 8000292:	2304      	movcs	r3, #4
 8000294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	69fb      	ldr	r3, [r7, #28]
 8000298:	3304      	adds	r3, #4
 800029a:	2b06      	cmp	r3, #6
 800029c:	d902      	bls.n	80002a4 <NVIC_EncodePriority+0x30>
 800029e:	69fb      	ldr	r3, [r7, #28]
 80002a0:	3b03      	subs	r3, #3
 80002a2:	e000      	b.n	80002a6 <NVIC_EncodePriority+0x32>
 80002a4:	2300      	movs	r3, #0
 80002a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80002ac:	69bb      	ldr	r3, [r7, #24]
 80002ae:	fa02 f303 	lsl.w	r3, r2, r3
 80002b2:	43da      	mvns	r2, r3
 80002b4:	68bb      	ldr	r3, [r7, #8]
 80002b6:	401a      	ands	r2, r3
 80002b8:	697b      	ldr	r3, [r7, #20]
 80002ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa01 f303 	lsl.w	r3, r1, r3
 80002c6:	43d9      	mvns	r1, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002cc:	4313      	orrs	r3, r2
         );
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3724      	adds	r7, #36	; 0x24
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002dc:	b480      	push	{r7}
 80002de:	b085      	sub	sp, #20
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002e4:	4b08      	ldr	r3, [pc, #32]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002e6:	695a      	ldr	r2, [r3, #20]
 80002e8:	4907      	ldr	r1, [pc, #28]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4313      	orrs	r3, r2
 80002ee:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002f2:	695a      	ldr	r2, [r3, #20]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4013      	ands	r3, r2
 80002f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80002fa:	68fb      	ldr	r3, [r7, #12]
}
 80002fc:	bf00      	nop
 80002fe:	3714      	adds	r7, #20
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40021000 	.word	0x40021000

0800030c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800030c:	b480      	push	{r7}
 800030e:	b085      	sub	sp, #20
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
 8000314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000316:	4a14      	ldr	r2, [pc, #80]	; (8000368 <LL_SYSCFG_SetEXTISource+0x5c>)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	f003 0303 	and.w	r3, r3, #3
 800031e:	3302      	adds	r3, #2
 8000320:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	0c1b      	lsrs	r3, r3, #16
 8000328:	43db      	mvns	r3, r3
 800032a:	ea02 0103 	and.w	r1, r2, r3
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	0c1b      	lsrs	r3, r3, #16
 8000332:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	fa93 f3a3 	rbit	r3, r3
 800033a:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	fab3 f383 	clz	r3, r3
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	fa03 f202 	lsl.w	r2, r3, r2
 800034c:	4806      	ldr	r0, [pc, #24]	; (8000368 <LL_SYSCFG_SetEXTISource+0x5c>)
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	f003 0303 	and.w	r3, r3, #3
 8000354:	430a      	orrs	r2, r1
 8000356:	3302      	adds	r3, #2
 8000358:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800035c:	bf00      	nop
 800035e:	3714      	adds	r7, #20
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40010000 	.word	0x40010000

0800036c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800036c:	b480      	push	{r7}
 800036e:	b089      	sub	sp, #36	; 0x24
 8000370:	af00      	add	r7, sp, #0
 8000372:	60f8      	str	r0, [r7, #12]
 8000374:	60b9      	str	r1, [r7, #8]
 8000376:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	fa93 f3a3 	rbit	r3, r3
 8000386:	613b      	str	r3, [r7, #16]
  return result;
 8000388:	693b      	ldr	r3, [r7, #16]
 800038a:	fab3 f383 	clz	r3, r3
 800038e:	b2db      	uxtb	r3, r3
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	2103      	movs	r1, #3
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	43db      	mvns	r3, r3
 800039a:	401a      	ands	r2, r3
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003a0:	69fb      	ldr	r3, [r7, #28]
 80003a2:	fa93 f3a3 	rbit	r3, r3
 80003a6:	61bb      	str	r3, [r7, #24]
  return result;
 80003a8:	69bb      	ldr	r3, [r7, #24]
 80003aa:	fab3 f383 	clz	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	6879      	ldr	r1, [r7, #4]
 80003b4:	fa01 f303 	lsl.w	r3, r1, r3
 80003b8:	431a      	orrs	r2, r3
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	601a      	str	r2, [r3, #0]
}
 80003be:	bf00      	nop
 80003c0:	3724      	adds	r7, #36	; 0x24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr

080003ca <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80003ca:	b480      	push	{r7}
 80003cc:	b089      	sub	sp, #36	; 0x24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	60f8      	str	r0, [r7, #12]
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	fa93 f3a3 	rbit	r3, r3
 80003e4:	613b      	str	r3, [r7, #16]
  return result;
 80003e6:	693b      	ldr	r3, [r7, #16]
 80003e8:	fab3 f383 	clz	r3, r3
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	2103      	movs	r1, #3
 80003f2:	fa01 f303 	lsl.w	r3, r1, r3
 80003f6:	43db      	mvns	r3, r3
 80003f8:	401a      	ands	r2, r3
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003fe:	69fb      	ldr	r3, [r7, #28]
 8000400:	fa93 f3a3 	rbit	r3, r3
 8000404:	61bb      	str	r3, [r7, #24]
  return result;
 8000406:	69bb      	ldr	r3, [r7, #24]
 8000408:	fab3 f383 	clz	r3, r3
 800040c:	b2db      	uxtb	r3, r3
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	6879      	ldr	r1, [r7, #4]
 8000412:	fa01 f303 	lsl.w	r3, r1, r3
 8000416:	431a      	orrs	r2, r3
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	60da      	str	r2, [r3, #12]
}
 800041c:	bf00      	nop
 800041e:	3724      	adds	r7, #36	; 0x24
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
 8000430:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000438:	bf00      	nop
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr

08000444 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b08a      	sub	sp, #40	; 0x28
 8000448:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800044a:	f107 031c 	add.w	r3, r7, #28
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000456:	1d3b      	adds	r3, r7, #4
 8000458:	2200      	movs	r2, #0
 800045a:	601a      	str	r2, [r3, #0]
 800045c:	605a      	str	r2, [r3, #4]
 800045e:	609a      	str	r2, [r3, #8]
 8000460:	60da      	str	r2, [r3, #12]
 8000462:	611a      	str	r2, [r3, #16]
 8000464:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000466:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800046a:	f7ff ff37 	bl	80002dc <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800046e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000472:	f7ff ff33 	bl	80002dc <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000476:	2110      	movs	r1, #16
 8000478:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047c:	f7ff ffd4 	bl	8000428 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTA, LL_SYSCFG_EXTI_LINE3);
 8000480:	f04f 4170 	mov.w	r1, #4026531840	; 0xf0000000
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff41 	bl	800030c <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(GPIOA, LL_GPIO_PIN_3, LL_GPIO_PULL_UP);
 800048a:	2201      	movs	r2, #1
 800048c:	2108      	movs	r1, #8
 800048e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000492:	f7ff ff9a 	bl	80003ca <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_3, LL_GPIO_MODE_INPUT);
 8000496:	2200      	movs	r2, #0
 8000498:	2108      	movs	r1, #8
 800049a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800049e:	f7ff ff65 	bl	800036c <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 80004a2:	2308      	movs	r3, #8
 80004a4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80004a6:	2300      	movs	r3, #0
 80004a8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80004aa:	2301      	movs	r3, #1
 80004ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80004b0:	2300      	movs	r3, #0
 80004b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 80004b6:	2301      	movs	r3, #1
 80004b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80004bc:	f107 031c 	add.w	r3, r7, #28
 80004c0:	4618      	mov	r0, r3
 80004c2:	f001 fab9 	bl	8001a38 <LL_EXTI_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 80004c6:	2310      	movs	r3, #16
 80004c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004ca:	2301      	movs	r3, #1
 80004cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004d2:	2300      	movs	r3, #0
 80004d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004da:	1d3b      	adds	r3, r7, #4
 80004dc:	4619      	mov	r1, r3
 80004de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e2:	f001 fc9e 	bl	8001e22 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80004e6:	f7ff fe6f 	bl	80001c8 <__NVIC_GetPriorityGrouping>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2200      	movs	r2, #0
 80004ee:	2100      	movs	r1, #0
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff febf 	bl	8000274 <NVIC_EncodePriority>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4619      	mov	r1, r3
 80004fa:	2009      	movs	r0, #9
 80004fc:	f7ff fe90 	bl	8000220 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 8000500:	2009      	movs	r0, #9
 8000502:	f7ff fe6f 	bl	80001e4 <__NVIC_EnableIRQ>

}
 8000506:	bf00      	nop
 8000508:	3728      	adds	r7, #40	; 0x28
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <LL_RCC_HSI_Enable+0x1c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <LL_RCC_HSI_Enable+0x1c>)
 800051a:	f043 0301 	orr.w	r3, r3, #1
 800051e:	6013      	str	r3, [r2, #0]
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <LL_RCC_HSI_IsReady+0x20>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	f003 0302 	and.w	r3, r3, #2
 800053c:	2b02      	cmp	r3, #2
 800053e:	bf0c      	ite	eq
 8000540:	2301      	moveq	r3, #1
 8000542:	2300      	movne	r3, #0
 8000544:	b2db      	uxtb	r3, r3
}
 8000546:	4618      	mov	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800055c:	4b07      	ldr	r3, [pc, #28]	; (800057c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800056a:	4313      	orrs	r3, r2
 800056c:	600b      	str	r3, [r1, #0]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <LL_RCC_SetSysClkSource+0x24>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	f023 0203 	bic.w	r2, r3, #3
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <LL_RCC_SetSysClkSource+0x24>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	604b      	str	r3, [r1, #4]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80005ac:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <LL_RCC_GetSysClkSource+0x18>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f003 030c 	and.w	r3, r3, #12
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000

080005c4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80005d4:	4904      	ldr	r1, [pc, #16]	; (80005e8 <LL_RCC_SetAHBPrescaler+0x24>)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4313      	orrs	r3, r2
 80005da:	604b      	str	r3, [r1, #4]
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40021000 	.word	0x40021000

080005ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80005fc:	4904      	ldr	r1, [pc, #16]	; (8000610 <LL_RCC_SetAPB1Prescaler+0x24>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4313      	orrs	r3, r2
 8000602:	604b      	str	r3, [r1, #4]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <LL_RCC_SetAPB2Prescaler+0x24>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000624:	4904      	ldr	r1, [pc, #16]	; (8000638 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4313      	orrs	r3, r2
 800062a:	604b      	str	r3, [r1, #4]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40021000 	.word	0x40021000

0800063c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <LL_FLASH_SetLatency+0x24>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f023 0207 	bic.w	r2, r3, #7
 800064c:	4904      	ldr	r1, [pc, #16]	; (8000660 <LL_FLASH_SetLatency+0x24>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4313      	orrs	r3, r2
 8000652:	600b      	str	r3, [r1, #0]
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	40022000 	.word	0x40022000

08000664 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <LL_FLASH_GetLatency+0x18>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f003 0307 	and.w	r3, r3, #7
}
 8000670:	4618      	mov	r0, r3
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40022000 	.word	0x40022000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 f996 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f806 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f7ff feda 	bl	8000444 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000690:	f000 f8f2 	bl	8000878 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000694:	e7fe      	b.n	8000694 <main+0x14>
	...

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ffcd 	bl	800063c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80006a2:	bf00      	nop
 80006a4:	f7ff ffde 	bl	8000664 <LL_FLASH_GetLatency>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1fa      	bne.n	80006a4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80006ae:	f7ff ff2f 	bl	8000510 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80006b2:	bf00      	nop
 80006b4:	f7ff ff3c 	bl	8000530 <LL_RCC_HSI_IsReady>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d1fa      	bne.n	80006b4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80006be:	2010      	movs	r0, #16
 80006c0:	f7ff ff48 	bl	8000554 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ff7d 	bl	80005c4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80006ca:	2000      	movs	r0, #0
 80006cc:	f7ff ff8e 	bl	80005ec <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff9f 	bl	8000614 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ff52 	bl	8000580 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80006dc:	bf00      	nop
 80006de:	f7ff ff63 	bl	80005a8 <LL_RCC_GetSysClkSource>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1fa      	bne.n	80006de <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 80006e8:	4806      	ldr	r0, [pc, #24]	; (8000704 <SystemClock_Config+0x6c>)
 80006ea:	f001 fc0b 	bl	8001f04 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80006ee:	2000      	movs	r0, #0
 80006f0:	f000 f976 	bl	80009e0 <HAL_InitTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006fa:	f000 f805 	bl	8000708 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	007a1200 	.word	0x007a1200

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>
	...

08000714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_MspInit+0x44>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	4a0e      	ldr	r2, [pc, #56]	; (8000758 <HAL_MspInit+0x44>)
 8000720:	f043 0301 	orr.w	r3, r3, #1
 8000724:	6193      	str	r3, [r2, #24]
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_MspInit+0x44>)
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	f003 0301 	and.w	r3, r3, #1
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	4b09      	ldr	r3, [pc, #36]	; (8000758 <HAL_MspInit+0x44>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	4a08      	ldr	r2, [pc, #32]	; (8000758 <HAL_MspInit+0x44>)
 8000738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073c:	61d3      	str	r3, [r2, #28]
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_MspInit+0x44>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	40021000 	.word	0x40021000

0800075c <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000764:	4b07      	ldr	r3, [pc, #28]	; (8000784 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8000766:	695a      	ldr	r2, [r3, #20]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4013      	ands	r3, r2
 800076c:	687a      	ldr	r2, [r7, #4]
 800076e:	429a      	cmp	r2, r3
 8000770:	bf0c      	ite	eq
 8000772:	2301      	moveq	r3, #1
 8000774:	2300      	movne	r3, #0
 8000776:	b2db      	uxtb	r3, r3
}
 8000778:	4618      	mov	r0, r3
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	40010400 	.word	0x40010400

08000788 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000790:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6153      	str	r3, [r2, #20]
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40010400 	.word	0x40010400

080007a8 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	4013      	ands	r3, r2
 80007be:	041a      	lsls	r2, r3, #16
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	400b      	ands	r3, r1
 80007c8:	431a      	orrs	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	619a      	str	r2, [r3, #24]
}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007de:	e7fe      	b.n	80007de <NMI_Handler+0x4>

080007e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <HardFault_Handler+0x4>

080007e6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <MemManage_Handler+0x4>

080007ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <BusFault_Handler+0x4>

080007f2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <UsageFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 f90b 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}

0800082e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800082e:	b580      	push	{r7, lr}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_3) != RESET)
 8000832:	2008      	movs	r0, #8
 8000834:	f7ff ff92 	bl	800075c <LL_EXTI_IsActiveFlag_0_31>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d007      	beq.n	800084e <EXTI3_IRQHandler+0x20>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_3);
 800083e:	2008      	movs	r0, #8
 8000840:	f7ff ffa2 	bl	8000788 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_3 */
    LL_GPIO_TogglePin(GPIOA,LL_GPIO_PIN_4);
 8000844:	2110      	movs	r1, #16
 8000846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084a:	f7ff ffad 	bl	80007a8 <LL_GPIO_TogglePin>
    /* USER CODE END LL_EXTI_LINE_3 */
  }
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <SystemInit+0x20>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a05      	ldr	r2, [pc, #20]	; (8000874 <SystemInit+0x20>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_USART2_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000884:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008bc:	f000 fbf2 	bl	80010a4 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008c6:	f7ff ff1f 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000028 	.word	0x20000028
 80008d4:	40004400 	.word	0x40004400

080008d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a18      	ldr	r2, [pc, #96]	; (8000958 <HAL_UART_MspInit+0x80>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d129      	bne.n	800094e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <HAL_UART_MspInit+0x84>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a17      	ldr	r2, [pc, #92]	; (800095c <HAL_UART_MspInit+0x84>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_UART_MspInit+0x84>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <HAL_UART_MspInit+0x84>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	4a11      	ldr	r2, [pc, #68]	; (800095c <HAL_UART_MspInit+0x84>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6153      	str	r3, [r2, #20]
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_UART_MspInit+0x84>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 800092a:	f248 0304 	movw	r3, #32772	; 0x8004
 800092e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	2302      	movs	r3, #2
 8000932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093c:	2307      	movs	r3, #7
 800093e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800094a:	f000 f97f 	bl	8000c4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40004400 	.word	0x40004400
 800095c:	40021000 	.word	0x40021000

08000960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000964:	f7ff ff76 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000968:	480c      	ldr	r0, [pc, #48]	; (800099c <LoopForever+0x6>)
  ldr r1, =_edata
 800096a:	490d      	ldr	r1, [pc, #52]	; (80009a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <LoopForever+0xe>)
  movs r3, #0
 800096e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000970:	e002      	b.n	8000978 <LoopCopyDataInit>

08000972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000976:	3304      	adds	r3, #4

08000978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800097c:	d3f9      	bcc.n	8000972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000980:	4c0a      	ldr	r4, [pc, #40]	; (80009ac <LoopForever+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000984:	e001      	b.n	800098a <LoopFillZerobss>

08000986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000988:	3204      	adds	r2, #4

0800098a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800098c:	d3fb      	bcc.n	8000986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098e:	f001 fac9 	bl	8001f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000992:	f7ff fe75 	bl	8000680 <main>

08000996 <LoopForever>:

LoopForever:
    b LoopForever
 8000996:	e7fe      	b.n	8000996 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000998:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a4:	08001fb4 	.word	0x08001fb4
  ldr r2, =_sbss
 80009a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009ac:	200000b4 	.word	0x200000b4

080009b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC1_2_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_Init+0x28>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_Init+0x28>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c4:	2003      	movs	r0, #3
 80009c6:	f000 f90d 	bl	8000be4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ca:	2000      	movs	r0, #0
 80009cc:	f000 f808 	bl	80009e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d0:	f7ff fea0 	bl	8000714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40022000 	.word	0x40022000

080009e0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <HAL_InitTick+0x54>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x58>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	4619      	mov	r1, r3
 80009f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 f917 	bl	8000c32 <HAL_SYSTICK_Config>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00e      	b.n	8000a2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b0f      	cmp	r3, #15
 8000a12:	d80a      	bhi.n	8000a2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a14:	2200      	movs	r2, #0
 8000a16:	6879      	ldr	r1, [r7, #4]
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a1c:	f000 f8ed 	bl	8000bfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a20:	4a06      	ldr	r2, [pc, #24]	; (8000a3c <HAL_InitTick+0x5c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a26:	2300      	movs	r3, #0
 8000a28:	e000      	b.n	8000a2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2a:	2301      	movs	r3, #1
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000008 	.word	0x20000008
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_IncTick+0x20>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x24>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <HAL_IncTick+0x24>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000008 	.word	0x20000008
 8000a64:	200000b0 	.word	0x200000b0

08000a68 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_GetTick+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	200000b0 	.word	0x200000b0

08000a80 <__NVIC_SetPriorityGrouping>:
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000a92:	68db      	ldr	r3, [r3, #12]
 8000a94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	3714      	adds	r7, #20
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <__NVIC_GetPriorityGrouping>:
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000acc:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ace:	68db      	ldr	r3, [r3, #12]
 8000ad0:	0a1b      	lsrs	r3, r3, #8
 8000ad2:	f003 0307 	and.w	r3, r3, #7
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <__NVIC_SetPriority>:
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	6039      	str	r1, [r7, #0]
 8000aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db0a      	blt.n	8000b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	490c      	ldr	r1, [pc, #48]	; (8000b30 <__NVIC_SetPriority+0x4c>)
 8000afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b02:	0112      	lsls	r2, r2, #4
 8000b04:	b2d2      	uxtb	r2, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b0c:	e00a      	b.n	8000b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	b2da      	uxtb	r2, r3
 8000b12:	4908      	ldr	r1, [pc, #32]	; (8000b34 <__NVIC_SetPriority+0x50>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	3b04      	subs	r3, #4
 8000b1c:	0112      	lsls	r2, r2, #4
 8000b1e:	b2d2      	uxtb	r2, r2
 8000b20:	440b      	add	r3, r1
 8000b22:	761a      	strb	r2, [r3, #24]
}
 8000b24:	bf00      	nop
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	e000e100 	.word	0xe000e100
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_EncodePriority>:
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b089      	sub	sp, #36	; 0x24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	f1c3 0307 	rsb	r3, r3, #7
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	bf28      	it	cs
 8000b56:	2304      	movcs	r3, #4
 8000b58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3304      	adds	r3, #4
 8000b5e:	2b06      	cmp	r3, #6
 8000b60:	d902      	bls.n	8000b68 <NVIC_EncodePriority+0x30>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3b03      	subs	r3, #3
 8000b66:	e000      	b.n	8000b6a <NVIC_EncodePriority+0x32>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	43da      	mvns	r2, r3
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	43d9      	mvns	r1, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b90:	4313      	orrs	r3, r2
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
	...

08000ba0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3b01      	subs	r3, #1
 8000bac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bb0:	d301      	bcc.n	8000bb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e00f      	b.n	8000bd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb6:	4a0a      	ldr	r2, [pc, #40]	; (8000be0 <SysTick_Config+0x40>)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bbe:	210f      	movs	r1, #15
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f7ff ff8e 	bl	8000ae4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc8:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <SysTick_Config+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x40>)
 8000bd0:	2207      	movs	r2, #7
 8000bd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ff47 	bl	8000a80 <__NVIC_SetPriorityGrouping>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b086      	sub	sp, #24
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	4603      	mov	r3, r0
 8000c02:	60b9      	str	r1, [r7, #8]
 8000c04:	607a      	str	r2, [r7, #4]
 8000c06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c0c:	f7ff ff5c 	bl	8000ac8 <__NVIC_GetPriorityGrouping>
 8000c10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	68b9      	ldr	r1, [r7, #8]
 8000c16:	6978      	ldr	r0, [r7, #20]
 8000c18:	f7ff ff8e 	bl	8000b38 <NVIC_EncodePriority>
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c22:	4611      	mov	r1, r2
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff ff5d 	bl	8000ae4 <__NVIC_SetPriority>
}
 8000c2a:	bf00      	nop
 8000c2c:	3718      	adds	r7, #24
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff ffb0 	bl	8000ba0 <SysTick_Config>
 8000c40:	4603      	mov	r3, r0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b087      	sub	sp, #28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e14e      	b.n	8000efa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	fa01 f303 	lsl.w	r3, r1, r3
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	f000 8140 	beq.w	8000ef4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	f003 0201 	and.w	r2, r3, #1
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d017      	beq.n	8000d2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 0303 	and.w	r3, r3, #3
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	693a      	ldr	r2, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	6939      	ldr	r1, [r7, #16]
 8000d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0203 	and.w	r2, r3, #3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 809a 	beq.w	8000ef4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc0:	4b55      	ldr	r3, [pc, #340]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a54      	ldr	r2, [pc, #336]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b52      	ldr	r3, [pc, #328]	; (8000f18 <HAL_GPIO_Init+0x2cc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd8:	4a50      	ldr	r2, [pc, #320]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e02:	d013      	beq.n	8000e2c <HAL_GPIO_Init+0x1e0>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a46      	ldr	r2, [pc, #280]	; (8000f20 <HAL_GPIO_Init+0x2d4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d00d      	beq.n	8000e28 <HAL_GPIO_Init+0x1dc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a45      	ldr	r2, [pc, #276]	; (8000f24 <HAL_GPIO_Init+0x2d8>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d007      	beq.n	8000e24 <HAL_GPIO_Init+0x1d8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	4a44      	ldr	r2, [pc, #272]	; (8000f28 <HAL_GPIO_Init+0x2dc>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d101      	bne.n	8000e20 <HAL_GPIO_Init+0x1d4>
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	e006      	b.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e20:	2305      	movs	r3, #5
 8000e22:	e004      	b.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e24:	2302      	movs	r3, #2
 8000e26:	e002      	b.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e000      	b.n	8000e2e <HAL_GPIO_Init+0x1e2>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	f002 0203 	and.w	r2, r2, #3
 8000e34:	0092      	lsls	r2, r2, #2
 8000e36:	4093      	lsls	r3, r2
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e3e:	4937      	ldr	r1, [pc, #220]	; (8000f1c <HAL_GPIO_Init+0x2d0>)
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4c:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e70:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e76:	4b2d      	ldr	r3, [pc, #180]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e9a:	4a24      	ldr	r2, [pc, #144]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	4013      	ands	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d003      	beq.n	8000ec4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ec4:	4a19      	ldr	r2, [pc, #100]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000eee:	4a0f      	ldr	r2, [pc, #60]	; (8000f2c <HAL_GPIO_Init+0x2e0>)
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f47f aea9 	bne.w	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	371c      	adds	r7, #28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010000 	.word	0x40010000
 8000f20:	48000400 	.word	0x48000400
 8000f24:	48000800 	.word	0x48000800
 8000f28:	48000c00 	.word	0x48000c00
 8000f2c:	40010400 	.word	0x40010400

08000f30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b08b      	sub	sp, #44	; 0x2c
 8000f34:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8000f4a:	4b29      	ldr	r3, [pc, #164]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 030c 	and.w	r3, r3, #12
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d002      	beq.n	8000f60 <HAL_RCC_GetSysClockFreq+0x30>
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d003      	beq.n	8000f66 <HAL_RCC_GetSysClockFreq+0x36>
 8000f5e:	e03c      	b.n	8000fda <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f60:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f62:	623b      	str	r3, [r7, #32]
      break;
 8000f64:	e03c      	b.n	8000fe0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000f6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000f70:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f72:	68ba      	ldr	r2, [r7, #8]
 8000f74:	fa92 f2a2 	rbit	r2, r2
 8000f78:	607a      	str	r2, [r7, #4]
  return result;
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	fab2 f282 	clz	r2, r2
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	40d3      	lsrs	r3, r2
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	220f      	movs	r2, #15
 8000f94:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	fa92 f2a2 	rbit	r2, r2
 8000f9c:	60fa      	str	r2, [r7, #12]
  return result;
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	fab2 f282 	clz	r2, r2
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	40d3      	lsrs	r3, r2
 8000fa8:	4a14      	ldr	r2, [pc, #80]	; (8000ffc <HAL_RCC_GetSysClockFreq+0xcc>)
 8000faa:	5cd3      	ldrb	r3, [r2, r3]
 8000fac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d008      	beq.n	8000fca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000fb8:	4a0e      	ldr	r2, [pc, #56]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	fb02 f303 	mul.w	r3, r2, r3
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc8:	e004      	b.n	8000fd4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <HAL_RCC_GetSysClockFreq+0xd0>)
 8000fce:	fb02 f303 	mul.w	r3, r2, r3
 8000fd2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd6:	623b      	str	r3, [r7, #32]
      break;
 8000fd8:	e002      	b.n	8000fe0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fdc:	623b      	str	r3, [r7, #32]
      break;
 8000fde:	bf00      	nop
    }
  }
  return sysclockfreq;
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	372c      	adds	r7, #44	; 0x2c
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	007a1200 	.word	0x007a1200
 8000ff8:	08001f8c 	.word	0x08001f8c
 8000ffc:	08001f9c 	.word	0x08001f9c
 8001000:	003d0900 	.word	0x003d0900

08001004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_RCC_GetHCLKFreq+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000000 	.word	0x20000000

0800101c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001022:	f7ff ffef 	bl	8001004 <HAL_RCC_GetHCLKFreq>
 8001026:	4601      	mov	r1, r0
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001030:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001034:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	fa92 f2a2 	rbit	r2, r2
 800103c:	603a      	str	r2, [r7, #0]
  return result;
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	fab2 f282 	clz	r2, r2
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	40d3      	lsrs	r3, r2
 8001048:	4a04      	ldr	r2, [pc, #16]	; (800105c <HAL_RCC_GetPCLK1Freq+0x40>)
 800104a:	5cd3      	ldrb	r3, [r2, r3]
 800104c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001050:	4618      	mov	r0, r3
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40021000 	.word	0x40021000
 800105c:	08001f84 	.word	0x08001f84

08001060 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001066:	f7ff ffcd 	bl	8001004 <HAL_RCC_GetHCLKFreq>
 800106a:	4601      	mov	r1, r0
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001074:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001078:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	fa92 f2a2 	rbit	r2, r2
 8001080:	603a      	str	r2, [r7, #0]
  return result;
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	fab2 f282 	clz	r2, r2
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	40d3      	lsrs	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_RCC_GetPCLK2Freq+0x40>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40021000 	.word	0x40021000
 80010a0:	08001f84 	.word	0x08001f84

080010a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d101      	bne.n	80010b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e040      	b.n	8001138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d106      	bne.n	80010cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fc06 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2224      	movs	r2, #36	; 0x24
 80010d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f82c 	bl	8001140 <UART_SetConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d101      	bne.n	80010f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e022      	b.n	8001138 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d002      	beq.n	8001100 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f000 f956 	bl	80013ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800110e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800111e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f042 0201 	orr.w	r2, r2, #1
 800112e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001130:	6878      	ldr	r0, [r7, #4]
 8001132:	f000 f9dd 	bl	80014f0 <UART_CheckIdleState>
 8001136:	4603      	mov	r3, r0
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689a      	ldr	r2, [r3, #8]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	691b      	ldr	r3, [r3, #16]
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69db      	ldr	r3, [r3, #28]
 8001160:	4313      	orrs	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b8a      	ldr	r3, [pc, #552]	; (8001394 <UART_SetConfig+0x254>)
 800116c:	4013      	ands	r3, r2
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	6812      	ldr	r2, [r2, #0]
 8001172:	6979      	ldr	r1, [r7, #20]
 8001174:	430b      	orrs	r3, r1
 8001176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	68da      	ldr	r2, [r3, #12]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	430a      	orrs	r2, r1
 800118c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a1b      	ldr	r3, [r3, #32]
 8001198:	697a      	ldr	r2, [r7, #20]
 800119a:	4313      	orrs	r3, r2
 800119c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	430a      	orrs	r2, r1
 80011b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a78      	ldr	r2, [pc, #480]	; (8001398 <UART_SetConfig+0x258>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d120      	bne.n	80011fe <UART_SetConfig+0xbe>
 80011bc:	4b77      	ldr	r3, [pc, #476]	; (800139c <UART_SetConfig+0x25c>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	2b03      	cmp	r3, #3
 80011c6:	d817      	bhi.n	80011f8 <UART_SetConfig+0xb8>
 80011c8:	a201      	add	r2, pc, #4	; (adr r2, 80011d0 <UART_SetConfig+0x90>)
 80011ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ce:	bf00      	nop
 80011d0:	080011e1 	.word	0x080011e1
 80011d4:	080011ed 	.word	0x080011ed
 80011d8:	080011f3 	.word	0x080011f3
 80011dc:	080011e7 	.word	0x080011e7
 80011e0:	2300      	movs	r3, #0
 80011e2:	77fb      	strb	r3, [r7, #31]
 80011e4:	e01d      	b.n	8001222 <UART_SetConfig+0xe2>
 80011e6:	2302      	movs	r3, #2
 80011e8:	77fb      	strb	r3, [r7, #31]
 80011ea:	e01a      	b.n	8001222 <UART_SetConfig+0xe2>
 80011ec:	2304      	movs	r3, #4
 80011ee:	77fb      	strb	r3, [r7, #31]
 80011f0:	e017      	b.n	8001222 <UART_SetConfig+0xe2>
 80011f2:	2308      	movs	r3, #8
 80011f4:	77fb      	strb	r3, [r7, #31]
 80011f6:	e014      	b.n	8001222 <UART_SetConfig+0xe2>
 80011f8:	2310      	movs	r3, #16
 80011fa:	77fb      	strb	r3, [r7, #31]
 80011fc:	e011      	b.n	8001222 <UART_SetConfig+0xe2>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a67      	ldr	r2, [pc, #412]	; (80013a0 <UART_SetConfig+0x260>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <UART_SetConfig+0xce>
 8001208:	2300      	movs	r3, #0
 800120a:	77fb      	strb	r3, [r7, #31]
 800120c:	e009      	b.n	8001222 <UART_SetConfig+0xe2>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a64      	ldr	r2, [pc, #400]	; (80013a4 <UART_SetConfig+0x264>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d102      	bne.n	800121e <UART_SetConfig+0xde>
 8001218:	2300      	movs	r3, #0
 800121a:	77fb      	strb	r3, [r7, #31]
 800121c:	e001      	b.n	8001222 <UART_SetConfig+0xe2>
 800121e:	2310      	movs	r3, #16
 8001220:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800122a:	d15a      	bne.n	80012e2 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	2b08      	cmp	r3, #8
 8001230:	d827      	bhi.n	8001282 <UART_SetConfig+0x142>
 8001232:	a201      	add	r2, pc, #4	; (adr r2, 8001238 <UART_SetConfig+0xf8>)
 8001234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001238:	0800125d 	.word	0x0800125d
 800123c:	08001265 	.word	0x08001265
 8001240:	0800126d 	.word	0x0800126d
 8001244:	08001283 	.word	0x08001283
 8001248:	08001273 	.word	0x08001273
 800124c:	08001283 	.word	0x08001283
 8001250:	08001283 	.word	0x08001283
 8001254:	08001283 	.word	0x08001283
 8001258:	0800127b 	.word	0x0800127b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800125c:	f7ff fede 	bl	800101c <HAL_RCC_GetPCLK1Freq>
 8001260:	61b8      	str	r0, [r7, #24]
        break;
 8001262:	e013      	b.n	800128c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001264:	f7ff fefc 	bl	8001060 <HAL_RCC_GetPCLK2Freq>
 8001268:	61b8      	str	r0, [r7, #24]
        break;
 800126a:	e00f      	b.n	800128c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800126c:	4b4e      	ldr	r3, [pc, #312]	; (80013a8 <UART_SetConfig+0x268>)
 800126e:	61bb      	str	r3, [r7, #24]
        break;
 8001270:	e00c      	b.n	800128c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001272:	f7ff fe5d 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 8001276:	61b8      	str	r0, [r7, #24]
        break;
 8001278:	e008      	b.n	800128c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800127a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800127e:	61bb      	str	r3, [r7, #24]
        break;
 8001280:	e004      	b.n	800128c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	77bb      	strb	r3, [r7, #30]
        break;
 800128a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d074      	beq.n	800137c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	005a      	lsls	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	085b      	lsrs	r3, r3, #1
 800129c:	441a      	add	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b0f      	cmp	r3, #15
 80012ac:	d916      	bls.n	80012dc <UART_SetConfig+0x19c>
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b4:	d212      	bcs.n	80012dc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	085b      	lsrs	r3, r3, #1
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	89fa      	ldrh	r2, [r7, #14]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	e04f      	b.n	800137c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	77bb      	strb	r3, [r7, #30]
 80012e0:	e04c      	b.n	800137c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80012e2:	7ffb      	ldrb	r3, [r7, #31]
 80012e4:	2b08      	cmp	r3, #8
 80012e6:	d828      	bhi.n	800133a <UART_SetConfig+0x1fa>
 80012e8:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <UART_SetConfig+0x1b0>)
 80012ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ee:	bf00      	nop
 80012f0:	08001315 	.word	0x08001315
 80012f4:	0800131d 	.word	0x0800131d
 80012f8:	08001325 	.word	0x08001325
 80012fc:	0800133b 	.word	0x0800133b
 8001300:	0800132b 	.word	0x0800132b
 8001304:	0800133b 	.word	0x0800133b
 8001308:	0800133b 	.word	0x0800133b
 800130c:	0800133b 	.word	0x0800133b
 8001310:	08001333 	.word	0x08001333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001314:	f7ff fe82 	bl	800101c <HAL_RCC_GetPCLK1Freq>
 8001318:	61b8      	str	r0, [r7, #24]
        break;
 800131a:	e013      	b.n	8001344 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800131c:	f7ff fea0 	bl	8001060 <HAL_RCC_GetPCLK2Freq>
 8001320:	61b8      	str	r0, [r7, #24]
        break;
 8001322:	e00f      	b.n	8001344 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001324:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <UART_SetConfig+0x268>)
 8001326:	61bb      	str	r3, [r7, #24]
        break;
 8001328:	e00c      	b.n	8001344 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800132a:	f7ff fe01 	bl	8000f30 <HAL_RCC_GetSysClockFreq>
 800132e:	61b8      	str	r0, [r7, #24]
        break;
 8001330:	e008      	b.n	8001344 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001336:	61bb      	str	r3, [r7, #24]
        break;
 8001338:	e004      	b.n	8001344 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	77bb      	strb	r3, [r7, #30]
        break;
 8001342:	bf00      	nop
    }

    if (pclk != 0U)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d018      	beq.n	800137c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	085a      	lsrs	r2, r3, #1
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	441a      	add	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	2b0f      	cmp	r3, #15
 8001362:	d909      	bls.n	8001378 <UART_SetConfig+0x238>
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136a:	d205      	bcs.n	8001378 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	b29a      	uxth	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	e001      	b.n	800137c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2200      	movs	r2, #0
 8001386:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8001388:	7fbb      	ldrb	r3, [r7, #30]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3720      	adds	r7, #32
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	efff69f3 	.word	0xefff69f3
 8001398:	40013800 	.word	0x40013800
 800139c:	40021000 	.word	0x40021000
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40004800 	.word	0x40004800
 80013a8:	007a1200 	.word	0x007a1200

080013ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00a      	beq.n	80013d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	430a      	orrs	r2, r1
 80013f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d00a      	beq.n	800141a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	d00a      	beq.n	800145e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f003 0320 	and.w	r3, r3, #32
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00a      	beq.n	8001480 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	430a      	orrs	r2, r1
 800147e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01a      	beq.n	80014c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014aa:	d10a      	bne.n	80014c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d00a      	beq.n	80014e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	605a      	str	r2, [r3, #4]
  }
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b098      	sub	sp, #96	; 0x60
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001500:	f7ff fab2 	bl	8000a68 <HAL_GetTick>
 8001504:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	2b08      	cmp	r3, #8
 8001512:	d12e      	bne.n	8001572 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800151c:	2200      	movs	r2, #0
 800151e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f000 f88c 	bl	8001640 <UART_WaitOnFlagUntilTimeout>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d021      	beq.n	8001572 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001536:	e853 3f00 	ldrex	r3, [r3]
 800153a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800153c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800153e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001542:	653b      	str	r3, [r7, #80]	; 0x50
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800154c:	647b      	str	r3, [r7, #68]	; 0x44
 800154e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001550:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001554:	e841 2300 	strex	r3, r2, [r1]
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800155a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1e6      	bne.n	800152e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2220      	movs	r2, #32
 8001564:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e062      	b.n	8001638 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0304 	and.w	r3, r3, #4
 800157c:	2b04      	cmp	r3, #4
 800157e:	d149      	bne.n	8001614 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001588:	2200      	movs	r2, #0
 800158a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f856 	bl	8001640 <UART_WaitOnFlagUntilTimeout>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d03c      	beq.n	8001614 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	e853 3f00 	ldrex	r3, [r3]
 80015a6:	623b      	str	r3, [r7, #32]
   return(result);
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80015ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
 80015ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015c0:	e841 2300 	strex	r3, r2, [r1]
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1e6      	bne.n	800159a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3308      	adds	r3, #8
 80015d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	e853 3f00 	ldrex	r3, [r3]
 80015da:	60fb      	str	r3, [r7, #12]
   return(result);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f023 0301 	bic.w	r3, r3, #1
 80015e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	3308      	adds	r3, #8
 80015ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80015ec:	61fa      	str	r2, [r7, #28]
 80015ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80015f0:	69b9      	ldr	r1, [r7, #24]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	e841 2300 	strex	r3, r2, [r1]
 80015f8:	617b      	str	r3, [r7, #20]
   return(result);
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e5      	bne.n	80015cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2220      	movs	r2, #32
 8001604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e011      	b.n	8001638 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2220      	movs	r2, #32
 8001618:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2220      	movs	r2, #32
 800161e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3758      	adds	r7, #88	; 0x58
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	603b      	str	r3, [r7, #0]
 800164c:	4613      	mov	r3, r2
 800164e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001650:	e049      	b.n	80016e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001658:	d045      	beq.n	80016e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800165a:	f7ff fa05 	bl	8000a68 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	429a      	cmp	r2, r3
 8001668:	d302      	bcc.n	8001670 <UART_WaitOnFlagUntilTimeout+0x30>
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e048      	b.n	8001706 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	d031      	beq.n	80016e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69db      	ldr	r3, [r3, #28]
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	2b08      	cmp	r3, #8
 800168e:	d110      	bne.n	80016b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2208      	movs	r2, #8
 8001696:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f000 f838 	bl	800170e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2208      	movs	r2, #8
 80016a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e029      	b.n	8001706 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016c0:	d111      	bne.n	80016e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80016cc:	68f8      	ldr	r0, [r7, #12]
 80016ce:	f000 f81e 	bl	800170e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e00f      	b.n	8001706 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	69da      	ldr	r2, [r3, #28]
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4013      	ands	r3, r2
 80016f0:	68ba      	ldr	r2, [r7, #8]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	bf0c      	ite	eq
 80016f6:	2301      	moveq	r3, #1
 80016f8:	2300      	movne	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	429a      	cmp	r2, r3
 8001702:	d0a6      	beq.n	8001652 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800170e:	b480      	push	{r7}
 8001710:	b095      	sub	sp, #84	; 0x54
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800171c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800171e:	e853 3f00 	ldrex	r3, [r3]
 8001722:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001726:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001734:	643b      	str	r3, [r7, #64]	; 0x40
 8001736:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800173a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800173c:	e841 2300 	strex	r3, r2, [r1]
 8001740:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1e6      	bne.n	8001716 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3308      	adds	r3, #8
 800174e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	e853 3f00 	ldrex	r3, [r3]
 8001756:	61fb      	str	r3, [r7, #28]
   return(result);
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f023 0301 	bic.w	r3, r3, #1
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	3308      	adds	r3, #8
 8001766:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001768:	62fa      	str	r2, [r7, #44]	; 0x2c
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800176c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001770:	e841 2300 	strex	r3, r2, [r1]
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1e5      	bne.n	8001748 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001780:	2b01      	cmp	r3, #1
 8001782:	d118      	bne.n	80017b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	e853 3f00 	ldrex	r3, [r3]
 8001790:	60bb      	str	r3, [r7, #8]
   return(result);
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f023 0310 	bic.w	r3, r3, #16
 8001798:	647b      	str	r3, [r7, #68]	; 0x44
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80017a6:	6979      	ldr	r1, [r7, #20]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	e841 2300 	strex	r3, r2, [r1]
 80017ae:	613b      	str	r3, [r7, #16]
   return(result);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1e6      	bne.n	8001784 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2220      	movs	r2, #32
 80017ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80017ca:	bf00      	nop
 80017cc:	3754      	adds	r7, #84	; 0x54
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <LL_EXTI_EnableIT_0_31>:
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 80017e0:	4b05      	ldr	r3, [pc, #20]	; (80017f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4904      	ldr	r1, [pc, #16]	; (80017f8 <LL_EXTI_EnableIT_0_31+0x20>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	600b      	str	r3, [r1, #0]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40010400 	.word	0x40010400

080017fc <LL_EXTI_EnableIT_32_63>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <LL_EXTI_EnableIT_32_63+0x20>)
 8001806:	6a1a      	ldr	r2, [r3, #32]
 8001808:	4904      	ldr	r1, [pc, #16]	; (800181c <LL_EXTI_EnableIT_32_63+0x20>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4313      	orrs	r3, r2
 800180e:	620b      	str	r3, [r1, #32]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	40010400 	.word	0x40010400

08001820 <LL_EXTI_DisableIT_0_31>:
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <LL_EXTI_DisableIT_0_31+0x24>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	43db      	mvns	r3, r3
 8001830:	4904      	ldr	r1, [pc, #16]	; (8001844 <LL_EXTI_DisableIT_0_31+0x24>)
 8001832:	4013      	ands	r3, r2
 8001834:	600b      	str	r3, [r1, #0]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	40010400 	.word	0x40010400

08001848 <LL_EXTI_DisableIT_32_63>:
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <LL_EXTI_DisableIT_32_63+0x24>)
 8001852:	6a1a      	ldr	r2, [r3, #32]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	43db      	mvns	r3, r3
 8001858:	4904      	ldr	r1, [pc, #16]	; (800186c <LL_EXTI_DisableIT_32_63+0x24>)
 800185a:	4013      	ands	r3, r2
 800185c:	620b      	str	r3, [r1, #32]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40010400 	.word	0x40010400

08001870 <LL_EXTI_EnableEvent_0_31>:
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 8001878:	4b05      	ldr	r3, [pc, #20]	; (8001890 <LL_EXTI_EnableEvent_0_31+0x20>)
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	4904      	ldr	r1, [pc, #16]	; (8001890 <LL_EXTI_EnableEvent_0_31+0x20>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4313      	orrs	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	40010400 	.word	0x40010400

08001894 <LL_EXTI_EnableEvent_32_63>:
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800189e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018a0:	4904      	ldr	r1, [pc, #16]	; (80018b4 <LL_EXTI_EnableEvent_32_63+0x20>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	40010400 	.word	0x40010400

080018b8 <LL_EXTI_DisableEvent_0_31>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	4904      	ldr	r1, [pc, #16]	; (80018dc <LL_EXTI_DisableEvent_0_31+0x24>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	604b      	str	r3, [r1, #4]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40010400 	.word	0x40010400

080018e0 <LL_EXTI_DisableEvent_32_63>:
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <LL_EXTI_DisableEvent_32_63+0x24>)
 80018ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	43db      	mvns	r3, r3
 80018f0:	4904      	ldr	r1, [pc, #16]	; (8001904 <LL_EXTI_DisableEvent_32_63+0x24>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40010400 	.word	0x40010400

08001908 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4904      	ldr	r1, [pc, #16]	; (8001928 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40010400 	.word	0x40010400

0800192c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001934:	4b05      	ldr	r3, [pc, #20]	; (800194c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001938:	4904      	ldr	r1, [pc, #16]	; (800194c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4313      	orrs	r3, r2
 800193e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40010400 	.word	0x40010400

08001950 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	43db      	mvns	r3, r3
 8001960:	4904      	ldr	r1, [pc, #16]	; (8001974 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001962:	4013      	ands	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40010400 	.word	0x40010400

08001978 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001982:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	43db      	mvns	r3, r3
 8001988:	4904      	ldr	r1, [pc, #16]	; (800199c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800198a:	4013      	ands	r3, r2
 800198c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40010400 	.word	0x40010400

080019a0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80019a8:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80019aa:	68da      	ldr	r2, [r3, #12]
 80019ac:	4904      	ldr	r1, [pc, #16]	; (80019c0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60cb      	str	r3, [r1, #12]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	40010400 	.word	0x40010400

080019c4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80019ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d0:	4904      	ldr	r1, [pc, #16]	; (80019e4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	40010400 	.word	0x40010400

080019e8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	4904      	ldr	r1, [pc, #16]	; (8001a0c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	60cb      	str	r3, [r1, #12]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40010400 	.word	0x40010400

08001a10 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	4904      	ldr	r1, [pc, #16]	; (8001a34 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40010400 	.word	0x40010400

08001a38 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7a1b      	ldrb	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 80cc 	beq.w	8001be6 <LL_EXTI_Init+0x1ae>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d061      	beq.n	8001b1a <LL_EXTI_Init+0xe2>
    {
      switch (EXTI_InitStruct->Mode)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7a5b      	ldrb	r3, [r3, #9]
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d01c      	beq.n	8001a98 <LL_EXTI_Init+0x60>
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	dc25      	bgt.n	8001aae <LL_EXTI_Init+0x76>
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <LL_EXTI_Init+0x34>
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d00b      	beq.n	8001a82 <LL_EXTI_Init+0x4a>
 8001a6a:	e020      	b.n	8001aae <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff21 	bl	80018b8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff feac 	bl	80017d8 <LL_EXTI_EnableIT_0_31>
          break;
 8001a80:	e018      	b.n	8001ab4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff feca 	bl	8001820 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff feed 	bl	8001870 <LL_EXTI_EnableEvent_0_31>
          break;
 8001a96:	e00d      	b.n	8001ab4 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fe9b 	bl	80017d8 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fee2 	bl	8001870 <LL_EXTI_EnableEvent_0_31>
          break;
 8001aac:	e002      	b.n	8001ab4 <LL_EXTI_Init+0x7c>
        default:
          status = ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
          break;
 8001ab2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	7a9b      	ldrb	r3, [r3, #10]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d02e      	beq.n	8001b1a <LL_EXTI_Init+0xe2>
      {
        switch (EXTI_InitStruct->Trigger)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7a9b      	ldrb	r3, [r3, #10]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d01c      	beq.n	8001afe <LL_EXTI_Init+0xc6>
 8001ac4:	2b03      	cmp	r3, #3
 8001ac6:	dc25      	bgt.n	8001b14 <LL_EXTI_Init+0xdc>
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d002      	beq.n	8001ad2 <LL_EXTI_Init+0x9a>
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d00b      	beq.n	8001ae8 <LL_EXTI_Init+0xb0>
 8001ad0:	e020      	b.n	8001b14 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff86 	bl	80019e8 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff11 	bl	8001908 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001ae6:	e018      	b.n	8001b1a <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff ff2f 	bl	8001950 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff52 	bl	80019a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001afc:	e00d      	b.n	8001b1a <LL_EXTI_Init+0xe2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff00 	bl	8001908 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff47 	bl	80019a0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001b12:	e002      	b.n	8001b1a <LL_EXTI_Init+0xe2>
          default:
            status = ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	73fb      	strb	r3, [r7, #15]
            break;
 8001b18:	bf00      	nop
        }
      }
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d075      	beq.n	8001c0e <LL_EXTI_Init+0x1d6>
    {
      switch (EXTI_InitStruct->Mode)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	7a5b      	ldrb	r3, [r3, #9]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d01c      	beq.n	8001b64 <LL_EXTI_Init+0x12c>
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	dc25      	bgt.n	8001b7a <LL_EXTI_Init+0x142>
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d002      	beq.n	8001b38 <LL_EXTI_Init+0x100>
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d00b      	beq.n	8001b4e <LL_EXTI_Init+0x116>
 8001b36:	e020      	b.n	8001b7a <LL_EXTI_Init+0x142>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fecf 	bl	80018e0 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff fe58 	bl	80017fc <LL_EXTI_EnableIT_32_63>
          break;
 8001b4c:	e018      	b.n	8001b80 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fe78 	bl	8001848 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fe99 	bl	8001894 <LL_EXTI_EnableEvent_32_63>
          break;
 8001b62:	e00d      	b.n	8001b80 <LL_EXTI_Init+0x148>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fe47 	bl	80017fc <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fe8e 	bl	8001894 <LL_EXTI_EnableEvent_32_63>
          break;
 8001b78:	e002      	b.n	8001b80 <LL_EXTI_Init+0x148>
        default:
          status = ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	73fb      	strb	r3, [r7, #15]
          break;
 8001b7e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7a9b      	ldrb	r3, [r3, #10]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d042      	beq.n	8001c0e <LL_EXTI_Init+0x1d6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7a9b      	ldrb	r3, [r3, #10]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	d01c      	beq.n	8001bca <LL_EXTI_Init+0x192>
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	dc25      	bgt.n	8001be0 <LL_EXTI_Init+0x1a8>
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d002      	beq.n	8001b9e <LL_EXTI_Init+0x166>
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d00b      	beq.n	8001bb4 <LL_EXTI_Init+0x17c>
 8001b9c:	e020      	b.n	8001be0 <LL_EXTI_Init+0x1a8>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff ff34 	bl	8001a10 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff febd 	bl	800192c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001bb2:	e02c      	b.n	8001c0e <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fedd 	bl	8001978 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fefe 	bl	80019c4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001bc8:	e021      	b.n	8001c0e <LL_EXTI_Init+0x1d6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff feac 	bl	800192c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fef3 	bl	80019c4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001bde:	e016      	b.n	8001c0e <LL_EXTI_Init+0x1d6>
          default:
            status = ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	73fb      	strb	r3, [r7, #15]
            break;
 8001be4:	e013      	b.n	8001c0e <LL_EXTI_Init+0x1d6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fe18 	bl	8001820 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff fe5f 	bl	80018b8 <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fe22 	bl	8001848 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fe69 	bl	80018e0 <LL_EXTI_DisableEvent_32_63>
#endif
  }
  return status;
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <LL_GPIO_SetPinMode>:
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa93 f3a3 	rbit	r3, r3
 8001c32:	613b      	str	r3, [r7, #16]
  return result;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	fab3 f383 	clz	r3, r3
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2103      	movs	r1, #3
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	401a      	ands	r2, r3
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	61bb      	str	r3, [r7, #24]
  return result;
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	431a      	orrs	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	601a      	str	r2, [r3, #0]
}
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_GPIO_SetPinOutputType>:
{
 8001c76:	b480      	push	{r7}
 8001c78:	b085      	sub	sp, #20
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	60f8      	str	r0, [r7, #12]
 8001c7e:	60b9      	str	r1, [r7, #8]
 8001c80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	685a      	ldr	r2, [r3, #4]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	fb01 f303 	mul.w	r3, r1, r3
 8001c94:	431a      	orrs	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	605a      	str	r2, [r3, #4]
}
 8001c9a:	bf00      	nop
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_GPIO_SetPinSpeed>:
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b089      	sub	sp, #36	; 0x24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	613b      	str	r3, [r7, #16]
  return result;
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2103      	movs	r1, #3
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	61bb      	str	r3, [r7, #24]
  return result;
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	fab3 f383 	clz	r3, r3
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	609a      	str	r2, [r3, #8]
}
 8001cf8:	bf00      	nop
 8001cfa:	3724      	adds	r7, #36	; 0x24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <LL_GPIO_SetPinPull>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	613b      	str	r3, [r7, #16]
  return result;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2103      	movs	r1, #3
 8001d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	401a      	ands	r2, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	61bb      	str	r3, [r7, #24]
  return result;
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fab3 f383 	clz	r3, r3
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	431a      	orrs	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	60da      	str	r2, [r3, #12]
}
 8001d56:	bf00      	nop
 8001d58:	3724      	adds	r7, #36	; 0x24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_GPIO_SetAFPin_0_7>:
{
 8001d62:	b480      	push	{r7}
 8001d64:	b089      	sub	sp, #36	; 0x24
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6a1a      	ldr	r2, [r3, #32]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	613b      	str	r3, [r7, #16]
  return result;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	210f      	movs	r1, #15
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	401a      	ands	r2, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	fa93 f3a3 	rbit	r3, r3
 8001d9c:	61bb      	str	r3, [r7, #24]
  return result;
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	6879      	ldr	r1, [r7, #4]
 8001daa:	fa01 f303 	lsl.w	r3, r1, r3
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	621a      	str	r2, [r3, #32]
}
 8001db4:	bf00      	nop
 8001db6:	3724      	adds	r7, #36	; 0x24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <LL_GPIO_SetAFPin_8_15>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa93 f3a3 	rbit	r3, r3
 8001ddc:	613b      	str	r3, [r7, #16]
  return result;
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	210f      	movs	r1, #15
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	401a      	ands	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	fa93 f3a3 	rbit	r3, r3
 8001dfe:	61bb      	str	r3, [r7, #24]
  return result;
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	fab3 f383 	clz	r3, r3
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	431a      	orrs	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e16:	bf00      	nop
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b088      	sub	sp, #32
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	fa93 f3a3 	rbit	r3, r3
 8001e38:	613b      	str	r3, [r7, #16]
  return result;
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001e44:	e051      	b.n	8001eea <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d043      	beq.n	8001ee4 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d003      	beq.n	8001e6c <LL_GPIO_Init+0x4a>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d10e      	bne.n	8001e8a <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	461a      	mov	r2, r3
 8001e72:	69b9      	ldr	r1, [r7, #24]
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ff16 	bl	8001ca6 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	461a      	mov	r2, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fef6 	bl	8001c76 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7ff ff36 	bl	8001d04 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d11a      	bne.n	8001ed6 <LL_GPIO_Init+0xb4>
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	60bb      	str	r3, [r7, #8]
  return result;
 8001eac:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001eae:	fab3 f383 	clz	r3, r3
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	2b07      	cmp	r3, #7
 8001eb6:	d807      	bhi.n	8001ec8 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	695b      	ldr	r3, [r3, #20]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	69b9      	ldr	r1, [r7, #24]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff4e 	bl	8001d62 <LL_GPIO_SetAFPin_0_7>
 8001ec6:	e006      	b.n	8001ed6 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	69b9      	ldr	r1, [r7, #24]
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff75 	bl	8001dc0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	69b9      	ldr	r1, [r7, #24]
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff fe9a 	bl	8001c18 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d1a6      	bne.n	8001e46 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001f0c:	4a04      	ldr	r2, [pc, #16]	; (8001f20 <LL_SetSystemCoreClock+0x1c>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000000 	.word	0x20000000

08001f24 <__libc_init_array>:
 8001f24:	b570      	push	{r4, r5, r6, lr}
 8001f26:	4d0d      	ldr	r5, [pc, #52]	; (8001f5c <__libc_init_array+0x38>)
 8001f28:	4c0d      	ldr	r4, [pc, #52]	; (8001f60 <__libc_init_array+0x3c>)
 8001f2a:	1b64      	subs	r4, r4, r5
 8001f2c:	10a4      	asrs	r4, r4, #2
 8001f2e:	2600      	movs	r6, #0
 8001f30:	42a6      	cmp	r6, r4
 8001f32:	d109      	bne.n	8001f48 <__libc_init_array+0x24>
 8001f34:	4d0b      	ldr	r5, [pc, #44]	; (8001f64 <__libc_init_array+0x40>)
 8001f36:	4c0c      	ldr	r4, [pc, #48]	; (8001f68 <__libc_init_array+0x44>)
 8001f38:	f000 f818 	bl	8001f6c <_init>
 8001f3c:	1b64      	subs	r4, r4, r5
 8001f3e:	10a4      	asrs	r4, r4, #2
 8001f40:	2600      	movs	r6, #0
 8001f42:	42a6      	cmp	r6, r4
 8001f44:	d105      	bne.n	8001f52 <__libc_init_array+0x2e>
 8001f46:	bd70      	pop	{r4, r5, r6, pc}
 8001f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4c:	4798      	blx	r3
 8001f4e:	3601      	adds	r6, #1
 8001f50:	e7ee      	b.n	8001f30 <__libc_init_array+0xc>
 8001f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f56:	4798      	blx	r3
 8001f58:	3601      	adds	r6, #1
 8001f5a:	e7f2      	b.n	8001f42 <__libc_init_array+0x1e>
 8001f5c:	08001fac 	.word	0x08001fac
 8001f60:	08001fac 	.word	0x08001fac
 8001f64:	08001fac 	.word	0x08001fac
 8001f68:	08001fb0 	.word	0x08001fb0

08001f6c <_init>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	bf00      	nop
 8001f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	469e      	mov	lr, r3
 8001f76:	4770      	bx	lr

08001f78 <_fini>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr
