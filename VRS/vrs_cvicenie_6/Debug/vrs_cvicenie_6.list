
vrs_cvicenie_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  080060c0  080060c0  000160c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006464  08006464  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006464  08006464  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006464  08006464  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800646c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d8  2**0
                  CONTENTS
 10 .bss          000001fc  200001d8  200001d8  000201d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003d4  200003d4  000201d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 14 .debug_info   000077e5  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002151  00000000  00000000  00027a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000a88  00000000  00000000  00029b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000799  00000000  00000000  0002a610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000048d6  00000000  00000000  0002ada9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a363  00000000  00000000  0002f67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a3341  00000000  00000000  000399e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ae4  00000000  00000000  000dcd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000e0808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060a8 	.word	0x080060a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080060a8 	.word	0x080060a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <lps25hb_write_byte>:
#include "math.h"
#include "usart.h"
static uint8_t address = 0x5E << 1;

void lps25hb_write_byte(uint8_t reg_address, uint8_t *data,uint8_t len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
//	i2c_master_write_byte(address, reg_address, data);
	i2c_master_write(data, reg_address, address,len);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <lps25hb_write_byte+0x28>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	79f9      	ldrb	r1, [r7, #7]
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f000 fbb9 	bl	80013d8 <i2c_master_write>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000

08000c74 <lps25hb_read_bytes>:

void lps25hb_read_bytes(uint8_t *data, uint8_t reg_address,uint8_t len)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
 8000c80:	4613      	mov	r3, r2
 8000c82:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, len, reg_address, address);
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <lps25hb_read_bytes+0x28>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	78fa      	ldrb	r2, [r7, #3]
 8000c8a:	78b9      	ldrb	r1, [r7, #2]
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f000 fbeb 	bl	8001468 <i2c_master_read>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000

08000ca0 <lps25hb_init>:

uint8_t lps25hb_init()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
	// verify WHO_AM_I

	// set up sensor registers
	uint8_t mod2 = 0b11100000;
 8000ca6:	23e0      	movs	r3, #224	; 0xe0
 8000ca8:	71fb      	strb	r3, [r7, #7]

	uint8_t mod1;
	lps25hb_read_bytes(&mod1,0x7,1);
 8000caa:	1dbb      	adds	r3, r7, #6
 8000cac:	2201      	movs	r2, #1
 8000cae:	2107      	movs	r1, #7
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff ffdf 	bl	8000c74 <lps25hb_read_bytes>
	mod1 = mod1 | 0x0 << 2;
 8000cb6:	79bb      	ldrb	r3, [r7, #6]
 8000cb8:	71bb      	strb	r3, [r7, #6]
	mod1 = mod1 | 1<<1;
 8000cba:	79bb      	ldrb	r3, [r7, #6]
 8000cbc:	f043 0302 	orr.w	r3, r3, #2
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	71bb      	strb	r3, [r7, #6]
	mod1 = mod1 & ~(0b0);
 8000cc4:	79bb      	ldrb	r3, [r7, #6]
 8000cc6:	71bb      	strb	r3, [r7, #6]
	lps25hb_write_byte(TLV493_MOD1, &mod1,1);
 8000cc8:	1dbb      	adds	r3, r7, #6
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff ffba 	bl	8000c48 <lps25hb_write_byte>
	lps25hb_write_byte(TLV493_MOD2, &mod2,1);
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4619      	mov	r1, r3
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f7ff ffb4 	bl	8000c48 <lps25hb_write_byte>
	return 1;
 8000ce0:	2301      	movs	r3, #1
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	0000      	movs	r0, r0
 8000cec:	0000      	movs	r0, r0
	...

08000cf0 <lps25hb_get_pressure>:

float lps25hb_get_pressure(float *coord)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b087      	sub	sp, #28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	uint8_t data[6];
	lps25hb_read_bytes(&data,0x0,6);
 8000cf8:	f107 030c 	add.w	r3, r7, #12
 8000cfc:	2206      	movs	r2, #6
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ffb7 	bl	8000c74 <lps25hb_read_bytes>
	uint16_t x = (uint16_t)((data[0] << 8)) | (data[4] >> 4);
 8000d06:	7b3b      	ldrb	r3, [r7, #12]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	7c3b      	ldrb	r3, [r7, #16]
 8000d10:	091b      	lsrs	r3, r3, #4
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	82fb      	strh	r3, [r7, #22]
    uint16_t y = (uint16_t)(data[1] << 8 | (data[4] & 0b1111) << 8);
 8000d1a:	7b7b      	ldrb	r3, [r7, #13]
 8000d1c:	021b      	lsls	r3, r3, #8
 8000d1e:	b21a      	sxth	r2, r3
 8000d20:	7c3b      	ldrb	r3, [r7, #16]
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b21b      	sxth	r3, r3
 8000d26:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000d2a:	b21b      	sxth	r3, r3
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	82bb      	strh	r3, [r7, #20]
    uint16_t z = (uint16_t)(data[2] << 8) | (data[5] & 0b1111);
 8000d32:	7bbb      	ldrb	r3, [r7, #14]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	021b      	lsls	r3, r3, #8
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	b21a      	sxth	r2, r3
 8000d3c:	7c7b      	ldrb	r3, [r7, #17]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	f003 030f 	and.w	r3, r3, #15
 8000d44:	b21b      	sxth	r3, r3
 8000d46:	4313      	orrs	r3, r2
 8000d48:	b21b      	sxth	r3, r3
 8000d4a:	827b      	strh	r3, [r7, #18]
    coord[0] = (float)x*TLV493D_B_MULT;
 8000d4c:	8afb      	ldrh	r3, [r7, #22]
 8000d4e:	ee07 3a90 	vmov	s15, r3
 8000d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d56:	ee17 0a90 	vmov	r0, s15
 8000d5a:	f7ff fbf5 	bl	8000548 <__aeabi_f2d>
 8000d5e:	a324      	add	r3, pc, #144	; (adr r3, 8000df0 <lps25hb_get_pressure+0x100>)
 8000d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d64:	f7ff fc48 	bl	80005f8 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f7ff ff1a 	bl	8000ba8 <__aeabi_d2f>
 8000d74:	4602      	mov	r2, r0
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	601a      	str	r2, [r3, #0]
    coord[1] = (float)y*TLV493D_B_MULT;
 8000d7a:	8abb      	ldrh	r3, [r7, #20]
 8000d7c:	ee07 3a90 	vmov	s15, r3
 8000d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d84:	ee17 0a90 	vmov	r0, s15
 8000d88:	f7ff fbde 	bl	8000548 <__aeabi_f2d>
 8000d8c:	a318      	add	r3, pc, #96	; (adr r3, 8000df0 <lps25hb_get_pressure+0x100>)
 8000d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	1d1c      	adds	r4, r3, #4
 8000da2:	f7ff ff01 	bl	8000ba8 <__aeabi_d2f>
 8000da6:	4603      	mov	r3, r0
 8000da8:	6023      	str	r3, [r4, #0]
    coord[2] = (float)z*TLV493D_B_MULT;
 8000daa:	8a7b      	ldrh	r3, [r7, #18]
 8000dac:	ee07 3a90 	vmov	s15, r3
 8000db0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db4:	ee17 0a90 	vmov	r0, s15
 8000db8:	f7ff fbc6 	bl	8000548 <__aeabi_f2d>
 8000dbc:	a30c      	add	r3, pc, #48	; (adr r3, 8000df0 <lps25hb_get_pressure+0x100>)
 8000dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc2:	f7ff fc19 	bl	80005f8 <__aeabi_dmul>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f103 0408 	add.w	r4, r3, #8
 8000dd4:	f7ff fee8 	bl	8000ba8 <__aeabi_d2f>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	6023      	str	r3, [r4, #0]

	return 0;
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	ee07 3a90 	vmov	s15, r3
}
 8000de4:	eeb0 0a67 	vmov.f32	s0, s15
 8000de8:	371c      	adds	r7, #28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2b020c4a 	.word	0x2b020c4a
 8000df4:	3fb91687 	.word	0x3fb91687

08000df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	db0b      	blt.n	8000e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	f003 021f 	and.w	r2, r3, #31
 8000e10:	4907      	ldr	r1, [pc, #28]	; (8000e30 <__NVIC_EnableIRQ+0x38>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	095b      	lsrs	r3, r3, #5
 8000e18:	2001      	movs	r0, #1
 8000e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e22:	bf00      	nop
 8000e24:	370c      	adds	r7, #12
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000e100 	.word	0xe000e100

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	; (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	; (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e92:	695a      	ldr	r2, [r3, #20]
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e9e:	695a      	ldr	r2, [r3, #20]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff ffe3 	bl	8000e88 <LL_AHB1_GRP1_EnableClock>

   /* DMA interrupt init */
   /* DMA1_Channel6_IRQn interrupt configuration */
   NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2010      	movs	r0, #16
 8000ec6:	f7ff ffb5 	bl	8000e34 <__NVIC_SetPriority>
   NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000eca:	2010      	movs	r0, #16
 8000ecc:	f7ff ff94 	bl	8000df8 <__NVIC_EnableIRQ>
   /* DMA1_Channel7_IRQn interrupt configuration */
   NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2011      	movs	r0, #17
 8000ed4:	f7ff ffae 	bl	8000e34 <__NVIC_SetPriority>
   NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000ed8:	2011      	movs	r0, #17
 8000eda:	f7ff ff8d 	bl	8000df8 <__NVIC_EnableIRQ>

}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <LL_AHB1_GRP1_EnableClock>:
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	4907      	ldr	r1, [pc, #28]	; (8000f10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000efa:	695a      	ldr	r2, [r3, #20]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4013      	ands	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	40021000 	.word	0x40021000

08000f14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000f18:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000f1c:	f7ff ffe2 	bl	8000ee4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f20:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f24:	f7ff ffde 	bl	8000ee4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000f28:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000f2c:	f7ff ffda 	bl	8000ee4 <LL_AHB1_GRP1_EnableClock>

}
 8000f30:	bf00      	nop
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <__NVIC_GetPriorityGrouping>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f38:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <__NVIC_GetPriorityGrouping+0x18>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	0a1b      	lsrs	r3, r3, #8
 8000f3e:	f003 0307 	and.w	r3, r3, #7
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_EnableIRQ>:
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	db0b      	blt.n	8000f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f003 021f 	and.w	r2, r3, #31
 8000f68:	4907      	ldr	r1, [pc, #28]	; (8000f88 <__NVIC_EnableIRQ+0x38>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	095b      	lsrs	r3, r3, #5
 8000f70:	2001      	movs	r0, #1
 8000f72:	fa00 f202 	lsl.w	r2, r0, r2
 8000f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f7a:	bf00      	nop
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	e000e100 	.word	0xe000e100

08000f8c <__NVIC_SetPriority>:
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	db0a      	blt.n	8000fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	490c      	ldr	r1, [pc, #48]	; (8000fd8 <__NVIC_SetPriority+0x4c>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	0112      	lsls	r2, r2, #4
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	440b      	add	r3, r1
 8000fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fb4:	e00a      	b.n	8000fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	b2da      	uxtb	r2, r3
 8000fba:	4908      	ldr	r1, [pc, #32]	; (8000fdc <__NVIC_SetPriority+0x50>)
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	3b04      	subs	r3, #4
 8000fc4:	0112      	lsls	r2, r2, #4
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	440b      	add	r3, r1
 8000fca:	761a      	strb	r2, [r3, #24]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	e000e100 	.word	0xe000e100
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f003 0307 	and.w	r3, r3, #7
 8000ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f1c3 0307 	rsb	r3, r3, #7
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	bf28      	it	cs
 8000ffe:	2304      	movcs	r3, #4
 8001000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3304      	adds	r3, #4
 8001006:	2b06      	cmp	r3, #6
 8001008:	d902      	bls.n	8001010 <NVIC_EncodePriority+0x30>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	3b03      	subs	r3, #3
 800100e:	e000      	b.n	8001012 <NVIC_EncodePriority+0x32>
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43da      	mvns	r2, r3
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	401a      	ands	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa01 f303 	lsl.w	r3, r1, r3
 8001032:	43d9      	mvns	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001038:	4313      	orrs	r3, r2
         );
}
 800103a:	4618      	mov	r0, r3
 800103c:	3724      	adds	r7, #36	; 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f043 0201 	orr.w	r2, r3, #1
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	601a      	str	r2, [r3, #0]
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	601a      	str	r2, [r3, #0]
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001086:	b480      	push	{r7}
 8001088:	b083      	sub	sp, #12
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b085      	sub	sp, #20
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80010ba:	f023 0306 	bic.w	r3, r3, #6
 80010be:	68b9      	ldr	r1, [r7, #8]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	431a      	orrs	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	60da      	str	r2, [r3, #12]
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	68db      	ldr	r3, [r3, #12]
 80010e2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60da      	str	r2, [r3, #12]
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f043 0204 	orr.w	r2, r3, #4
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	601a      	str	r2, [r3, #0]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f023 0204 	bic.w	r2, r3, #4
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	2b02      	cmp	r3, #2
 8001148:	d101      	bne.n	800114e <LL_I2C_IsActiveFlag_TXIS+0x18>
 800114a:	2301      	movs	r3, #1
 800114c:	e000      	b.n	8001150 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b04      	cmp	r3, #4
 800116e:	d101      	bne.n	8001174 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001170:	2301      	movs	r3, #1
 8001172:	e000      	b.n	8001176 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0320 	and.w	r3, r3, #32
 8001192:	2b20      	cmp	r3, #32
 8001194:	d101      	bne.n	800119a <LL_I2C_IsActiveFlag_STOP+0x18>
 8001196:	2301      	movs	r3, #1
 8001198:	e000      	b.n	800119c <LL_I2C_IsActiveFlag_STOP+0x1a>
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f043 0210 	orr.w	r2, r3, #16
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	61da      	str	r2, [r3, #28]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	f043 0220 	orr.w	r2, r3, #32
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	61da      	str	r2, [r3, #28]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	605a      	str	r2, [r3, #4]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
 8001214:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	0d5b      	lsrs	r3, r3, #21
 800121e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <LL_I2C_HandleTransfer+0x48>)
 8001224:	430b      	orrs	r3, r1
 8001226:	43db      	mvns	r3, r3
 8001228:	401a      	ands	r2, r3
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4319      	orrs	r1, r3
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	041b      	lsls	r3, r3, #16
 8001234:	4319      	orrs	r1, r3
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	4319      	orrs	r1, r3
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	430b      	orrs	r3, r1
 800123e:	431a      	orrs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	03ff7bff 	.word	0x03ff7bff

08001254 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	b2db      	uxtb	r3, r3
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800127a:	78fa      	ldrb	r2, [r7, #3]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_AHB1_GRP1_EnableClock>:
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001296:	695a      	ldr	r2, [r3, #20]
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012a2:	695a      	ldr	r2, [r3, #20]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40021000 	.word	0x40021000

080012bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d2:	69da      	ldr	r2, [r3, #28]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000

080012ec <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001316:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800131a:	f7ff ffb7 	bl	800128c <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800131e:	23c0      	movs	r3, #192	; 0xc0
 8001320:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001322:	2302      	movs	r3, #2
 8001324:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001326:	2303      	movs	r3, #3
 8001328:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800132a:	2301      	movs	r3, #1
 800132c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800132e:	2301      	movs	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001332:	2304      	movs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4619      	mov	r1, r3
 800133a:	4824      	ldr	r0, [pc, #144]	; (80013cc <MX_I2C1_Init+0xe0>)
 800133c:	f001 fc20 	bl	8002b80 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001340:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001344:	f7ff ffba 	bl	80012bc <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001348:	f7ff fdf4 	bl	8000f34 <__NVIC_GetPriorityGrouping>
 800134c:	4603      	mov	r3, r0
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fe44 	bl	8000fe0 <NVIC_EncodePriority>
 8001358:	4603      	mov	r3, r0
 800135a:	4619      	mov	r1, r3
 800135c:	201f      	movs	r0, #31
 800135e:	f7ff fe15 	bl	8000f8c <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001362:	201f      	movs	r0, #31
 8001364:	f7ff fdf4 	bl	8000f50 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN I2C1_Init 1 */
  GPIOB->ODR |= (0b11 << 6);
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_I2C1_Init+0xe0>)
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	4a17      	ldr	r2, [pc, #92]	; (80013cc <MX_I2C1_Init+0xe0>)
 800136e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001372:	6153      	str	r3, [r2, #20]
  /* USER CODE END I2C1_Init 1 */
  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001374:	4816      	ldr	r0, [pc, #88]	; (80013d0 <MX_I2C1_Init+0xe4>)
 8001376:	f7ff ff37 	bl	80011e8 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <MX_I2C1_Init+0xe4>)
 800137c:	f7ff feab 	bl	80010d6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001380:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MX_I2C1_Init+0xe4>)
 8001382:	f7ff fe80 	bl	8001086 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001386:	4812      	ldr	r0, [pc, #72]	; (80013d0 <MX_I2C1_Init+0xe4>)
 8001388:	f7ff fe6d 	bl	8001066 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001390:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <MX_I2C1_Init+0xe8>)
 8001392:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001398:	2300      	movs	r3, #0
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 800139c:	2302      	movs	r3, #2
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80013a4:	2300      	movs	r3, #0
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80013a8:	f107 031c 	add.w	r3, r7, #28
 80013ac:	4619      	mov	r1, r3
 80013ae:	4808      	ldr	r0, [pc, #32]	; (80013d0 <MX_I2C1_Init+0xe4>)
 80013b0:	f001 fcf9 	bl	8002da6 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80013b4:	2200      	movs	r2, #0
 80013b6:	2100      	movs	r1, #0
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_I2C1_Init+0xe4>)
 80013ba:	f7ff fe74 	bl	80010a6 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80013be:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_I2C1_Init+0xe4>)
 80013c0:	f7ff fe41 	bl	8001046 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3738      	adds	r7, #56	; 0x38
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	48000400 	.word	0x48000400
 80013d0:	40005400 	.word	0x40005400
 80013d4:	2000090e 	.word	0x2000090e

080013d8 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t *data, uint8_t register_addr, uint8_t slave_addr,uint8_t len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af02      	add	r7, sp, #8
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	4608      	mov	r0, r1
 80013e2:	4611      	mov	r1, r2
 80013e4:	461a      	mov	r2, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	70fb      	strb	r3, [r7, #3]
 80013ea:	460b      	mov	r3, r1
 80013ec:	70bb      	strb	r3, [r7, #2]
 80013ee:	4613      	mov	r3, r2
 80013f0:	707b      	strb	r3, [r7, #1]
	
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80013f2:	78b9      	ldrb	r1, [r7, #2]
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <i2c_master_write+0x88>)
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2302      	movs	r3, #2
 8001400:	2200      	movs	r2, #0
 8001402:	4818      	ldr	r0, [pc, #96]	; (8001464 <i2c_master_write+0x8c>)
 8001404:	f7ff ff00 	bl	8001208 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	4619      	mov	r1, r3
 800140c:	4815      	ldr	r0, [pc, #84]	; (8001464 <i2c_master_write+0x8c>)
 800140e:	f7ff ff2e 	bl	800126e <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001412:	e018      	b.n	8001446 <i2c_master_write+0x6e>
	{
		for (size_t i = 0; i < len;i++) {
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e011      	b.n	800143e <i2c_master_write+0x66>
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800141a:	4812      	ldr	r0, [pc, #72]	; (8001464 <i2c_master_write+0x8c>)
 800141c:	f7ff fe8b 	bl	8001136 <LL_I2C_IsActiveFlag_TXIS>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <i2c_master_write+0x60>
			{
				LL_I2C_TransmitData8(I2C1, data[i]);
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	4619      	mov	r1, r3
 8001430:	480c      	ldr	r0, [pc, #48]	; (8001464 <i2c_master_write+0x8c>)
 8001432:	f7ff ff1c 	bl	800126e <LL_I2C_TransmitData8>
				break;
 8001436:	e006      	b.n	8001446 <i2c_master_write+0x6e>
		for (size_t i = 0; i < len;i++) {
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3301      	adds	r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	429a      	cmp	r2, r3
 8001444:	d3e9      	bcc.n	800141a <i2c_master_write+0x42>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001446:	4807      	ldr	r0, [pc, #28]	; (8001464 <i2c_master_write+0x8c>)
 8001448:	f7ff fe9b 	bl	8001182 <LL_I2C_IsActiveFlag_STOP>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0e0      	beq.n	8001414 <i2c_master_write+0x3c>
			}
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001452:	4804      	ldr	r0, [pc, #16]	; (8001464 <i2c_master_write+0x8c>)
 8001454:	f7ff feb8 	bl	80011c8 <LL_I2C_ClearFlag_STOP>
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	80002000 	.word	0x80002000
 8001464:	40005400 	.word	0x40005400

08001468 <i2c_master_read>:


void i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af02      	add	r7, sp, #8
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	4608      	mov	r0, r1
 8001472:	4611      	mov	r1, r2
 8001474:	461a      	mov	r2, r3
 8001476:	4603      	mov	r3, r0
 8001478:	70fb      	strb	r3, [r7, #3]
 800147a:	460b      	mov	r3, r1
 800147c:	70bb      	strb	r3, [r7, #2]
 800147e:	4613      	mov	r3, r2
 8001480:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001482:	4a2c      	ldr	r2, [pc, #176]	; (8001534 <i2c_master_read+0xcc>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6013      	str	r3, [r2, #0]
	size = length;
 8001488:	4a2b      	ldr	r2, [pc, #172]	; (8001538 <i2c_master_read+0xd0>)
 800148a:	78fb      	ldrb	r3, [r7, #3]
 800148c:	7013      	strb	r3, [r2, #0]

	LL_I2C_EnableIT_RX(I2C1);
 800148e:	482b      	ldr	r0, [pc, #172]	; (800153c <i2c_master_read+0xd4>)
 8001490:	f7ff fe31 	bl	80010f6 <LL_I2C_EnableIT_RX>

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001494:	7879      	ldrb	r1, [r7, #1]
 8001496:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <i2c_master_read+0xd8>)
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2301      	movs	r3, #1
 80014a2:	2200      	movs	r2, #0
 80014a4:	4825      	ldr	r0, [pc, #148]	; (800153c <i2c_master_read+0xd4>)
 80014a6:	f7ff feaf 	bl	8001208 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80014aa:	e00a      	b.n	80014c2 <i2c_master_read+0x5a>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80014ac:	4823      	ldr	r0, [pc, #140]	; (800153c <i2c_master_read+0xd4>)
 80014ae:	f7ff fe42 	bl	8001136 <LL_I2C_IsActiveFlag_TXIS>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <i2c_master_read+0x5a>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80014b8:	78bb      	ldrb	r3, [r7, #2]
 80014ba:	4619      	mov	r1, r3
 80014bc:	481f      	ldr	r0, [pc, #124]	; (800153c <i2c_master_read+0xd4>)
 80014be:	f7ff fed6 	bl	800126e <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80014c2:	481e      	ldr	r0, [pc, #120]	; (800153c <i2c_master_read+0xd4>)
 80014c4:	f7ff fe5d 	bl	8001182 <LL_I2C_IsActiveFlag_STOP>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0ee      	beq.n	80014ac <i2c_master_read+0x44>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80014ce:	481b      	ldr	r0, [pc, #108]	; (800153c <i2c_master_read+0xd4>)
 80014d0:	f7ff fe7a 	bl	80011c8 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80014d4:	bf00      	nop
 80014d6:	4819      	ldr	r0, [pc, #100]	; (800153c <i2c_master_read+0xd4>)
 80014d8:	f7ff fe53 	bl	8001182 <LL_I2C_IsActiveFlag_STOP>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f9      	bne.n	80014d6 <i2c_master_read+0x6e>

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80014e2:	7879      	ldrb	r1, [r7, #1]
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	4a17      	ldr	r2, [pc, #92]	; (8001544 <i2c_master_read+0xdc>)
 80014e8:	9201      	str	r2, [sp, #4]
 80014ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014ee:	9200      	str	r2, [sp, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	4812      	ldr	r0, [pc, #72]	; (800153c <i2c_master_read+0xd4>)
 80014f4:	f7ff fe88 	bl	8001208 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 80014f8:	bf00      	nop
 80014fa:	4810      	ldr	r0, [pc, #64]	; (800153c <i2c_master_read+0xd4>)
 80014fc:	f7ff fe41 	bl	8001182 <LL_I2C_IsActiveFlag_STOP>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f9      	beq.n	80014fa <i2c_master_read+0x92>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <i2c_master_read+0xd4>)
 8001508:	f7ff fe5e 	bl	80011c8 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 800150c:	480b      	ldr	r0, [pc, #44]	; (800153c <i2c_master_read+0xd4>)
 800150e:	f7ff fe02 	bl	8001116 <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <i2c_master_read+0xd4>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <i2c_master_read+0xd4>)
 8001518:	f043 0310 	orr.w	r3, r3, #16
 800151c:	61d3      	str	r3, [r2, #28]
	LL_I2C_ClearFlag_NACK(I2C1);
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <i2c_master_read+0xd4>)
 8001520:	f7ff fe42 	bl	80011a8 <LL_I2C_ClearFlag_NACK>
	ubReceiveIndex = 0;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <i2c_master_read+0xe0>)
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]

}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200001f4 	.word	0x200001f4
 8001538:	200001f8 	.word	0x200001f8
 800153c:	40005400 	.word	0x40005400
 8001540:	80002000 	.word	0x80002000
 8001544:	80002400 	.word	0x80002400
 8001548:	200001f9 	.word	0x200001f9

0800154c <I2C1_IRQHandler>:

void I2C1_IRQHandler(void)
{
 800154c:	b598      	push	{r3, r4, r7, lr}
 800154e:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001550:	4810      	ldr	r0, [pc, #64]	; (8001594 <I2C1_IRQHandler+0x48>)
 8001552:	f7ff fe03 	bl	800115c <LL_I2C_IsActiveFlag_RXNE>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d019      	beq.n	8001590 <I2C1_IRQHandler+0x44>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <I2C1_IRQHandler+0x4c>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <I2C1_IRQHandler+0x50>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	1c59      	adds	r1, r3, #1
 8001568:	b2c8      	uxtb	r0, r1
 800156a:	490c      	ldr	r1, [pc, #48]	; (800159c <I2C1_IRQHandler+0x50>)
 800156c:	7008      	strb	r0, [r1, #0]
 800156e:	18d4      	adds	r4, r2, r3
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <I2C1_IRQHandler+0x48>)
 8001572:	f7ff fe6f 	bl	8001254 <LL_I2C_ReceiveData8>
 8001576:	4603      	mov	r3, r0
 8001578:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <I2C1_IRQHandler+0x50>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b13      	cmp	r3, #19
 8001582:	d903      	bls.n	800158c <I2C1_IRQHandler+0x40>
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <I2C1_IRQHandler+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
	}
	/* Check RXNE flag value in ISR register */

}
 800158a:	e001      	b.n	8001590 <I2C1_IRQHandler+0x44>
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <I2C1_IRQHandler+0x50>)
 800158e:	781b      	ldrb	r3, [r3, #0]
}
 8001590:	bf00      	nop
 8001592:	bd98      	pop	{r3, r4, r7, pc}
 8001594:	40005400 	.word	0x40005400
 8001598:	200001f4 	.word	0x200001f4
 800159c:	200001f9 	.word	0x200001f9

080015a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <LL_RCC_HSI_Enable+0x1c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <LL_RCC_HSI_Enable+0x1c>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <LL_RCC_HSI_IsReady+0x20>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	bf0c      	ite	eq
 80015d0:	2301      	moveq	r3, #1
 80015d2:	2300      	movne	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000

080015e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4904      	ldr	r1, [pc, #16]	; (800160c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <LL_RCC_SetSysClkSource+0x24>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 0203 	bic.w	r2, r3, #3
 8001620:	4904      	ldr	r1, [pc, #16]	; (8001634 <LL_RCC_SetSysClkSource+0x24>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40021000 	.word	0x40021000

08001638 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <LL_RCC_GetSysClkSource+0x18>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 030c 	and.w	r3, r3, #12
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000

08001654 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <LL_RCC_SetAHBPrescaler+0x24>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001664:	4904      	ldr	r1, [pc, #16]	; (8001678 <LL_RCC_SetAHBPrescaler+0x24>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40021000 	.word	0x40021000

0800167c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800168c:	4904      	ldr	r1, [pc, #16]	; (80016a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40021000 	.word	0x40021000

080016a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016b4:	4904      	ldr	r1, [pc, #16]	; (80016c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40021000 	.word	0x40021000

080016cc <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 80016d4:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <LL_RCC_SetI2CClockSource+0x2c>)
 80016d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	0e1b      	lsrs	r3, r3, #24
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016e6:	4904      	ldr	r1, [pc, #16]	; (80016f8 <LL_RCC_SetI2CClockSource+0x2c>)
 80016e8:	4313      	orrs	r3, r2
 80016ea:	630b      	str	r3, [r1, #48]	; 0x30
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000

080016fc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <LL_FLASH_SetLatency+0x24>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f023 0207 	bic.w	r2, r3, #7
 800170c:	4904      	ldr	r1, [pc, #16]	; (8001720 <LL_FLASH_SetLatency+0x24>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40022000 	.word	0x40022000

08001724 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <LL_FLASH_GetLatency+0x18>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0307 	and.w	r3, r3, #7
}
 8001730:	4618      	mov	r0, r3
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40022000 	.word	0x40022000

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001744:	b08a      	sub	sp, #40	; 0x28
 8001746:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001748:	f000 ffea 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174c:	f000 f848 	bl	80017e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001750:	f7ff fbe0 	bl	8000f14 <MX_GPIO_Init>
  MX_DMA_Init();
 8001754:	f7ff fbb0 	bl	8000eb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001758:	f000 fe54 	bl	8002404 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800175c:	f7ff fdc6 	bl	80012ec <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t press_sensor_ok =0, temp_sensor_ok=0;
 8001760:	2300      	movs	r3, #0
 8001762:	75fb      	strb	r3, [r7, #23]
 8001764:	2300      	movs	r3, #0
 8001766:	75bb      	strb	r3, [r7, #22]
//  uint8_t press_sensor_ok = 0;
//  temp_sensor_ok = hts221_init();
  press_sensor_ok = lps25hb_init();
 8001768:	f7ff fa9a 	bl	8000ca0 <lps25hb_init>
 800176c:	4603      	mov	r3, r0
 800176e:	75fb      	strb	r3, [r7, #23]
//        if(temp_sensor_ok)
//        {
//          temp = hts221_get_temperature();
//          hum = hts221_get_humidity();
//        }
        if(press_sensor_ok)
 8001770:	7dfb      	ldrb	r3, [r7, #23]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d006      	beq.n	8001784 <main+0x44>
        {
          lps25hb_get_pressure(&data);
 8001776:	463b      	mov	r3, r7
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fab9 	bl	8000cf0 <lps25hb_get_pressure>
          LL_mDelay(50);
 800177e:	2032      	movs	r0, #50	; 0x32
 8001780:	f001 fdd0 	bl	8003324 <LL_mDelay>
//          alt = lps25hb_calculate_altitude(press);
        }

		str = malloc(64*sizeof(uint8_t));
 8001784:	2040      	movs	r0, #64	; 0x40
 8001786:	f001 fe03 	bl	8003390 <malloc>
 800178a:	4603      	mov	r3, r0
 800178c:	613b      	str	r3, [r7, #16]
		len = sprintf(str, "%f,%f,%f\n", data[0],data[1],data[2]);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	4680      	mov	r8, r0
 8001798:	4689      	mov	r9, r1
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4618      	mov	r0, r3
 800179e:	f7fe fed3 	bl	8000548 <__aeabi_f2d>
 80017a2:	4604      	mov	r4, r0
 80017a4:	460d      	mov	r5, r1
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fecd 	bl	8000548 <__aeabi_f2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017b6:	e9cd 4500 	strd	r4, r5, [sp]
 80017ba:	4642      	mov	r2, r8
 80017bc:	464b      	mov	r3, r9
 80017be:	4907      	ldr	r1, [pc, #28]	; (80017dc <main+0x9c>)
 80017c0:	6938      	ldr	r0, [r7, #16]
 80017c2:	f002 fbc9 	bl	8003f58 <siprintf>
 80017c6:	60f8      	str	r0, [r7, #12]
		USART2_PutBuffer(str,len);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	4619      	mov	r1, r3
 80017ce:	6938      	ldr	r0, [r7, #16]
 80017d0:	f000 fefa 	bl	80025c8 <USART2_PutBuffer>
		free(str);
 80017d4:	6938      	ldr	r0, [r7, #16]
 80017d6:	f001 fde3 	bl	80033a0 <free>
  {
 80017da:	e7c9      	b.n	8001770 <main+0x30>
 80017dc:	080060c0 	.word	0x080060c0

080017e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f7ff ff89 	bl	80016fc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80017ea:	bf00      	nop
 80017ec:	f7ff ff9a 	bl	8001724 <LL_FLASH_GetLatency>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1fa      	bne.n	80017ec <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80017f6:	f7ff fed3 	bl	80015a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80017fa:	bf00      	nop
 80017fc:	f7ff fee0 	bl	80015c0 <LL_RCC_HSI_IsReady>
 8001800:	4603      	mov	r3, r0
 8001802:	2b01      	cmp	r3, #1
 8001804:	d1fa      	bne.n	80017fc <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001806:	2010      	movs	r0, #16
 8001808:	f7ff feec 	bl	80015e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff ff21 	bl	8001654 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff ff32 	bl	800167c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001818:	2000      	movs	r0, #0
 800181a:	f7ff ff43 	bl	80016a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fef6 	bl	8001610 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001824:	bf00      	nop
 8001826:	f7ff ff07 	bl	8001638 <LL_RCC_GetSysClkSource>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1fa      	bne.n	8001826 <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 8001830:	4808      	ldr	r0, [pc, #32]	; (8001854 <SystemClock_Config+0x74>)
 8001832:	f001 fd9d 	bl	8003370 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001836:	2000      	movs	r0, #0
 8001838:	f000 ff88 	bl	800274c <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001842:	f000 f809 	bl	8001858 <Error_Handler>
  }
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001846:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800184a:	f7ff ff3f 	bl	80016cc <LL_RCC_SetI2CClockSource>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	007a1200 	.word	0x007a1200

08001858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185c:	b672      	cpsid	i
}
 800185e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001860:	e7fe      	b.n	8001860 <Error_Handler+0x8>
	...

08001864 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <HAL_MspInit+0x44>)
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <HAL_MspInit+0x44>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6193      	str	r3, [r2, #24]
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_MspInit+0x44>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_MspInit+0x44>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <HAL_MspInit+0x44>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	61d3      	str	r3, [r2, #28]
 800188e:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_MspInit+0x44>)
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189a:	bf00      	nop
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40021000 	.word	0x40021000

080018ac <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LL_DMA_DisableChannel+0x3c>)
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	461a      	mov	r2, r3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4413      	add	r3, r2
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	3a01      	subs	r2, #1
 80018ca:	4907      	ldr	r1, [pc, #28]	; (80018e8 <LL_DMA_DisableChannel+0x3c>)
 80018cc:	5c8a      	ldrb	r2, [r1, r2]
 80018ce:	4611      	mov	r1, r2
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	440a      	add	r2, r1
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	6013      	str	r3, [r2, #0]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	080060cc 	.word	0x080060cc

080018ec <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001900:	bf0c      	ite	eq
 8001902:	2301      	moveq	r3, #1
 8001904:	2300      	movne	r3, #0
 8001906:	b2db      	uxtb	r3, r3
}
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001950:	bf0c      	ite	eq
 8001952:	2301      	moveq	r3, #1
 8001954:	2300      	movne	r3, #0
 8001956:	b2db      	uxtb	r3, r3
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001972:	605a      	str	r2, [r3, #4]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198e:	605a      	str	r2, [r3, #4]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019aa:	605a      	str	r2, [r3, #4]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b10      	cmp	r3, #16
 80019ca:	d101      	bne.n	80019d0 <LL_USART_IsActiveFlag_IDLE+0x18>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <LL_USART_IsActiveFlag_IDLE+0x1a>
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr

080019de <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ee:	2b40      	cmp	r3, #64	; 0x40
 80019f0:	d101      	bne.n	80019f6 <LL_USART_IsActiveFlag_TC+0x18>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_USART_IsActiveFlag_TC+0x1a>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2210      	movs	r2, #16
 8001a10:	621a      	str	r2, [r3, #32]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <HardFault_Handler+0x4>

08001a32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <MemManage_Handler+0x4>

08001a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <BusFault_Handler+0x4>

08001a3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <UsageFault_Handler+0x4>

08001a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <DMA1_Channel6_IRQHandler+0x38>)
 8001a82:	f7ff ff33 	bl	80018ec <LL_DMA_IsActiveFlag_TC6>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001a8c:	f000 fdbc 	bl	8002608 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001a90:	4808      	ldr	r0, [pc, #32]	; (8001ab4 <DMA1_Channel6_IRQHandler+0x38>)
 8001a92:	f7ff ff67 	bl	8001964 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001a96:	e00a      	b.n	8001aae <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001a98:	4806      	ldr	r0, [pc, #24]	; (8001ab4 <DMA1_Channel6_IRQHandler+0x38>)
 8001a9a:	f7ff ff4f 	bl	800193c <LL_DMA_IsActiveFlag_HT6>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d104      	bne.n	8001aae <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001aa4:	f000 fdb0 	bl	8002608 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001aa8:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <DMA1_Channel6_IRQHandler+0x38>)
 8001aaa:	f7ff ff77 	bl	800199c <LL_DMA_ClearFlag_HT6>
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40020000 	.word	0x40020000

08001ab8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001abc:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <DMA1_Channel7_IRQHandler+0x30>)
 8001abe:	f7ff ff29 	bl	8001914 <LL_DMA_IsActiveFlag_TC7>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d10d      	bne.n	8001ae4 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <DMA1_Channel7_IRQHandler+0x30>)
 8001aca:	f7ff ff59 	bl	8001980 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001ace:	bf00      	nop
 8001ad0:	4806      	ldr	r0, [pc, #24]	; (8001aec <DMA1_Channel7_IRQHandler+0x34>)
 8001ad2:	f7ff ff84 	bl	80019de <LL_USART_IsActiveFlag_TC>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0f9      	beq.n	8001ad0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001adc:	2107      	movs	r1, #7
 8001ade:	4802      	ldr	r0, [pc, #8]	; (8001ae8 <DMA1_Channel7_IRQHandler+0x30>)
 8001ae0:	f7ff fee4 	bl	80018ac <LL_DMA_DisableChannel>
	}
}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40020000 	.word	0x40020000
 8001aec:	40004400 	.word	0x40004400

08001af0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001af4:	4806      	ldr	r0, [pc, #24]	; (8001b10 <USART2_IRQHandler+0x20>)
 8001af6:	f7ff ff5f 	bl	80019b8 <LL_USART_IsActiveFlag_IDLE>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001b00:	f000 fd82 	bl	8002608 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <USART2_IRQHandler+0x20>)
 8001b06:	f7ff ff7d 	bl	8001a04 <LL_USART_ClearFlag_IDLE>
	}
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40004400 	.word	0x40004400

08001b14 <I2C1_EV_IRQHandler>:
/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C1_IRQHandler();
 8001b18:	f7ff fd18 	bl	800154c <I2C1_IRQHandler>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return 1;
 8001b24:	2301      	movs	r3, #1
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_kill>:

int _kill(int pid, int sig)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3a:	f002 fad3 	bl	80040e4 <__errno>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2216      	movs	r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
  return -1;
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <_exit>:

void _exit (int status)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ffe7 	bl	8001b30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b62:	e7fe      	b.n	8001b62 <_exit+0x12>

08001b64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
 8001b74:	e00a      	b.n	8001b8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b76:	f3af 8000 	nop.w
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	60ba      	str	r2, [r7, #8]
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	dbf0      	blt.n	8001b76 <_read+0x12>
  }

  return len;
 8001b94:	687b      	ldr	r3, [r7, #4]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e009      	b.n	8001bc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	1c5a      	adds	r2, r3, #1
 8001bb4:	60ba      	str	r2, [r7, #8]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf1      	blt.n	8001bb0 <_write+0x12>
  }
  return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_close>:

int _close(int file)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
 8001bf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <_isatty>:

int _isatty(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <_sbrk+0x5c>)
 8001c4a:	4b15      	ldr	r3, [pc, #84]	; (8001ca0 <_sbrk+0x60>)
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c54:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c5c:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <_sbrk+0x64>)
 8001c5e:	4a12      	ldr	r2, [pc, #72]	; (8001ca8 <_sbrk+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c62:	4b10      	ldr	r3, [pc, #64]	; (8001ca4 <_sbrk+0x64>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4413      	add	r3, r2
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d207      	bcs.n	8001c80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c70:	f002 fa38 	bl	80040e4 <__errno>
 8001c74:	4603      	mov	r3, r0
 8001c76:	220c      	movs	r2, #12
 8001c78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c7e:	e009      	b.n	8001c94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <_sbrk+0x64>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_sbrk+0x64>)
 8001c90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c92:	68fb      	ldr	r3, [r7, #12]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20003000 	.word	0x20003000
 8001ca0:	00000400 	.word	0x00000400
 8001ca4:	200001fc 	.word	0x200001fc
 8001ca8:	200003d8 	.word	0x200003d8

08001cac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <SystemInit+0x20>)
 8001cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb6:	4a05      	ldr	r2, [pc, #20]	; (8001ccc <SystemInit+0x20>)
 8001cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <LL_AHB1_GRP1_EnableClock>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d6a:	695a      	ldr	r2, [r3, #20]
 8001d6c:	4907      	ldr	r1, [pc, #28]	; (8001d8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001d74:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40021000 	.word	0x40021000

08001d90 <LL_APB1_GRP1_EnableClock>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001da6:	69da      	ldr	r2, [r3, #28]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	4013      	ands	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <LL_DMA_EnableChannel>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <LL_DMA_EnableChannel+0x3c>)
 8001dd0:	5cd3      	ldrb	r3, [r2, r3]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	3a01      	subs	r2, #1
 8001dde:	4907      	ldr	r1, [pc, #28]	; (8001dfc <LL_DMA_EnableChannel+0x3c>)
 8001de0:	5c8a      	ldrb	r2, [r1, r2]
 8001de2:	4611      	mov	r1, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	440a      	add	r2, r1
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6013      	str	r3, [r2, #0]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	080060ec 	.word	0x080060ec

08001e00 <LL_DMA_DisableChannel>:
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	4a0b      	ldr	r2, [pc, #44]	; (8001e3c <LL_DMA_DisableChannel+0x3c>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	461a      	mov	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4413      	add	r3, r2
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	3a01      	subs	r2, #1
 8001e1e:	4907      	ldr	r1, [pc, #28]	; (8001e3c <LL_DMA_DisableChannel+0x3c>)
 8001e20:	5c8a      	ldrb	r2, [r1, r2]
 8001e22:	4611      	mov	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	440a      	add	r2, r1
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6013      	str	r3, [r2, #0]
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	080060ec 	.word	0x080060ec

08001e40 <LL_DMA_SetDataTransferDirection>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	4a0d      	ldr	r2, [pc, #52]	; (8001e88 <LL_DMA_SetDataTransferDirection+0x48>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	461a      	mov	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e60:	f023 0310 	bic.w	r3, r3, #16
 8001e64:	68ba      	ldr	r2, [r7, #8]
 8001e66:	3a01      	subs	r2, #1
 8001e68:	4907      	ldr	r1, [pc, #28]	; (8001e88 <LL_DMA_SetDataTransferDirection+0x48>)
 8001e6a:	5c8a      	ldrb	r2, [r1, r2]
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	440a      	add	r2, r1
 8001e72:	4611      	mov	r1, r2
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	080060ec 	.word	0x080060ec

08001e8c <LL_DMA_GetDataTransferDirection>:
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	4a07      	ldr	r2, [pc, #28]	; (8001eb8 <LL_DMA_GetDataTransferDirection+0x2c>)
 8001e9c:	5cd3      	ldrb	r3, [r2, r3]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f244 0310 	movw	r3, #16400	; 0x4010
 8001eaa:	4013      	ands	r3, r2
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	080060ec 	.word	0x080060ec

08001ebc <LL_DMA_SetMode>:
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <LL_DMA_SetMode+0x44>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f023 0220 	bic.w	r2, r3, #32
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	4907      	ldr	r1, [pc, #28]	; (8001f00 <LL_DMA_SetMode+0x44>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	440b      	add	r3, r1
 8001eea:	4619      	mov	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	080060ec 	.word	0x080060ec

08001f04 <LL_DMA_SetPeriphIncMode>:
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <LL_DMA_SetPeriphIncMode+0x44>)
 8001f16:	5cd3      	ldrb	r3, [r2, r3]
 8001f18:	461a      	mov	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3b01      	subs	r3, #1
 8001f28:	4907      	ldr	r1, [pc, #28]	; (8001f48 <LL_DMA_SetPeriphIncMode+0x44>)
 8001f2a:	5ccb      	ldrb	r3, [r1, r3]
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	440b      	add	r3, r1
 8001f32:	4619      	mov	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	600b      	str	r3, [r1, #0]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	080060ec 	.word	0x080060ec

08001f4c <LL_DMA_SetMemoryIncMode>:
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	4a0c      	ldr	r2, [pc, #48]	; (8001f90 <LL_DMA_SetMemoryIncMode+0x44>)
 8001f5e:	5cd3      	ldrb	r3, [r2, r3]
 8001f60:	461a      	mov	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4413      	add	r3, r2
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <LL_DMA_SetMemoryIncMode+0x44>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	4619      	mov	r1, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	440b      	add	r3, r1
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	600b      	str	r3, [r1, #0]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	080060ec 	.word	0x080060ec

08001f94 <LL_DMA_SetPeriphSize>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <LL_DMA_SetPeriphSize+0x44>)
 8001fa6:	5cd3      	ldrb	r3, [r2, r3]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4413      	add	r3, r2
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	4907      	ldr	r1, [pc, #28]	; (8001fd8 <LL_DMA_SetPeriphSize+0x44>)
 8001fba:	5ccb      	ldrb	r3, [r1, r3]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	440b      	add	r3, r1
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
}
 8001fca:	bf00      	nop
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	080060ec 	.word	0x080060ec

08001fdc <LL_DMA_SetMemorySize>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	3b01      	subs	r3, #1
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <LL_DMA_SetMemorySize+0x44>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	4907      	ldr	r1, [pc, #28]	; (8002020 <LL_DMA_SetMemorySize+0x44>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	4619      	mov	r1, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	440b      	add	r3, r1
 800200a:	4619      	mov	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	080060ec 	.word	0x080060ec

08002024 <LL_DMA_SetChannelPriorityLevel>:
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	60f8      	str	r0, [r7, #12]
 800202c:	60b9      	str	r1, [r7, #8]
 800202e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	3b01      	subs	r3, #1
 8002034:	4a0c      	ldr	r2, [pc, #48]	; (8002068 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	461a      	mov	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	4413      	add	r3, r2
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3b01      	subs	r3, #1
 8002048:	4907      	ldr	r1, [pc, #28]	; (8002068 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	4619      	mov	r1, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	440b      	add	r3, r1
 8002052:	4619      	mov	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
}
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	080060ec 	.word	0x080060ec

0800206c <LL_DMA_SetDataLength>:
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3b01      	subs	r3, #1
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <LL_DMA_SetDataLength+0x44>)
 800207e:	5cd3      	ldrb	r3, [r2, r3]
 8002080:	461a      	mov	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	4413      	add	r3, r2
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	041b      	lsls	r3, r3, #16
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	3a01      	subs	r2, #1
 8002090:	4907      	ldr	r1, [pc, #28]	; (80020b0 <LL_DMA_SetDataLength+0x44>)
 8002092:	5c8a      	ldrb	r2, [r1, r2]
 8002094:	4611      	mov	r1, r2
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	440a      	add	r2, r1
 800209a:	4611      	mov	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]
}
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	080060ec 	.word	0x080060ec

080020b4 <LL_DMA_GetDataLength>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	4a06      	ldr	r2, [pc, #24]	; (80020dc <LL_DMA_GetDataLength+0x28>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	b29b      	uxth	r3, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	080060ec 	.word	0x080060ec

080020e0 <LL_DMA_ConfigAddresses>:
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d114      	bne.n	800211e <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	4a16      	ldr	r2, [pc, #88]	; (8002154 <LL_DMA_ConfigAddresses+0x74>)
 80020fa:	5cd3      	ldrb	r3, [r2, r3]
 80020fc:	461a      	mov	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4413      	add	r3, r2
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	3b01      	subs	r3, #1
 800210c:	4a11      	ldr	r2, [pc, #68]	; (8002154 <LL_DMA_ConfigAddresses+0x74>)
 800210e:	5cd3      	ldrb	r3, [r2, r3]
 8002110:	461a      	mov	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	4413      	add	r3, r2
 8002116:	461a      	mov	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6093      	str	r3, [r2, #8]
}
 800211c:	e013      	b.n	8002146 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	3b01      	subs	r3, #1
 8002122:	4a0c      	ldr	r2, [pc, #48]	; (8002154 <LL_DMA_ConfigAddresses+0x74>)
 8002124:	5cd3      	ldrb	r3, [r2, r3]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	461a      	mov	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3b01      	subs	r3, #1
 8002136:	4a07      	ldr	r2, [pc, #28]	; (8002154 <LL_DMA_ConfigAddresses+0x74>)
 8002138:	5cd3      	ldrb	r3, [r2, r3]
 800213a:	461a      	mov	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	4413      	add	r3, r2
 8002140:	461a      	mov	r2, r3
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	60d3      	str	r3, [r2, #12]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	080060ec 	.word	0x080060ec

08002158 <LL_DMA_SetMemoryAddress>:
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	3b01      	subs	r3, #1
 8002168:	4a06      	ldr	r2, [pc, #24]	; (8002184 <LL_DMA_SetMemoryAddress+0x2c>)
 800216a:	5cd3      	ldrb	r3, [r2, r3]
 800216c:	461a      	mov	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	4413      	add	r3, r2
 8002172:	461a      	mov	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	60d3      	str	r3, [r2, #12]
}
 8002178:	bf00      	nop
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	080060ec 	.word	0x080060ec

08002188 <LL_DMA_SetPeriphAddress>:
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	3b01      	subs	r3, #1
 8002198:	4a06      	ldr	r2, [pc, #24]	; (80021b4 <LL_DMA_SetPeriphAddress+0x2c>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	461a      	mov	r2, r3
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	461a      	mov	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6093      	str	r3, [r2, #8]
}
 80021a8:	bf00      	nop
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	080060ec 	.word	0x080060ec

080021b8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	3b01      	subs	r3, #1
 80021c6:	4a0b      	ldr	r2, [pc, #44]	; (80021f4 <LL_DMA_EnableIT_TC+0x3c>)
 80021c8:	5cd3      	ldrb	r3, [r2, r3]
 80021ca:	461a      	mov	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	3a01      	subs	r2, #1
 80021d6:	4907      	ldr	r1, [pc, #28]	; (80021f4 <LL_DMA_EnableIT_TC+0x3c>)
 80021d8:	5c8a      	ldrb	r2, [r1, r2]
 80021da:	4611      	mov	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	440a      	add	r2, r1
 80021e0:	f043 0302 	orr.w	r3, r3, #2
 80021e4:	6013      	str	r3, [r2, #0]
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	080060ec 	.word	0x080060ec

080021f8 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	3b01      	subs	r3, #1
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <LL_DMA_EnableIT_HT+0x3c>)
 8002208:	5cd3      	ldrb	r3, [r2, r3]
 800220a:	461a      	mov	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4413      	add	r3, r2
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	3a01      	subs	r2, #1
 8002216:	4907      	ldr	r1, [pc, #28]	; (8002234 <LL_DMA_EnableIT_HT+0x3c>)
 8002218:	5c8a      	ldrb	r2, [r1, r2]
 800221a:	4611      	mov	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	440a      	add	r2, r1
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	080060ec 	.word	0x080060ec

08002238 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <LL_DMA_EnableIT_TE+0x3c>)
 8002248:	5cd3      	ldrb	r3, [r2, r3]
 800224a:	461a      	mov	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4413      	add	r3, r2
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	3a01      	subs	r2, #1
 8002256:	4907      	ldr	r1, [pc, #28]	; (8002274 <LL_DMA_EnableIT_TE+0x3c>)
 8002258:	5c8a      	ldrb	r2, [r1, r2]
 800225a:	4611      	mov	r1, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	440a      	add	r2, r1
 8002260:	f043 0308 	orr.w	r3, r3, #8
 8002264:	6013      	str	r3, [r2, #0]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	080060ec 	.word	0x080060ec

08002278 <LL_USART_Enable>:
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f043 0201 	orr.w	r2, r3, #1
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_USART_ConfigAsyncMode>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	e853 3f00 	ldrex	r3, [r3]
 80022d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	f043 0310 	orr.w	r3, r3, #16
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	61ba      	str	r2, [r7, #24]
 80022e6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	6979      	ldr	r1, [r7, #20]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	e841 2300 	strex	r3, r2, [r1]
 80022f0:	613b      	str	r3, [r7, #16]
   return(result);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e9      	bne.n	80022cc <LL_USART_EnableIT_IDLE+0x8>
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	3724      	adds	r7, #36	; 0x24
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002306:	b480      	push	{r7}
 8002308:	b089      	sub	sp, #36	; 0x24
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3308      	adds	r3, #8
 8002312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	e853 3f00 	ldrex	r3, [r3]
 800231a:	60bb      	str	r3, [r7, #8]
   return(result);
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002322:	61fb      	str	r3, [r7, #28]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3308      	adds	r3, #8
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	61ba      	str	r2, [r7, #24]
 800232c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800232e:	6979      	ldr	r1, [r7, #20]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	e841 2300 	strex	r3, r2, [r1]
 8002336:	613b      	str	r3, [r7, #16]
   return(result);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1e7      	bne.n	800230e <LL_USART_DisableIT_CTS+0x8>
}
 800233e:	bf00      	nop
 8002340:	bf00      	nop
 8002342:	3724      	adds	r7, #36	; 0x24
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800234c:	b480      	push	{r7}
 800234e:	b089      	sub	sp, #36	; 0x24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3308      	adds	r3, #8
 8002358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	e853 3f00 	ldrex	r3, [r3]
 8002360:	60bb      	str	r3, [r7, #8]
   return(result);
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3308      	adds	r3, #8
 800236e:	69fa      	ldr	r2, [r7, #28]
 8002370:	61ba      	str	r2, [r7, #24]
 8002372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002374:	6979      	ldr	r1, [r7, #20]
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	e841 2300 	strex	r3, r2, [r1]
 800237c:	613b      	str	r3, [r7, #16]
   return(result);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1e7      	bne.n	8002354 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002384:	bf00      	nop
 8002386:	bf00      	nop
 8002388:	3724      	adds	r7, #36	; 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002392:	b480      	push	{r7}
 8002394:	b089      	sub	sp, #36	; 0x24
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3308      	adds	r3, #8
 800239e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	e853 3f00 	ldrex	r3, [r3]
 80023a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ae:	61fb      	str	r3, [r7, #28]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3308      	adds	r3, #8
 80023b4:	69fa      	ldr	r2, [r7, #28]
 80023b6:	61ba      	str	r2, [r7, #24]
 80023b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ba:	6979      	ldr	r1, [r7, #20]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	e841 2300 	strex	r3, r2, [r1]
 80023c2:	613b      	str	r3, [r7, #16]
   return(result);
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1e7      	bne.n	800239a <LL_USART_EnableDMAReq_TX+0x8>
}
 80023ca:	bf00      	nop
 80023cc:	bf00      	nop
 80023ce:	3724      	adds	r7, #36	; 0x24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d103      	bne.n	80023f0 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3328      	adds	r3, #40	; 0x28
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	e002      	b.n	80023f6 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	3324      	adds	r3, #36	; 0x24
 80023f4:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <MX_USART2_UART_Init>:
	// type global variables here
uint16_t buf_read_pos = 0;

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002404:	b5b0      	push	{r4, r5, r7, lr}
 8002406:	b090      	sub	sp, #64	; 0x40
 8002408:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800240a:	f107 031c 	add.w	r3, r7, #28
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	615a      	str	r2, [r3, #20]
 800241c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241e:	1d3b      	adds	r3, r7, #4
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
 800242c:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800242e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002432:	f7ff fcad 	bl	8001d90 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002436:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800243a:	f7ff fc91 	bl	8001d60 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800243e:	f248 0304 	movw	r3, #32772	; 0x8004
 8002442:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002444:	2302      	movs	r3, #2
 8002446:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002448:	2303      	movs	r3, #3
 800244a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002454:	2307      	movs	r3, #7
 8002456:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002458:	1d3b      	adds	r3, r7, #4
 800245a:	4619      	mov	r1, r3
 800245c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002460:	f000 fb8e 	bl	8002b80 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002464:	2200      	movs	r2, #0
 8002466:	2106      	movs	r1, #6
 8002468:	4854      	ldr	r0, [pc, #336]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 800246a:	f7ff fce9 	bl	8001e40 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800246e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002472:	2106      	movs	r1, #6
 8002474:	4851      	ldr	r0, [pc, #324]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 8002476:	f7ff fdd5 	bl	8002024 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 800247a:	2200      	movs	r2, #0
 800247c:	2106      	movs	r1, #6
 800247e:	484f      	ldr	r0, [pc, #316]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 8002480:	f7ff fd1c 	bl	8001ebc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002484:	2200      	movs	r2, #0
 8002486:	2106      	movs	r1, #6
 8002488:	484c      	ldr	r0, [pc, #304]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 800248a:	f7ff fd3b 	bl	8001f04 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800248e:	2280      	movs	r2, #128	; 0x80
 8002490:	2106      	movs	r1, #6
 8002492:	484a      	ldr	r0, [pc, #296]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 8002494:	f7ff fd5a 	bl	8001f4c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002498:	2200      	movs	r2, #0
 800249a:	2106      	movs	r1, #6
 800249c:	4847      	ldr	r0, [pc, #284]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 800249e:	f7ff fd79 	bl	8001f94 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2106      	movs	r1, #6
 80024a6:	4845      	ldr	r0, [pc, #276]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 80024a8:	f7ff fd98 	bl	8001fdc <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 80024ac:	2101      	movs	r1, #1
 80024ae:	4844      	ldr	r0, [pc, #272]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 80024b0:	f7ff ff92 	bl	80023d8 <LL_USART_DMA_GetRegAddr>
 80024b4:	4604      	mov	r4, r0
 80024b6:	4d43      	ldr	r5, [pc, #268]	; (80025c4 <MX_USART2_UART_Init+0x1c0>)
 80024b8:	2106      	movs	r1, #6
 80024ba:	4840      	ldr	r0, [pc, #256]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 80024bc:	f7ff fce6 	bl	8001e8c <LL_DMA_GetDataTransferDirection>
 80024c0:	4603      	mov	r3, r0
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	462b      	mov	r3, r5
 80024c6:	4622      	mov	r2, r4
 80024c8:	2106      	movs	r1, #6
 80024ca:	483c      	ldr	r0, [pc, #240]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 80024cc:	f7ff fe08 	bl	80020e0 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	2106      	movs	r1, #6
 80024d4:	4839      	ldr	r0, [pc, #228]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 80024d6:	f7ff fdc9 	bl	800206c <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80024da:	2106      	movs	r1, #6
 80024dc:	4837      	ldr	r0, [pc, #220]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 80024de:	f7ff fc6f 	bl	8001dc0 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80024e2:	4837      	ldr	r0, [pc, #220]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 80024e4:	f7ff ff32 	bl	800234c <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80024e8:	2106      	movs	r1, #6
 80024ea:	4834      	ldr	r0, [pc, #208]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 80024ec:	f7ff fe64 	bl	80021b8 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80024f0:	2106      	movs	r1, #6
 80024f2:	4832      	ldr	r0, [pc, #200]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 80024f4:	f7ff fe80 	bl	80021f8 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80024f8:	2210      	movs	r2, #16
 80024fa:	2107      	movs	r1, #7
 80024fc:	482f      	ldr	r0, [pc, #188]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 80024fe:	f7ff fc9f 	bl	8001e40 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002502:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002506:	2107      	movs	r1, #7
 8002508:	482c      	ldr	r0, [pc, #176]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 800250a:	f7ff fd8b 	bl	8002024 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800250e:	2200      	movs	r2, #0
 8002510:	2107      	movs	r1, #7
 8002512:	482a      	ldr	r0, [pc, #168]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 8002514:	f7ff fcd2 	bl	8001ebc <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002518:	2200      	movs	r2, #0
 800251a:	2107      	movs	r1, #7
 800251c:	4827      	ldr	r0, [pc, #156]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 800251e:	f7ff fcf1 	bl	8001f04 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002522:	2280      	movs	r2, #128	; 0x80
 8002524:	2107      	movs	r1, #7
 8002526:	4825      	ldr	r0, [pc, #148]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 8002528:	f7ff fd10 	bl	8001f4c <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800252c:	2200      	movs	r2, #0
 800252e:	2107      	movs	r1, #7
 8002530:	4822      	ldr	r0, [pc, #136]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 8002532:	f7ff fd2f 	bl	8001f94 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002536:	2200      	movs	r2, #0
 8002538:	2107      	movs	r1, #7
 800253a:	4820      	ldr	r0, [pc, #128]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 800253c:	f7ff fd4e 	bl	8001fdc <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002540:	2100      	movs	r1, #0
 8002542:	481f      	ldr	r0, [pc, #124]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 8002544:	f7ff ff48 	bl	80023d8 <LL_USART_DMA_GetRegAddr>
 8002548:	4603      	mov	r3, r0
 800254a:	461a      	mov	r2, r3
 800254c:	2107      	movs	r1, #7
 800254e:	481b      	ldr	r0, [pc, #108]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 8002550:	f7ff fe1a 	bl	8002188 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002554:	481a      	ldr	r0, [pc, #104]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 8002556:	f7ff ff1c 	bl	8002392 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 800255a:	2107      	movs	r1, #7
 800255c:	4817      	ldr	r0, [pc, #92]	; (80025bc <MX_USART2_UART_Init+0x1b8>)
 800255e:	f7ff fe6b 	bl	8002238 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002562:	2100      	movs	r1, #0
 8002564:	2026      	movs	r0, #38	; 0x26
 8002566:	f7ff fbd1 	bl	8001d0c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800256a:	2026      	movs	r0, #38	; 0x26
 800256c:	f7ff fbb0 	bl	8001cd0 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002570:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002574:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002576:	2300      	movs	r3, #0
 8002578:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800257e:	2300      	movs	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002582:	230c      	movs	r3, #12
 8002584:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002586:	2300      	movs	r3, #0
 8002588:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800258a:	2300      	movs	r3, #0
 800258c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800258e:	f107 031c 	add.w	r3, r7, #28
 8002592:	4619      	mov	r1, r3
 8002594:	480a      	ldr	r0, [pc, #40]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 8002596:	f000 fe59 	bl	800324c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 800259a:	4809      	ldr	r0, [pc, #36]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 800259c:	f7ff fe7c 	bl	8002298 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 80025a0:	4807      	ldr	r0, [pc, #28]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 80025a2:	f7ff feb0 	bl	8002306 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 80025a6:	4806      	ldr	r0, [pc, #24]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 80025a8:	f7ff fe8c 	bl	80022c4 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 80025ac:	4804      	ldr	r0, [pc, #16]	; (80025c0 <MX_USART2_UART_Init+0x1bc>)
 80025ae:	f7ff fe63 	bl	8002278 <LL_USART_Enable>
  	  //type your code here:
}
 80025b2:	bf00      	nop
 80025b4:	3738      	adds	r7, #56	; 0x38
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bdb0      	pop	{r4, r5, r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40020000 	.word	0x40020000
 80025c0:	40004400 	.word	0x40004400
 80025c4:	20000200 	.word	0x20000200

080025c8 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	461a      	mov	r2, r3
 80025d8:	2107      	movs	r1, #7
 80025da:	480a      	ldr	r0, [pc, #40]	; (8002604 <USART2_PutBuffer+0x3c>)
 80025dc:	f7ff fdbc 	bl	8002158 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80025e0:	78fb      	ldrb	r3, [r7, #3]
 80025e2:	461a      	mov	r2, r3
 80025e4:	2107      	movs	r1, #7
 80025e6:	4807      	ldr	r0, [pc, #28]	; (8002604 <USART2_PutBuffer+0x3c>)
 80025e8:	f7ff fd40 	bl	800206c <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80025ec:	2107      	movs	r1, #7
 80025ee:	4805      	ldr	r0, [pc, #20]	; (8002604 <USART2_PutBuffer+0x3c>)
 80025f0:	f7ff fde2 	bl	80021b8 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80025f4:	2107      	movs	r1, #7
 80025f6:	4803      	ldr	r0, [pc, #12]	; (8002604 <USART2_PutBuffer+0x3c>)
 80025f8:	f7ff fbe2 	bl	8001dc0 <LL_DMA_EnableChannel>
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40020000 	.word	0x40020000

08002608 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 800260e:	2106      	movs	r1, #6
 8002610:	482a      	ldr	r0, [pc, #168]	; (80026bc <USART2_CheckDmaReception+0xb4>)
 8002612:	f7ff fd4f 	bl	80020b4 <LL_DMA_GetDataLength>
 8002616:	4603      	mov	r3, r0
 8002618:	b29b      	uxth	r3, r3
 800261a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800261e:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART2_BUFFER_SIZE)
 8002620:	88fb      	ldrh	r3, [r7, #6]
 8002622:	2b7f      	cmp	r3, #127	; 0x7f
 8002624:	d941      	bls.n	80026aa <USART2_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002626:	2106      	movs	r1, #6
 8002628:	4824      	ldr	r0, [pc, #144]	; (80026bc <USART2_CheckDmaReception+0xb4>)
 800262a:	f7ff fbe9 	bl	8001e00 <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)bufferUSART2dma);
 800262e:	4b24      	ldr	r3, [pc, #144]	; (80026c0 <USART2_CheckDmaReception+0xb8>)
 8002630:	461a      	mov	r2, r3
 8002632:	2106      	movs	r1, #6
 8002634:	4821      	ldr	r0, [pc, #132]	; (80026bc <USART2_CheckDmaReception+0xb4>)
 8002636:	f7ff fd8f 	bl	8002158 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	2106      	movs	r1, #6
 800263e:	481f      	ldr	r0, [pc, #124]	; (80026bc <USART2_CheckDmaReception+0xb4>)
 8002640:	f7ff fd14 	bl	800206c <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002644:	2106      	movs	r1, #6
 8002646:	481d      	ldr	r0, [pc, #116]	; (80026bc <USART2_CheckDmaReception+0xb4>)
 8002648:	f7ff fbba 	bl	8001dc0 <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 800264c:	e012      	b.n	8002674 <USART2_CheckDmaReception+0x6c>
		{
			if(USART2_ProcessData != 0)
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <USART2_CheckDmaReception+0xbc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d008      	beq.n	8002668 <USART2_CheckDmaReception+0x60>
			{
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <USART2_CheckDmaReception+0xbc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1b      	ldr	r2, [pc, #108]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 800265c:	8812      	ldrh	r2, [r2, #0]
 800265e:	4611      	mov	r1, r2
 8002660:	4a17      	ldr	r2, [pc, #92]	; (80026c0 <USART2_CheckDmaReception+0xb8>)
 8002662:	5c52      	ldrb	r2, [r2, r1]
 8002664:	4610      	mov	r0, r2
 8002666:	4798      	blx	r3
			}
			buf_read_pos++;
 8002668:	4b17      	ldr	r3, [pc, #92]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 800266a:	881b      	ldrh	r3, [r3, #0]
 800266c:	3301      	adds	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 8002672:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002674:	4b14      	ldr	r3, [pc, #80]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	2b7f      	cmp	r3, #127	; 0x7f
 800267a:	d9e8      	bls.n	800264e <USART2_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 800267e:	2200      	movs	r2, #0
 8002680:	801a      	strh	r2, [r3, #0]
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 8002682:	e017      	b.n	80026b4 <USART2_CheckDmaReception+0xac>
			if(USART2_ProcessData != 0)
 8002684:	4b0f      	ldr	r3, [pc, #60]	; (80026c4 <USART2_CheckDmaReception+0xbc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <USART2_CheckDmaReception+0x96>
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <USART2_CheckDmaReception+0xbc>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 8002692:	8812      	ldrh	r2, [r2, #0]
 8002694:	4611      	mov	r1, r2
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <USART2_CheckDmaReception+0xb8>)
 8002698:	5c52      	ldrb	r2, [r2, r1]
 800269a:	4610      	mov	r0, r2
 800269c:	4798      	blx	r3
			buf_read_pos++;
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	3301      	adds	r3, #1
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 80026a8:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <USART2_CheckDmaReception+0xc0>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	88fa      	ldrh	r2, [r7, #6]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8e7      	bhi.n	8002684 <USART2_CheckDmaReception+0x7c>
}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40020000 	.word	0x40020000
 80026c0:	20000200 	.word	0x20000200
 80026c4:	20000280 	.word	0x20000280
 80026c8:	20000284 	.word	0x20000284

080026cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002704 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80026d0:	f7ff faec 	bl	8001cac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d4:	480c      	ldr	r0, [pc, #48]	; (8002708 <LoopForever+0x6>)
  ldr r1, =_edata
 80026d6:	490d      	ldr	r1, [pc, #52]	; (800270c <LoopForever+0xa>)
  ldr r2, =_sidata
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <LoopForever+0xe>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026dc:	e002      	b.n	80026e4 <LoopCopyDataInit>

080026de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e2:	3304      	adds	r3, #4

080026e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e8:	d3f9      	bcc.n	80026de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026ec:	4c0a      	ldr	r4, [pc, #40]	; (8002718 <LoopForever+0x16>)
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f0:	e001      	b.n	80026f6 <LoopFillZerobss>

080026f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f4:	3204      	adds	r2, #4

080026f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f8:	d3fb      	bcc.n	80026f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fa:	f001 fcf9 	bl	80040f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026fe:	f7ff f81f 	bl	8001740 <main>

08002702 <LoopForever>:

LoopForever:
    b LoopForever
 8002702:	e7fe      	b.n	8002702 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002704:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800270c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002710:	0800646c 	.word	0x0800646c
  ldr r2, =_sbss
 8002714:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002718:	200003d4 	.word	0x200003d4

0800271c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC1_2_IRQHandler>
	...

08002720 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_Init+0x28>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_Init+0x28>)
 800272a:	f043 0310 	orr.w	r3, r3, #16
 800272e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 f8ed 	bl	8002910 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff f892 	bl	8001864 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40022000 	.word	0x40022000

0800274c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 f8f7 	bl	800295e <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002788:	f000 f8cd 	bl	8002926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000004 	.word	0x20000004
 80027a4:	2000000c 	.word	0x2000000c
 80027a8:	20000008 	.word	0x20000008

080027ac <__NVIC_SetPriorityGrouping>:
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027de:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	60d3      	str	r3, [r2, #12]
}
 80027e4:	bf00      	nop
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr
 80027f0:	e000ed00 	.word	0xe000ed00

080027f4 <__NVIC_GetPriorityGrouping>:
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <__NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_SetPriority>:
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800281c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db0a      	blt.n	800283a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	490c      	ldr	r1, [pc, #48]	; (800285c <__NVIC_SetPriority+0x4c>)
 800282a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	440b      	add	r3, r1
 8002834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002838:	e00a      	b.n	8002850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4908      	ldr	r1, [pc, #32]	; (8002860 <__NVIC_SetPriority+0x50>)
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3b04      	subs	r3, #4
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	440b      	add	r3, r1
 800284e:	761a      	strb	r2, [r3, #24]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000e100 	.word	0xe000e100
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <NVIC_EncodePriority>:
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	; 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f1c3 0307 	rsb	r3, r3, #7
 800287e:	2b04      	cmp	r3, #4
 8002880:	bf28      	it	cs
 8002882:	2304      	movcs	r3, #4
 8002884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3304      	adds	r3, #4
 800288a:	2b06      	cmp	r3, #6
 800288c:	d902      	bls.n	8002894 <NVIC_EncodePriority+0x30>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3b03      	subs	r3, #3
 8002892:	e000      	b.n	8002896 <NVIC_EncodePriority+0x32>
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	401a      	ands	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43d9      	mvns	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	4313      	orrs	r3, r2
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	; 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028dc:	d301      	bcc.n	80028e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028de:	2301      	movs	r3, #1
 80028e0:	e00f      	b.n	8002902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e2:	4a0a      	ldr	r2, [pc, #40]	; (800290c <SysTick_Config+0x40>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ea:	210f      	movs	r1, #15
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80028f0:	f7ff ff8e 	bl	8002810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <SysTick_Config+0x40>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fa:	4b04      	ldr	r3, [pc, #16]	; (800290c <SysTick_Config+0x40>)
 80028fc:	2207      	movs	r2, #7
 80028fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000e010 	.word	0xe000e010

08002910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff47 	bl	80027ac <__NVIC_SetPriorityGrouping>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002938:	f7ff ff5c 	bl	80027f4 <__NVIC_GetPriorityGrouping>
 800293c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	6978      	ldr	r0, [r7, #20]
 8002944:	f7ff ff8e 	bl	8002864 <NVIC_EncodePriority>
 8002948:	4602      	mov	r2, r0
 800294a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff5d 	bl	8002810 <__NVIC_SetPriority>
}
 8002956:	bf00      	nop
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b082      	sub	sp, #8
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ffb0 	bl	80028cc <SysTick_Config>
 800296c:	4603      	mov	r3, r0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002976:	b480      	push	{r7}
 8002978:	b089      	sub	sp, #36	; 0x24
 800297a:	af00      	add	r7, sp, #0
 800297c:	60f8      	str	r0, [r7, #12]
 800297e:	60b9      	str	r1, [r7, #8]
 8002980:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	fa93 f3a3 	rbit	r3, r3
 8002990:	613b      	str	r3, [r7, #16]
  return result;
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	fab3 f383 	clz	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2103      	movs	r1, #3
 800299e:	fa01 f303 	lsl.w	r3, r1, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	401a      	ands	r2, r3
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	61bb      	str	r3, [r7, #24]
  return result;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	fab3 f383 	clz	r3, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	fa01 f303 	lsl.w	r3, r1, r3
 80029c2:	431a      	orrs	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	601a      	str	r2, [r3, #0]
}
 80029c8:	bf00      	nop
 80029ca:	3724      	adds	r7, #36	; 0x24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	401a      	ands	r2, r3
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	431a      	orrs	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	605a      	str	r2, [r3, #4]
}
 80029f8:	bf00      	nop
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b089      	sub	sp, #36	; 0x24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa93 f3a3 	rbit	r3, r3
 8002a1e:	613b      	str	r3, [r7, #16]
  return result;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	fab3 f383 	clz	r3, r3
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	2103      	movs	r1, #3
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	401a      	ands	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	fa93 f3a3 	rbit	r3, r3
 8002a3e:	61bb      	str	r3, [r7, #24]
  return result;
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	431a      	orrs	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002a56:	bf00      	nop
 8002a58:	3724      	adds	r7, #36	; 0x24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b089      	sub	sp, #36	; 0x24
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	60f8      	str	r0, [r7, #12]
 8002a6a:	60b9      	str	r1, [r7, #8]
 8002a6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	68da      	ldr	r2, [r3, #12]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	613b      	str	r3, [r7, #16]
  return result;
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	2103      	movs	r1, #3
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	401a      	ands	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	61bb      	str	r3, [r7, #24]
  return result;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	fab3 f383 	clz	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	60da      	str	r2, [r3, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3724      	adds	r7, #36	; 0x24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a1a      	ldr	r2, [r3, #32]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa93 f3a3 	rbit	r3, r3
 8002ada:	613b      	str	r3, [r7, #16]
  return result;
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	210f      	movs	r1, #15
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	43db      	mvns	r3, r3
 8002aee:	401a      	ands	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	61bb      	str	r3, [r7, #24]
  return result;
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002b12:	bf00      	nop
 8002b14:	3724      	adds	r7, #36	; 0x24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b089      	sub	sp, #36	; 0x24
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	613b      	str	r3, [r7, #16]
  return result;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	fab3 f383 	clz	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	210f      	movs	r1, #15
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	61bb      	str	r3, [r7, #24]
  return result;
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	fab3 f383 	clz	r3, r3
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002b74:	bf00      	nop
 8002b76:	3724      	adds	r7, #36	; 0x24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fa93 f3a3 	rbit	r3, r3
 8002b96:	613b      	str	r3, [r7, #16]
  return result;
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002ba2:	e051      	b.n	8002c48 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	2101      	movs	r1, #1
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d043      	beq.n	8002c42 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d003      	beq.n	8002bca <LL_GPIO_Init+0x4a>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d10e      	bne.n	8002be8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	69b9      	ldr	r1, [r7, #24]
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ff16 	bl	8002a04 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6819      	ldr	r1, [r3, #0]
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	461a      	mov	r2, r3
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff fef6 	bl	80029d4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	461a      	mov	r2, r3
 8002bee:	69b9      	ldr	r1, [r7, #24]
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff36 	bl	8002a62 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d11a      	bne.n	8002c34 <LL_GPIO_Init+0xb4>
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	60bb      	str	r3, [r7, #8]
  return result;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002c0c:	fab3 f383 	clz	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b07      	cmp	r3, #7
 8002c14:	d807      	bhi.n	8002c26 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	69b9      	ldr	r1, [r7, #24]
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f7ff ff4e 	bl	8002ac0 <LL_GPIO_SetAFPin_0_7>
 8002c24:	e006      	b.n	8002c34 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	69b9      	ldr	r1, [r7, #24]
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ff75 	bl	8002b1e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	461a      	mov	r2, r3
 8002c3a:	69b9      	ldr	r1, [r7, #24]
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff fe9a 	bl	8002976 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	3301      	adds	r3, #1
 8002c46:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1a6      	bne.n	8002ba4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <LL_I2C_Enable>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f043 0201 	orr.w	r2, r3, #1
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	601a      	str	r2, [r3, #0]
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_I2C_Disable>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 0201 	bic.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	601a      	str	r2, [r3, #0]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_I2C_ConfigFilters>:
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0219      	lsls	r1, r3, #8
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]
}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <LL_I2C_SetOwnAddress1>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002ce2:	f023 0307 	bic.w	r3, r3, #7
 8002ce6:	68b9      	ldr	r1, [r7, #8]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	609a      	str	r2, [r3, #8]
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_I2C_EnableOwnAddress1>:
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	609a      	str	r2, [r3, #8]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_I2C_DisableOwnAddress1>:
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	609a      	str	r2, [r3, #8]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_I2C_SetTiming>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	611a      	str	r2, [r3, #16]
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <LL_I2C_SetMode>:
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b083      	sub	sp, #12
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	601a      	str	r2, [r3, #0]
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_I2C_AcknowledgeNextData>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	605a      	str	r2, [r3, #4]
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff ff65 	bl	8002c80 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6899      	ldr	r1, [r3, #8]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff6d 	bl	8002ca0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	4619      	mov	r1, r3
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7ff ffb6 	bl	8002d3e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff ff44 	bl	8002c60 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ffa0 	bl	8002d1e <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6919      	ldr	r1, [r3, #16]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	461a      	mov	r2, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff70 	bl	8002cce <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d002      	beq.n	8002dfc <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff ff81 	bl	8002cfe <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4619      	mov	r1, r3
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffa9 	bl	8002d5a <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff ffb6 	bl	8002d80 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <LL_RCC_HSI_IsReady>:
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <LL_RCC_HSI_IsReady+0x20>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40021000 	.word	0x40021000

08002e44 <LL_RCC_LSE_IsReady>:
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <LL_RCC_LSE_IsReady+0x20>)
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	bf0c      	ite	eq
 8002e54:	2301      	moveq	r3, #1
 8002e56:	2300      	movne	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40021000 	.word	0x40021000

08002e68 <LL_RCC_GetSysClkSource>:
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <LL_RCC_GetSysClkSource+0x18>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 030c 	and.w	r3, r3, #12
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40021000 	.word	0x40021000

08002e84 <LL_RCC_GetAHBPrescaler>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <LL_RCC_GetAHBPrescaler+0x18>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <LL_RCC_GetAPB1Prescaler>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000

08002ebc <LL_RCC_GetAPB2Prescaler>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000

08002ed8 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002ee0:	4b07      	ldr	r3, [pc, #28]	; (8002f00 <LL_RCC_GetUSARTClockSource+0x28>)
 8002ee2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ee4:	2103      	movs	r1, #3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	061b      	lsls	r3, r3, #24
 8002ef2:	4313      	orrs	r3, r2
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	40021000 	.word	0x40021000

08002f04 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <LL_RCC_PLL_GetMainSource+0x18>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000

08002f20 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000

08002f3c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <LL_RCC_PLL_GetPrediv+0x18>)
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	f003 030f 	and.w	r3, r3, #15
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40021000 	.word	0x40021000

08002f58 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002f60:	f000 f862 	bl	8003028 <RCC_GetSystemClockFreq>
 8002f64:	4602      	mov	r2, r0
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 f880 	bl	8003074 <RCC_GetHCLKClockFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f88e 	bl	80030a0 <RCC_GetPCLK1ClockFreq>
 8002f84:	4602      	mov	r2, r0
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f89a 	bl	80030c8 <RCC_GetPCLK2ClockFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	60da      	str	r2, [r3, #12]
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d130      	bne.n	8003018 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ff8e 	bl	8002ed8 <LL_RCC_GetUSARTClockSource>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d00a      	beq.n	8002fd8 <LL_RCC_GetUSARTClockFreq+0x34>
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d819      	bhi.n	8002ffa <LL_RCC_GetUSARTClockFreq+0x56>
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d002      	beq.n	8002fd0 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d00c      	beq.n	8002fe8 <LL_RCC_GetUSARTClockFreq+0x44>
 8002fce:	e014      	b.n	8002ffa <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002fd0:	f000 f82a 	bl	8003028 <RCC_GetSystemClockFreq>
 8002fd4:	60f8      	str	r0, [r7, #12]
        break;
 8002fd6:	e01f      	b.n	8003018 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8002fd8:	f7ff ff22 	bl	8002e20 <LL_RCC_HSI_IsReady>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d017      	beq.n	8003012 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <LL_RCC_GetUSARTClockFreq+0x80>)
 8002fe4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002fe6:	e014      	b.n	8003012 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8002fe8:	f7ff ff2c 	bl	8002e44 <LL_RCC_LSE_IsReady>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d011      	beq.n	8003016 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8002ff2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ff6:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002ff8:	e00d      	b.n	8003016 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002ffa:	f000 f815 	bl	8003028 <RCC_GetSystemClockFreq>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	f000 f837 	bl	8003074 <RCC_GetHCLKClockFreq>
 8003006:	4603      	mov	r3, r0
 8003008:	4618      	mov	r0, r3
 800300a:	f000 f849 	bl	80030a0 <RCC_GetPCLK1ClockFreq>
 800300e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8003010:	e002      	b.n	8003018 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8003016:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003018:	68fb      	ldr	r3, [r7, #12]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	007a1200 	.word	0x007a1200

08003028 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003032:	f7ff ff19 	bl	8002e68 <LL_RCC_GetSysClkSource>
 8003036:	4603      	mov	r3, r0
 8003038:	2b08      	cmp	r3, #8
 800303a:	d00c      	beq.n	8003056 <RCC_GetSystemClockFreq+0x2e>
 800303c:	2b08      	cmp	r3, #8
 800303e:	d80e      	bhi.n	800305e <RCC_GetSystemClockFreq+0x36>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d002      	beq.n	800304a <RCC_GetSystemClockFreq+0x22>
 8003044:	2b04      	cmp	r3, #4
 8003046:	d003      	beq.n	8003050 <RCC_GetSystemClockFreq+0x28>
 8003048:	e009      	b.n	800305e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <RCC_GetSystemClockFreq+0x48>)
 800304c:	607b      	str	r3, [r7, #4]
      break;
 800304e:	e009      	b.n	8003064 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003050:	4b07      	ldr	r3, [pc, #28]	; (8003070 <RCC_GetSystemClockFreq+0x48>)
 8003052:	607b      	str	r3, [r7, #4]
      break;
 8003054:	e006      	b.n	8003064 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003056:	f000 f84b 	bl	80030f0 <RCC_PLL_GetFreqDomain_SYS>
 800305a:	6078      	str	r0, [r7, #4]
      break;
 800305c:	e002      	b.n	8003064 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <RCC_GetSystemClockFreq+0x48>)
 8003060:	607b      	str	r3, [r7, #4]
      break;
 8003062:	bf00      	nop
  }

  return frequency;
 8003064:	687b      	ldr	r3, [r7, #4]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	007a1200 	.word	0x007a1200

08003074 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800307c:	f7ff ff02 	bl	8002e84 <LL_RCC_GetAHBPrescaler>
 8003080:	4603      	mov	r3, r0
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	4a04      	ldr	r2, [pc, #16]	; (800309c <RCC_GetHCLKClockFreq+0x28>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	461a      	mov	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	40d3      	lsrs	r3, r2
}
 8003092:	4618      	mov	r0, r3
 8003094:	3708      	adds	r7, #8
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	080060d4 	.word	0x080060d4

080030a0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80030a8:	f7ff fefa 	bl	8002ea0 <LL_RCC_GetAPB1Prescaler>
 80030ac:	4603      	mov	r3, r0
 80030ae:	0a1b      	lsrs	r3, r3, #8
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <RCC_GetPCLK1ClockFreq+0x24>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	40d3      	lsrs	r3, r2
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	080060e4 	.word	0x080060e4

080030c8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80030d0:	f7ff fef4 	bl	8002ebc <LL_RCC_GetAPB2Prescaler>
 80030d4:	4603      	mov	r3, r0
 80030d6:	0adb      	lsrs	r3, r3, #11
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <RCC_GetPCLK2ClockFreq+0x24>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	40d3      	lsrs	r3, r2
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	080060e4 	.word	0x080060e4

080030f0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	2300      	movs	r3, #0
 80030fc:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80030fe:	f7ff ff01 	bl	8002f04 <LL_RCC_PLL_GetMainSource>
 8003102:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d004      	beq.n	8003114 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003110:	d003      	beq.n	800311a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003112:	e005      	b.n	8003120 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003116:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003118:	e005      	b.n	8003126 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800311c:	60fb      	str	r3, [r7, #12]
      break;
 800311e:	e002      	b.n	8003126 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003122:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003124:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8003126:	f7ff ff09 	bl	8002f3c <LL_RCC_PLL_GetPrediv>
 800312a:	4603      	mov	r3, r0
 800312c:	3301      	adds	r3, #1
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	fbb2 f4f3 	udiv	r4, r2, r3
 8003134:	f7ff fef4 	bl	8002f20 <LL_RCC_PLL_GetMultiplicator>
 8003138:	4603      	mov	r3, r0
 800313a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800313e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003142:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	fa92 f2a2 	rbit	r2, r2
 800314a:	603a      	str	r2, [r7, #0]
  return result;
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	fab2 f282 	clz	r2, r2
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	40d3      	lsrs	r3, r2
 8003156:	3302      	adds	r3, #2
 8003158:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800315c:	4618      	mov	r0, r3
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bd90      	pop	{r4, r7, pc}
 8003164:	003d0900 	.word	0x003d0900
 8003168:	007a1200 	.word	0x007a1200

0800316c <LL_USART_IsEnabled>:
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <LL_USART_IsEnabled+0x18>
 8003180:	2301      	movs	r3, #1
 8003182:	e000      	b.n	8003186 <LL_USART_IsEnabled+0x1a>
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LL_USART_SetStopBitsLength>:
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	605a      	str	r2, [r3, #4]
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_USART_SetHWFlowCtrl>:
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]
}
 80031d2:	bf00      	nop
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <LL_USART_SetBaudRate>:
{
 80031de:	b480      	push	{r7}
 80031e0:	b087      	sub	sp, #28
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f2:	d11a      	bne.n	800322a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	005a      	lsls	r2, r3, #1
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	441a      	add	r2, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	fbb2 f3f3 	udiv	r3, r2, r3
 8003204:	b29b      	uxth	r3, r3
 8003206:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	b29b      	uxth	r3, r3
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	4313      	orrs	r3, r2
 8003220:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	60da      	str	r2, [r3, #12]
}
 8003228:	e00a      	b.n	8003240 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	085a      	lsrs	r2, r3, #1
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	441a      	add	r2, r3
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	fbb2 f3f3 	udiv	r3, r2, r3
 8003238:	b29b      	uxth	r3, r3
 800323a:	461a      	mov	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	60da      	str	r2, [r3, #12]
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800325a:	2300      	movs	r3, #0
 800325c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f7ff ff84 	bl	800316c <LL_USART_IsEnabled>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d14e      	bne.n	8003308 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	4b29      	ldr	r3, [pc, #164]	; (8003314 <LL_USART_Init+0xc8>)
 8003270:	4013      	ands	r3, r2
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	6851      	ldr	r1, [r2, #4]
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	4311      	orrs	r1, r2
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	6912      	ldr	r2, [r2, #16]
 8003280:	4311      	orrs	r1, r2
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	6992      	ldr	r2, [r2, #24]
 8003286:	430a      	orrs	r2, r1
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	4619      	mov	r1, r3
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff7c 	bl	8003192 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4619      	mov	r1, r3
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f7ff ff89 	bl	80031b8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1b      	ldr	r2, [pc, #108]	; (8003318 <LL_USART_Init+0xcc>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d104      	bne.n	80032b8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80032ae:	2000      	movs	r0, #0
 80032b0:	f7ff fe78 	bl	8002fa4 <LL_RCC_GetUSARTClockFreq>
 80032b4:	61b8      	str	r0, [r7, #24]
 80032b6:	e016      	b.n	80032e6 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a18      	ldr	r2, [pc, #96]	; (800331c <LL_USART_Init+0xd0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d107      	bne.n	80032d0 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80032c0:	f107 0308 	add.w	r3, r7, #8
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff fe47 	bl	8002f58 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	e00a      	b.n	80032e6 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <LL_USART_Init+0xd4>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d106      	bne.n	80032e6 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80032d8:	f107 0308 	add.w	r3, r7, #8
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fe3b 	bl	8002f58 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d009      	beq.n	8003308 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 80032f4:	2300      	movs	r3, #0
 80032f6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003300:	69b9      	ldr	r1, [r7, #24]
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff6b 	bl	80031de <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003308:	7ffb      	ldrb	r3, [r7, #31]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3720      	adds	r7, #32
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	efff69f3 	.word	0xefff69f3
 8003318:	40013800 	.word	0x40013800
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800

08003324 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800332c:	4b0f      	ldr	r3, [pc, #60]	; (800336c <LL_mDelay+0x48>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003332:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800333a:	d00c      	beq.n	8003356 <LL_mDelay+0x32>
  {
    Delay++;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3301      	adds	r3, #1
 8003340:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003342:	e008      	b.n	8003356 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003344:	4b09      	ldr	r3, [pc, #36]	; (800336c <LL_mDelay+0x48>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <LL_mDelay+0x32>
    {
      Delay--;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1f3      	bne.n	8003344 <LL_mDelay+0x20>
    }
  }
}
 800335c:	bf00      	nop
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	e000e010 	.word	0xe000e010

08003370 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003378:	4a04      	ldr	r2, [pc, #16]	; (800338c <LL_SetSystemCoreClock+0x1c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]
}
 800337e:	bf00      	nop
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000004 	.word	0x20000004

08003390 <malloc>:
 8003390:	4b02      	ldr	r3, [pc, #8]	; (800339c <malloc+0xc>)
 8003392:	4601      	mov	r1, r0
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	f000 b82b 	b.w	80033f0 <_malloc_r>
 800339a:	bf00      	nop
 800339c:	20000068 	.word	0x20000068

080033a0 <free>:
 80033a0:	4b02      	ldr	r3, [pc, #8]	; (80033ac <free+0xc>)
 80033a2:	4601      	mov	r1, r0
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	f001 bd45 	b.w	8004e34 <_free_r>
 80033aa:	bf00      	nop
 80033ac:	20000068 	.word	0x20000068

080033b0 <sbrk_aligned>:
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	4e0e      	ldr	r6, [pc, #56]	; (80033ec <sbrk_aligned+0x3c>)
 80033b4:	460c      	mov	r4, r1
 80033b6:	6831      	ldr	r1, [r6, #0]
 80033b8:	4605      	mov	r5, r0
 80033ba:	b911      	cbnz	r1, 80033c2 <sbrk_aligned+0x12>
 80033bc:	f000 fe70 	bl	80040a0 <_sbrk_r>
 80033c0:	6030      	str	r0, [r6, #0]
 80033c2:	4621      	mov	r1, r4
 80033c4:	4628      	mov	r0, r5
 80033c6:	f000 fe6b 	bl	80040a0 <_sbrk_r>
 80033ca:	1c43      	adds	r3, r0, #1
 80033cc:	d00a      	beq.n	80033e4 <sbrk_aligned+0x34>
 80033ce:	1cc4      	adds	r4, r0, #3
 80033d0:	f024 0403 	bic.w	r4, r4, #3
 80033d4:	42a0      	cmp	r0, r4
 80033d6:	d007      	beq.n	80033e8 <sbrk_aligned+0x38>
 80033d8:	1a21      	subs	r1, r4, r0
 80033da:	4628      	mov	r0, r5
 80033dc:	f000 fe60 	bl	80040a0 <_sbrk_r>
 80033e0:	3001      	adds	r0, #1
 80033e2:	d101      	bne.n	80033e8 <sbrk_aligned+0x38>
 80033e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80033e8:	4620      	mov	r0, r4
 80033ea:	bd70      	pop	{r4, r5, r6, pc}
 80033ec:	2000028c 	.word	0x2000028c

080033f0 <_malloc_r>:
 80033f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033f4:	1ccd      	adds	r5, r1, #3
 80033f6:	f025 0503 	bic.w	r5, r5, #3
 80033fa:	3508      	adds	r5, #8
 80033fc:	2d0c      	cmp	r5, #12
 80033fe:	bf38      	it	cc
 8003400:	250c      	movcc	r5, #12
 8003402:	2d00      	cmp	r5, #0
 8003404:	4607      	mov	r7, r0
 8003406:	db01      	blt.n	800340c <_malloc_r+0x1c>
 8003408:	42a9      	cmp	r1, r5
 800340a:	d905      	bls.n	8003418 <_malloc_r+0x28>
 800340c:	230c      	movs	r3, #12
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	2600      	movs	r6, #0
 8003412:	4630      	mov	r0, r6
 8003414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003418:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80034ec <_malloc_r+0xfc>
 800341c:	f000 f868 	bl	80034f0 <__malloc_lock>
 8003420:	f8d8 3000 	ldr.w	r3, [r8]
 8003424:	461c      	mov	r4, r3
 8003426:	bb5c      	cbnz	r4, 8003480 <_malloc_r+0x90>
 8003428:	4629      	mov	r1, r5
 800342a:	4638      	mov	r0, r7
 800342c:	f7ff ffc0 	bl	80033b0 <sbrk_aligned>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	4604      	mov	r4, r0
 8003434:	d155      	bne.n	80034e2 <_malloc_r+0xf2>
 8003436:	f8d8 4000 	ldr.w	r4, [r8]
 800343a:	4626      	mov	r6, r4
 800343c:	2e00      	cmp	r6, #0
 800343e:	d145      	bne.n	80034cc <_malloc_r+0xdc>
 8003440:	2c00      	cmp	r4, #0
 8003442:	d048      	beq.n	80034d6 <_malloc_r+0xe6>
 8003444:	6823      	ldr	r3, [r4, #0]
 8003446:	4631      	mov	r1, r6
 8003448:	4638      	mov	r0, r7
 800344a:	eb04 0903 	add.w	r9, r4, r3
 800344e:	f000 fe27 	bl	80040a0 <_sbrk_r>
 8003452:	4581      	cmp	r9, r0
 8003454:	d13f      	bne.n	80034d6 <_malloc_r+0xe6>
 8003456:	6821      	ldr	r1, [r4, #0]
 8003458:	1a6d      	subs	r5, r5, r1
 800345a:	4629      	mov	r1, r5
 800345c:	4638      	mov	r0, r7
 800345e:	f7ff ffa7 	bl	80033b0 <sbrk_aligned>
 8003462:	3001      	adds	r0, #1
 8003464:	d037      	beq.n	80034d6 <_malloc_r+0xe6>
 8003466:	6823      	ldr	r3, [r4, #0]
 8003468:	442b      	add	r3, r5
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	f8d8 3000 	ldr.w	r3, [r8]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d038      	beq.n	80034e6 <_malloc_r+0xf6>
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	42a2      	cmp	r2, r4
 8003478:	d12b      	bne.n	80034d2 <_malloc_r+0xe2>
 800347a:	2200      	movs	r2, #0
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	e00f      	b.n	80034a0 <_malloc_r+0xb0>
 8003480:	6822      	ldr	r2, [r4, #0]
 8003482:	1b52      	subs	r2, r2, r5
 8003484:	d41f      	bmi.n	80034c6 <_malloc_r+0xd6>
 8003486:	2a0b      	cmp	r2, #11
 8003488:	d917      	bls.n	80034ba <_malloc_r+0xca>
 800348a:	1961      	adds	r1, r4, r5
 800348c:	42a3      	cmp	r3, r4
 800348e:	6025      	str	r5, [r4, #0]
 8003490:	bf18      	it	ne
 8003492:	6059      	strne	r1, [r3, #4]
 8003494:	6863      	ldr	r3, [r4, #4]
 8003496:	bf08      	it	eq
 8003498:	f8c8 1000 	streq.w	r1, [r8]
 800349c:	5162      	str	r2, [r4, r5]
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	4638      	mov	r0, r7
 80034a2:	f104 060b 	add.w	r6, r4, #11
 80034a6:	f000 f829 	bl	80034fc <__malloc_unlock>
 80034aa:	f026 0607 	bic.w	r6, r6, #7
 80034ae:	1d23      	adds	r3, r4, #4
 80034b0:	1af2      	subs	r2, r6, r3
 80034b2:	d0ae      	beq.n	8003412 <_malloc_r+0x22>
 80034b4:	1b9b      	subs	r3, r3, r6
 80034b6:	50a3      	str	r3, [r4, r2]
 80034b8:	e7ab      	b.n	8003412 <_malloc_r+0x22>
 80034ba:	42a3      	cmp	r3, r4
 80034bc:	6862      	ldr	r2, [r4, #4]
 80034be:	d1dd      	bne.n	800347c <_malloc_r+0x8c>
 80034c0:	f8c8 2000 	str.w	r2, [r8]
 80034c4:	e7ec      	b.n	80034a0 <_malloc_r+0xb0>
 80034c6:	4623      	mov	r3, r4
 80034c8:	6864      	ldr	r4, [r4, #4]
 80034ca:	e7ac      	b.n	8003426 <_malloc_r+0x36>
 80034cc:	4634      	mov	r4, r6
 80034ce:	6876      	ldr	r6, [r6, #4]
 80034d0:	e7b4      	b.n	800343c <_malloc_r+0x4c>
 80034d2:	4613      	mov	r3, r2
 80034d4:	e7cc      	b.n	8003470 <_malloc_r+0x80>
 80034d6:	230c      	movs	r3, #12
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	4638      	mov	r0, r7
 80034dc:	f000 f80e 	bl	80034fc <__malloc_unlock>
 80034e0:	e797      	b.n	8003412 <_malloc_r+0x22>
 80034e2:	6025      	str	r5, [r4, #0]
 80034e4:	e7dc      	b.n	80034a0 <_malloc_r+0xb0>
 80034e6:	605b      	str	r3, [r3, #4]
 80034e8:	deff      	udf	#255	; 0xff
 80034ea:	bf00      	nop
 80034ec:	20000288 	.word	0x20000288

080034f0 <__malloc_lock>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__malloc_lock+0x8>)
 80034f2:	f000 be22 	b.w	800413a <__retarget_lock_acquire_recursive>
 80034f6:	bf00      	nop
 80034f8:	200003d0 	.word	0x200003d0

080034fc <__malloc_unlock>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__malloc_unlock+0x8>)
 80034fe:	f000 be1d 	b.w	800413c <__retarget_lock_release_recursive>
 8003502:	bf00      	nop
 8003504:	200003d0 	.word	0x200003d0

08003508 <__cvt>:
 8003508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800350c:	ec55 4b10 	vmov	r4, r5, d0
 8003510:	2d00      	cmp	r5, #0
 8003512:	460e      	mov	r6, r1
 8003514:	4619      	mov	r1, r3
 8003516:	462b      	mov	r3, r5
 8003518:	bfbb      	ittet	lt
 800351a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800351e:	461d      	movlt	r5, r3
 8003520:	2300      	movge	r3, #0
 8003522:	232d      	movlt	r3, #45	; 0x2d
 8003524:	700b      	strb	r3, [r1, #0]
 8003526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003528:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800352c:	4691      	mov	r9, r2
 800352e:	f023 0820 	bic.w	r8, r3, #32
 8003532:	bfbc      	itt	lt
 8003534:	4622      	movlt	r2, r4
 8003536:	4614      	movlt	r4, r2
 8003538:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800353c:	d005      	beq.n	800354a <__cvt+0x42>
 800353e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003542:	d100      	bne.n	8003546 <__cvt+0x3e>
 8003544:	3601      	adds	r6, #1
 8003546:	2102      	movs	r1, #2
 8003548:	e000      	b.n	800354c <__cvt+0x44>
 800354a:	2103      	movs	r1, #3
 800354c:	ab03      	add	r3, sp, #12
 800354e:	9301      	str	r3, [sp, #4]
 8003550:	ab02      	add	r3, sp, #8
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	ec45 4b10 	vmov	d0, r4, r5
 8003558:	4653      	mov	r3, sl
 800355a:	4632      	mov	r2, r6
 800355c:	f000 fe78 	bl	8004250 <_dtoa_r>
 8003560:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003564:	4607      	mov	r7, r0
 8003566:	d102      	bne.n	800356e <__cvt+0x66>
 8003568:	f019 0f01 	tst.w	r9, #1
 800356c:	d022      	beq.n	80035b4 <__cvt+0xac>
 800356e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003572:	eb07 0906 	add.w	r9, r7, r6
 8003576:	d110      	bne.n	800359a <__cvt+0x92>
 8003578:	783b      	ldrb	r3, [r7, #0]
 800357a:	2b30      	cmp	r3, #48	; 0x30
 800357c:	d10a      	bne.n	8003594 <__cvt+0x8c>
 800357e:	2200      	movs	r2, #0
 8003580:	2300      	movs	r3, #0
 8003582:	4620      	mov	r0, r4
 8003584:	4629      	mov	r1, r5
 8003586:	f7fd fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800358a:	b918      	cbnz	r0, 8003594 <__cvt+0x8c>
 800358c:	f1c6 0601 	rsb	r6, r6, #1
 8003590:	f8ca 6000 	str.w	r6, [sl]
 8003594:	f8da 3000 	ldr.w	r3, [sl]
 8003598:	4499      	add	r9, r3
 800359a:	2200      	movs	r2, #0
 800359c:	2300      	movs	r3, #0
 800359e:	4620      	mov	r0, r4
 80035a0:	4629      	mov	r1, r5
 80035a2:	f7fd fa91 	bl	8000ac8 <__aeabi_dcmpeq>
 80035a6:	b108      	cbz	r0, 80035ac <__cvt+0xa4>
 80035a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80035ac:	2230      	movs	r2, #48	; 0x30
 80035ae:	9b03      	ldr	r3, [sp, #12]
 80035b0:	454b      	cmp	r3, r9
 80035b2:	d307      	bcc.n	80035c4 <__cvt+0xbc>
 80035b4:	9b03      	ldr	r3, [sp, #12]
 80035b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035b8:	1bdb      	subs	r3, r3, r7
 80035ba:	4638      	mov	r0, r7
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	b004      	add	sp, #16
 80035c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035c4:	1c59      	adds	r1, r3, #1
 80035c6:	9103      	str	r1, [sp, #12]
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e7f0      	b.n	80035ae <__cvt+0xa6>

080035cc <__exponent>:
 80035cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035ce:	4603      	mov	r3, r0
 80035d0:	2900      	cmp	r1, #0
 80035d2:	bfb8      	it	lt
 80035d4:	4249      	neglt	r1, r1
 80035d6:	f803 2b02 	strb.w	r2, [r3], #2
 80035da:	bfb4      	ite	lt
 80035dc:	222d      	movlt	r2, #45	; 0x2d
 80035de:	222b      	movge	r2, #43	; 0x2b
 80035e0:	2909      	cmp	r1, #9
 80035e2:	7042      	strb	r2, [r0, #1]
 80035e4:	dd2a      	ble.n	800363c <__exponent+0x70>
 80035e6:	f10d 0207 	add.w	r2, sp, #7
 80035ea:	4617      	mov	r7, r2
 80035ec:	260a      	movs	r6, #10
 80035ee:	4694      	mov	ip, r2
 80035f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80035f4:	fb06 1415 	mls	r4, r6, r5, r1
 80035f8:	3430      	adds	r4, #48	; 0x30
 80035fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80035fe:	460c      	mov	r4, r1
 8003600:	2c63      	cmp	r4, #99	; 0x63
 8003602:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003606:	4629      	mov	r1, r5
 8003608:	dcf1      	bgt.n	80035ee <__exponent+0x22>
 800360a:	3130      	adds	r1, #48	; 0x30
 800360c:	f1ac 0402 	sub.w	r4, ip, #2
 8003610:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003614:	1c41      	adds	r1, r0, #1
 8003616:	4622      	mov	r2, r4
 8003618:	42ba      	cmp	r2, r7
 800361a:	d30a      	bcc.n	8003632 <__exponent+0x66>
 800361c:	f10d 0209 	add.w	r2, sp, #9
 8003620:	eba2 020c 	sub.w	r2, r2, ip
 8003624:	42bc      	cmp	r4, r7
 8003626:	bf88      	it	hi
 8003628:	2200      	movhi	r2, #0
 800362a:	4413      	add	r3, r2
 800362c:	1a18      	subs	r0, r3, r0
 800362e:	b003      	add	sp, #12
 8003630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003632:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003636:	f801 5f01 	strb.w	r5, [r1, #1]!
 800363a:	e7ed      	b.n	8003618 <__exponent+0x4c>
 800363c:	2330      	movs	r3, #48	; 0x30
 800363e:	3130      	adds	r1, #48	; 0x30
 8003640:	7083      	strb	r3, [r0, #2]
 8003642:	70c1      	strb	r1, [r0, #3]
 8003644:	1d03      	adds	r3, r0, #4
 8003646:	e7f1      	b.n	800362c <__exponent+0x60>

08003648 <_printf_float>:
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	ed2d 8b02 	vpush	{d8}
 8003650:	b08d      	sub	sp, #52	; 0x34
 8003652:	460c      	mov	r4, r1
 8003654:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003658:	4616      	mov	r6, r2
 800365a:	461f      	mov	r7, r3
 800365c:	4605      	mov	r5, r0
 800365e:	f000 fce7 	bl	8004030 <_localeconv_r>
 8003662:	f8d0 a000 	ldr.w	sl, [r0]
 8003666:	4650      	mov	r0, sl
 8003668:	f7fc fe02 	bl	8000270 <strlen>
 800366c:	2300      	movs	r3, #0
 800366e:	930a      	str	r3, [sp, #40]	; 0x28
 8003670:	6823      	ldr	r3, [r4, #0]
 8003672:	9305      	str	r3, [sp, #20]
 8003674:	f8d8 3000 	ldr.w	r3, [r8]
 8003678:	f894 b018 	ldrb.w	fp, [r4, #24]
 800367c:	3307      	adds	r3, #7
 800367e:	f023 0307 	bic.w	r3, r3, #7
 8003682:	f103 0208 	add.w	r2, r3, #8
 8003686:	f8c8 2000 	str.w	r2, [r8]
 800368a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800368e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003692:	9307      	str	r3, [sp, #28]
 8003694:	f8cd 8018 	str.w	r8, [sp, #24]
 8003698:	ee08 0a10 	vmov	s16, r0
 800369c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80036a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036a4:	4b9e      	ldr	r3, [pc, #632]	; (8003920 <_printf_float+0x2d8>)
 80036a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036aa:	f7fd fa3f 	bl	8000b2c <__aeabi_dcmpun>
 80036ae:	bb88      	cbnz	r0, 8003714 <_printf_float+0xcc>
 80036b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036b4:	4b9a      	ldr	r3, [pc, #616]	; (8003920 <_printf_float+0x2d8>)
 80036b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036ba:	f7fd fa19 	bl	8000af0 <__aeabi_dcmple>
 80036be:	bb48      	cbnz	r0, 8003714 <_printf_float+0xcc>
 80036c0:	2200      	movs	r2, #0
 80036c2:	2300      	movs	r3, #0
 80036c4:	4640      	mov	r0, r8
 80036c6:	4649      	mov	r1, r9
 80036c8:	f7fd fa08 	bl	8000adc <__aeabi_dcmplt>
 80036cc:	b110      	cbz	r0, 80036d4 <_printf_float+0x8c>
 80036ce:	232d      	movs	r3, #45	; 0x2d
 80036d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036d4:	4a93      	ldr	r2, [pc, #588]	; (8003924 <_printf_float+0x2dc>)
 80036d6:	4b94      	ldr	r3, [pc, #592]	; (8003928 <_printf_float+0x2e0>)
 80036d8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80036dc:	bf94      	ite	ls
 80036de:	4690      	movls	r8, r2
 80036e0:	4698      	movhi	r8, r3
 80036e2:	2303      	movs	r3, #3
 80036e4:	6123      	str	r3, [r4, #16]
 80036e6:	9b05      	ldr	r3, [sp, #20]
 80036e8:	f023 0304 	bic.w	r3, r3, #4
 80036ec:	6023      	str	r3, [r4, #0]
 80036ee:	f04f 0900 	mov.w	r9, #0
 80036f2:	9700      	str	r7, [sp, #0]
 80036f4:	4633      	mov	r3, r6
 80036f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80036f8:	4621      	mov	r1, r4
 80036fa:	4628      	mov	r0, r5
 80036fc:	f000 f9da 	bl	8003ab4 <_printf_common>
 8003700:	3001      	adds	r0, #1
 8003702:	f040 8090 	bne.w	8003826 <_printf_float+0x1de>
 8003706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800370a:	b00d      	add	sp, #52	; 0x34
 800370c:	ecbd 8b02 	vpop	{d8}
 8003710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003714:	4642      	mov	r2, r8
 8003716:	464b      	mov	r3, r9
 8003718:	4640      	mov	r0, r8
 800371a:	4649      	mov	r1, r9
 800371c:	f7fd fa06 	bl	8000b2c <__aeabi_dcmpun>
 8003720:	b140      	cbz	r0, 8003734 <_printf_float+0xec>
 8003722:	464b      	mov	r3, r9
 8003724:	2b00      	cmp	r3, #0
 8003726:	bfbc      	itt	lt
 8003728:	232d      	movlt	r3, #45	; 0x2d
 800372a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800372e:	4a7f      	ldr	r2, [pc, #508]	; (800392c <_printf_float+0x2e4>)
 8003730:	4b7f      	ldr	r3, [pc, #508]	; (8003930 <_printf_float+0x2e8>)
 8003732:	e7d1      	b.n	80036d8 <_printf_float+0x90>
 8003734:	6863      	ldr	r3, [r4, #4]
 8003736:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800373a:	9206      	str	r2, [sp, #24]
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	d13f      	bne.n	80037c0 <_printf_float+0x178>
 8003740:	2306      	movs	r3, #6
 8003742:	6063      	str	r3, [r4, #4]
 8003744:	9b05      	ldr	r3, [sp, #20]
 8003746:	6861      	ldr	r1, [r4, #4]
 8003748:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800374c:	2300      	movs	r3, #0
 800374e:	9303      	str	r3, [sp, #12]
 8003750:	ab0a      	add	r3, sp, #40	; 0x28
 8003752:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003756:	ab09      	add	r3, sp, #36	; 0x24
 8003758:	ec49 8b10 	vmov	d0, r8, r9
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	6022      	str	r2, [r4, #0]
 8003760:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003764:	4628      	mov	r0, r5
 8003766:	f7ff fecf 	bl	8003508 <__cvt>
 800376a:	9b06      	ldr	r3, [sp, #24]
 800376c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800376e:	2b47      	cmp	r3, #71	; 0x47
 8003770:	4680      	mov	r8, r0
 8003772:	d108      	bne.n	8003786 <_printf_float+0x13e>
 8003774:	1cc8      	adds	r0, r1, #3
 8003776:	db02      	blt.n	800377e <_printf_float+0x136>
 8003778:	6863      	ldr	r3, [r4, #4]
 800377a:	4299      	cmp	r1, r3
 800377c:	dd41      	ble.n	8003802 <_printf_float+0x1ba>
 800377e:	f1ab 0302 	sub.w	r3, fp, #2
 8003782:	fa5f fb83 	uxtb.w	fp, r3
 8003786:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800378a:	d820      	bhi.n	80037ce <_printf_float+0x186>
 800378c:	3901      	subs	r1, #1
 800378e:	465a      	mov	r2, fp
 8003790:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003794:	9109      	str	r1, [sp, #36]	; 0x24
 8003796:	f7ff ff19 	bl	80035cc <__exponent>
 800379a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800379c:	1813      	adds	r3, r2, r0
 800379e:	2a01      	cmp	r2, #1
 80037a0:	4681      	mov	r9, r0
 80037a2:	6123      	str	r3, [r4, #16]
 80037a4:	dc02      	bgt.n	80037ac <_printf_float+0x164>
 80037a6:	6822      	ldr	r2, [r4, #0]
 80037a8:	07d2      	lsls	r2, r2, #31
 80037aa:	d501      	bpl.n	80037b0 <_printf_float+0x168>
 80037ac:	3301      	adds	r3, #1
 80037ae:	6123      	str	r3, [r4, #16]
 80037b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d09c      	beq.n	80036f2 <_printf_float+0xaa>
 80037b8:	232d      	movs	r3, #45	; 0x2d
 80037ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037be:	e798      	b.n	80036f2 <_printf_float+0xaa>
 80037c0:	9a06      	ldr	r2, [sp, #24]
 80037c2:	2a47      	cmp	r2, #71	; 0x47
 80037c4:	d1be      	bne.n	8003744 <_printf_float+0xfc>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1bc      	bne.n	8003744 <_printf_float+0xfc>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e7b9      	b.n	8003742 <_printf_float+0xfa>
 80037ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80037d2:	d118      	bne.n	8003806 <_printf_float+0x1be>
 80037d4:	2900      	cmp	r1, #0
 80037d6:	6863      	ldr	r3, [r4, #4]
 80037d8:	dd0b      	ble.n	80037f2 <_printf_float+0x1aa>
 80037da:	6121      	str	r1, [r4, #16]
 80037dc:	b913      	cbnz	r3, 80037e4 <_printf_float+0x19c>
 80037de:	6822      	ldr	r2, [r4, #0]
 80037e0:	07d0      	lsls	r0, r2, #31
 80037e2:	d502      	bpl.n	80037ea <_printf_float+0x1a2>
 80037e4:	3301      	adds	r3, #1
 80037e6:	440b      	add	r3, r1
 80037e8:	6123      	str	r3, [r4, #16]
 80037ea:	65a1      	str	r1, [r4, #88]	; 0x58
 80037ec:	f04f 0900 	mov.w	r9, #0
 80037f0:	e7de      	b.n	80037b0 <_printf_float+0x168>
 80037f2:	b913      	cbnz	r3, 80037fa <_printf_float+0x1b2>
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	07d2      	lsls	r2, r2, #31
 80037f8:	d501      	bpl.n	80037fe <_printf_float+0x1b6>
 80037fa:	3302      	adds	r3, #2
 80037fc:	e7f4      	b.n	80037e8 <_printf_float+0x1a0>
 80037fe:	2301      	movs	r3, #1
 8003800:	e7f2      	b.n	80037e8 <_printf_float+0x1a0>
 8003802:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003808:	4299      	cmp	r1, r3
 800380a:	db05      	blt.n	8003818 <_printf_float+0x1d0>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	6121      	str	r1, [r4, #16]
 8003810:	07d8      	lsls	r0, r3, #31
 8003812:	d5ea      	bpl.n	80037ea <_printf_float+0x1a2>
 8003814:	1c4b      	adds	r3, r1, #1
 8003816:	e7e7      	b.n	80037e8 <_printf_float+0x1a0>
 8003818:	2900      	cmp	r1, #0
 800381a:	bfd4      	ite	le
 800381c:	f1c1 0202 	rsble	r2, r1, #2
 8003820:	2201      	movgt	r2, #1
 8003822:	4413      	add	r3, r2
 8003824:	e7e0      	b.n	80037e8 <_printf_float+0x1a0>
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	055a      	lsls	r2, r3, #21
 800382a:	d407      	bmi.n	800383c <_printf_float+0x1f4>
 800382c:	6923      	ldr	r3, [r4, #16]
 800382e:	4642      	mov	r2, r8
 8003830:	4631      	mov	r1, r6
 8003832:	4628      	mov	r0, r5
 8003834:	47b8      	blx	r7
 8003836:	3001      	adds	r0, #1
 8003838:	d12c      	bne.n	8003894 <_printf_float+0x24c>
 800383a:	e764      	b.n	8003706 <_printf_float+0xbe>
 800383c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003840:	f240 80e0 	bls.w	8003a04 <_printf_float+0x3bc>
 8003844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003848:	2200      	movs	r2, #0
 800384a:	2300      	movs	r3, #0
 800384c:	f7fd f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8003850:	2800      	cmp	r0, #0
 8003852:	d034      	beq.n	80038be <_printf_float+0x276>
 8003854:	4a37      	ldr	r2, [pc, #220]	; (8003934 <_printf_float+0x2ec>)
 8003856:	2301      	movs	r3, #1
 8003858:	4631      	mov	r1, r6
 800385a:	4628      	mov	r0, r5
 800385c:	47b8      	blx	r7
 800385e:	3001      	adds	r0, #1
 8003860:	f43f af51 	beq.w	8003706 <_printf_float+0xbe>
 8003864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003868:	429a      	cmp	r2, r3
 800386a:	db02      	blt.n	8003872 <_printf_float+0x22a>
 800386c:	6823      	ldr	r3, [r4, #0]
 800386e:	07d8      	lsls	r0, r3, #31
 8003870:	d510      	bpl.n	8003894 <_printf_float+0x24c>
 8003872:	ee18 3a10 	vmov	r3, s16
 8003876:	4652      	mov	r2, sl
 8003878:	4631      	mov	r1, r6
 800387a:	4628      	mov	r0, r5
 800387c:	47b8      	blx	r7
 800387e:	3001      	adds	r0, #1
 8003880:	f43f af41 	beq.w	8003706 <_printf_float+0xbe>
 8003884:	f04f 0800 	mov.w	r8, #0
 8003888:	f104 091a 	add.w	r9, r4, #26
 800388c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800388e:	3b01      	subs	r3, #1
 8003890:	4543      	cmp	r3, r8
 8003892:	dc09      	bgt.n	80038a8 <_printf_float+0x260>
 8003894:	6823      	ldr	r3, [r4, #0]
 8003896:	079b      	lsls	r3, r3, #30
 8003898:	f100 8107 	bmi.w	8003aaa <_printf_float+0x462>
 800389c:	68e0      	ldr	r0, [r4, #12]
 800389e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038a0:	4298      	cmp	r0, r3
 80038a2:	bfb8      	it	lt
 80038a4:	4618      	movlt	r0, r3
 80038a6:	e730      	b.n	800370a <_printf_float+0xc2>
 80038a8:	2301      	movs	r3, #1
 80038aa:	464a      	mov	r2, r9
 80038ac:	4631      	mov	r1, r6
 80038ae:	4628      	mov	r0, r5
 80038b0:	47b8      	blx	r7
 80038b2:	3001      	adds	r0, #1
 80038b4:	f43f af27 	beq.w	8003706 <_printf_float+0xbe>
 80038b8:	f108 0801 	add.w	r8, r8, #1
 80038bc:	e7e6      	b.n	800388c <_printf_float+0x244>
 80038be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dc39      	bgt.n	8003938 <_printf_float+0x2f0>
 80038c4:	4a1b      	ldr	r2, [pc, #108]	; (8003934 <_printf_float+0x2ec>)
 80038c6:	2301      	movs	r3, #1
 80038c8:	4631      	mov	r1, r6
 80038ca:	4628      	mov	r0, r5
 80038cc:	47b8      	blx	r7
 80038ce:	3001      	adds	r0, #1
 80038d0:	f43f af19 	beq.w	8003706 <_printf_float+0xbe>
 80038d4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80038d8:	4313      	orrs	r3, r2
 80038da:	d102      	bne.n	80038e2 <_printf_float+0x29a>
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	07d9      	lsls	r1, r3, #31
 80038e0:	d5d8      	bpl.n	8003894 <_printf_float+0x24c>
 80038e2:	ee18 3a10 	vmov	r3, s16
 80038e6:	4652      	mov	r2, sl
 80038e8:	4631      	mov	r1, r6
 80038ea:	4628      	mov	r0, r5
 80038ec:	47b8      	blx	r7
 80038ee:	3001      	adds	r0, #1
 80038f0:	f43f af09 	beq.w	8003706 <_printf_float+0xbe>
 80038f4:	f04f 0900 	mov.w	r9, #0
 80038f8:	f104 0a1a 	add.w	sl, r4, #26
 80038fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038fe:	425b      	negs	r3, r3
 8003900:	454b      	cmp	r3, r9
 8003902:	dc01      	bgt.n	8003908 <_printf_float+0x2c0>
 8003904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003906:	e792      	b.n	800382e <_printf_float+0x1e6>
 8003908:	2301      	movs	r3, #1
 800390a:	4652      	mov	r2, sl
 800390c:	4631      	mov	r1, r6
 800390e:	4628      	mov	r0, r5
 8003910:	47b8      	blx	r7
 8003912:	3001      	adds	r0, #1
 8003914:	f43f aef7 	beq.w	8003706 <_printf_float+0xbe>
 8003918:	f109 0901 	add.w	r9, r9, #1
 800391c:	e7ee      	b.n	80038fc <_printf_float+0x2b4>
 800391e:	bf00      	nop
 8003920:	7fefffff 	.word	0x7fefffff
 8003924:	080060f3 	.word	0x080060f3
 8003928:	080060f7 	.word	0x080060f7
 800392c:	080060fb 	.word	0x080060fb
 8003930:	080060ff 	.word	0x080060ff
 8003934:	08006103 	.word	0x08006103
 8003938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800393a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800393c:	429a      	cmp	r2, r3
 800393e:	bfa8      	it	ge
 8003940:	461a      	movge	r2, r3
 8003942:	2a00      	cmp	r2, #0
 8003944:	4691      	mov	r9, r2
 8003946:	dc37      	bgt.n	80039b8 <_printf_float+0x370>
 8003948:	f04f 0b00 	mov.w	fp, #0
 800394c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003950:	f104 021a 	add.w	r2, r4, #26
 8003954:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003956:	9305      	str	r3, [sp, #20]
 8003958:	eba3 0309 	sub.w	r3, r3, r9
 800395c:	455b      	cmp	r3, fp
 800395e:	dc33      	bgt.n	80039c8 <_printf_float+0x380>
 8003960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003964:	429a      	cmp	r2, r3
 8003966:	db3b      	blt.n	80039e0 <_printf_float+0x398>
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	07da      	lsls	r2, r3, #31
 800396c:	d438      	bmi.n	80039e0 <_printf_float+0x398>
 800396e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003972:	eba2 0903 	sub.w	r9, r2, r3
 8003976:	9b05      	ldr	r3, [sp, #20]
 8003978:	1ad2      	subs	r2, r2, r3
 800397a:	4591      	cmp	r9, r2
 800397c:	bfa8      	it	ge
 800397e:	4691      	movge	r9, r2
 8003980:	f1b9 0f00 	cmp.w	r9, #0
 8003984:	dc35      	bgt.n	80039f2 <_printf_float+0x3aa>
 8003986:	f04f 0800 	mov.w	r8, #0
 800398a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800398e:	f104 0a1a 	add.w	sl, r4, #26
 8003992:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	eba3 0309 	sub.w	r3, r3, r9
 800399c:	4543      	cmp	r3, r8
 800399e:	f77f af79 	ble.w	8003894 <_printf_float+0x24c>
 80039a2:	2301      	movs	r3, #1
 80039a4:	4652      	mov	r2, sl
 80039a6:	4631      	mov	r1, r6
 80039a8:	4628      	mov	r0, r5
 80039aa:	47b8      	blx	r7
 80039ac:	3001      	adds	r0, #1
 80039ae:	f43f aeaa 	beq.w	8003706 <_printf_float+0xbe>
 80039b2:	f108 0801 	add.w	r8, r8, #1
 80039b6:	e7ec      	b.n	8003992 <_printf_float+0x34a>
 80039b8:	4613      	mov	r3, r2
 80039ba:	4631      	mov	r1, r6
 80039bc:	4642      	mov	r2, r8
 80039be:	4628      	mov	r0, r5
 80039c0:	47b8      	blx	r7
 80039c2:	3001      	adds	r0, #1
 80039c4:	d1c0      	bne.n	8003948 <_printf_float+0x300>
 80039c6:	e69e      	b.n	8003706 <_printf_float+0xbe>
 80039c8:	2301      	movs	r3, #1
 80039ca:	4631      	mov	r1, r6
 80039cc:	4628      	mov	r0, r5
 80039ce:	9205      	str	r2, [sp, #20]
 80039d0:	47b8      	blx	r7
 80039d2:	3001      	adds	r0, #1
 80039d4:	f43f ae97 	beq.w	8003706 <_printf_float+0xbe>
 80039d8:	9a05      	ldr	r2, [sp, #20]
 80039da:	f10b 0b01 	add.w	fp, fp, #1
 80039de:	e7b9      	b.n	8003954 <_printf_float+0x30c>
 80039e0:	ee18 3a10 	vmov	r3, s16
 80039e4:	4652      	mov	r2, sl
 80039e6:	4631      	mov	r1, r6
 80039e8:	4628      	mov	r0, r5
 80039ea:	47b8      	blx	r7
 80039ec:	3001      	adds	r0, #1
 80039ee:	d1be      	bne.n	800396e <_printf_float+0x326>
 80039f0:	e689      	b.n	8003706 <_printf_float+0xbe>
 80039f2:	9a05      	ldr	r2, [sp, #20]
 80039f4:	464b      	mov	r3, r9
 80039f6:	4442      	add	r2, r8
 80039f8:	4631      	mov	r1, r6
 80039fa:	4628      	mov	r0, r5
 80039fc:	47b8      	blx	r7
 80039fe:	3001      	adds	r0, #1
 8003a00:	d1c1      	bne.n	8003986 <_printf_float+0x33e>
 8003a02:	e680      	b.n	8003706 <_printf_float+0xbe>
 8003a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a06:	2a01      	cmp	r2, #1
 8003a08:	dc01      	bgt.n	8003a0e <_printf_float+0x3c6>
 8003a0a:	07db      	lsls	r3, r3, #31
 8003a0c:	d53a      	bpl.n	8003a84 <_printf_float+0x43c>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	4642      	mov	r2, r8
 8003a12:	4631      	mov	r1, r6
 8003a14:	4628      	mov	r0, r5
 8003a16:	47b8      	blx	r7
 8003a18:	3001      	adds	r0, #1
 8003a1a:	f43f ae74 	beq.w	8003706 <_printf_float+0xbe>
 8003a1e:	ee18 3a10 	vmov	r3, s16
 8003a22:	4652      	mov	r2, sl
 8003a24:	4631      	mov	r1, r6
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b8      	blx	r7
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	f43f ae6b 	beq.w	8003706 <_printf_float+0xbe>
 8003a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a34:	2200      	movs	r2, #0
 8003a36:	2300      	movs	r3, #0
 8003a38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003a3c:	f7fd f844 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a40:	b9d8      	cbnz	r0, 8003a7a <_printf_float+0x432>
 8003a42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003a46:	f108 0201 	add.w	r2, r8, #1
 8003a4a:	4631      	mov	r1, r6
 8003a4c:	4628      	mov	r0, r5
 8003a4e:	47b8      	blx	r7
 8003a50:	3001      	adds	r0, #1
 8003a52:	d10e      	bne.n	8003a72 <_printf_float+0x42a>
 8003a54:	e657      	b.n	8003706 <_printf_float+0xbe>
 8003a56:	2301      	movs	r3, #1
 8003a58:	4652      	mov	r2, sl
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4628      	mov	r0, r5
 8003a5e:	47b8      	blx	r7
 8003a60:	3001      	adds	r0, #1
 8003a62:	f43f ae50 	beq.w	8003706 <_printf_float+0xbe>
 8003a66:	f108 0801 	add.w	r8, r8, #1
 8003a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	4543      	cmp	r3, r8
 8003a70:	dcf1      	bgt.n	8003a56 <_printf_float+0x40e>
 8003a72:	464b      	mov	r3, r9
 8003a74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a78:	e6da      	b.n	8003830 <_printf_float+0x1e8>
 8003a7a:	f04f 0800 	mov.w	r8, #0
 8003a7e:	f104 0a1a 	add.w	sl, r4, #26
 8003a82:	e7f2      	b.n	8003a6a <_printf_float+0x422>
 8003a84:	2301      	movs	r3, #1
 8003a86:	4642      	mov	r2, r8
 8003a88:	e7df      	b.n	8003a4a <_printf_float+0x402>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	464a      	mov	r2, r9
 8003a8e:	4631      	mov	r1, r6
 8003a90:	4628      	mov	r0, r5
 8003a92:	47b8      	blx	r7
 8003a94:	3001      	adds	r0, #1
 8003a96:	f43f ae36 	beq.w	8003706 <_printf_float+0xbe>
 8003a9a:	f108 0801 	add.w	r8, r8, #1
 8003a9e:	68e3      	ldr	r3, [r4, #12]
 8003aa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003aa2:	1a5b      	subs	r3, r3, r1
 8003aa4:	4543      	cmp	r3, r8
 8003aa6:	dcf0      	bgt.n	8003a8a <_printf_float+0x442>
 8003aa8:	e6f8      	b.n	800389c <_printf_float+0x254>
 8003aaa:	f04f 0800 	mov.w	r8, #0
 8003aae:	f104 0919 	add.w	r9, r4, #25
 8003ab2:	e7f4      	b.n	8003a9e <_printf_float+0x456>

08003ab4 <_printf_common>:
 8003ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	4616      	mov	r6, r2
 8003aba:	4699      	mov	r9, r3
 8003abc:	688a      	ldr	r2, [r1, #8]
 8003abe:	690b      	ldr	r3, [r1, #16]
 8003ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	bfb8      	it	lt
 8003ac8:	4613      	movlt	r3, r2
 8003aca:	6033      	str	r3, [r6, #0]
 8003acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	460c      	mov	r4, r1
 8003ad4:	b10a      	cbz	r2, 8003ada <_printf_common+0x26>
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	6033      	str	r3, [r6, #0]
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	0699      	lsls	r1, r3, #26
 8003ade:	bf42      	ittt	mi
 8003ae0:	6833      	ldrmi	r3, [r6, #0]
 8003ae2:	3302      	addmi	r3, #2
 8003ae4:	6033      	strmi	r3, [r6, #0]
 8003ae6:	6825      	ldr	r5, [r4, #0]
 8003ae8:	f015 0506 	ands.w	r5, r5, #6
 8003aec:	d106      	bne.n	8003afc <_printf_common+0x48>
 8003aee:	f104 0a19 	add.w	sl, r4, #25
 8003af2:	68e3      	ldr	r3, [r4, #12]
 8003af4:	6832      	ldr	r2, [r6, #0]
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	42ab      	cmp	r3, r5
 8003afa:	dc26      	bgt.n	8003b4a <_printf_common+0x96>
 8003afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b00:	1e13      	subs	r3, r2, #0
 8003b02:	6822      	ldr	r2, [r4, #0]
 8003b04:	bf18      	it	ne
 8003b06:	2301      	movne	r3, #1
 8003b08:	0692      	lsls	r2, r2, #26
 8003b0a:	d42b      	bmi.n	8003b64 <_printf_common+0xb0>
 8003b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b10:	4649      	mov	r1, r9
 8003b12:	4638      	mov	r0, r7
 8003b14:	47c0      	blx	r8
 8003b16:	3001      	adds	r0, #1
 8003b18:	d01e      	beq.n	8003b58 <_printf_common+0xa4>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	6922      	ldr	r2, [r4, #16]
 8003b1e:	f003 0306 	and.w	r3, r3, #6
 8003b22:	2b04      	cmp	r3, #4
 8003b24:	bf02      	ittt	eq
 8003b26:	68e5      	ldreq	r5, [r4, #12]
 8003b28:	6833      	ldreq	r3, [r6, #0]
 8003b2a:	1aed      	subeq	r5, r5, r3
 8003b2c:	68a3      	ldr	r3, [r4, #8]
 8003b2e:	bf0c      	ite	eq
 8003b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b34:	2500      	movne	r5, #0
 8003b36:	4293      	cmp	r3, r2
 8003b38:	bfc4      	itt	gt
 8003b3a:	1a9b      	subgt	r3, r3, r2
 8003b3c:	18ed      	addgt	r5, r5, r3
 8003b3e:	2600      	movs	r6, #0
 8003b40:	341a      	adds	r4, #26
 8003b42:	42b5      	cmp	r5, r6
 8003b44:	d11a      	bne.n	8003b7c <_printf_common+0xc8>
 8003b46:	2000      	movs	r0, #0
 8003b48:	e008      	b.n	8003b5c <_printf_common+0xa8>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	4652      	mov	r2, sl
 8003b4e:	4649      	mov	r1, r9
 8003b50:	4638      	mov	r0, r7
 8003b52:	47c0      	blx	r8
 8003b54:	3001      	adds	r0, #1
 8003b56:	d103      	bne.n	8003b60 <_printf_common+0xac>
 8003b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b60:	3501      	adds	r5, #1
 8003b62:	e7c6      	b.n	8003af2 <_printf_common+0x3e>
 8003b64:	18e1      	adds	r1, r4, r3
 8003b66:	1c5a      	adds	r2, r3, #1
 8003b68:	2030      	movs	r0, #48	; 0x30
 8003b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b6e:	4422      	add	r2, r4
 8003b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b78:	3302      	adds	r3, #2
 8003b7a:	e7c7      	b.n	8003b0c <_printf_common+0x58>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	4622      	mov	r2, r4
 8003b80:	4649      	mov	r1, r9
 8003b82:	4638      	mov	r0, r7
 8003b84:	47c0      	blx	r8
 8003b86:	3001      	adds	r0, #1
 8003b88:	d0e6      	beq.n	8003b58 <_printf_common+0xa4>
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7d9      	b.n	8003b42 <_printf_common+0x8e>
	...

08003b90 <_printf_i>:
 8003b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b94:	7e0f      	ldrb	r7, [r1, #24]
 8003b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b98:	2f78      	cmp	r7, #120	; 0x78
 8003b9a:	4691      	mov	r9, r2
 8003b9c:	4680      	mov	r8, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	469a      	mov	sl, r3
 8003ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003ba6:	d807      	bhi.n	8003bb8 <_printf_i+0x28>
 8003ba8:	2f62      	cmp	r7, #98	; 0x62
 8003baa:	d80a      	bhi.n	8003bc2 <_printf_i+0x32>
 8003bac:	2f00      	cmp	r7, #0
 8003bae:	f000 80d4 	beq.w	8003d5a <_printf_i+0x1ca>
 8003bb2:	2f58      	cmp	r7, #88	; 0x58
 8003bb4:	f000 80c0 	beq.w	8003d38 <_printf_i+0x1a8>
 8003bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bc0:	e03a      	b.n	8003c38 <_printf_i+0xa8>
 8003bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bc6:	2b15      	cmp	r3, #21
 8003bc8:	d8f6      	bhi.n	8003bb8 <_printf_i+0x28>
 8003bca:	a101      	add	r1, pc, #4	; (adr r1, 8003bd0 <_printf_i+0x40>)
 8003bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bd0:	08003c29 	.word	0x08003c29
 8003bd4:	08003c3d 	.word	0x08003c3d
 8003bd8:	08003bb9 	.word	0x08003bb9
 8003bdc:	08003bb9 	.word	0x08003bb9
 8003be0:	08003bb9 	.word	0x08003bb9
 8003be4:	08003bb9 	.word	0x08003bb9
 8003be8:	08003c3d 	.word	0x08003c3d
 8003bec:	08003bb9 	.word	0x08003bb9
 8003bf0:	08003bb9 	.word	0x08003bb9
 8003bf4:	08003bb9 	.word	0x08003bb9
 8003bf8:	08003bb9 	.word	0x08003bb9
 8003bfc:	08003d41 	.word	0x08003d41
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003cfb 	.word	0x08003cfb
 8003c08:	08003bb9 	.word	0x08003bb9
 8003c0c:	08003bb9 	.word	0x08003bb9
 8003c10:	08003d63 	.word	0x08003d63
 8003c14:	08003bb9 	.word	0x08003bb9
 8003c18:	08003c69 	.word	0x08003c69
 8003c1c:	08003bb9 	.word	0x08003bb9
 8003c20:	08003bb9 	.word	0x08003bb9
 8003c24:	08003d03 	.word	0x08003d03
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	1d1a      	adds	r2, r3, #4
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	602a      	str	r2, [r5, #0]
 8003c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e09f      	b.n	8003d7c <_printf_i+0x1ec>
 8003c3c:	6820      	ldr	r0, [r4, #0]
 8003c3e:	682b      	ldr	r3, [r5, #0]
 8003c40:	0607      	lsls	r7, r0, #24
 8003c42:	f103 0104 	add.w	r1, r3, #4
 8003c46:	6029      	str	r1, [r5, #0]
 8003c48:	d501      	bpl.n	8003c4e <_printf_i+0xbe>
 8003c4a:	681e      	ldr	r6, [r3, #0]
 8003c4c:	e003      	b.n	8003c56 <_printf_i+0xc6>
 8003c4e:	0646      	lsls	r6, r0, #25
 8003c50:	d5fb      	bpl.n	8003c4a <_printf_i+0xba>
 8003c52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c56:	2e00      	cmp	r6, #0
 8003c58:	da03      	bge.n	8003c62 <_printf_i+0xd2>
 8003c5a:	232d      	movs	r3, #45	; 0x2d
 8003c5c:	4276      	negs	r6, r6
 8003c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c62:	485a      	ldr	r0, [pc, #360]	; (8003dcc <_printf_i+0x23c>)
 8003c64:	230a      	movs	r3, #10
 8003c66:	e012      	b.n	8003c8e <_printf_i+0xfe>
 8003c68:	682b      	ldr	r3, [r5, #0]
 8003c6a:	6820      	ldr	r0, [r4, #0]
 8003c6c:	1d19      	adds	r1, r3, #4
 8003c6e:	6029      	str	r1, [r5, #0]
 8003c70:	0605      	lsls	r5, r0, #24
 8003c72:	d501      	bpl.n	8003c78 <_printf_i+0xe8>
 8003c74:	681e      	ldr	r6, [r3, #0]
 8003c76:	e002      	b.n	8003c7e <_printf_i+0xee>
 8003c78:	0641      	lsls	r1, r0, #25
 8003c7a:	d5fb      	bpl.n	8003c74 <_printf_i+0xe4>
 8003c7c:	881e      	ldrh	r6, [r3, #0]
 8003c7e:	4853      	ldr	r0, [pc, #332]	; (8003dcc <_printf_i+0x23c>)
 8003c80:	2f6f      	cmp	r7, #111	; 0x6f
 8003c82:	bf0c      	ite	eq
 8003c84:	2308      	moveq	r3, #8
 8003c86:	230a      	movne	r3, #10
 8003c88:	2100      	movs	r1, #0
 8003c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c8e:	6865      	ldr	r5, [r4, #4]
 8003c90:	60a5      	str	r5, [r4, #8]
 8003c92:	2d00      	cmp	r5, #0
 8003c94:	bfa2      	ittt	ge
 8003c96:	6821      	ldrge	r1, [r4, #0]
 8003c98:	f021 0104 	bicge.w	r1, r1, #4
 8003c9c:	6021      	strge	r1, [r4, #0]
 8003c9e:	b90e      	cbnz	r6, 8003ca4 <_printf_i+0x114>
 8003ca0:	2d00      	cmp	r5, #0
 8003ca2:	d04b      	beq.n	8003d3c <_printf_i+0x1ac>
 8003ca4:	4615      	mov	r5, r2
 8003ca6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003caa:	fb03 6711 	mls	r7, r3, r1, r6
 8003cae:	5dc7      	ldrb	r7, [r0, r7]
 8003cb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003cb4:	4637      	mov	r7, r6
 8003cb6:	42bb      	cmp	r3, r7
 8003cb8:	460e      	mov	r6, r1
 8003cba:	d9f4      	bls.n	8003ca6 <_printf_i+0x116>
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d10b      	bne.n	8003cd8 <_printf_i+0x148>
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	07de      	lsls	r6, r3, #31
 8003cc4:	d508      	bpl.n	8003cd8 <_printf_i+0x148>
 8003cc6:	6923      	ldr	r3, [r4, #16]
 8003cc8:	6861      	ldr	r1, [r4, #4]
 8003cca:	4299      	cmp	r1, r3
 8003ccc:	bfde      	ittt	le
 8003cce:	2330      	movle	r3, #48	; 0x30
 8003cd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cd4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003cd8:	1b52      	subs	r2, r2, r5
 8003cda:	6122      	str	r2, [r4, #16]
 8003cdc:	f8cd a000 	str.w	sl, [sp]
 8003ce0:	464b      	mov	r3, r9
 8003ce2:	aa03      	add	r2, sp, #12
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	4640      	mov	r0, r8
 8003ce8:	f7ff fee4 	bl	8003ab4 <_printf_common>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d14a      	bne.n	8003d86 <_printf_i+0x1f6>
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cf4:	b004      	add	sp, #16
 8003cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfa:	6823      	ldr	r3, [r4, #0]
 8003cfc:	f043 0320 	orr.w	r3, r3, #32
 8003d00:	6023      	str	r3, [r4, #0]
 8003d02:	4833      	ldr	r0, [pc, #204]	; (8003dd0 <_printf_i+0x240>)
 8003d04:	2778      	movs	r7, #120	; 0x78
 8003d06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	6829      	ldr	r1, [r5, #0]
 8003d0e:	061f      	lsls	r7, r3, #24
 8003d10:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d14:	d402      	bmi.n	8003d1c <_printf_i+0x18c>
 8003d16:	065f      	lsls	r7, r3, #25
 8003d18:	bf48      	it	mi
 8003d1a:	b2b6      	uxthmi	r6, r6
 8003d1c:	07df      	lsls	r7, r3, #31
 8003d1e:	bf48      	it	mi
 8003d20:	f043 0320 	orrmi.w	r3, r3, #32
 8003d24:	6029      	str	r1, [r5, #0]
 8003d26:	bf48      	it	mi
 8003d28:	6023      	strmi	r3, [r4, #0]
 8003d2a:	b91e      	cbnz	r6, 8003d34 <_printf_i+0x1a4>
 8003d2c:	6823      	ldr	r3, [r4, #0]
 8003d2e:	f023 0320 	bic.w	r3, r3, #32
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	2310      	movs	r3, #16
 8003d36:	e7a7      	b.n	8003c88 <_printf_i+0xf8>
 8003d38:	4824      	ldr	r0, [pc, #144]	; (8003dcc <_printf_i+0x23c>)
 8003d3a:	e7e4      	b.n	8003d06 <_printf_i+0x176>
 8003d3c:	4615      	mov	r5, r2
 8003d3e:	e7bd      	b.n	8003cbc <_printf_i+0x12c>
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	6826      	ldr	r6, [r4, #0]
 8003d44:	6961      	ldr	r1, [r4, #20]
 8003d46:	1d18      	adds	r0, r3, #4
 8003d48:	6028      	str	r0, [r5, #0]
 8003d4a:	0635      	lsls	r5, r6, #24
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	d501      	bpl.n	8003d54 <_printf_i+0x1c4>
 8003d50:	6019      	str	r1, [r3, #0]
 8003d52:	e002      	b.n	8003d5a <_printf_i+0x1ca>
 8003d54:	0670      	lsls	r0, r6, #25
 8003d56:	d5fb      	bpl.n	8003d50 <_printf_i+0x1c0>
 8003d58:	8019      	strh	r1, [r3, #0]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	6123      	str	r3, [r4, #16]
 8003d5e:	4615      	mov	r5, r2
 8003d60:	e7bc      	b.n	8003cdc <_printf_i+0x14c>
 8003d62:	682b      	ldr	r3, [r5, #0]
 8003d64:	1d1a      	adds	r2, r3, #4
 8003d66:	602a      	str	r2, [r5, #0]
 8003d68:	681d      	ldr	r5, [r3, #0]
 8003d6a:	6862      	ldr	r2, [r4, #4]
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4628      	mov	r0, r5
 8003d70:	f7fc fa2e 	bl	80001d0 <memchr>
 8003d74:	b108      	cbz	r0, 8003d7a <_printf_i+0x1ea>
 8003d76:	1b40      	subs	r0, r0, r5
 8003d78:	6060      	str	r0, [r4, #4]
 8003d7a:	6863      	ldr	r3, [r4, #4]
 8003d7c:	6123      	str	r3, [r4, #16]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d84:	e7aa      	b.n	8003cdc <_printf_i+0x14c>
 8003d86:	6923      	ldr	r3, [r4, #16]
 8003d88:	462a      	mov	r2, r5
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	4640      	mov	r0, r8
 8003d8e:	47d0      	blx	sl
 8003d90:	3001      	adds	r0, #1
 8003d92:	d0ad      	beq.n	8003cf0 <_printf_i+0x160>
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	079b      	lsls	r3, r3, #30
 8003d98:	d413      	bmi.n	8003dc2 <_printf_i+0x232>
 8003d9a:	68e0      	ldr	r0, [r4, #12]
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	4298      	cmp	r0, r3
 8003da0:	bfb8      	it	lt
 8003da2:	4618      	movlt	r0, r3
 8003da4:	e7a6      	b.n	8003cf4 <_printf_i+0x164>
 8003da6:	2301      	movs	r3, #1
 8003da8:	4632      	mov	r2, r6
 8003daa:	4649      	mov	r1, r9
 8003dac:	4640      	mov	r0, r8
 8003dae:	47d0      	blx	sl
 8003db0:	3001      	adds	r0, #1
 8003db2:	d09d      	beq.n	8003cf0 <_printf_i+0x160>
 8003db4:	3501      	adds	r5, #1
 8003db6:	68e3      	ldr	r3, [r4, #12]
 8003db8:	9903      	ldr	r1, [sp, #12]
 8003dba:	1a5b      	subs	r3, r3, r1
 8003dbc:	42ab      	cmp	r3, r5
 8003dbe:	dcf2      	bgt.n	8003da6 <_printf_i+0x216>
 8003dc0:	e7eb      	b.n	8003d9a <_printf_i+0x20a>
 8003dc2:	2500      	movs	r5, #0
 8003dc4:	f104 0619 	add.w	r6, r4, #25
 8003dc8:	e7f5      	b.n	8003db6 <_printf_i+0x226>
 8003dca:	bf00      	nop
 8003dcc:	08006105 	.word	0x08006105
 8003dd0:	08006116 	.word	0x08006116

08003dd4 <std>:
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	b510      	push	{r4, lr}
 8003dd8:	4604      	mov	r4, r0
 8003dda:	e9c0 3300 	strd	r3, r3, [r0]
 8003dde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003de2:	6083      	str	r3, [r0, #8]
 8003de4:	8181      	strh	r1, [r0, #12]
 8003de6:	6643      	str	r3, [r0, #100]	; 0x64
 8003de8:	81c2      	strh	r2, [r0, #14]
 8003dea:	6183      	str	r3, [r0, #24]
 8003dec:	4619      	mov	r1, r3
 8003dee:	2208      	movs	r2, #8
 8003df0:	305c      	adds	r0, #92	; 0x5c
 8003df2:	f000 f914 	bl	800401e <memset>
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <std+0x58>)
 8003df8:	6263      	str	r3, [r4, #36]	; 0x24
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	; (8003e30 <std+0x5c>)
 8003dfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dfe:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <std+0x60>)
 8003e00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e02:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <std+0x64>)
 8003e04:	6323      	str	r3, [r4, #48]	; 0x30
 8003e06:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <std+0x68>)
 8003e08:	6224      	str	r4, [r4, #32]
 8003e0a:	429c      	cmp	r4, r3
 8003e0c:	d006      	beq.n	8003e1c <std+0x48>
 8003e0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e12:	4294      	cmp	r4, r2
 8003e14:	d002      	beq.n	8003e1c <std+0x48>
 8003e16:	33d0      	adds	r3, #208	; 0xd0
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d105      	bne.n	8003e28 <std+0x54>
 8003e1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e24:	f000 b988 	b.w	8004138 <__retarget_lock_init_recursive>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	bf00      	nop
 8003e2c:	08003f99 	.word	0x08003f99
 8003e30:	08003fbb 	.word	0x08003fbb
 8003e34:	08003ff3 	.word	0x08003ff3
 8003e38:	08004017 	.word	0x08004017
 8003e3c:	20000290 	.word	0x20000290

08003e40 <stdio_exit_handler>:
 8003e40:	4a02      	ldr	r2, [pc, #8]	; (8003e4c <stdio_exit_handler+0xc>)
 8003e42:	4903      	ldr	r1, [pc, #12]	; (8003e50 <stdio_exit_handler+0x10>)
 8003e44:	4803      	ldr	r0, [pc, #12]	; (8003e54 <stdio_exit_handler+0x14>)
 8003e46:	f000 b869 	b.w	8003f1c <_fwalk_sglue>
 8003e4a:	bf00      	nop
 8003e4c:	20000010 	.word	0x20000010
 8003e50:	08005981 	.word	0x08005981
 8003e54:	2000001c 	.word	0x2000001c

08003e58 <cleanup_stdio>:
 8003e58:	6841      	ldr	r1, [r0, #4]
 8003e5a:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <cleanup_stdio+0x34>)
 8003e5c:	4299      	cmp	r1, r3
 8003e5e:	b510      	push	{r4, lr}
 8003e60:	4604      	mov	r4, r0
 8003e62:	d001      	beq.n	8003e68 <cleanup_stdio+0x10>
 8003e64:	f001 fd8c 	bl	8005980 <_fflush_r>
 8003e68:	68a1      	ldr	r1, [r4, #8]
 8003e6a:	4b09      	ldr	r3, [pc, #36]	; (8003e90 <cleanup_stdio+0x38>)
 8003e6c:	4299      	cmp	r1, r3
 8003e6e:	d002      	beq.n	8003e76 <cleanup_stdio+0x1e>
 8003e70:	4620      	mov	r0, r4
 8003e72:	f001 fd85 	bl	8005980 <_fflush_r>
 8003e76:	68e1      	ldr	r1, [r4, #12]
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <cleanup_stdio+0x3c>)
 8003e7a:	4299      	cmp	r1, r3
 8003e7c:	d004      	beq.n	8003e88 <cleanup_stdio+0x30>
 8003e7e:	4620      	mov	r0, r4
 8003e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e84:	f001 bd7c 	b.w	8005980 <_fflush_r>
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000290 	.word	0x20000290
 8003e90:	200002f8 	.word	0x200002f8
 8003e94:	20000360 	.word	0x20000360

08003e98 <global_stdio_init.part.0>:
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <global_stdio_init.part.0+0x30>)
 8003e9c:	4c0b      	ldr	r4, [pc, #44]	; (8003ecc <global_stdio_init.part.0+0x34>)
 8003e9e:	4a0c      	ldr	r2, [pc, #48]	; (8003ed0 <global_stdio_init.part.0+0x38>)
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	f7ff ff94 	bl	8003dd4 <std>
 8003eac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	2109      	movs	r1, #9
 8003eb4:	f7ff ff8e 	bl	8003dd4 <std>
 8003eb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ebc:	2202      	movs	r2, #2
 8003ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ec2:	2112      	movs	r1, #18
 8003ec4:	f7ff bf86 	b.w	8003dd4 <std>
 8003ec8:	200003c8 	.word	0x200003c8
 8003ecc:	20000290 	.word	0x20000290
 8003ed0:	08003e41 	.word	0x08003e41

08003ed4 <__sfp_lock_acquire>:
 8003ed4:	4801      	ldr	r0, [pc, #4]	; (8003edc <__sfp_lock_acquire+0x8>)
 8003ed6:	f000 b930 	b.w	800413a <__retarget_lock_acquire_recursive>
 8003eda:	bf00      	nop
 8003edc:	200003d1 	.word	0x200003d1

08003ee0 <__sfp_lock_release>:
 8003ee0:	4801      	ldr	r0, [pc, #4]	; (8003ee8 <__sfp_lock_release+0x8>)
 8003ee2:	f000 b92b 	b.w	800413c <__retarget_lock_release_recursive>
 8003ee6:	bf00      	nop
 8003ee8:	200003d1 	.word	0x200003d1

08003eec <__sinit>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	4604      	mov	r4, r0
 8003ef0:	f7ff fff0 	bl	8003ed4 <__sfp_lock_acquire>
 8003ef4:	6a23      	ldr	r3, [r4, #32]
 8003ef6:	b11b      	cbz	r3, 8003f00 <__sinit+0x14>
 8003ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003efc:	f7ff bff0 	b.w	8003ee0 <__sfp_lock_release>
 8003f00:	4b04      	ldr	r3, [pc, #16]	; (8003f14 <__sinit+0x28>)
 8003f02:	6223      	str	r3, [r4, #32]
 8003f04:	4b04      	ldr	r3, [pc, #16]	; (8003f18 <__sinit+0x2c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f5      	bne.n	8003ef8 <__sinit+0xc>
 8003f0c:	f7ff ffc4 	bl	8003e98 <global_stdio_init.part.0>
 8003f10:	e7f2      	b.n	8003ef8 <__sinit+0xc>
 8003f12:	bf00      	nop
 8003f14:	08003e59 	.word	0x08003e59
 8003f18:	200003c8 	.word	0x200003c8

08003f1c <_fwalk_sglue>:
 8003f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f20:	4607      	mov	r7, r0
 8003f22:	4688      	mov	r8, r1
 8003f24:	4614      	mov	r4, r2
 8003f26:	2600      	movs	r6, #0
 8003f28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f2c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f30:	d505      	bpl.n	8003f3e <_fwalk_sglue+0x22>
 8003f32:	6824      	ldr	r4, [r4, #0]
 8003f34:	2c00      	cmp	r4, #0
 8003f36:	d1f7      	bne.n	8003f28 <_fwalk_sglue+0xc>
 8003f38:	4630      	mov	r0, r6
 8003f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f3e:	89ab      	ldrh	r3, [r5, #12]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d907      	bls.n	8003f54 <_fwalk_sglue+0x38>
 8003f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	d003      	beq.n	8003f54 <_fwalk_sglue+0x38>
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	4638      	mov	r0, r7
 8003f50:	47c0      	blx	r8
 8003f52:	4306      	orrs	r6, r0
 8003f54:	3568      	adds	r5, #104	; 0x68
 8003f56:	e7e9      	b.n	8003f2c <_fwalk_sglue+0x10>

08003f58 <siprintf>:
 8003f58:	b40e      	push	{r1, r2, r3}
 8003f5a:	b500      	push	{lr}
 8003f5c:	b09c      	sub	sp, #112	; 0x70
 8003f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003f60:	9002      	str	r0, [sp, #8]
 8003f62:	9006      	str	r0, [sp, #24]
 8003f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f68:	4809      	ldr	r0, [pc, #36]	; (8003f90 <siprintf+0x38>)
 8003f6a:	9107      	str	r1, [sp, #28]
 8003f6c:	9104      	str	r1, [sp, #16]
 8003f6e:	4909      	ldr	r1, [pc, #36]	; (8003f94 <siprintf+0x3c>)
 8003f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f74:	9105      	str	r1, [sp, #20]
 8003f76:	6800      	ldr	r0, [r0, #0]
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	a902      	add	r1, sp, #8
 8003f7c:	f001 fb7c 	bl	8005678 <_svfiprintf_r>
 8003f80:	9b02      	ldr	r3, [sp, #8]
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	b01c      	add	sp, #112	; 0x70
 8003f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f8c:	b003      	add	sp, #12
 8003f8e:	4770      	bx	lr
 8003f90:	20000068 	.word	0x20000068
 8003f94:	ffff0208 	.word	0xffff0208

08003f98 <__sread>:
 8003f98:	b510      	push	{r4, lr}
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa0:	f000 f86c 	bl	800407c <_read_r>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	bfab      	itete	ge
 8003fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003faa:	89a3      	ldrhlt	r3, [r4, #12]
 8003fac:	181b      	addge	r3, r3, r0
 8003fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fb2:	bfac      	ite	ge
 8003fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fb6:	81a3      	strhlt	r3, [r4, #12]
 8003fb8:	bd10      	pop	{r4, pc}

08003fba <__swrite>:
 8003fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fbe:	461f      	mov	r7, r3
 8003fc0:	898b      	ldrh	r3, [r1, #12]
 8003fc2:	05db      	lsls	r3, r3, #23
 8003fc4:	4605      	mov	r5, r0
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	4616      	mov	r6, r2
 8003fca:	d505      	bpl.n	8003fd8 <__swrite+0x1e>
 8003fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f000 f840 	bl	8004058 <_lseek_r>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	4632      	mov	r2, r6
 8003fe6:	463b      	mov	r3, r7
 8003fe8:	4628      	mov	r0, r5
 8003fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003fee:	f000 b867 	b.w	80040c0 <_write_r>

08003ff2 <__sseek>:
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffa:	f000 f82d 	bl	8004058 <_lseek_r>
 8003ffe:	1c43      	adds	r3, r0, #1
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	bf15      	itete	ne
 8004004:	6560      	strne	r0, [r4, #84]	; 0x54
 8004006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800400a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800400e:	81a3      	strheq	r3, [r4, #12]
 8004010:	bf18      	it	ne
 8004012:	81a3      	strhne	r3, [r4, #12]
 8004014:	bd10      	pop	{r4, pc}

08004016 <__sclose>:
 8004016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800401a:	f000 b80d 	b.w	8004038 <_close_r>

0800401e <memset>:
 800401e:	4402      	add	r2, r0
 8004020:	4603      	mov	r3, r0
 8004022:	4293      	cmp	r3, r2
 8004024:	d100      	bne.n	8004028 <memset+0xa>
 8004026:	4770      	bx	lr
 8004028:	f803 1b01 	strb.w	r1, [r3], #1
 800402c:	e7f9      	b.n	8004022 <memset+0x4>
	...

08004030 <_localeconv_r>:
 8004030:	4800      	ldr	r0, [pc, #0]	; (8004034 <_localeconv_r+0x4>)
 8004032:	4770      	bx	lr
 8004034:	2000015c 	.word	0x2000015c

08004038 <_close_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	4d06      	ldr	r5, [pc, #24]	; (8004054 <_close_r+0x1c>)
 800403c:	2300      	movs	r3, #0
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	f7fd fdc7 	bl	8001bd6 <_close>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_close_r+0x1a>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_close_r+0x1a>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	200003cc 	.word	0x200003cc

08004058 <_lseek_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4d07      	ldr	r5, [pc, #28]	; (8004078 <_lseek_r+0x20>)
 800405c:	4604      	mov	r4, r0
 800405e:	4608      	mov	r0, r1
 8004060:	4611      	mov	r1, r2
 8004062:	2200      	movs	r2, #0
 8004064:	602a      	str	r2, [r5, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	f7fd fddc 	bl	8001c24 <_lseek>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d102      	bne.n	8004076 <_lseek_r+0x1e>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	b103      	cbz	r3, 8004076 <_lseek_r+0x1e>
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	200003cc 	.word	0x200003cc

0800407c <_read_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4d07      	ldr	r5, [pc, #28]	; (800409c <_read_r+0x20>)
 8004080:	4604      	mov	r4, r0
 8004082:	4608      	mov	r0, r1
 8004084:	4611      	mov	r1, r2
 8004086:	2200      	movs	r2, #0
 8004088:	602a      	str	r2, [r5, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	f7fd fd6a 	bl	8001b64 <_read>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_read_r+0x1e>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_read_r+0x1e>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200003cc 	.word	0x200003cc

080040a0 <_sbrk_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4d06      	ldr	r5, [pc, #24]	; (80040bc <_sbrk_r+0x1c>)
 80040a4:	2300      	movs	r3, #0
 80040a6:	4604      	mov	r4, r0
 80040a8:	4608      	mov	r0, r1
 80040aa:	602b      	str	r3, [r5, #0]
 80040ac:	f7fd fdc8 	bl	8001c40 <_sbrk>
 80040b0:	1c43      	adds	r3, r0, #1
 80040b2:	d102      	bne.n	80040ba <_sbrk_r+0x1a>
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	b103      	cbz	r3, 80040ba <_sbrk_r+0x1a>
 80040b8:	6023      	str	r3, [r4, #0]
 80040ba:	bd38      	pop	{r3, r4, r5, pc}
 80040bc:	200003cc 	.word	0x200003cc

080040c0 <_write_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	4d07      	ldr	r5, [pc, #28]	; (80040e0 <_write_r+0x20>)
 80040c4:	4604      	mov	r4, r0
 80040c6:	4608      	mov	r0, r1
 80040c8:	4611      	mov	r1, r2
 80040ca:	2200      	movs	r2, #0
 80040cc:	602a      	str	r2, [r5, #0]
 80040ce:	461a      	mov	r2, r3
 80040d0:	f7fd fd65 	bl	8001b9e <_write>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_write_r+0x1e>
 80040d8:	682b      	ldr	r3, [r5, #0]
 80040da:	b103      	cbz	r3, 80040de <_write_r+0x1e>
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200003cc 	.word	0x200003cc

080040e4 <__errno>:
 80040e4:	4b01      	ldr	r3, [pc, #4]	; (80040ec <__errno+0x8>)
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	4770      	bx	lr
 80040ea:	bf00      	nop
 80040ec:	20000068 	.word	0x20000068

080040f0 <__libc_init_array>:
 80040f0:	b570      	push	{r4, r5, r6, lr}
 80040f2:	4d0d      	ldr	r5, [pc, #52]	; (8004128 <__libc_init_array+0x38>)
 80040f4:	4c0d      	ldr	r4, [pc, #52]	; (800412c <__libc_init_array+0x3c>)
 80040f6:	1b64      	subs	r4, r4, r5
 80040f8:	10a4      	asrs	r4, r4, #2
 80040fa:	2600      	movs	r6, #0
 80040fc:	42a6      	cmp	r6, r4
 80040fe:	d109      	bne.n	8004114 <__libc_init_array+0x24>
 8004100:	4d0b      	ldr	r5, [pc, #44]	; (8004130 <__libc_init_array+0x40>)
 8004102:	4c0c      	ldr	r4, [pc, #48]	; (8004134 <__libc_init_array+0x44>)
 8004104:	f001 ffd0 	bl	80060a8 <_init>
 8004108:	1b64      	subs	r4, r4, r5
 800410a:	10a4      	asrs	r4, r4, #2
 800410c:	2600      	movs	r6, #0
 800410e:	42a6      	cmp	r6, r4
 8004110:	d105      	bne.n	800411e <__libc_init_array+0x2e>
 8004112:	bd70      	pop	{r4, r5, r6, pc}
 8004114:	f855 3b04 	ldr.w	r3, [r5], #4
 8004118:	4798      	blx	r3
 800411a:	3601      	adds	r6, #1
 800411c:	e7ee      	b.n	80040fc <__libc_init_array+0xc>
 800411e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004122:	4798      	blx	r3
 8004124:	3601      	adds	r6, #1
 8004126:	e7f2      	b.n	800410e <__libc_init_array+0x1e>
 8004128:	08006464 	.word	0x08006464
 800412c:	08006464 	.word	0x08006464
 8004130:	08006464 	.word	0x08006464
 8004134:	08006468 	.word	0x08006468

08004138 <__retarget_lock_init_recursive>:
 8004138:	4770      	bx	lr

0800413a <__retarget_lock_acquire_recursive>:
 800413a:	4770      	bx	lr

0800413c <__retarget_lock_release_recursive>:
 800413c:	4770      	bx	lr

0800413e <quorem>:
 800413e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004142:	6903      	ldr	r3, [r0, #16]
 8004144:	690c      	ldr	r4, [r1, #16]
 8004146:	42a3      	cmp	r3, r4
 8004148:	4607      	mov	r7, r0
 800414a:	db7e      	blt.n	800424a <quorem+0x10c>
 800414c:	3c01      	subs	r4, #1
 800414e:	f101 0814 	add.w	r8, r1, #20
 8004152:	f100 0514 	add.w	r5, r0, #20
 8004156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004164:	3301      	adds	r3, #1
 8004166:	429a      	cmp	r2, r3
 8004168:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800416c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004170:	fbb2 f6f3 	udiv	r6, r2, r3
 8004174:	d331      	bcc.n	80041da <quorem+0x9c>
 8004176:	f04f 0e00 	mov.w	lr, #0
 800417a:	4640      	mov	r0, r8
 800417c:	46ac      	mov	ip, r5
 800417e:	46f2      	mov	sl, lr
 8004180:	f850 2b04 	ldr.w	r2, [r0], #4
 8004184:	b293      	uxth	r3, r2
 8004186:	fb06 e303 	mla	r3, r6, r3, lr
 800418a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800418e:	0c1a      	lsrs	r2, r3, #16
 8004190:	b29b      	uxth	r3, r3
 8004192:	ebaa 0303 	sub.w	r3, sl, r3
 8004196:	f8dc a000 	ldr.w	sl, [ip]
 800419a:	fa13 f38a 	uxtah	r3, r3, sl
 800419e:	fb06 220e 	mla	r2, r6, lr, r2
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	9b00      	ldr	r3, [sp, #0]
 80041a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041aa:	b292      	uxth	r2, r2
 80041ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80041b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80041b8:	4581      	cmp	r9, r0
 80041ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041be:	f84c 3b04 	str.w	r3, [ip], #4
 80041c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041c6:	d2db      	bcs.n	8004180 <quorem+0x42>
 80041c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80041cc:	b92b      	cbnz	r3, 80041da <quorem+0x9c>
 80041ce:	9b01      	ldr	r3, [sp, #4]
 80041d0:	3b04      	subs	r3, #4
 80041d2:	429d      	cmp	r5, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	d32c      	bcc.n	8004232 <quorem+0xf4>
 80041d8:	613c      	str	r4, [r7, #16]
 80041da:	4638      	mov	r0, r7
 80041dc:	f001 f8f2 	bl	80053c4 <__mcmp>
 80041e0:	2800      	cmp	r0, #0
 80041e2:	db22      	blt.n	800422a <quorem+0xec>
 80041e4:	3601      	adds	r6, #1
 80041e6:	4629      	mov	r1, r5
 80041e8:	2000      	movs	r0, #0
 80041ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80041ee:	f8d1 c000 	ldr.w	ip, [r1]
 80041f2:	b293      	uxth	r3, r2
 80041f4:	1ac3      	subs	r3, r0, r3
 80041f6:	0c12      	lsrs	r2, r2, #16
 80041f8:	fa13 f38c 	uxtah	r3, r3, ip
 80041fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004204:	b29b      	uxth	r3, r3
 8004206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800420a:	45c1      	cmp	r9, r8
 800420c:	f841 3b04 	str.w	r3, [r1], #4
 8004210:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004214:	d2e9      	bcs.n	80041ea <quorem+0xac>
 8004216:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800421a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800421e:	b922      	cbnz	r2, 800422a <quorem+0xec>
 8004220:	3b04      	subs	r3, #4
 8004222:	429d      	cmp	r5, r3
 8004224:	461a      	mov	r2, r3
 8004226:	d30a      	bcc.n	800423e <quorem+0x100>
 8004228:	613c      	str	r4, [r7, #16]
 800422a:	4630      	mov	r0, r6
 800422c:	b003      	add	sp, #12
 800422e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	3b04      	subs	r3, #4
 8004236:	2a00      	cmp	r2, #0
 8004238:	d1ce      	bne.n	80041d8 <quorem+0x9a>
 800423a:	3c01      	subs	r4, #1
 800423c:	e7c9      	b.n	80041d2 <quorem+0x94>
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	3b04      	subs	r3, #4
 8004242:	2a00      	cmp	r2, #0
 8004244:	d1f0      	bne.n	8004228 <quorem+0xea>
 8004246:	3c01      	subs	r4, #1
 8004248:	e7eb      	b.n	8004222 <quorem+0xe4>
 800424a:	2000      	movs	r0, #0
 800424c:	e7ee      	b.n	800422c <quorem+0xee>
	...

08004250 <_dtoa_r>:
 8004250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004254:	ed2d 8b04 	vpush	{d8-d9}
 8004258:	69c5      	ldr	r5, [r0, #28]
 800425a:	b093      	sub	sp, #76	; 0x4c
 800425c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004260:	ec57 6b10 	vmov	r6, r7, d0
 8004264:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004268:	9107      	str	r1, [sp, #28]
 800426a:	4604      	mov	r4, r0
 800426c:	920a      	str	r2, [sp, #40]	; 0x28
 800426e:	930d      	str	r3, [sp, #52]	; 0x34
 8004270:	b975      	cbnz	r5, 8004290 <_dtoa_r+0x40>
 8004272:	2010      	movs	r0, #16
 8004274:	f7ff f88c 	bl	8003390 <malloc>
 8004278:	4602      	mov	r2, r0
 800427a:	61e0      	str	r0, [r4, #28]
 800427c:	b920      	cbnz	r0, 8004288 <_dtoa_r+0x38>
 800427e:	4bae      	ldr	r3, [pc, #696]	; (8004538 <_dtoa_r+0x2e8>)
 8004280:	21ef      	movs	r1, #239	; 0xef
 8004282:	48ae      	ldr	r0, [pc, #696]	; (800453c <_dtoa_r+0x2ec>)
 8004284:	f001 fbcc 	bl	8005a20 <__assert_func>
 8004288:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800428c:	6005      	str	r5, [r0, #0]
 800428e:	60c5      	str	r5, [r0, #12]
 8004290:	69e3      	ldr	r3, [r4, #28]
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	b151      	cbz	r1, 80042ac <_dtoa_r+0x5c>
 8004296:	685a      	ldr	r2, [r3, #4]
 8004298:	604a      	str	r2, [r1, #4]
 800429a:	2301      	movs	r3, #1
 800429c:	4093      	lsls	r3, r2
 800429e:	608b      	str	r3, [r1, #8]
 80042a0:	4620      	mov	r0, r4
 80042a2:	f000 fe53 	bl	8004f4c <_Bfree>
 80042a6:	69e3      	ldr	r3, [r4, #28]
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	1e3b      	subs	r3, r7, #0
 80042ae:	bfbb      	ittet	lt
 80042b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042b4:	9303      	strlt	r3, [sp, #12]
 80042b6:	2300      	movge	r3, #0
 80042b8:	2201      	movlt	r2, #1
 80042ba:	bfac      	ite	ge
 80042bc:	f8c8 3000 	strge.w	r3, [r8]
 80042c0:	f8c8 2000 	strlt.w	r2, [r8]
 80042c4:	4b9e      	ldr	r3, [pc, #632]	; (8004540 <_dtoa_r+0x2f0>)
 80042c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80042ca:	ea33 0308 	bics.w	r3, r3, r8
 80042ce:	d11b      	bne.n	8004308 <_dtoa_r+0xb8>
 80042d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80042d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80042dc:	4333      	orrs	r3, r6
 80042de:	f000 8593 	beq.w	8004e08 <_dtoa_r+0xbb8>
 80042e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042e4:	b963      	cbnz	r3, 8004300 <_dtoa_r+0xb0>
 80042e6:	4b97      	ldr	r3, [pc, #604]	; (8004544 <_dtoa_r+0x2f4>)
 80042e8:	e027      	b.n	800433a <_dtoa_r+0xea>
 80042ea:	4b97      	ldr	r3, [pc, #604]	; (8004548 <_dtoa_r+0x2f8>)
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	9800      	ldr	r0, [sp, #0]
 80042f6:	b013      	add	sp, #76	; 0x4c
 80042f8:	ecbd 8b04 	vpop	{d8-d9}
 80042fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004300:	4b90      	ldr	r3, [pc, #576]	; (8004544 <_dtoa_r+0x2f4>)
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	3303      	adds	r3, #3
 8004306:	e7f3      	b.n	80042f0 <_dtoa_r+0xa0>
 8004308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800430c:	2200      	movs	r2, #0
 800430e:	ec51 0b17 	vmov	r0, r1, d7
 8004312:	eeb0 8a47 	vmov.f32	s16, s14
 8004316:	eef0 8a67 	vmov.f32	s17, s15
 800431a:	2300      	movs	r3, #0
 800431c:	f7fc fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8004320:	4681      	mov	r9, r0
 8004322:	b160      	cbz	r0, 800433e <_dtoa_r+0xee>
 8004324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004326:	2301      	movs	r3, #1
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8568 	beq.w	8004e02 <_dtoa_r+0xbb2>
 8004332:	4b86      	ldr	r3, [pc, #536]	; (800454c <_dtoa_r+0x2fc>)
 8004334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	e7da      	b.n	80042f4 <_dtoa_r+0xa4>
 800433e:	aa10      	add	r2, sp, #64	; 0x40
 8004340:	a911      	add	r1, sp, #68	; 0x44
 8004342:	4620      	mov	r0, r4
 8004344:	eeb0 0a48 	vmov.f32	s0, s16
 8004348:	eef0 0a68 	vmov.f32	s1, s17
 800434c:	f001 f8e0 	bl	8005510 <__d2b>
 8004350:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004354:	4682      	mov	sl, r0
 8004356:	2d00      	cmp	r5, #0
 8004358:	d07f      	beq.n	800445a <_dtoa_r+0x20a>
 800435a:	ee18 3a90 	vmov	r3, s17
 800435e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004362:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004366:	ec51 0b18 	vmov	r0, r1, d8
 800436a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800436e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004372:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004376:	4619      	mov	r1, r3
 8004378:	2200      	movs	r2, #0
 800437a:	4b75      	ldr	r3, [pc, #468]	; (8004550 <_dtoa_r+0x300>)
 800437c:	f7fb ff84 	bl	8000288 <__aeabi_dsub>
 8004380:	a367      	add	r3, pc, #412	; (adr r3, 8004520 <_dtoa_r+0x2d0>)
 8004382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004386:	f7fc f937 	bl	80005f8 <__aeabi_dmul>
 800438a:	a367      	add	r3, pc, #412	; (adr r3, 8004528 <_dtoa_r+0x2d8>)
 800438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004390:	f7fb ff7c 	bl	800028c <__adddf3>
 8004394:	4606      	mov	r6, r0
 8004396:	4628      	mov	r0, r5
 8004398:	460f      	mov	r7, r1
 800439a:	f7fc f8c3 	bl	8000524 <__aeabi_i2d>
 800439e:	a364      	add	r3, pc, #400	; (adr r3, 8004530 <_dtoa_r+0x2e0>)
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f7fc f928 	bl	80005f8 <__aeabi_dmul>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4630      	mov	r0, r6
 80043ae:	4639      	mov	r1, r7
 80043b0:	f7fb ff6c 	bl	800028c <__adddf3>
 80043b4:	4606      	mov	r6, r0
 80043b6:	460f      	mov	r7, r1
 80043b8:	f7fc fbce 	bl	8000b58 <__aeabi_d2iz>
 80043bc:	2200      	movs	r2, #0
 80043be:	4683      	mov	fp, r0
 80043c0:	2300      	movs	r3, #0
 80043c2:	4630      	mov	r0, r6
 80043c4:	4639      	mov	r1, r7
 80043c6:	f7fc fb89 	bl	8000adc <__aeabi_dcmplt>
 80043ca:	b148      	cbz	r0, 80043e0 <_dtoa_r+0x190>
 80043cc:	4658      	mov	r0, fp
 80043ce:	f7fc f8a9 	bl	8000524 <__aeabi_i2d>
 80043d2:	4632      	mov	r2, r6
 80043d4:	463b      	mov	r3, r7
 80043d6:	f7fc fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80043da:	b908      	cbnz	r0, 80043e0 <_dtoa_r+0x190>
 80043dc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80043e0:	f1bb 0f16 	cmp.w	fp, #22
 80043e4:	d857      	bhi.n	8004496 <_dtoa_r+0x246>
 80043e6:	4b5b      	ldr	r3, [pc, #364]	; (8004554 <_dtoa_r+0x304>)
 80043e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	ec51 0b18 	vmov	r0, r1, d8
 80043f4:	f7fc fb72 	bl	8000adc <__aeabi_dcmplt>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d04e      	beq.n	800449a <_dtoa_r+0x24a>
 80043fc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004400:	2300      	movs	r3, #0
 8004402:	930c      	str	r3, [sp, #48]	; 0x30
 8004404:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004406:	1b5b      	subs	r3, r3, r5
 8004408:	1e5a      	subs	r2, r3, #1
 800440a:	bf45      	ittet	mi
 800440c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004410:	9305      	strmi	r3, [sp, #20]
 8004412:	2300      	movpl	r3, #0
 8004414:	2300      	movmi	r3, #0
 8004416:	9206      	str	r2, [sp, #24]
 8004418:	bf54      	ite	pl
 800441a:	9305      	strpl	r3, [sp, #20]
 800441c:	9306      	strmi	r3, [sp, #24]
 800441e:	f1bb 0f00 	cmp.w	fp, #0
 8004422:	db3c      	blt.n	800449e <_dtoa_r+0x24e>
 8004424:	9b06      	ldr	r3, [sp, #24]
 8004426:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800442a:	445b      	add	r3, fp
 800442c:	9306      	str	r3, [sp, #24]
 800442e:	2300      	movs	r3, #0
 8004430:	9308      	str	r3, [sp, #32]
 8004432:	9b07      	ldr	r3, [sp, #28]
 8004434:	2b09      	cmp	r3, #9
 8004436:	d868      	bhi.n	800450a <_dtoa_r+0x2ba>
 8004438:	2b05      	cmp	r3, #5
 800443a:	bfc4      	itt	gt
 800443c:	3b04      	subgt	r3, #4
 800443e:	9307      	strgt	r3, [sp, #28]
 8004440:	9b07      	ldr	r3, [sp, #28]
 8004442:	f1a3 0302 	sub.w	r3, r3, #2
 8004446:	bfcc      	ite	gt
 8004448:	2500      	movgt	r5, #0
 800444a:	2501      	movle	r5, #1
 800444c:	2b03      	cmp	r3, #3
 800444e:	f200 8085 	bhi.w	800455c <_dtoa_r+0x30c>
 8004452:	e8df f003 	tbb	[pc, r3]
 8004456:	3b2e      	.short	0x3b2e
 8004458:	5839      	.short	0x5839
 800445a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800445e:	441d      	add	r5, r3
 8004460:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004464:	2b20      	cmp	r3, #32
 8004466:	bfc1      	itttt	gt
 8004468:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800446c:	fa08 f803 	lslgt.w	r8, r8, r3
 8004470:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004474:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004478:	bfd6      	itet	le
 800447a:	f1c3 0320 	rsble	r3, r3, #32
 800447e:	ea48 0003 	orrgt.w	r0, r8, r3
 8004482:	fa06 f003 	lslle.w	r0, r6, r3
 8004486:	f7fc f83d 	bl	8000504 <__aeabi_ui2d>
 800448a:	2201      	movs	r2, #1
 800448c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004490:	3d01      	subs	r5, #1
 8004492:	920e      	str	r2, [sp, #56]	; 0x38
 8004494:	e76f      	b.n	8004376 <_dtoa_r+0x126>
 8004496:	2301      	movs	r3, #1
 8004498:	e7b3      	b.n	8004402 <_dtoa_r+0x1b2>
 800449a:	900c      	str	r0, [sp, #48]	; 0x30
 800449c:	e7b2      	b.n	8004404 <_dtoa_r+0x1b4>
 800449e:	9b05      	ldr	r3, [sp, #20]
 80044a0:	eba3 030b 	sub.w	r3, r3, fp
 80044a4:	9305      	str	r3, [sp, #20]
 80044a6:	f1cb 0300 	rsb	r3, fp, #0
 80044aa:	9308      	str	r3, [sp, #32]
 80044ac:	2300      	movs	r3, #0
 80044ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80044b0:	e7bf      	b.n	8004432 <_dtoa_r+0x1e2>
 80044b2:	2300      	movs	r3, #0
 80044b4:	9309      	str	r3, [sp, #36]	; 0x24
 80044b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	dc52      	bgt.n	8004562 <_dtoa_r+0x312>
 80044bc:	2301      	movs	r3, #1
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	9304      	str	r3, [sp, #16]
 80044c2:	461a      	mov	r2, r3
 80044c4:	920a      	str	r2, [sp, #40]	; 0x28
 80044c6:	e00b      	b.n	80044e0 <_dtoa_r+0x290>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e7f3      	b.n	80044b4 <_dtoa_r+0x264>
 80044cc:	2300      	movs	r3, #0
 80044ce:	9309      	str	r3, [sp, #36]	; 0x24
 80044d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d2:	445b      	add	r3, fp
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	3301      	adds	r3, #1
 80044d8:	2b01      	cmp	r3, #1
 80044da:	9304      	str	r3, [sp, #16]
 80044dc:	bfb8      	it	lt
 80044de:	2301      	movlt	r3, #1
 80044e0:	69e0      	ldr	r0, [r4, #28]
 80044e2:	2100      	movs	r1, #0
 80044e4:	2204      	movs	r2, #4
 80044e6:	f102 0614 	add.w	r6, r2, #20
 80044ea:	429e      	cmp	r6, r3
 80044ec:	d93d      	bls.n	800456a <_dtoa_r+0x31a>
 80044ee:	6041      	str	r1, [r0, #4]
 80044f0:	4620      	mov	r0, r4
 80044f2:	f000 fceb 	bl	8004ecc <_Balloc>
 80044f6:	9000      	str	r0, [sp, #0]
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d139      	bne.n	8004570 <_dtoa_r+0x320>
 80044fc:	4b16      	ldr	r3, [pc, #88]	; (8004558 <_dtoa_r+0x308>)
 80044fe:	4602      	mov	r2, r0
 8004500:	f240 11af 	movw	r1, #431	; 0x1af
 8004504:	e6bd      	b.n	8004282 <_dtoa_r+0x32>
 8004506:	2301      	movs	r3, #1
 8004508:	e7e1      	b.n	80044ce <_dtoa_r+0x27e>
 800450a:	2501      	movs	r5, #1
 800450c:	2300      	movs	r3, #0
 800450e:	9307      	str	r3, [sp, #28]
 8004510:	9509      	str	r5, [sp, #36]	; 0x24
 8004512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004516:	9301      	str	r3, [sp, #4]
 8004518:	9304      	str	r3, [sp, #16]
 800451a:	2200      	movs	r2, #0
 800451c:	2312      	movs	r3, #18
 800451e:	e7d1      	b.n	80044c4 <_dtoa_r+0x274>
 8004520:	636f4361 	.word	0x636f4361
 8004524:	3fd287a7 	.word	0x3fd287a7
 8004528:	8b60c8b3 	.word	0x8b60c8b3
 800452c:	3fc68a28 	.word	0x3fc68a28
 8004530:	509f79fb 	.word	0x509f79fb
 8004534:	3fd34413 	.word	0x3fd34413
 8004538:	08006134 	.word	0x08006134
 800453c:	0800614b 	.word	0x0800614b
 8004540:	7ff00000 	.word	0x7ff00000
 8004544:	08006130 	.word	0x08006130
 8004548:	08006127 	.word	0x08006127
 800454c:	08006104 	.word	0x08006104
 8004550:	3ff80000 	.word	0x3ff80000
 8004554:	08006238 	.word	0x08006238
 8004558:	080061a3 	.word	0x080061a3
 800455c:	2301      	movs	r3, #1
 800455e:	9309      	str	r3, [sp, #36]	; 0x24
 8004560:	e7d7      	b.n	8004512 <_dtoa_r+0x2c2>
 8004562:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	9304      	str	r3, [sp, #16]
 8004568:	e7ba      	b.n	80044e0 <_dtoa_r+0x290>
 800456a:	3101      	adds	r1, #1
 800456c:	0052      	lsls	r2, r2, #1
 800456e:	e7ba      	b.n	80044e6 <_dtoa_r+0x296>
 8004570:	69e3      	ldr	r3, [r4, #28]
 8004572:	9a00      	ldr	r2, [sp, #0]
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	9b04      	ldr	r3, [sp, #16]
 8004578:	2b0e      	cmp	r3, #14
 800457a:	f200 80a8 	bhi.w	80046ce <_dtoa_r+0x47e>
 800457e:	2d00      	cmp	r5, #0
 8004580:	f000 80a5 	beq.w	80046ce <_dtoa_r+0x47e>
 8004584:	f1bb 0f00 	cmp.w	fp, #0
 8004588:	dd38      	ble.n	80045fc <_dtoa_r+0x3ac>
 800458a:	4bc0      	ldr	r3, [pc, #768]	; (800488c <_dtoa_r+0x63c>)
 800458c:	f00b 020f 	and.w	r2, fp, #15
 8004590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004594:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004598:	e9d3 6700 	ldrd	r6, r7, [r3]
 800459c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80045a0:	d019      	beq.n	80045d6 <_dtoa_r+0x386>
 80045a2:	4bbb      	ldr	r3, [pc, #748]	; (8004890 <_dtoa_r+0x640>)
 80045a4:	ec51 0b18 	vmov	r0, r1, d8
 80045a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045ac:	f7fc f94e 	bl	800084c <__aeabi_ddiv>
 80045b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045b4:	f008 080f 	and.w	r8, r8, #15
 80045b8:	2503      	movs	r5, #3
 80045ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004890 <_dtoa_r+0x640>
 80045be:	f1b8 0f00 	cmp.w	r8, #0
 80045c2:	d10a      	bne.n	80045da <_dtoa_r+0x38a>
 80045c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045c8:	4632      	mov	r2, r6
 80045ca:	463b      	mov	r3, r7
 80045cc:	f7fc f93e 	bl	800084c <__aeabi_ddiv>
 80045d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045d4:	e02b      	b.n	800462e <_dtoa_r+0x3de>
 80045d6:	2502      	movs	r5, #2
 80045d8:	e7ef      	b.n	80045ba <_dtoa_r+0x36a>
 80045da:	f018 0f01 	tst.w	r8, #1
 80045de:	d008      	beq.n	80045f2 <_dtoa_r+0x3a2>
 80045e0:	4630      	mov	r0, r6
 80045e2:	4639      	mov	r1, r7
 80045e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80045e8:	f7fc f806 	bl	80005f8 <__aeabi_dmul>
 80045ec:	3501      	adds	r5, #1
 80045ee:	4606      	mov	r6, r0
 80045f0:	460f      	mov	r7, r1
 80045f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80045f6:	f109 0908 	add.w	r9, r9, #8
 80045fa:	e7e0      	b.n	80045be <_dtoa_r+0x36e>
 80045fc:	f000 809f 	beq.w	800473e <_dtoa_r+0x4ee>
 8004600:	f1cb 0600 	rsb	r6, fp, #0
 8004604:	4ba1      	ldr	r3, [pc, #644]	; (800488c <_dtoa_r+0x63c>)
 8004606:	4fa2      	ldr	r7, [pc, #648]	; (8004890 <_dtoa_r+0x640>)
 8004608:	f006 020f 	and.w	r2, r6, #15
 800460c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	ec51 0b18 	vmov	r0, r1, d8
 8004618:	f7fb ffee 	bl	80005f8 <__aeabi_dmul>
 800461c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004620:	1136      	asrs	r6, r6, #4
 8004622:	2300      	movs	r3, #0
 8004624:	2502      	movs	r5, #2
 8004626:	2e00      	cmp	r6, #0
 8004628:	d17e      	bne.n	8004728 <_dtoa_r+0x4d8>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1d0      	bne.n	80045d0 <_dtoa_r+0x380>
 800462e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004630:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8084 	beq.w	8004742 <_dtoa_r+0x4f2>
 800463a:	4b96      	ldr	r3, [pc, #600]	; (8004894 <_dtoa_r+0x644>)
 800463c:	2200      	movs	r2, #0
 800463e:	4640      	mov	r0, r8
 8004640:	4649      	mov	r1, r9
 8004642:	f7fc fa4b 	bl	8000adc <__aeabi_dcmplt>
 8004646:	2800      	cmp	r0, #0
 8004648:	d07b      	beq.n	8004742 <_dtoa_r+0x4f2>
 800464a:	9b04      	ldr	r3, [sp, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d078      	beq.n	8004742 <_dtoa_r+0x4f2>
 8004650:	9b01      	ldr	r3, [sp, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	dd39      	ble.n	80046ca <_dtoa_r+0x47a>
 8004656:	4b90      	ldr	r3, [pc, #576]	; (8004898 <_dtoa_r+0x648>)
 8004658:	2200      	movs	r2, #0
 800465a:	4640      	mov	r0, r8
 800465c:	4649      	mov	r1, r9
 800465e:	f7fb ffcb 	bl	80005f8 <__aeabi_dmul>
 8004662:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004666:	9e01      	ldr	r6, [sp, #4]
 8004668:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800466c:	3501      	adds	r5, #1
 800466e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004672:	4628      	mov	r0, r5
 8004674:	f7fb ff56 	bl	8000524 <__aeabi_i2d>
 8004678:	4642      	mov	r2, r8
 800467a:	464b      	mov	r3, r9
 800467c:	f7fb ffbc 	bl	80005f8 <__aeabi_dmul>
 8004680:	4b86      	ldr	r3, [pc, #536]	; (800489c <_dtoa_r+0x64c>)
 8004682:	2200      	movs	r2, #0
 8004684:	f7fb fe02 	bl	800028c <__adddf3>
 8004688:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800468c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004690:	9303      	str	r3, [sp, #12]
 8004692:	2e00      	cmp	r6, #0
 8004694:	d158      	bne.n	8004748 <_dtoa_r+0x4f8>
 8004696:	4b82      	ldr	r3, [pc, #520]	; (80048a0 <_dtoa_r+0x650>)
 8004698:	2200      	movs	r2, #0
 800469a:	4640      	mov	r0, r8
 800469c:	4649      	mov	r1, r9
 800469e:	f7fb fdf3 	bl	8000288 <__aeabi_dsub>
 80046a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046a6:	4680      	mov	r8, r0
 80046a8:	4689      	mov	r9, r1
 80046aa:	f7fc fa35 	bl	8000b18 <__aeabi_dcmpgt>
 80046ae:	2800      	cmp	r0, #0
 80046b0:	f040 8296 	bne.w	8004be0 <_dtoa_r+0x990>
 80046b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80046b8:	4640      	mov	r0, r8
 80046ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046be:	4649      	mov	r1, r9
 80046c0:	f7fc fa0c 	bl	8000adc <__aeabi_dcmplt>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	f040 8289 	bne.w	8004bdc <_dtoa_r+0x98c>
 80046ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80046ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f2c0 814e 	blt.w	8004972 <_dtoa_r+0x722>
 80046d6:	f1bb 0f0e 	cmp.w	fp, #14
 80046da:	f300 814a 	bgt.w	8004972 <_dtoa_r+0x722>
 80046de:	4b6b      	ldr	r3, [pc, #428]	; (800488c <_dtoa_r+0x63c>)
 80046e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80046e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80046e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f280 80dc 	bge.w	80048a8 <_dtoa_r+0x658>
 80046f0:	9b04      	ldr	r3, [sp, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f300 80d8 	bgt.w	80048a8 <_dtoa_r+0x658>
 80046f8:	f040 826f 	bne.w	8004bda <_dtoa_r+0x98a>
 80046fc:	4b68      	ldr	r3, [pc, #416]	; (80048a0 <_dtoa_r+0x650>)
 80046fe:	2200      	movs	r2, #0
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fb ff78 	bl	80005f8 <__aeabi_dmul>
 8004708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800470c:	f7fc f9fa 	bl	8000b04 <__aeabi_dcmpge>
 8004710:	9e04      	ldr	r6, [sp, #16]
 8004712:	4637      	mov	r7, r6
 8004714:	2800      	cmp	r0, #0
 8004716:	f040 8245 	bne.w	8004ba4 <_dtoa_r+0x954>
 800471a:	9d00      	ldr	r5, [sp, #0]
 800471c:	2331      	movs	r3, #49	; 0x31
 800471e:	f805 3b01 	strb.w	r3, [r5], #1
 8004722:	f10b 0b01 	add.w	fp, fp, #1
 8004726:	e241      	b.n	8004bac <_dtoa_r+0x95c>
 8004728:	07f2      	lsls	r2, r6, #31
 800472a:	d505      	bpl.n	8004738 <_dtoa_r+0x4e8>
 800472c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004730:	f7fb ff62 	bl	80005f8 <__aeabi_dmul>
 8004734:	3501      	adds	r5, #1
 8004736:	2301      	movs	r3, #1
 8004738:	1076      	asrs	r6, r6, #1
 800473a:	3708      	adds	r7, #8
 800473c:	e773      	b.n	8004626 <_dtoa_r+0x3d6>
 800473e:	2502      	movs	r5, #2
 8004740:	e775      	b.n	800462e <_dtoa_r+0x3de>
 8004742:	9e04      	ldr	r6, [sp, #16]
 8004744:	465f      	mov	r7, fp
 8004746:	e792      	b.n	800466e <_dtoa_r+0x41e>
 8004748:	9900      	ldr	r1, [sp, #0]
 800474a:	4b50      	ldr	r3, [pc, #320]	; (800488c <_dtoa_r+0x63c>)
 800474c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004750:	4431      	add	r1, r6
 8004752:	9102      	str	r1, [sp, #8]
 8004754:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004756:	eeb0 9a47 	vmov.f32	s18, s14
 800475a:	eef0 9a67 	vmov.f32	s19, s15
 800475e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004762:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004766:	2900      	cmp	r1, #0
 8004768:	d044      	beq.n	80047f4 <_dtoa_r+0x5a4>
 800476a:	494e      	ldr	r1, [pc, #312]	; (80048a4 <_dtoa_r+0x654>)
 800476c:	2000      	movs	r0, #0
 800476e:	f7fc f86d 	bl	800084c <__aeabi_ddiv>
 8004772:	ec53 2b19 	vmov	r2, r3, d9
 8004776:	f7fb fd87 	bl	8000288 <__aeabi_dsub>
 800477a:	9d00      	ldr	r5, [sp, #0]
 800477c:	ec41 0b19 	vmov	d9, r0, r1
 8004780:	4649      	mov	r1, r9
 8004782:	4640      	mov	r0, r8
 8004784:	f7fc f9e8 	bl	8000b58 <__aeabi_d2iz>
 8004788:	4606      	mov	r6, r0
 800478a:	f7fb fecb 	bl	8000524 <__aeabi_i2d>
 800478e:	4602      	mov	r2, r0
 8004790:	460b      	mov	r3, r1
 8004792:	4640      	mov	r0, r8
 8004794:	4649      	mov	r1, r9
 8004796:	f7fb fd77 	bl	8000288 <__aeabi_dsub>
 800479a:	3630      	adds	r6, #48	; 0x30
 800479c:	f805 6b01 	strb.w	r6, [r5], #1
 80047a0:	ec53 2b19 	vmov	r2, r3, d9
 80047a4:	4680      	mov	r8, r0
 80047a6:	4689      	mov	r9, r1
 80047a8:	f7fc f998 	bl	8000adc <__aeabi_dcmplt>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d164      	bne.n	800487a <_dtoa_r+0x62a>
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	4937      	ldr	r1, [pc, #220]	; (8004894 <_dtoa_r+0x644>)
 80047b6:	2000      	movs	r0, #0
 80047b8:	f7fb fd66 	bl	8000288 <__aeabi_dsub>
 80047bc:	ec53 2b19 	vmov	r2, r3, d9
 80047c0:	f7fc f98c 	bl	8000adc <__aeabi_dcmplt>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	f040 80b6 	bne.w	8004936 <_dtoa_r+0x6e6>
 80047ca:	9b02      	ldr	r3, [sp, #8]
 80047cc:	429d      	cmp	r5, r3
 80047ce:	f43f af7c 	beq.w	80046ca <_dtoa_r+0x47a>
 80047d2:	4b31      	ldr	r3, [pc, #196]	; (8004898 <_dtoa_r+0x648>)
 80047d4:	ec51 0b19 	vmov	r0, r1, d9
 80047d8:	2200      	movs	r2, #0
 80047da:	f7fb ff0d 	bl	80005f8 <__aeabi_dmul>
 80047de:	4b2e      	ldr	r3, [pc, #184]	; (8004898 <_dtoa_r+0x648>)
 80047e0:	ec41 0b19 	vmov	d9, r0, r1
 80047e4:	2200      	movs	r2, #0
 80047e6:	4640      	mov	r0, r8
 80047e8:	4649      	mov	r1, r9
 80047ea:	f7fb ff05 	bl	80005f8 <__aeabi_dmul>
 80047ee:	4680      	mov	r8, r0
 80047f0:	4689      	mov	r9, r1
 80047f2:	e7c5      	b.n	8004780 <_dtoa_r+0x530>
 80047f4:	ec51 0b17 	vmov	r0, r1, d7
 80047f8:	f7fb fefe 	bl	80005f8 <__aeabi_dmul>
 80047fc:	9b02      	ldr	r3, [sp, #8]
 80047fe:	9d00      	ldr	r5, [sp, #0]
 8004800:	930f      	str	r3, [sp, #60]	; 0x3c
 8004802:	ec41 0b19 	vmov	d9, r0, r1
 8004806:	4649      	mov	r1, r9
 8004808:	4640      	mov	r0, r8
 800480a:	f7fc f9a5 	bl	8000b58 <__aeabi_d2iz>
 800480e:	4606      	mov	r6, r0
 8004810:	f7fb fe88 	bl	8000524 <__aeabi_i2d>
 8004814:	3630      	adds	r6, #48	; 0x30
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4640      	mov	r0, r8
 800481c:	4649      	mov	r1, r9
 800481e:	f7fb fd33 	bl	8000288 <__aeabi_dsub>
 8004822:	f805 6b01 	strb.w	r6, [r5], #1
 8004826:	9b02      	ldr	r3, [sp, #8]
 8004828:	429d      	cmp	r5, r3
 800482a:	4680      	mov	r8, r0
 800482c:	4689      	mov	r9, r1
 800482e:	f04f 0200 	mov.w	r2, #0
 8004832:	d124      	bne.n	800487e <_dtoa_r+0x62e>
 8004834:	4b1b      	ldr	r3, [pc, #108]	; (80048a4 <_dtoa_r+0x654>)
 8004836:	ec51 0b19 	vmov	r0, r1, d9
 800483a:	f7fb fd27 	bl	800028c <__adddf3>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4640      	mov	r0, r8
 8004844:	4649      	mov	r1, r9
 8004846:	f7fc f967 	bl	8000b18 <__aeabi_dcmpgt>
 800484a:	2800      	cmp	r0, #0
 800484c:	d173      	bne.n	8004936 <_dtoa_r+0x6e6>
 800484e:	ec53 2b19 	vmov	r2, r3, d9
 8004852:	4914      	ldr	r1, [pc, #80]	; (80048a4 <_dtoa_r+0x654>)
 8004854:	2000      	movs	r0, #0
 8004856:	f7fb fd17 	bl	8000288 <__aeabi_dsub>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4640      	mov	r0, r8
 8004860:	4649      	mov	r1, r9
 8004862:	f7fc f93b 	bl	8000adc <__aeabi_dcmplt>
 8004866:	2800      	cmp	r0, #0
 8004868:	f43f af2f 	beq.w	80046ca <_dtoa_r+0x47a>
 800486c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800486e:	1e6b      	subs	r3, r5, #1
 8004870:	930f      	str	r3, [sp, #60]	; 0x3c
 8004872:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004876:	2b30      	cmp	r3, #48	; 0x30
 8004878:	d0f8      	beq.n	800486c <_dtoa_r+0x61c>
 800487a:	46bb      	mov	fp, r7
 800487c:	e04a      	b.n	8004914 <_dtoa_r+0x6c4>
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <_dtoa_r+0x648>)
 8004880:	f7fb feba 	bl	80005f8 <__aeabi_dmul>
 8004884:	4680      	mov	r8, r0
 8004886:	4689      	mov	r9, r1
 8004888:	e7bd      	b.n	8004806 <_dtoa_r+0x5b6>
 800488a:	bf00      	nop
 800488c:	08006238 	.word	0x08006238
 8004890:	08006210 	.word	0x08006210
 8004894:	3ff00000 	.word	0x3ff00000
 8004898:	40240000 	.word	0x40240000
 800489c:	401c0000 	.word	0x401c0000
 80048a0:	40140000 	.word	0x40140000
 80048a4:	3fe00000 	.word	0x3fe00000
 80048a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048ac:	9d00      	ldr	r5, [sp, #0]
 80048ae:	4642      	mov	r2, r8
 80048b0:	464b      	mov	r3, r9
 80048b2:	4630      	mov	r0, r6
 80048b4:	4639      	mov	r1, r7
 80048b6:	f7fb ffc9 	bl	800084c <__aeabi_ddiv>
 80048ba:	f7fc f94d 	bl	8000b58 <__aeabi_d2iz>
 80048be:	9001      	str	r0, [sp, #4]
 80048c0:	f7fb fe30 	bl	8000524 <__aeabi_i2d>
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	f7fb fe96 	bl	80005f8 <__aeabi_dmul>
 80048cc:	4602      	mov	r2, r0
 80048ce:	460b      	mov	r3, r1
 80048d0:	4630      	mov	r0, r6
 80048d2:	4639      	mov	r1, r7
 80048d4:	f7fb fcd8 	bl	8000288 <__aeabi_dsub>
 80048d8:	9e01      	ldr	r6, [sp, #4]
 80048da:	9f04      	ldr	r7, [sp, #16]
 80048dc:	3630      	adds	r6, #48	; 0x30
 80048de:	f805 6b01 	strb.w	r6, [r5], #1
 80048e2:	9e00      	ldr	r6, [sp, #0]
 80048e4:	1bae      	subs	r6, r5, r6
 80048e6:	42b7      	cmp	r7, r6
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	d134      	bne.n	8004958 <_dtoa_r+0x708>
 80048ee:	f7fb fccd 	bl	800028c <__adddf3>
 80048f2:	4642      	mov	r2, r8
 80048f4:	464b      	mov	r3, r9
 80048f6:	4606      	mov	r6, r0
 80048f8:	460f      	mov	r7, r1
 80048fa:	f7fc f90d 	bl	8000b18 <__aeabi_dcmpgt>
 80048fe:	b9c8      	cbnz	r0, 8004934 <_dtoa_r+0x6e4>
 8004900:	4642      	mov	r2, r8
 8004902:	464b      	mov	r3, r9
 8004904:	4630      	mov	r0, r6
 8004906:	4639      	mov	r1, r7
 8004908:	f7fc f8de 	bl	8000ac8 <__aeabi_dcmpeq>
 800490c:	b110      	cbz	r0, 8004914 <_dtoa_r+0x6c4>
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	07db      	lsls	r3, r3, #31
 8004912:	d40f      	bmi.n	8004934 <_dtoa_r+0x6e4>
 8004914:	4651      	mov	r1, sl
 8004916:	4620      	mov	r0, r4
 8004918:	f000 fb18 	bl	8004f4c <_Bfree>
 800491c:	2300      	movs	r3, #0
 800491e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004920:	702b      	strb	r3, [r5, #0]
 8004922:	f10b 0301 	add.w	r3, fp, #1
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800492a:	2b00      	cmp	r3, #0
 800492c:	f43f ace2 	beq.w	80042f4 <_dtoa_r+0xa4>
 8004930:	601d      	str	r5, [r3, #0]
 8004932:	e4df      	b.n	80042f4 <_dtoa_r+0xa4>
 8004934:	465f      	mov	r7, fp
 8004936:	462b      	mov	r3, r5
 8004938:	461d      	mov	r5, r3
 800493a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800493e:	2a39      	cmp	r2, #57	; 0x39
 8004940:	d106      	bne.n	8004950 <_dtoa_r+0x700>
 8004942:	9a00      	ldr	r2, [sp, #0]
 8004944:	429a      	cmp	r2, r3
 8004946:	d1f7      	bne.n	8004938 <_dtoa_r+0x6e8>
 8004948:	9900      	ldr	r1, [sp, #0]
 800494a:	2230      	movs	r2, #48	; 0x30
 800494c:	3701      	adds	r7, #1
 800494e:	700a      	strb	r2, [r1, #0]
 8004950:	781a      	ldrb	r2, [r3, #0]
 8004952:	3201      	adds	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
 8004956:	e790      	b.n	800487a <_dtoa_r+0x62a>
 8004958:	4ba3      	ldr	r3, [pc, #652]	; (8004be8 <_dtoa_r+0x998>)
 800495a:	2200      	movs	r2, #0
 800495c:	f7fb fe4c 	bl	80005f8 <__aeabi_dmul>
 8004960:	2200      	movs	r2, #0
 8004962:	2300      	movs	r3, #0
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
 8004968:	f7fc f8ae 	bl	8000ac8 <__aeabi_dcmpeq>
 800496c:	2800      	cmp	r0, #0
 800496e:	d09e      	beq.n	80048ae <_dtoa_r+0x65e>
 8004970:	e7d0      	b.n	8004914 <_dtoa_r+0x6c4>
 8004972:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004974:	2a00      	cmp	r2, #0
 8004976:	f000 80ca 	beq.w	8004b0e <_dtoa_r+0x8be>
 800497a:	9a07      	ldr	r2, [sp, #28]
 800497c:	2a01      	cmp	r2, #1
 800497e:	f300 80ad 	bgt.w	8004adc <_dtoa_r+0x88c>
 8004982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004984:	2a00      	cmp	r2, #0
 8004986:	f000 80a5 	beq.w	8004ad4 <_dtoa_r+0x884>
 800498a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800498e:	9e08      	ldr	r6, [sp, #32]
 8004990:	9d05      	ldr	r5, [sp, #20]
 8004992:	9a05      	ldr	r2, [sp, #20]
 8004994:	441a      	add	r2, r3
 8004996:	9205      	str	r2, [sp, #20]
 8004998:	9a06      	ldr	r2, [sp, #24]
 800499a:	2101      	movs	r1, #1
 800499c:	441a      	add	r2, r3
 800499e:	4620      	mov	r0, r4
 80049a0:	9206      	str	r2, [sp, #24]
 80049a2:	f000 fb89 	bl	80050b8 <__i2b>
 80049a6:	4607      	mov	r7, r0
 80049a8:	b165      	cbz	r5, 80049c4 <_dtoa_r+0x774>
 80049aa:	9b06      	ldr	r3, [sp, #24]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	dd09      	ble.n	80049c4 <_dtoa_r+0x774>
 80049b0:	42ab      	cmp	r3, r5
 80049b2:	9a05      	ldr	r2, [sp, #20]
 80049b4:	bfa8      	it	ge
 80049b6:	462b      	movge	r3, r5
 80049b8:	1ad2      	subs	r2, r2, r3
 80049ba:	9205      	str	r2, [sp, #20]
 80049bc:	9a06      	ldr	r2, [sp, #24]
 80049be:	1aed      	subs	r5, r5, r3
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	9306      	str	r3, [sp, #24]
 80049c4:	9b08      	ldr	r3, [sp, #32]
 80049c6:	b1f3      	cbz	r3, 8004a06 <_dtoa_r+0x7b6>
 80049c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80a3 	beq.w	8004b16 <_dtoa_r+0x8c6>
 80049d0:	2e00      	cmp	r6, #0
 80049d2:	dd10      	ble.n	80049f6 <_dtoa_r+0x7a6>
 80049d4:	4639      	mov	r1, r7
 80049d6:	4632      	mov	r2, r6
 80049d8:	4620      	mov	r0, r4
 80049da:	f000 fc2d 	bl	8005238 <__pow5mult>
 80049de:	4652      	mov	r2, sl
 80049e0:	4601      	mov	r1, r0
 80049e2:	4607      	mov	r7, r0
 80049e4:	4620      	mov	r0, r4
 80049e6:	f000 fb7d 	bl	80050e4 <__multiply>
 80049ea:	4651      	mov	r1, sl
 80049ec:	4680      	mov	r8, r0
 80049ee:	4620      	mov	r0, r4
 80049f0:	f000 faac 	bl	8004f4c <_Bfree>
 80049f4:	46c2      	mov	sl, r8
 80049f6:	9b08      	ldr	r3, [sp, #32]
 80049f8:	1b9a      	subs	r2, r3, r6
 80049fa:	d004      	beq.n	8004a06 <_dtoa_r+0x7b6>
 80049fc:	4651      	mov	r1, sl
 80049fe:	4620      	mov	r0, r4
 8004a00:	f000 fc1a 	bl	8005238 <__pow5mult>
 8004a04:	4682      	mov	sl, r0
 8004a06:	2101      	movs	r1, #1
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 fb55 	bl	80050b8 <__i2b>
 8004a0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	4606      	mov	r6, r0
 8004a14:	f340 8081 	ble.w	8004b1a <_dtoa_r+0x8ca>
 8004a18:	461a      	mov	r2, r3
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	f000 fc0b 	bl	8005238 <__pow5mult>
 8004a22:	9b07      	ldr	r3, [sp, #28]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	4606      	mov	r6, r0
 8004a28:	dd7a      	ble.n	8004b20 <_dtoa_r+0x8d0>
 8004a2a:	f04f 0800 	mov.w	r8, #0
 8004a2e:	6933      	ldr	r3, [r6, #16]
 8004a30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a34:	6918      	ldr	r0, [r3, #16]
 8004a36:	f000 faf1 	bl	800501c <__hi0bits>
 8004a3a:	f1c0 0020 	rsb	r0, r0, #32
 8004a3e:	9b06      	ldr	r3, [sp, #24]
 8004a40:	4418      	add	r0, r3
 8004a42:	f010 001f 	ands.w	r0, r0, #31
 8004a46:	f000 8094 	beq.w	8004b72 <_dtoa_r+0x922>
 8004a4a:	f1c0 0320 	rsb	r3, r0, #32
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	f340 8085 	ble.w	8004b5e <_dtoa_r+0x90e>
 8004a54:	9b05      	ldr	r3, [sp, #20]
 8004a56:	f1c0 001c 	rsb	r0, r0, #28
 8004a5a:	4403      	add	r3, r0
 8004a5c:	9305      	str	r3, [sp, #20]
 8004a5e:	9b06      	ldr	r3, [sp, #24]
 8004a60:	4403      	add	r3, r0
 8004a62:	4405      	add	r5, r0
 8004a64:	9306      	str	r3, [sp, #24]
 8004a66:	9b05      	ldr	r3, [sp, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	dd05      	ble.n	8004a78 <_dtoa_r+0x828>
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4620      	mov	r0, r4
 8004a72:	f000 fc3b 	bl	80052ec <__lshift>
 8004a76:	4682      	mov	sl, r0
 8004a78:	9b06      	ldr	r3, [sp, #24]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	dd05      	ble.n	8004a8a <_dtoa_r+0x83a>
 8004a7e:	4631      	mov	r1, r6
 8004a80:	461a      	mov	r2, r3
 8004a82:	4620      	mov	r0, r4
 8004a84:	f000 fc32 	bl	80052ec <__lshift>
 8004a88:	4606      	mov	r6, r0
 8004a8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d072      	beq.n	8004b76 <_dtoa_r+0x926>
 8004a90:	4631      	mov	r1, r6
 8004a92:	4650      	mov	r0, sl
 8004a94:	f000 fc96 	bl	80053c4 <__mcmp>
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	da6c      	bge.n	8004b76 <_dtoa_r+0x926>
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	4651      	mov	r1, sl
 8004aa0:	220a      	movs	r2, #10
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f000 fa74 	bl	8004f90 <__multadd>
 8004aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004aae:	4682      	mov	sl, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f000 81b0 	beq.w	8004e16 <_dtoa_r+0xbc6>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4639      	mov	r1, r7
 8004aba:	220a      	movs	r2, #10
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 fa67 	bl	8004f90 <__multadd>
 8004ac2:	9b01      	ldr	r3, [sp, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	4607      	mov	r7, r0
 8004ac8:	f300 8096 	bgt.w	8004bf8 <_dtoa_r+0x9a8>
 8004acc:	9b07      	ldr	r3, [sp, #28]
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	dc59      	bgt.n	8004b86 <_dtoa_r+0x936>
 8004ad2:	e091      	b.n	8004bf8 <_dtoa_r+0x9a8>
 8004ad4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ad6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004ada:	e758      	b.n	800498e <_dtoa_r+0x73e>
 8004adc:	9b04      	ldr	r3, [sp, #16]
 8004ade:	1e5e      	subs	r6, r3, #1
 8004ae0:	9b08      	ldr	r3, [sp, #32]
 8004ae2:	42b3      	cmp	r3, r6
 8004ae4:	bfbf      	itttt	lt
 8004ae6:	9b08      	ldrlt	r3, [sp, #32]
 8004ae8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004aea:	9608      	strlt	r6, [sp, #32]
 8004aec:	1af3      	sublt	r3, r6, r3
 8004aee:	bfb4      	ite	lt
 8004af0:	18d2      	addlt	r2, r2, r3
 8004af2:	1b9e      	subge	r6, r3, r6
 8004af4:	9b04      	ldr	r3, [sp, #16]
 8004af6:	bfbc      	itt	lt
 8004af8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004afa:	2600      	movlt	r6, #0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bfb7      	itett	lt
 8004b00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004b04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004b08:	1a9d      	sublt	r5, r3, r2
 8004b0a:	2300      	movlt	r3, #0
 8004b0c:	e741      	b.n	8004992 <_dtoa_r+0x742>
 8004b0e:	9e08      	ldr	r6, [sp, #32]
 8004b10:	9d05      	ldr	r5, [sp, #20]
 8004b12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b14:	e748      	b.n	80049a8 <_dtoa_r+0x758>
 8004b16:	9a08      	ldr	r2, [sp, #32]
 8004b18:	e770      	b.n	80049fc <_dtoa_r+0x7ac>
 8004b1a:	9b07      	ldr	r3, [sp, #28]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	dc19      	bgt.n	8004b54 <_dtoa_r+0x904>
 8004b20:	9b02      	ldr	r3, [sp, #8]
 8004b22:	b9bb      	cbnz	r3, 8004b54 <_dtoa_r+0x904>
 8004b24:	9b03      	ldr	r3, [sp, #12]
 8004b26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b2a:	b99b      	cbnz	r3, 8004b54 <_dtoa_r+0x904>
 8004b2c:	9b03      	ldr	r3, [sp, #12]
 8004b2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b32:	0d1b      	lsrs	r3, r3, #20
 8004b34:	051b      	lsls	r3, r3, #20
 8004b36:	b183      	cbz	r3, 8004b5a <_dtoa_r+0x90a>
 8004b38:	9b05      	ldr	r3, [sp, #20]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	9305      	str	r3, [sp, #20]
 8004b3e:	9b06      	ldr	r3, [sp, #24]
 8004b40:	3301      	adds	r3, #1
 8004b42:	9306      	str	r3, [sp, #24]
 8004b44:	f04f 0801 	mov.w	r8, #1
 8004b48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f47f af6f 	bne.w	8004a2e <_dtoa_r+0x7de>
 8004b50:	2001      	movs	r0, #1
 8004b52:	e774      	b.n	8004a3e <_dtoa_r+0x7ee>
 8004b54:	f04f 0800 	mov.w	r8, #0
 8004b58:	e7f6      	b.n	8004b48 <_dtoa_r+0x8f8>
 8004b5a:	4698      	mov	r8, r3
 8004b5c:	e7f4      	b.n	8004b48 <_dtoa_r+0x8f8>
 8004b5e:	d082      	beq.n	8004a66 <_dtoa_r+0x816>
 8004b60:	9a05      	ldr	r2, [sp, #20]
 8004b62:	331c      	adds	r3, #28
 8004b64:	441a      	add	r2, r3
 8004b66:	9205      	str	r2, [sp, #20]
 8004b68:	9a06      	ldr	r2, [sp, #24]
 8004b6a:	441a      	add	r2, r3
 8004b6c:	441d      	add	r5, r3
 8004b6e:	9206      	str	r2, [sp, #24]
 8004b70:	e779      	b.n	8004a66 <_dtoa_r+0x816>
 8004b72:	4603      	mov	r3, r0
 8004b74:	e7f4      	b.n	8004b60 <_dtoa_r+0x910>
 8004b76:	9b04      	ldr	r3, [sp, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dc37      	bgt.n	8004bec <_dtoa_r+0x99c>
 8004b7c:	9b07      	ldr	r3, [sp, #28]
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	dd34      	ble.n	8004bec <_dtoa_r+0x99c>
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	9b01      	ldr	r3, [sp, #4]
 8004b88:	b963      	cbnz	r3, 8004ba4 <_dtoa_r+0x954>
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	2205      	movs	r2, #5
 8004b8e:	4620      	mov	r0, r4
 8004b90:	f000 f9fe 	bl	8004f90 <__multadd>
 8004b94:	4601      	mov	r1, r0
 8004b96:	4606      	mov	r6, r0
 8004b98:	4650      	mov	r0, sl
 8004b9a:	f000 fc13 	bl	80053c4 <__mcmp>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f73f adbb 	bgt.w	800471a <_dtoa_r+0x4ca>
 8004ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba6:	9d00      	ldr	r5, [sp, #0]
 8004ba8:	ea6f 0b03 	mvn.w	fp, r3
 8004bac:	f04f 0800 	mov.w	r8, #0
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f000 f9ca 	bl	8004f4c <_Bfree>
 8004bb8:	2f00      	cmp	r7, #0
 8004bba:	f43f aeab 	beq.w	8004914 <_dtoa_r+0x6c4>
 8004bbe:	f1b8 0f00 	cmp.w	r8, #0
 8004bc2:	d005      	beq.n	8004bd0 <_dtoa_r+0x980>
 8004bc4:	45b8      	cmp	r8, r7
 8004bc6:	d003      	beq.n	8004bd0 <_dtoa_r+0x980>
 8004bc8:	4641      	mov	r1, r8
 8004bca:	4620      	mov	r0, r4
 8004bcc:	f000 f9be 	bl	8004f4c <_Bfree>
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	f000 f9ba 	bl	8004f4c <_Bfree>
 8004bd8:	e69c      	b.n	8004914 <_dtoa_r+0x6c4>
 8004bda:	2600      	movs	r6, #0
 8004bdc:	4637      	mov	r7, r6
 8004bde:	e7e1      	b.n	8004ba4 <_dtoa_r+0x954>
 8004be0:	46bb      	mov	fp, r7
 8004be2:	4637      	mov	r7, r6
 8004be4:	e599      	b.n	800471a <_dtoa_r+0x4ca>
 8004be6:	bf00      	nop
 8004be8:	40240000 	.word	0x40240000
 8004bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80c8 	beq.w	8004d84 <_dtoa_r+0xb34>
 8004bf4:	9b04      	ldr	r3, [sp, #16]
 8004bf6:	9301      	str	r3, [sp, #4]
 8004bf8:	2d00      	cmp	r5, #0
 8004bfa:	dd05      	ble.n	8004c08 <_dtoa_r+0x9b8>
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	462a      	mov	r2, r5
 8004c00:	4620      	mov	r0, r4
 8004c02:	f000 fb73 	bl	80052ec <__lshift>
 8004c06:	4607      	mov	r7, r0
 8004c08:	f1b8 0f00 	cmp.w	r8, #0
 8004c0c:	d05b      	beq.n	8004cc6 <_dtoa_r+0xa76>
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4620      	mov	r0, r4
 8004c12:	f000 f95b 	bl	8004ecc <_Balloc>
 8004c16:	4605      	mov	r5, r0
 8004c18:	b928      	cbnz	r0, 8004c26 <_dtoa_r+0x9d6>
 8004c1a:	4b83      	ldr	r3, [pc, #524]	; (8004e28 <_dtoa_r+0xbd8>)
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004c22:	f7ff bb2e 	b.w	8004282 <_dtoa_r+0x32>
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	3202      	adds	r2, #2
 8004c2a:	0092      	lsls	r2, r2, #2
 8004c2c:	f107 010c 	add.w	r1, r7, #12
 8004c30:	300c      	adds	r0, #12
 8004c32:	f000 fee7 	bl	8005a04 <memcpy>
 8004c36:	2201      	movs	r2, #1
 8004c38:	4629      	mov	r1, r5
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f000 fb56 	bl	80052ec <__lshift>
 8004c40:	9b00      	ldr	r3, [sp, #0]
 8004c42:	3301      	adds	r3, #1
 8004c44:	9304      	str	r3, [sp, #16]
 8004c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	9308      	str	r3, [sp, #32]
 8004c4e:	9b02      	ldr	r3, [sp, #8]
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	46b8      	mov	r8, r7
 8004c56:	9306      	str	r3, [sp, #24]
 8004c58:	4607      	mov	r7, r0
 8004c5a:	9b04      	ldr	r3, [sp, #16]
 8004c5c:	4631      	mov	r1, r6
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	4650      	mov	r0, sl
 8004c62:	9301      	str	r3, [sp, #4]
 8004c64:	f7ff fa6b 	bl	800413e <quorem>
 8004c68:	4641      	mov	r1, r8
 8004c6a:	9002      	str	r0, [sp, #8]
 8004c6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004c70:	4650      	mov	r0, sl
 8004c72:	f000 fba7 	bl	80053c4 <__mcmp>
 8004c76:	463a      	mov	r2, r7
 8004c78:	9005      	str	r0, [sp, #20]
 8004c7a:	4631      	mov	r1, r6
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 fbbd 	bl	80053fc <__mdiff>
 8004c82:	68c2      	ldr	r2, [r0, #12]
 8004c84:	4605      	mov	r5, r0
 8004c86:	bb02      	cbnz	r2, 8004cca <_dtoa_r+0xa7a>
 8004c88:	4601      	mov	r1, r0
 8004c8a:	4650      	mov	r0, sl
 8004c8c:	f000 fb9a 	bl	80053c4 <__mcmp>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4629      	mov	r1, r5
 8004c94:	4620      	mov	r0, r4
 8004c96:	9209      	str	r2, [sp, #36]	; 0x24
 8004c98:	f000 f958 	bl	8004f4c <_Bfree>
 8004c9c:	9b07      	ldr	r3, [sp, #28]
 8004c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ca0:	9d04      	ldr	r5, [sp, #16]
 8004ca2:	ea43 0102 	orr.w	r1, r3, r2
 8004ca6:	9b06      	ldr	r3, [sp, #24]
 8004ca8:	4319      	orrs	r1, r3
 8004caa:	d110      	bne.n	8004cce <_dtoa_r+0xa7e>
 8004cac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004cb0:	d029      	beq.n	8004d06 <_dtoa_r+0xab6>
 8004cb2:	9b05      	ldr	r3, [sp, #20]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	dd02      	ble.n	8004cbe <_dtoa_r+0xa6e>
 8004cb8:	9b02      	ldr	r3, [sp, #8]
 8004cba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004cbe:	9b01      	ldr	r3, [sp, #4]
 8004cc0:	f883 9000 	strb.w	r9, [r3]
 8004cc4:	e774      	b.n	8004bb0 <_dtoa_r+0x960>
 8004cc6:	4638      	mov	r0, r7
 8004cc8:	e7ba      	b.n	8004c40 <_dtoa_r+0x9f0>
 8004cca:	2201      	movs	r2, #1
 8004ccc:	e7e1      	b.n	8004c92 <_dtoa_r+0xa42>
 8004cce:	9b05      	ldr	r3, [sp, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	db04      	blt.n	8004cde <_dtoa_r+0xa8e>
 8004cd4:	9907      	ldr	r1, [sp, #28]
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	9906      	ldr	r1, [sp, #24]
 8004cda:	430b      	orrs	r3, r1
 8004cdc:	d120      	bne.n	8004d20 <_dtoa_r+0xad0>
 8004cde:	2a00      	cmp	r2, #0
 8004ce0:	dded      	ble.n	8004cbe <_dtoa_r+0xa6e>
 8004ce2:	4651      	mov	r1, sl
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f000 fb00 	bl	80052ec <__lshift>
 8004cec:	4631      	mov	r1, r6
 8004cee:	4682      	mov	sl, r0
 8004cf0:	f000 fb68 	bl	80053c4 <__mcmp>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	dc03      	bgt.n	8004d00 <_dtoa_r+0xab0>
 8004cf8:	d1e1      	bne.n	8004cbe <_dtoa_r+0xa6e>
 8004cfa:	f019 0f01 	tst.w	r9, #1
 8004cfe:	d0de      	beq.n	8004cbe <_dtoa_r+0xa6e>
 8004d00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d04:	d1d8      	bne.n	8004cb8 <_dtoa_r+0xa68>
 8004d06:	9a01      	ldr	r2, [sp, #4]
 8004d08:	2339      	movs	r3, #57	; 0x39
 8004d0a:	7013      	strb	r3, [r2, #0]
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	461d      	mov	r5, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d16:	2a39      	cmp	r2, #57	; 0x39
 8004d18:	d06c      	beq.n	8004df4 <_dtoa_r+0xba4>
 8004d1a:	3201      	adds	r2, #1
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e747      	b.n	8004bb0 <_dtoa_r+0x960>
 8004d20:	2a00      	cmp	r2, #0
 8004d22:	dd07      	ble.n	8004d34 <_dtoa_r+0xae4>
 8004d24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d28:	d0ed      	beq.n	8004d06 <_dtoa_r+0xab6>
 8004d2a:	9a01      	ldr	r2, [sp, #4]
 8004d2c:	f109 0301 	add.w	r3, r9, #1
 8004d30:	7013      	strb	r3, [r2, #0]
 8004d32:	e73d      	b.n	8004bb0 <_dtoa_r+0x960>
 8004d34:	9b04      	ldr	r3, [sp, #16]
 8004d36:	9a08      	ldr	r2, [sp, #32]
 8004d38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d043      	beq.n	8004dc8 <_dtoa_r+0xb78>
 8004d40:	4651      	mov	r1, sl
 8004d42:	2300      	movs	r3, #0
 8004d44:	220a      	movs	r2, #10
 8004d46:	4620      	mov	r0, r4
 8004d48:	f000 f922 	bl	8004f90 <__multadd>
 8004d4c:	45b8      	cmp	r8, r7
 8004d4e:	4682      	mov	sl, r0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	f04f 020a 	mov.w	r2, #10
 8004d58:	4641      	mov	r1, r8
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	d107      	bne.n	8004d6e <_dtoa_r+0xb1e>
 8004d5e:	f000 f917 	bl	8004f90 <__multadd>
 8004d62:	4680      	mov	r8, r0
 8004d64:	4607      	mov	r7, r0
 8004d66:	9b04      	ldr	r3, [sp, #16]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	e775      	b.n	8004c5a <_dtoa_r+0xa0a>
 8004d6e:	f000 f90f 	bl	8004f90 <__multadd>
 8004d72:	4639      	mov	r1, r7
 8004d74:	4680      	mov	r8, r0
 8004d76:	2300      	movs	r3, #0
 8004d78:	220a      	movs	r2, #10
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 f908 	bl	8004f90 <__multadd>
 8004d80:	4607      	mov	r7, r0
 8004d82:	e7f0      	b.n	8004d66 <_dtoa_r+0xb16>
 8004d84:	9b04      	ldr	r3, [sp, #16]
 8004d86:	9301      	str	r3, [sp, #4]
 8004d88:	9d00      	ldr	r5, [sp, #0]
 8004d8a:	4631      	mov	r1, r6
 8004d8c:	4650      	mov	r0, sl
 8004d8e:	f7ff f9d6 	bl	800413e <quorem>
 8004d92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004d96:	9b00      	ldr	r3, [sp, #0]
 8004d98:	f805 9b01 	strb.w	r9, [r5], #1
 8004d9c:	1aea      	subs	r2, r5, r3
 8004d9e:	9b01      	ldr	r3, [sp, #4]
 8004da0:	4293      	cmp	r3, r2
 8004da2:	dd07      	ble.n	8004db4 <_dtoa_r+0xb64>
 8004da4:	4651      	mov	r1, sl
 8004da6:	2300      	movs	r3, #0
 8004da8:	220a      	movs	r2, #10
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 f8f0 	bl	8004f90 <__multadd>
 8004db0:	4682      	mov	sl, r0
 8004db2:	e7ea      	b.n	8004d8a <_dtoa_r+0xb3a>
 8004db4:	9b01      	ldr	r3, [sp, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	bfc8      	it	gt
 8004dba:	461d      	movgt	r5, r3
 8004dbc:	9b00      	ldr	r3, [sp, #0]
 8004dbe:	bfd8      	it	le
 8004dc0:	2501      	movle	r5, #1
 8004dc2:	441d      	add	r5, r3
 8004dc4:	f04f 0800 	mov.w	r8, #0
 8004dc8:	4651      	mov	r1, sl
 8004dca:	2201      	movs	r2, #1
 8004dcc:	4620      	mov	r0, r4
 8004dce:	f000 fa8d 	bl	80052ec <__lshift>
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4682      	mov	sl, r0
 8004dd6:	f000 faf5 	bl	80053c4 <__mcmp>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	dc96      	bgt.n	8004d0c <_dtoa_r+0xabc>
 8004dde:	d102      	bne.n	8004de6 <_dtoa_r+0xb96>
 8004de0:	f019 0f01 	tst.w	r9, #1
 8004de4:	d192      	bne.n	8004d0c <_dtoa_r+0xabc>
 8004de6:	462b      	mov	r3, r5
 8004de8:	461d      	mov	r5, r3
 8004dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dee:	2a30      	cmp	r2, #48	; 0x30
 8004df0:	d0fa      	beq.n	8004de8 <_dtoa_r+0xb98>
 8004df2:	e6dd      	b.n	8004bb0 <_dtoa_r+0x960>
 8004df4:	9a00      	ldr	r2, [sp, #0]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d189      	bne.n	8004d0e <_dtoa_r+0xabe>
 8004dfa:	f10b 0b01 	add.w	fp, fp, #1
 8004dfe:	2331      	movs	r3, #49	; 0x31
 8004e00:	e796      	b.n	8004d30 <_dtoa_r+0xae0>
 8004e02:	4b0a      	ldr	r3, [pc, #40]	; (8004e2c <_dtoa_r+0xbdc>)
 8004e04:	f7ff ba99 	b.w	800433a <_dtoa_r+0xea>
 8004e08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f47f aa6d 	bne.w	80042ea <_dtoa_r+0x9a>
 8004e10:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <_dtoa_r+0xbe0>)
 8004e12:	f7ff ba92 	b.w	800433a <_dtoa_r+0xea>
 8004e16:	9b01      	ldr	r3, [sp, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	dcb5      	bgt.n	8004d88 <_dtoa_r+0xb38>
 8004e1c:	9b07      	ldr	r3, [sp, #28]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	f73f aeb1 	bgt.w	8004b86 <_dtoa_r+0x936>
 8004e24:	e7b0      	b.n	8004d88 <_dtoa_r+0xb38>
 8004e26:	bf00      	nop
 8004e28:	080061a3 	.word	0x080061a3
 8004e2c:	08006103 	.word	0x08006103
 8004e30:	08006127 	.word	0x08006127

08004e34 <_free_r>:
 8004e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e36:	2900      	cmp	r1, #0
 8004e38:	d044      	beq.n	8004ec4 <_free_r+0x90>
 8004e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e3e:	9001      	str	r0, [sp, #4]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f1a1 0404 	sub.w	r4, r1, #4
 8004e46:	bfb8      	it	lt
 8004e48:	18e4      	addlt	r4, r4, r3
 8004e4a:	f7fe fb51 	bl	80034f0 <__malloc_lock>
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <_free_r+0x94>)
 8004e50:	9801      	ldr	r0, [sp, #4]
 8004e52:	6813      	ldr	r3, [r2, #0]
 8004e54:	b933      	cbnz	r3, 8004e64 <_free_r+0x30>
 8004e56:	6063      	str	r3, [r4, #4]
 8004e58:	6014      	str	r4, [r2, #0]
 8004e5a:	b003      	add	sp, #12
 8004e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e60:	f7fe bb4c 	b.w	80034fc <__malloc_unlock>
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	d908      	bls.n	8004e7a <_free_r+0x46>
 8004e68:	6825      	ldr	r5, [r4, #0]
 8004e6a:	1961      	adds	r1, r4, r5
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	bf01      	itttt	eq
 8004e70:	6819      	ldreq	r1, [r3, #0]
 8004e72:	685b      	ldreq	r3, [r3, #4]
 8004e74:	1949      	addeq	r1, r1, r5
 8004e76:	6021      	streq	r1, [r4, #0]
 8004e78:	e7ed      	b.n	8004e56 <_free_r+0x22>
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	b10b      	cbz	r3, 8004e84 <_free_r+0x50>
 8004e80:	42a3      	cmp	r3, r4
 8004e82:	d9fa      	bls.n	8004e7a <_free_r+0x46>
 8004e84:	6811      	ldr	r1, [r2, #0]
 8004e86:	1855      	adds	r5, r2, r1
 8004e88:	42a5      	cmp	r5, r4
 8004e8a:	d10b      	bne.n	8004ea4 <_free_r+0x70>
 8004e8c:	6824      	ldr	r4, [r4, #0]
 8004e8e:	4421      	add	r1, r4
 8004e90:	1854      	adds	r4, r2, r1
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	6011      	str	r1, [r2, #0]
 8004e96:	d1e0      	bne.n	8004e5a <_free_r+0x26>
 8004e98:	681c      	ldr	r4, [r3, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	6053      	str	r3, [r2, #4]
 8004e9e:	440c      	add	r4, r1
 8004ea0:	6014      	str	r4, [r2, #0]
 8004ea2:	e7da      	b.n	8004e5a <_free_r+0x26>
 8004ea4:	d902      	bls.n	8004eac <_free_r+0x78>
 8004ea6:	230c      	movs	r3, #12
 8004ea8:	6003      	str	r3, [r0, #0]
 8004eaa:	e7d6      	b.n	8004e5a <_free_r+0x26>
 8004eac:	6825      	ldr	r5, [r4, #0]
 8004eae:	1961      	adds	r1, r4, r5
 8004eb0:	428b      	cmp	r3, r1
 8004eb2:	bf04      	itt	eq
 8004eb4:	6819      	ldreq	r1, [r3, #0]
 8004eb6:	685b      	ldreq	r3, [r3, #4]
 8004eb8:	6063      	str	r3, [r4, #4]
 8004eba:	bf04      	itt	eq
 8004ebc:	1949      	addeq	r1, r1, r5
 8004ebe:	6021      	streq	r1, [r4, #0]
 8004ec0:	6054      	str	r4, [r2, #4]
 8004ec2:	e7ca      	b.n	8004e5a <_free_r+0x26>
 8004ec4:	b003      	add	sp, #12
 8004ec6:	bd30      	pop	{r4, r5, pc}
 8004ec8:	20000288 	.word	0x20000288

08004ecc <_Balloc>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	69c6      	ldr	r6, [r0, #28]
 8004ed0:	4604      	mov	r4, r0
 8004ed2:	460d      	mov	r5, r1
 8004ed4:	b976      	cbnz	r6, 8004ef4 <_Balloc+0x28>
 8004ed6:	2010      	movs	r0, #16
 8004ed8:	f7fe fa5a 	bl	8003390 <malloc>
 8004edc:	4602      	mov	r2, r0
 8004ede:	61e0      	str	r0, [r4, #28]
 8004ee0:	b920      	cbnz	r0, 8004eec <_Balloc+0x20>
 8004ee2:	4b18      	ldr	r3, [pc, #96]	; (8004f44 <_Balloc+0x78>)
 8004ee4:	4818      	ldr	r0, [pc, #96]	; (8004f48 <_Balloc+0x7c>)
 8004ee6:	216b      	movs	r1, #107	; 0x6b
 8004ee8:	f000 fd9a 	bl	8005a20 <__assert_func>
 8004eec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ef0:	6006      	str	r6, [r0, #0]
 8004ef2:	60c6      	str	r6, [r0, #12]
 8004ef4:	69e6      	ldr	r6, [r4, #28]
 8004ef6:	68f3      	ldr	r3, [r6, #12]
 8004ef8:	b183      	cbz	r3, 8004f1c <_Balloc+0x50>
 8004efa:	69e3      	ldr	r3, [r4, #28]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f02:	b9b8      	cbnz	r0, 8004f34 <_Balloc+0x68>
 8004f04:	2101      	movs	r1, #1
 8004f06:	fa01 f605 	lsl.w	r6, r1, r5
 8004f0a:	1d72      	adds	r2, r6, #5
 8004f0c:	0092      	lsls	r2, r2, #2
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f000 fda4 	bl	8005a5c <_calloc_r>
 8004f14:	b160      	cbz	r0, 8004f30 <_Balloc+0x64>
 8004f16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f1a:	e00e      	b.n	8004f3a <_Balloc+0x6e>
 8004f1c:	2221      	movs	r2, #33	; 0x21
 8004f1e:	2104      	movs	r1, #4
 8004f20:	4620      	mov	r0, r4
 8004f22:	f000 fd9b 	bl	8005a5c <_calloc_r>
 8004f26:	69e3      	ldr	r3, [r4, #28]
 8004f28:	60f0      	str	r0, [r6, #12]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e4      	bne.n	8004efa <_Balloc+0x2e>
 8004f30:	2000      	movs	r0, #0
 8004f32:	bd70      	pop	{r4, r5, r6, pc}
 8004f34:	6802      	ldr	r2, [r0, #0]
 8004f36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f40:	e7f7      	b.n	8004f32 <_Balloc+0x66>
 8004f42:	bf00      	nop
 8004f44:	08006134 	.word	0x08006134
 8004f48:	080061b4 	.word	0x080061b4

08004f4c <_Bfree>:
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	69c6      	ldr	r6, [r0, #28]
 8004f50:	4605      	mov	r5, r0
 8004f52:	460c      	mov	r4, r1
 8004f54:	b976      	cbnz	r6, 8004f74 <_Bfree+0x28>
 8004f56:	2010      	movs	r0, #16
 8004f58:	f7fe fa1a 	bl	8003390 <malloc>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	61e8      	str	r0, [r5, #28]
 8004f60:	b920      	cbnz	r0, 8004f6c <_Bfree+0x20>
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <_Bfree+0x3c>)
 8004f64:	4809      	ldr	r0, [pc, #36]	; (8004f8c <_Bfree+0x40>)
 8004f66:	218f      	movs	r1, #143	; 0x8f
 8004f68:	f000 fd5a 	bl	8005a20 <__assert_func>
 8004f6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f70:	6006      	str	r6, [r0, #0]
 8004f72:	60c6      	str	r6, [r0, #12]
 8004f74:	b13c      	cbz	r4, 8004f86 <_Bfree+0x3a>
 8004f76:	69eb      	ldr	r3, [r5, #28]
 8004f78:	6862      	ldr	r2, [r4, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004f80:	6021      	str	r1, [r4, #0]
 8004f82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
 8004f88:	08006134 	.word	0x08006134
 8004f8c:	080061b4 	.word	0x080061b4

08004f90 <__multadd>:
 8004f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	690d      	ldr	r5, [r1, #16]
 8004f96:	4607      	mov	r7, r0
 8004f98:	460c      	mov	r4, r1
 8004f9a:	461e      	mov	r6, r3
 8004f9c:	f101 0c14 	add.w	ip, r1, #20
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	f8dc 3000 	ldr.w	r3, [ip]
 8004fa6:	b299      	uxth	r1, r3
 8004fa8:	fb02 6101 	mla	r1, r2, r1, r6
 8004fac:	0c1e      	lsrs	r6, r3, #16
 8004fae:	0c0b      	lsrs	r3, r1, #16
 8004fb0:	fb02 3306 	mla	r3, r2, r6, r3
 8004fb4:	b289      	uxth	r1, r1
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fbc:	4285      	cmp	r5, r0
 8004fbe:	f84c 1b04 	str.w	r1, [ip], #4
 8004fc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fc6:	dcec      	bgt.n	8004fa2 <__multadd+0x12>
 8004fc8:	b30e      	cbz	r6, 800500e <__multadd+0x7e>
 8004fca:	68a3      	ldr	r3, [r4, #8]
 8004fcc:	42ab      	cmp	r3, r5
 8004fce:	dc19      	bgt.n	8005004 <__multadd+0x74>
 8004fd0:	6861      	ldr	r1, [r4, #4]
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	3101      	adds	r1, #1
 8004fd6:	f7ff ff79 	bl	8004ecc <_Balloc>
 8004fda:	4680      	mov	r8, r0
 8004fdc:	b928      	cbnz	r0, 8004fea <__multadd+0x5a>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	4b0c      	ldr	r3, [pc, #48]	; (8005014 <__multadd+0x84>)
 8004fe2:	480d      	ldr	r0, [pc, #52]	; (8005018 <__multadd+0x88>)
 8004fe4:	21ba      	movs	r1, #186	; 0xba
 8004fe6:	f000 fd1b 	bl	8005a20 <__assert_func>
 8004fea:	6922      	ldr	r2, [r4, #16]
 8004fec:	3202      	adds	r2, #2
 8004fee:	f104 010c 	add.w	r1, r4, #12
 8004ff2:	0092      	lsls	r2, r2, #2
 8004ff4:	300c      	adds	r0, #12
 8004ff6:	f000 fd05 	bl	8005a04 <memcpy>
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4638      	mov	r0, r7
 8004ffe:	f7ff ffa5 	bl	8004f4c <_Bfree>
 8005002:	4644      	mov	r4, r8
 8005004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005008:	3501      	adds	r5, #1
 800500a:	615e      	str	r6, [r3, #20]
 800500c:	6125      	str	r5, [r4, #16]
 800500e:	4620      	mov	r0, r4
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005014:	080061a3 	.word	0x080061a3
 8005018:	080061b4 	.word	0x080061b4

0800501c <__hi0bits>:
 800501c:	0c03      	lsrs	r3, r0, #16
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	b9d3      	cbnz	r3, 8005058 <__hi0bits+0x3c>
 8005022:	0400      	lsls	r0, r0, #16
 8005024:	2310      	movs	r3, #16
 8005026:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800502a:	bf04      	itt	eq
 800502c:	0200      	lsleq	r0, r0, #8
 800502e:	3308      	addeq	r3, #8
 8005030:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005034:	bf04      	itt	eq
 8005036:	0100      	lsleq	r0, r0, #4
 8005038:	3304      	addeq	r3, #4
 800503a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800503e:	bf04      	itt	eq
 8005040:	0080      	lsleq	r0, r0, #2
 8005042:	3302      	addeq	r3, #2
 8005044:	2800      	cmp	r0, #0
 8005046:	db05      	blt.n	8005054 <__hi0bits+0x38>
 8005048:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800504c:	f103 0301 	add.w	r3, r3, #1
 8005050:	bf08      	it	eq
 8005052:	2320      	moveq	r3, #32
 8005054:	4618      	mov	r0, r3
 8005056:	4770      	bx	lr
 8005058:	2300      	movs	r3, #0
 800505a:	e7e4      	b.n	8005026 <__hi0bits+0xa>

0800505c <__lo0bits>:
 800505c:	6803      	ldr	r3, [r0, #0]
 800505e:	f013 0207 	ands.w	r2, r3, #7
 8005062:	d00c      	beq.n	800507e <__lo0bits+0x22>
 8005064:	07d9      	lsls	r1, r3, #31
 8005066:	d422      	bmi.n	80050ae <__lo0bits+0x52>
 8005068:	079a      	lsls	r2, r3, #30
 800506a:	bf49      	itett	mi
 800506c:	085b      	lsrmi	r3, r3, #1
 800506e:	089b      	lsrpl	r3, r3, #2
 8005070:	6003      	strmi	r3, [r0, #0]
 8005072:	2201      	movmi	r2, #1
 8005074:	bf5c      	itt	pl
 8005076:	6003      	strpl	r3, [r0, #0]
 8005078:	2202      	movpl	r2, #2
 800507a:	4610      	mov	r0, r2
 800507c:	4770      	bx	lr
 800507e:	b299      	uxth	r1, r3
 8005080:	b909      	cbnz	r1, 8005086 <__lo0bits+0x2a>
 8005082:	0c1b      	lsrs	r3, r3, #16
 8005084:	2210      	movs	r2, #16
 8005086:	b2d9      	uxtb	r1, r3
 8005088:	b909      	cbnz	r1, 800508e <__lo0bits+0x32>
 800508a:	3208      	adds	r2, #8
 800508c:	0a1b      	lsrs	r3, r3, #8
 800508e:	0719      	lsls	r1, r3, #28
 8005090:	bf04      	itt	eq
 8005092:	091b      	lsreq	r3, r3, #4
 8005094:	3204      	addeq	r2, #4
 8005096:	0799      	lsls	r1, r3, #30
 8005098:	bf04      	itt	eq
 800509a:	089b      	lsreq	r3, r3, #2
 800509c:	3202      	addeq	r2, #2
 800509e:	07d9      	lsls	r1, r3, #31
 80050a0:	d403      	bmi.n	80050aa <__lo0bits+0x4e>
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	f102 0201 	add.w	r2, r2, #1
 80050a8:	d003      	beq.n	80050b2 <__lo0bits+0x56>
 80050aa:	6003      	str	r3, [r0, #0]
 80050ac:	e7e5      	b.n	800507a <__lo0bits+0x1e>
 80050ae:	2200      	movs	r2, #0
 80050b0:	e7e3      	b.n	800507a <__lo0bits+0x1e>
 80050b2:	2220      	movs	r2, #32
 80050b4:	e7e1      	b.n	800507a <__lo0bits+0x1e>
	...

080050b8 <__i2b>:
 80050b8:	b510      	push	{r4, lr}
 80050ba:	460c      	mov	r4, r1
 80050bc:	2101      	movs	r1, #1
 80050be:	f7ff ff05 	bl	8004ecc <_Balloc>
 80050c2:	4602      	mov	r2, r0
 80050c4:	b928      	cbnz	r0, 80050d2 <__i2b+0x1a>
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <__i2b+0x24>)
 80050c8:	4805      	ldr	r0, [pc, #20]	; (80050e0 <__i2b+0x28>)
 80050ca:	f240 1145 	movw	r1, #325	; 0x145
 80050ce:	f000 fca7 	bl	8005a20 <__assert_func>
 80050d2:	2301      	movs	r3, #1
 80050d4:	6144      	str	r4, [r0, #20]
 80050d6:	6103      	str	r3, [r0, #16]
 80050d8:	bd10      	pop	{r4, pc}
 80050da:	bf00      	nop
 80050dc:	080061a3 	.word	0x080061a3
 80050e0:	080061b4 	.word	0x080061b4

080050e4 <__multiply>:
 80050e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050e8:	4691      	mov	r9, r2
 80050ea:	690a      	ldr	r2, [r1, #16]
 80050ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	bfb8      	it	lt
 80050f4:	460b      	movlt	r3, r1
 80050f6:	460c      	mov	r4, r1
 80050f8:	bfbc      	itt	lt
 80050fa:	464c      	movlt	r4, r9
 80050fc:	4699      	movlt	r9, r3
 80050fe:	6927      	ldr	r7, [r4, #16]
 8005100:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005104:	68a3      	ldr	r3, [r4, #8]
 8005106:	6861      	ldr	r1, [r4, #4]
 8005108:	eb07 060a 	add.w	r6, r7, sl
 800510c:	42b3      	cmp	r3, r6
 800510e:	b085      	sub	sp, #20
 8005110:	bfb8      	it	lt
 8005112:	3101      	addlt	r1, #1
 8005114:	f7ff feda 	bl	8004ecc <_Balloc>
 8005118:	b930      	cbnz	r0, 8005128 <__multiply+0x44>
 800511a:	4602      	mov	r2, r0
 800511c:	4b44      	ldr	r3, [pc, #272]	; (8005230 <__multiply+0x14c>)
 800511e:	4845      	ldr	r0, [pc, #276]	; (8005234 <__multiply+0x150>)
 8005120:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005124:	f000 fc7c 	bl	8005a20 <__assert_func>
 8005128:	f100 0514 	add.w	r5, r0, #20
 800512c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005130:	462b      	mov	r3, r5
 8005132:	2200      	movs	r2, #0
 8005134:	4543      	cmp	r3, r8
 8005136:	d321      	bcc.n	800517c <__multiply+0x98>
 8005138:	f104 0314 	add.w	r3, r4, #20
 800513c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005140:	f109 0314 	add.w	r3, r9, #20
 8005144:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005148:	9202      	str	r2, [sp, #8]
 800514a:	1b3a      	subs	r2, r7, r4
 800514c:	3a15      	subs	r2, #21
 800514e:	f022 0203 	bic.w	r2, r2, #3
 8005152:	3204      	adds	r2, #4
 8005154:	f104 0115 	add.w	r1, r4, #21
 8005158:	428f      	cmp	r7, r1
 800515a:	bf38      	it	cc
 800515c:	2204      	movcc	r2, #4
 800515e:	9201      	str	r2, [sp, #4]
 8005160:	9a02      	ldr	r2, [sp, #8]
 8005162:	9303      	str	r3, [sp, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	d80c      	bhi.n	8005182 <__multiply+0x9e>
 8005168:	2e00      	cmp	r6, #0
 800516a:	dd03      	ble.n	8005174 <__multiply+0x90>
 800516c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005170:	2b00      	cmp	r3, #0
 8005172:	d05b      	beq.n	800522c <__multiply+0x148>
 8005174:	6106      	str	r6, [r0, #16]
 8005176:	b005      	add	sp, #20
 8005178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517c:	f843 2b04 	str.w	r2, [r3], #4
 8005180:	e7d8      	b.n	8005134 <__multiply+0x50>
 8005182:	f8b3 a000 	ldrh.w	sl, [r3]
 8005186:	f1ba 0f00 	cmp.w	sl, #0
 800518a:	d024      	beq.n	80051d6 <__multiply+0xf2>
 800518c:	f104 0e14 	add.w	lr, r4, #20
 8005190:	46a9      	mov	r9, r5
 8005192:	f04f 0c00 	mov.w	ip, #0
 8005196:	f85e 2b04 	ldr.w	r2, [lr], #4
 800519a:	f8d9 1000 	ldr.w	r1, [r9]
 800519e:	fa1f fb82 	uxth.w	fp, r2
 80051a2:	b289      	uxth	r1, r1
 80051a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80051a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80051ac:	f8d9 2000 	ldr.w	r2, [r9]
 80051b0:	4461      	add	r1, ip
 80051b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80051ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051be:	b289      	uxth	r1, r1
 80051c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051c4:	4577      	cmp	r7, lr
 80051c6:	f849 1b04 	str.w	r1, [r9], #4
 80051ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051ce:	d8e2      	bhi.n	8005196 <__multiply+0xb2>
 80051d0:	9a01      	ldr	r2, [sp, #4]
 80051d2:	f845 c002 	str.w	ip, [r5, r2]
 80051d6:	9a03      	ldr	r2, [sp, #12]
 80051d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80051dc:	3304      	adds	r3, #4
 80051de:	f1b9 0f00 	cmp.w	r9, #0
 80051e2:	d021      	beq.n	8005228 <__multiply+0x144>
 80051e4:	6829      	ldr	r1, [r5, #0]
 80051e6:	f104 0c14 	add.w	ip, r4, #20
 80051ea:	46ae      	mov	lr, r5
 80051ec:	f04f 0a00 	mov.w	sl, #0
 80051f0:	f8bc b000 	ldrh.w	fp, [ip]
 80051f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80051f8:	fb09 220b 	mla	r2, r9, fp, r2
 80051fc:	4452      	add	r2, sl
 80051fe:	b289      	uxth	r1, r1
 8005200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005204:	f84e 1b04 	str.w	r1, [lr], #4
 8005208:	f85c 1b04 	ldr.w	r1, [ip], #4
 800520c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005210:	f8be 1000 	ldrh.w	r1, [lr]
 8005214:	fb09 110a 	mla	r1, r9, sl, r1
 8005218:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800521c:	4567      	cmp	r7, ip
 800521e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005222:	d8e5      	bhi.n	80051f0 <__multiply+0x10c>
 8005224:	9a01      	ldr	r2, [sp, #4]
 8005226:	50a9      	str	r1, [r5, r2]
 8005228:	3504      	adds	r5, #4
 800522a:	e799      	b.n	8005160 <__multiply+0x7c>
 800522c:	3e01      	subs	r6, #1
 800522e:	e79b      	b.n	8005168 <__multiply+0x84>
 8005230:	080061a3 	.word	0x080061a3
 8005234:	080061b4 	.word	0x080061b4

08005238 <__pow5mult>:
 8005238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800523c:	4615      	mov	r5, r2
 800523e:	f012 0203 	ands.w	r2, r2, #3
 8005242:	4606      	mov	r6, r0
 8005244:	460f      	mov	r7, r1
 8005246:	d007      	beq.n	8005258 <__pow5mult+0x20>
 8005248:	4c25      	ldr	r4, [pc, #148]	; (80052e0 <__pow5mult+0xa8>)
 800524a:	3a01      	subs	r2, #1
 800524c:	2300      	movs	r3, #0
 800524e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005252:	f7ff fe9d 	bl	8004f90 <__multadd>
 8005256:	4607      	mov	r7, r0
 8005258:	10ad      	asrs	r5, r5, #2
 800525a:	d03d      	beq.n	80052d8 <__pow5mult+0xa0>
 800525c:	69f4      	ldr	r4, [r6, #28]
 800525e:	b97c      	cbnz	r4, 8005280 <__pow5mult+0x48>
 8005260:	2010      	movs	r0, #16
 8005262:	f7fe f895 	bl	8003390 <malloc>
 8005266:	4602      	mov	r2, r0
 8005268:	61f0      	str	r0, [r6, #28]
 800526a:	b928      	cbnz	r0, 8005278 <__pow5mult+0x40>
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <__pow5mult+0xac>)
 800526e:	481e      	ldr	r0, [pc, #120]	; (80052e8 <__pow5mult+0xb0>)
 8005270:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005274:	f000 fbd4 	bl	8005a20 <__assert_func>
 8005278:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800527c:	6004      	str	r4, [r0, #0]
 800527e:	60c4      	str	r4, [r0, #12]
 8005280:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005284:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005288:	b94c      	cbnz	r4, 800529e <__pow5mult+0x66>
 800528a:	f240 2171 	movw	r1, #625	; 0x271
 800528e:	4630      	mov	r0, r6
 8005290:	f7ff ff12 	bl	80050b8 <__i2b>
 8005294:	2300      	movs	r3, #0
 8005296:	f8c8 0008 	str.w	r0, [r8, #8]
 800529a:	4604      	mov	r4, r0
 800529c:	6003      	str	r3, [r0, #0]
 800529e:	f04f 0900 	mov.w	r9, #0
 80052a2:	07eb      	lsls	r3, r5, #31
 80052a4:	d50a      	bpl.n	80052bc <__pow5mult+0x84>
 80052a6:	4639      	mov	r1, r7
 80052a8:	4622      	mov	r2, r4
 80052aa:	4630      	mov	r0, r6
 80052ac:	f7ff ff1a 	bl	80050e4 <__multiply>
 80052b0:	4639      	mov	r1, r7
 80052b2:	4680      	mov	r8, r0
 80052b4:	4630      	mov	r0, r6
 80052b6:	f7ff fe49 	bl	8004f4c <_Bfree>
 80052ba:	4647      	mov	r7, r8
 80052bc:	106d      	asrs	r5, r5, #1
 80052be:	d00b      	beq.n	80052d8 <__pow5mult+0xa0>
 80052c0:	6820      	ldr	r0, [r4, #0]
 80052c2:	b938      	cbnz	r0, 80052d4 <__pow5mult+0x9c>
 80052c4:	4622      	mov	r2, r4
 80052c6:	4621      	mov	r1, r4
 80052c8:	4630      	mov	r0, r6
 80052ca:	f7ff ff0b 	bl	80050e4 <__multiply>
 80052ce:	6020      	str	r0, [r4, #0]
 80052d0:	f8c0 9000 	str.w	r9, [r0]
 80052d4:	4604      	mov	r4, r0
 80052d6:	e7e4      	b.n	80052a2 <__pow5mult+0x6a>
 80052d8:	4638      	mov	r0, r7
 80052da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052de:	bf00      	nop
 80052e0:	08006300 	.word	0x08006300
 80052e4:	08006134 	.word	0x08006134
 80052e8:	080061b4 	.word	0x080061b4

080052ec <__lshift>:
 80052ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f0:	460c      	mov	r4, r1
 80052f2:	6849      	ldr	r1, [r1, #4]
 80052f4:	6923      	ldr	r3, [r4, #16]
 80052f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80052fa:	68a3      	ldr	r3, [r4, #8]
 80052fc:	4607      	mov	r7, r0
 80052fe:	4691      	mov	r9, r2
 8005300:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005304:	f108 0601 	add.w	r6, r8, #1
 8005308:	42b3      	cmp	r3, r6
 800530a:	db0b      	blt.n	8005324 <__lshift+0x38>
 800530c:	4638      	mov	r0, r7
 800530e:	f7ff fddd 	bl	8004ecc <_Balloc>
 8005312:	4605      	mov	r5, r0
 8005314:	b948      	cbnz	r0, 800532a <__lshift+0x3e>
 8005316:	4602      	mov	r2, r0
 8005318:	4b28      	ldr	r3, [pc, #160]	; (80053bc <__lshift+0xd0>)
 800531a:	4829      	ldr	r0, [pc, #164]	; (80053c0 <__lshift+0xd4>)
 800531c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005320:	f000 fb7e 	bl	8005a20 <__assert_func>
 8005324:	3101      	adds	r1, #1
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	e7ee      	b.n	8005308 <__lshift+0x1c>
 800532a:	2300      	movs	r3, #0
 800532c:	f100 0114 	add.w	r1, r0, #20
 8005330:	f100 0210 	add.w	r2, r0, #16
 8005334:	4618      	mov	r0, r3
 8005336:	4553      	cmp	r3, sl
 8005338:	db33      	blt.n	80053a2 <__lshift+0xb6>
 800533a:	6920      	ldr	r0, [r4, #16]
 800533c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005340:	f104 0314 	add.w	r3, r4, #20
 8005344:	f019 091f 	ands.w	r9, r9, #31
 8005348:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800534c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005350:	d02b      	beq.n	80053aa <__lshift+0xbe>
 8005352:	f1c9 0e20 	rsb	lr, r9, #32
 8005356:	468a      	mov	sl, r1
 8005358:	2200      	movs	r2, #0
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	fa00 f009 	lsl.w	r0, r0, r9
 8005360:	4310      	orrs	r0, r2
 8005362:	f84a 0b04 	str.w	r0, [sl], #4
 8005366:	f853 2b04 	ldr.w	r2, [r3], #4
 800536a:	459c      	cmp	ip, r3
 800536c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005370:	d8f3      	bhi.n	800535a <__lshift+0x6e>
 8005372:	ebac 0304 	sub.w	r3, ip, r4
 8005376:	3b15      	subs	r3, #21
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	3304      	adds	r3, #4
 800537e:	f104 0015 	add.w	r0, r4, #21
 8005382:	4584      	cmp	ip, r0
 8005384:	bf38      	it	cc
 8005386:	2304      	movcc	r3, #4
 8005388:	50ca      	str	r2, [r1, r3]
 800538a:	b10a      	cbz	r2, 8005390 <__lshift+0xa4>
 800538c:	f108 0602 	add.w	r6, r8, #2
 8005390:	3e01      	subs	r6, #1
 8005392:	4638      	mov	r0, r7
 8005394:	612e      	str	r6, [r5, #16]
 8005396:	4621      	mov	r1, r4
 8005398:	f7ff fdd8 	bl	8004f4c <_Bfree>
 800539c:	4628      	mov	r0, r5
 800539e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80053a6:	3301      	adds	r3, #1
 80053a8:	e7c5      	b.n	8005336 <__lshift+0x4a>
 80053aa:	3904      	subs	r1, #4
 80053ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80053b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80053b4:	459c      	cmp	ip, r3
 80053b6:	d8f9      	bhi.n	80053ac <__lshift+0xc0>
 80053b8:	e7ea      	b.n	8005390 <__lshift+0xa4>
 80053ba:	bf00      	nop
 80053bc:	080061a3 	.word	0x080061a3
 80053c0:	080061b4 	.word	0x080061b4

080053c4 <__mcmp>:
 80053c4:	b530      	push	{r4, r5, lr}
 80053c6:	6902      	ldr	r2, [r0, #16]
 80053c8:	690c      	ldr	r4, [r1, #16]
 80053ca:	1b12      	subs	r2, r2, r4
 80053cc:	d10e      	bne.n	80053ec <__mcmp+0x28>
 80053ce:	f100 0314 	add.w	r3, r0, #20
 80053d2:	3114      	adds	r1, #20
 80053d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80053d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80053dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80053e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80053e4:	42a5      	cmp	r5, r4
 80053e6:	d003      	beq.n	80053f0 <__mcmp+0x2c>
 80053e8:	d305      	bcc.n	80053f6 <__mcmp+0x32>
 80053ea:	2201      	movs	r2, #1
 80053ec:	4610      	mov	r0, r2
 80053ee:	bd30      	pop	{r4, r5, pc}
 80053f0:	4283      	cmp	r3, r0
 80053f2:	d3f3      	bcc.n	80053dc <__mcmp+0x18>
 80053f4:	e7fa      	b.n	80053ec <__mcmp+0x28>
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053fa:	e7f7      	b.n	80053ec <__mcmp+0x28>

080053fc <__mdiff>:
 80053fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	460c      	mov	r4, r1
 8005402:	4606      	mov	r6, r0
 8005404:	4611      	mov	r1, r2
 8005406:	4620      	mov	r0, r4
 8005408:	4690      	mov	r8, r2
 800540a:	f7ff ffdb 	bl	80053c4 <__mcmp>
 800540e:	1e05      	subs	r5, r0, #0
 8005410:	d110      	bne.n	8005434 <__mdiff+0x38>
 8005412:	4629      	mov	r1, r5
 8005414:	4630      	mov	r0, r6
 8005416:	f7ff fd59 	bl	8004ecc <_Balloc>
 800541a:	b930      	cbnz	r0, 800542a <__mdiff+0x2e>
 800541c:	4b3a      	ldr	r3, [pc, #232]	; (8005508 <__mdiff+0x10c>)
 800541e:	4602      	mov	r2, r0
 8005420:	f240 2137 	movw	r1, #567	; 0x237
 8005424:	4839      	ldr	r0, [pc, #228]	; (800550c <__mdiff+0x110>)
 8005426:	f000 fafb 	bl	8005a20 <__assert_func>
 800542a:	2301      	movs	r3, #1
 800542c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005430:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005434:	bfa4      	itt	ge
 8005436:	4643      	movge	r3, r8
 8005438:	46a0      	movge	r8, r4
 800543a:	4630      	mov	r0, r6
 800543c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005440:	bfa6      	itte	ge
 8005442:	461c      	movge	r4, r3
 8005444:	2500      	movge	r5, #0
 8005446:	2501      	movlt	r5, #1
 8005448:	f7ff fd40 	bl	8004ecc <_Balloc>
 800544c:	b920      	cbnz	r0, 8005458 <__mdiff+0x5c>
 800544e:	4b2e      	ldr	r3, [pc, #184]	; (8005508 <__mdiff+0x10c>)
 8005450:	4602      	mov	r2, r0
 8005452:	f240 2145 	movw	r1, #581	; 0x245
 8005456:	e7e5      	b.n	8005424 <__mdiff+0x28>
 8005458:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800545c:	6926      	ldr	r6, [r4, #16]
 800545e:	60c5      	str	r5, [r0, #12]
 8005460:	f104 0914 	add.w	r9, r4, #20
 8005464:	f108 0514 	add.w	r5, r8, #20
 8005468:	f100 0e14 	add.w	lr, r0, #20
 800546c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005470:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005474:	f108 0210 	add.w	r2, r8, #16
 8005478:	46f2      	mov	sl, lr
 800547a:	2100      	movs	r1, #0
 800547c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005480:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005484:	fa11 f88b 	uxtah	r8, r1, fp
 8005488:	b299      	uxth	r1, r3
 800548a:	0c1b      	lsrs	r3, r3, #16
 800548c:	eba8 0801 	sub.w	r8, r8, r1
 8005490:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005494:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005498:	fa1f f888 	uxth.w	r8, r8
 800549c:	1419      	asrs	r1, r3, #16
 800549e:	454e      	cmp	r6, r9
 80054a0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80054a4:	f84a 3b04 	str.w	r3, [sl], #4
 80054a8:	d8e8      	bhi.n	800547c <__mdiff+0x80>
 80054aa:	1b33      	subs	r3, r6, r4
 80054ac:	3b15      	subs	r3, #21
 80054ae:	f023 0303 	bic.w	r3, r3, #3
 80054b2:	3304      	adds	r3, #4
 80054b4:	3415      	adds	r4, #21
 80054b6:	42a6      	cmp	r6, r4
 80054b8:	bf38      	it	cc
 80054ba:	2304      	movcc	r3, #4
 80054bc:	441d      	add	r5, r3
 80054be:	4473      	add	r3, lr
 80054c0:	469e      	mov	lr, r3
 80054c2:	462e      	mov	r6, r5
 80054c4:	4566      	cmp	r6, ip
 80054c6:	d30e      	bcc.n	80054e6 <__mdiff+0xea>
 80054c8:	f10c 0203 	add.w	r2, ip, #3
 80054cc:	1b52      	subs	r2, r2, r5
 80054ce:	f022 0203 	bic.w	r2, r2, #3
 80054d2:	3d03      	subs	r5, #3
 80054d4:	45ac      	cmp	ip, r5
 80054d6:	bf38      	it	cc
 80054d8:	2200      	movcc	r2, #0
 80054da:	4413      	add	r3, r2
 80054dc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80054e0:	b17a      	cbz	r2, 8005502 <__mdiff+0x106>
 80054e2:	6107      	str	r7, [r0, #16]
 80054e4:	e7a4      	b.n	8005430 <__mdiff+0x34>
 80054e6:	f856 8b04 	ldr.w	r8, [r6], #4
 80054ea:	fa11 f288 	uxtah	r2, r1, r8
 80054ee:	1414      	asrs	r4, r2, #16
 80054f0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80054f4:	b292      	uxth	r2, r2
 80054f6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80054fa:	f84e 2b04 	str.w	r2, [lr], #4
 80054fe:	1421      	asrs	r1, r4, #16
 8005500:	e7e0      	b.n	80054c4 <__mdiff+0xc8>
 8005502:	3f01      	subs	r7, #1
 8005504:	e7ea      	b.n	80054dc <__mdiff+0xe0>
 8005506:	bf00      	nop
 8005508:	080061a3 	.word	0x080061a3
 800550c:	080061b4 	.word	0x080061b4

08005510 <__d2b>:
 8005510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005514:	460f      	mov	r7, r1
 8005516:	2101      	movs	r1, #1
 8005518:	ec59 8b10 	vmov	r8, r9, d0
 800551c:	4616      	mov	r6, r2
 800551e:	f7ff fcd5 	bl	8004ecc <_Balloc>
 8005522:	4604      	mov	r4, r0
 8005524:	b930      	cbnz	r0, 8005534 <__d2b+0x24>
 8005526:	4602      	mov	r2, r0
 8005528:	4b24      	ldr	r3, [pc, #144]	; (80055bc <__d2b+0xac>)
 800552a:	4825      	ldr	r0, [pc, #148]	; (80055c0 <__d2b+0xb0>)
 800552c:	f240 310f 	movw	r1, #783	; 0x30f
 8005530:	f000 fa76 	bl	8005a20 <__assert_func>
 8005534:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800553c:	bb2d      	cbnz	r5, 800558a <__d2b+0x7a>
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	f1b8 0300 	subs.w	r3, r8, #0
 8005544:	d026      	beq.n	8005594 <__d2b+0x84>
 8005546:	4668      	mov	r0, sp
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	f7ff fd87 	bl	800505c <__lo0bits>
 800554e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005552:	b1e8      	cbz	r0, 8005590 <__d2b+0x80>
 8005554:	f1c0 0320 	rsb	r3, r0, #32
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	430b      	orrs	r3, r1
 800555e:	40c2      	lsrs	r2, r0
 8005560:	6163      	str	r3, [r4, #20]
 8005562:	9201      	str	r2, [sp, #4]
 8005564:	9b01      	ldr	r3, [sp, #4]
 8005566:	61a3      	str	r3, [r4, #24]
 8005568:	2b00      	cmp	r3, #0
 800556a:	bf14      	ite	ne
 800556c:	2202      	movne	r2, #2
 800556e:	2201      	moveq	r2, #1
 8005570:	6122      	str	r2, [r4, #16]
 8005572:	b1bd      	cbz	r5, 80055a4 <__d2b+0x94>
 8005574:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005578:	4405      	add	r5, r0
 800557a:	603d      	str	r5, [r7, #0]
 800557c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005580:	6030      	str	r0, [r6, #0]
 8005582:	4620      	mov	r0, r4
 8005584:	b003      	add	sp, #12
 8005586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800558a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800558e:	e7d6      	b.n	800553e <__d2b+0x2e>
 8005590:	6161      	str	r1, [r4, #20]
 8005592:	e7e7      	b.n	8005564 <__d2b+0x54>
 8005594:	a801      	add	r0, sp, #4
 8005596:	f7ff fd61 	bl	800505c <__lo0bits>
 800559a:	9b01      	ldr	r3, [sp, #4]
 800559c:	6163      	str	r3, [r4, #20]
 800559e:	3020      	adds	r0, #32
 80055a0:	2201      	movs	r2, #1
 80055a2:	e7e5      	b.n	8005570 <__d2b+0x60>
 80055a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055ac:	6038      	str	r0, [r7, #0]
 80055ae:	6918      	ldr	r0, [r3, #16]
 80055b0:	f7ff fd34 	bl	800501c <__hi0bits>
 80055b4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055b8:	e7e2      	b.n	8005580 <__d2b+0x70>
 80055ba:	bf00      	nop
 80055bc:	080061a3 	.word	0x080061a3
 80055c0:	080061b4 	.word	0x080061b4

080055c4 <__ssputs_r>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	688e      	ldr	r6, [r1, #8]
 80055ca:	461f      	mov	r7, r3
 80055cc:	42be      	cmp	r6, r7
 80055ce:	680b      	ldr	r3, [r1, #0]
 80055d0:	4682      	mov	sl, r0
 80055d2:	460c      	mov	r4, r1
 80055d4:	4690      	mov	r8, r2
 80055d6:	d82c      	bhi.n	8005632 <__ssputs_r+0x6e>
 80055d8:	898a      	ldrh	r2, [r1, #12]
 80055da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055de:	d026      	beq.n	800562e <__ssputs_r+0x6a>
 80055e0:	6965      	ldr	r5, [r4, #20]
 80055e2:	6909      	ldr	r1, [r1, #16]
 80055e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055e8:	eba3 0901 	sub.w	r9, r3, r1
 80055ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055f0:	1c7b      	adds	r3, r7, #1
 80055f2:	444b      	add	r3, r9
 80055f4:	106d      	asrs	r5, r5, #1
 80055f6:	429d      	cmp	r5, r3
 80055f8:	bf38      	it	cc
 80055fa:	461d      	movcc	r5, r3
 80055fc:	0553      	lsls	r3, r2, #21
 80055fe:	d527      	bpl.n	8005650 <__ssputs_r+0x8c>
 8005600:	4629      	mov	r1, r5
 8005602:	f7fd fef5 	bl	80033f0 <_malloc_r>
 8005606:	4606      	mov	r6, r0
 8005608:	b360      	cbz	r0, 8005664 <__ssputs_r+0xa0>
 800560a:	6921      	ldr	r1, [r4, #16]
 800560c:	464a      	mov	r2, r9
 800560e:	f000 f9f9 	bl	8005a04 <memcpy>
 8005612:	89a3      	ldrh	r3, [r4, #12]
 8005614:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800561c:	81a3      	strh	r3, [r4, #12]
 800561e:	6126      	str	r6, [r4, #16]
 8005620:	6165      	str	r5, [r4, #20]
 8005622:	444e      	add	r6, r9
 8005624:	eba5 0509 	sub.w	r5, r5, r9
 8005628:	6026      	str	r6, [r4, #0]
 800562a:	60a5      	str	r5, [r4, #8]
 800562c:	463e      	mov	r6, r7
 800562e:	42be      	cmp	r6, r7
 8005630:	d900      	bls.n	8005634 <__ssputs_r+0x70>
 8005632:	463e      	mov	r6, r7
 8005634:	6820      	ldr	r0, [r4, #0]
 8005636:	4632      	mov	r2, r6
 8005638:	4641      	mov	r1, r8
 800563a:	f000 f9c9 	bl	80059d0 <memmove>
 800563e:	68a3      	ldr	r3, [r4, #8]
 8005640:	1b9b      	subs	r3, r3, r6
 8005642:	60a3      	str	r3, [r4, #8]
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	4433      	add	r3, r6
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	2000      	movs	r0, #0
 800564c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005650:	462a      	mov	r2, r5
 8005652:	f000 fa2b 	bl	8005aac <_realloc_r>
 8005656:	4606      	mov	r6, r0
 8005658:	2800      	cmp	r0, #0
 800565a:	d1e0      	bne.n	800561e <__ssputs_r+0x5a>
 800565c:	6921      	ldr	r1, [r4, #16]
 800565e:	4650      	mov	r0, sl
 8005660:	f7ff fbe8 	bl	8004e34 <_free_r>
 8005664:	230c      	movs	r3, #12
 8005666:	f8ca 3000 	str.w	r3, [sl]
 800566a:	89a3      	ldrh	r3, [r4, #12]
 800566c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005670:	81a3      	strh	r3, [r4, #12]
 8005672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005676:	e7e9      	b.n	800564c <__ssputs_r+0x88>

08005678 <_svfiprintf_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	4698      	mov	r8, r3
 800567e:	898b      	ldrh	r3, [r1, #12]
 8005680:	061b      	lsls	r3, r3, #24
 8005682:	b09d      	sub	sp, #116	; 0x74
 8005684:	4607      	mov	r7, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4614      	mov	r4, r2
 800568a:	d50e      	bpl.n	80056aa <_svfiprintf_r+0x32>
 800568c:	690b      	ldr	r3, [r1, #16]
 800568e:	b963      	cbnz	r3, 80056aa <_svfiprintf_r+0x32>
 8005690:	2140      	movs	r1, #64	; 0x40
 8005692:	f7fd fead 	bl	80033f0 <_malloc_r>
 8005696:	6028      	str	r0, [r5, #0]
 8005698:	6128      	str	r0, [r5, #16]
 800569a:	b920      	cbnz	r0, 80056a6 <_svfiprintf_r+0x2e>
 800569c:	230c      	movs	r3, #12
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056a4:	e0d0      	b.n	8005848 <_svfiprintf_r+0x1d0>
 80056a6:	2340      	movs	r3, #64	; 0x40
 80056a8:	616b      	str	r3, [r5, #20]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	2320      	movs	r3, #32
 80056b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b8:	2330      	movs	r3, #48	; 0x30
 80056ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005860 <_svfiprintf_r+0x1e8>
 80056be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c2:	f04f 0901 	mov.w	r9, #1
 80056c6:	4623      	mov	r3, r4
 80056c8:	469a      	mov	sl, r3
 80056ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ce:	b10a      	cbz	r2, 80056d4 <_svfiprintf_r+0x5c>
 80056d0:	2a25      	cmp	r2, #37	; 0x25
 80056d2:	d1f9      	bne.n	80056c8 <_svfiprintf_r+0x50>
 80056d4:	ebba 0b04 	subs.w	fp, sl, r4
 80056d8:	d00b      	beq.n	80056f2 <_svfiprintf_r+0x7a>
 80056da:	465b      	mov	r3, fp
 80056dc:	4622      	mov	r2, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff ff6f 	bl	80055c4 <__ssputs_r>
 80056e6:	3001      	adds	r0, #1
 80056e8:	f000 80a9 	beq.w	800583e <_svfiprintf_r+0x1c6>
 80056ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ee:	445a      	add	r2, fp
 80056f0:	9209      	str	r2, [sp, #36]	; 0x24
 80056f2:	f89a 3000 	ldrb.w	r3, [sl]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80a1 	beq.w	800583e <_svfiprintf_r+0x1c6>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005706:	f10a 0a01 	add.w	sl, sl, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	9307      	str	r3, [sp, #28]
 800570e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005712:	931a      	str	r3, [sp, #104]	; 0x68
 8005714:	4654      	mov	r4, sl
 8005716:	2205      	movs	r2, #5
 8005718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571c:	4850      	ldr	r0, [pc, #320]	; (8005860 <_svfiprintf_r+0x1e8>)
 800571e:	f7fa fd57 	bl	80001d0 <memchr>
 8005722:	9a04      	ldr	r2, [sp, #16]
 8005724:	b9d8      	cbnz	r0, 800575e <_svfiprintf_r+0xe6>
 8005726:	06d0      	lsls	r0, r2, #27
 8005728:	bf44      	itt	mi
 800572a:	2320      	movmi	r3, #32
 800572c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005730:	0711      	lsls	r1, r2, #28
 8005732:	bf44      	itt	mi
 8005734:	232b      	movmi	r3, #43	; 0x2b
 8005736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800573a:	f89a 3000 	ldrb.w	r3, [sl]
 800573e:	2b2a      	cmp	r3, #42	; 0x2a
 8005740:	d015      	beq.n	800576e <_svfiprintf_r+0xf6>
 8005742:	9a07      	ldr	r2, [sp, #28]
 8005744:	4654      	mov	r4, sl
 8005746:	2000      	movs	r0, #0
 8005748:	f04f 0c0a 	mov.w	ip, #10
 800574c:	4621      	mov	r1, r4
 800574e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005752:	3b30      	subs	r3, #48	; 0x30
 8005754:	2b09      	cmp	r3, #9
 8005756:	d94d      	bls.n	80057f4 <_svfiprintf_r+0x17c>
 8005758:	b1b0      	cbz	r0, 8005788 <_svfiprintf_r+0x110>
 800575a:	9207      	str	r2, [sp, #28]
 800575c:	e014      	b.n	8005788 <_svfiprintf_r+0x110>
 800575e:	eba0 0308 	sub.w	r3, r0, r8
 8005762:	fa09 f303 	lsl.w	r3, r9, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	9304      	str	r3, [sp, #16]
 800576a:	46a2      	mov	sl, r4
 800576c:	e7d2      	b.n	8005714 <_svfiprintf_r+0x9c>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	1d19      	adds	r1, r3, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	9103      	str	r1, [sp, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfbb      	ittet	lt
 800577a:	425b      	neglt	r3, r3
 800577c:	f042 0202 	orrlt.w	r2, r2, #2
 8005780:	9307      	strge	r3, [sp, #28]
 8005782:	9307      	strlt	r3, [sp, #28]
 8005784:	bfb8      	it	lt
 8005786:	9204      	strlt	r2, [sp, #16]
 8005788:	7823      	ldrb	r3, [r4, #0]
 800578a:	2b2e      	cmp	r3, #46	; 0x2e
 800578c:	d10c      	bne.n	80057a8 <_svfiprintf_r+0x130>
 800578e:	7863      	ldrb	r3, [r4, #1]
 8005790:	2b2a      	cmp	r3, #42	; 0x2a
 8005792:	d134      	bne.n	80057fe <_svfiprintf_r+0x186>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	1d1a      	adds	r2, r3, #4
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	9203      	str	r2, [sp, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	bfb8      	it	lt
 80057a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80057a4:	3402      	adds	r4, #2
 80057a6:	9305      	str	r3, [sp, #20]
 80057a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005870 <_svfiprintf_r+0x1f8>
 80057ac:	7821      	ldrb	r1, [r4, #0]
 80057ae:	2203      	movs	r2, #3
 80057b0:	4650      	mov	r0, sl
 80057b2:	f7fa fd0d 	bl	80001d0 <memchr>
 80057b6:	b138      	cbz	r0, 80057c8 <_svfiprintf_r+0x150>
 80057b8:	9b04      	ldr	r3, [sp, #16]
 80057ba:	eba0 000a 	sub.w	r0, r0, sl
 80057be:	2240      	movs	r2, #64	; 0x40
 80057c0:	4082      	lsls	r2, r0
 80057c2:	4313      	orrs	r3, r2
 80057c4:	3401      	adds	r4, #1
 80057c6:	9304      	str	r3, [sp, #16]
 80057c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057cc:	4825      	ldr	r0, [pc, #148]	; (8005864 <_svfiprintf_r+0x1ec>)
 80057ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d2:	2206      	movs	r2, #6
 80057d4:	f7fa fcfc 	bl	80001d0 <memchr>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d038      	beq.n	800584e <_svfiprintf_r+0x1d6>
 80057dc:	4b22      	ldr	r3, [pc, #136]	; (8005868 <_svfiprintf_r+0x1f0>)
 80057de:	bb1b      	cbnz	r3, 8005828 <_svfiprintf_r+0x1b0>
 80057e0:	9b03      	ldr	r3, [sp, #12]
 80057e2:	3307      	adds	r3, #7
 80057e4:	f023 0307 	bic.w	r3, r3, #7
 80057e8:	3308      	adds	r3, #8
 80057ea:	9303      	str	r3, [sp, #12]
 80057ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ee:	4433      	add	r3, r6
 80057f0:	9309      	str	r3, [sp, #36]	; 0x24
 80057f2:	e768      	b.n	80056c6 <_svfiprintf_r+0x4e>
 80057f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f8:	460c      	mov	r4, r1
 80057fa:	2001      	movs	r0, #1
 80057fc:	e7a6      	b.n	800574c <_svfiprintf_r+0xd4>
 80057fe:	2300      	movs	r3, #0
 8005800:	3401      	adds	r4, #1
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	4619      	mov	r1, r3
 8005806:	f04f 0c0a 	mov.w	ip, #10
 800580a:	4620      	mov	r0, r4
 800580c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005810:	3a30      	subs	r2, #48	; 0x30
 8005812:	2a09      	cmp	r2, #9
 8005814:	d903      	bls.n	800581e <_svfiprintf_r+0x1a6>
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0c6      	beq.n	80057a8 <_svfiprintf_r+0x130>
 800581a:	9105      	str	r1, [sp, #20]
 800581c:	e7c4      	b.n	80057a8 <_svfiprintf_r+0x130>
 800581e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005822:	4604      	mov	r4, r0
 8005824:	2301      	movs	r3, #1
 8005826:	e7f0      	b.n	800580a <_svfiprintf_r+0x192>
 8005828:	ab03      	add	r3, sp, #12
 800582a:	9300      	str	r3, [sp, #0]
 800582c:	462a      	mov	r2, r5
 800582e:	4b0f      	ldr	r3, [pc, #60]	; (800586c <_svfiprintf_r+0x1f4>)
 8005830:	a904      	add	r1, sp, #16
 8005832:	4638      	mov	r0, r7
 8005834:	f7fd ff08 	bl	8003648 <_printf_float>
 8005838:	1c42      	adds	r2, r0, #1
 800583a:	4606      	mov	r6, r0
 800583c:	d1d6      	bne.n	80057ec <_svfiprintf_r+0x174>
 800583e:	89ab      	ldrh	r3, [r5, #12]
 8005840:	065b      	lsls	r3, r3, #25
 8005842:	f53f af2d 	bmi.w	80056a0 <_svfiprintf_r+0x28>
 8005846:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005848:	b01d      	add	sp, #116	; 0x74
 800584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800584e:	ab03      	add	r3, sp, #12
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	462a      	mov	r2, r5
 8005854:	4b05      	ldr	r3, [pc, #20]	; (800586c <_svfiprintf_r+0x1f4>)
 8005856:	a904      	add	r1, sp, #16
 8005858:	4638      	mov	r0, r7
 800585a:	f7fe f999 	bl	8003b90 <_printf_i>
 800585e:	e7eb      	b.n	8005838 <_svfiprintf_r+0x1c0>
 8005860:	0800630c 	.word	0x0800630c
 8005864:	08006316 	.word	0x08006316
 8005868:	08003649 	.word	0x08003649
 800586c:	080055c5 	.word	0x080055c5
 8005870:	08006312 	.word	0x08006312

08005874 <__sflush_r>:
 8005874:	898a      	ldrh	r2, [r1, #12]
 8005876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800587a:	4605      	mov	r5, r0
 800587c:	0710      	lsls	r0, r2, #28
 800587e:	460c      	mov	r4, r1
 8005880:	d458      	bmi.n	8005934 <__sflush_r+0xc0>
 8005882:	684b      	ldr	r3, [r1, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	dc05      	bgt.n	8005894 <__sflush_r+0x20>
 8005888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	dc02      	bgt.n	8005894 <__sflush_r+0x20>
 800588e:	2000      	movs	r0, #0
 8005890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005896:	2e00      	cmp	r6, #0
 8005898:	d0f9      	beq.n	800588e <__sflush_r+0x1a>
 800589a:	2300      	movs	r3, #0
 800589c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058a0:	682f      	ldr	r7, [r5, #0]
 80058a2:	6a21      	ldr	r1, [r4, #32]
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	d032      	beq.n	800590e <__sflush_r+0x9a>
 80058a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058aa:	89a3      	ldrh	r3, [r4, #12]
 80058ac:	075a      	lsls	r2, r3, #29
 80058ae:	d505      	bpl.n	80058bc <__sflush_r+0x48>
 80058b0:	6863      	ldr	r3, [r4, #4]
 80058b2:	1ac0      	subs	r0, r0, r3
 80058b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058b6:	b10b      	cbz	r3, 80058bc <__sflush_r+0x48>
 80058b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058ba:	1ac0      	subs	r0, r0, r3
 80058bc:	2300      	movs	r3, #0
 80058be:	4602      	mov	r2, r0
 80058c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058c2:	6a21      	ldr	r1, [r4, #32]
 80058c4:	4628      	mov	r0, r5
 80058c6:	47b0      	blx	r6
 80058c8:	1c43      	adds	r3, r0, #1
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	d106      	bne.n	80058dc <__sflush_r+0x68>
 80058ce:	6829      	ldr	r1, [r5, #0]
 80058d0:	291d      	cmp	r1, #29
 80058d2:	d82b      	bhi.n	800592c <__sflush_r+0xb8>
 80058d4:	4a29      	ldr	r2, [pc, #164]	; (800597c <__sflush_r+0x108>)
 80058d6:	410a      	asrs	r2, r1
 80058d8:	07d6      	lsls	r6, r2, #31
 80058da:	d427      	bmi.n	800592c <__sflush_r+0xb8>
 80058dc:	2200      	movs	r2, #0
 80058de:	6062      	str	r2, [r4, #4]
 80058e0:	04d9      	lsls	r1, r3, #19
 80058e2:	6922      	ldr	r2, [r4, #16]
 80058e4:	6022      	str	r2, [r4, #0]
 80058e6:	d504      	bpl.n	80058f2 <__sflush_r+0x7e>
 80058e8:	1c42      	adds	r2, r0, #1
 80058ea:	d101      	bne.n	80058f0 <__sflush_r+0x7c>
 80058ec:	682b      	ldr	r3, [r5, #0]
 80058ee:	b903      	cbnz	r3, 80058f2 <__sflush_r+0x7e>
 80058f0:	6560      	str	r0, [r4, #84]	; 0x54
 80058f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058f4:	602f      	str	r7, [r5, #0]
 80058f6:	2900      	cmp	r1, #0
 80058f8:	d0c9      	beq.n	800588e <__sflush_r+0x1a>
 80058fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058fe:	4299      	cmp	r1, r3
 8005900:	d002      	beq.n	8005908 <__sflush_r+0x94>
 8005902:	4628      	mov	r0, r5
 8005904:	f7ff fa96 	bl	8004e34 <_free_r>
 8005908:	2000      	movs	r0, #0
 800590a:	6360      	str	r0, [r4, #52]	; 0x34
 800590c:	e7c0      	b.n	8005890 <__sflush_r+0x1c>
 800590e:	2301      	movs	r3, #1
 8005910:	4628      	mov	r0, r5
 8005912:	47b0      	blx	r6
 8005914:	1c41      	adds	r1, r0, #1
 8005916:	d1c8      	bne.n	80058aa <__sflush_r+0x36>
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0c5      	beq.n	80058aa <__sflush_r+0x36>
 800591e:	2b1d      	cmp	r3, #29
 8005920:	d001      	beq.n	8005926 <__sflush_r+0xb2>
 8005922:	2b16      	cmp	r3, #22
 8005924:	d101      	bne.n	800592a <__sflush_r+0xb6>
 8005926:	602f      	str	r7, [r5, #0]
 8005928:	e7b1      	b.n	800588e <__sflush_r+0x1a>
 800592a:	89a3      	ldrh	r3, [r4, #12]
 800592c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005930:	81a3      	strh	r3, [r4, #12]
 8005932:	e7ad      	b.n	8005890 <__sflush_r+0x1c>
 8005934:	690f      	ldr	r7, [r1, #16]
 8005936:	2f00      	cmp	r7, #0
 8005938:	d0a9      	beq.n	800588e <__sflush_r+0x1a>
 800593a:	0793      	lsls	r3, r2, #30
 800593c:	680e      	ldr	r6, [r1, #0]
 800593e:	bf08      	it	eq
 8005940:	694b      	ldreq	r3, [r1, #20]
 8005942:	600f      	str	r7, [r1, #0]
 8005944:	bf18      	it	ne
 8005946:	2300      	movne	r3, #0
 8005948:	eba6 0807 	sub.w	r8, r6, r7
 800594c:	608b      	str	r3, [r1, #8]
 800594e:	f1b8 0f00 	cmp.w	r8, #0
 8005952:	dd9c      	ble.n	800588e <__sflush_r+0x1a>
 8005954:	6a21      	ldr	r1, [r4, #32]
 8005956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005958:	4643      	mov	r3, r8
 800595a:	463a      	mov	r2, r7
 800595c:	4628      	mov	r0, r5
 800595e:	47b0      	blx	r6
 8005960:	2800      	cmp	r0, #0
 8005962:	dc06      	bgt.n	8005972 <__sflush_r+0xfe>
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800596a:	81a3      	strh	r3, [r4, #12]
 800596c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005970:	e78e      	b.n	8005890 <__sflush_r+0x1c>
 8005972:	4407      	add	r7, r0
 8005974:	eba8 0800 	sub.w	r8, r8, r0
 8005978:	e7e9      	b.n	800594e <__sflush_r+0xda>
 800597a:	bf00      	nop
 800597c:	dfbffffe 	.word	0xdfbffffe

08005980 <_fflush_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	690b      	ldr	r3, [r1, #16]
 8005984:	4605      	mov	r5, r0
 8005986:	460c      	mov	r4, r1
 8005988:	b913      	cbnz	r3, 8005990 <_fflush_r+0x10>
 800598a:	2500      	movs	r5, #0
 800598c:	4628      	mov	r0, r5
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	b118      	cbz	r0, 800599a <_fflush_r+0x1a>
 8005992:	6a03      	ldr	r3, [r0, #32]
 8005994:	b90b      	cbnz	r3, 800599a <_fflush_r+0x1a>
 8005996:	f7fe faa9 	bl	8003eec <__sinit>
 800599a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0f3      	beq.n	800598a <_fflush_r+0xa>
 80059a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059a4:	07d0      	lsls	r0, r2, #31
 80059a6:	d404      	bmi.n	80059b2 <_fflush_r+0x32>
 80059a8:	0599      	lsls	r1, r3, #22
 80059aa:	d402      	bmi.n	80059b2 <_fflush_r+0x32>
 80059ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ae:	f7fe fbc4 	bl	800413a <__retarget_lock_acquire_recursive>
 80059b2:	4628      	mov	r0, r5
 80059b4:	4621      	mov	r1, r4
 80059b6:	f7ff ff5d 	bl	8005874 <__sflush_r>
 80059ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059bc:	07da      	lsls	r2, r3, #31
 80059be:	4605      	mov	r5, r0
 80059c0:	d4e4      	bmi.n	800598c <_fflush_r+0xc>
 80059c2:	89a3      	ldrh	r3, [r4, #12]
 80059c4:	059b      	lsls	r3, r3, #22
 80059c6:	d4e1      	bmi.n	800598c <_fflush_r+0xc>
 80059c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ca:	f7fe fbb7 	bl	800413c <__retarget_lock_release_recursive>
 80059ce:	e7dd      	b.n	800598c <_fflush_r+0xc>

080059d0 <memmove>:
 80059d0:	4288      	cmp	r0, r1
 80059d2:	b510      	push	{r4, lr}
 80059d4:	eb01 0402 	add.w	r4, r1, r2
 80059d8:	d902      	bls.n	80059e0 <memmove+0x10>
 80059da:	4284      	cmp	r4, r0
 80059dc:	4623      	mov	r3, r4
 80059de:	d807      	bhi.n	80059f0 <memmove+0x20>
 80059e0:	1e43      	subs	r3, r0, #1
 80059e2:	42a1      	cmp	r1, r4
 80059e4:	d008      	beq.n	80059f8 <memmove+0x28>
 80059e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ee:	e7f8      	b.n	80059e2 <memmove+0x12>
 80059f0:	4402      	add	r2, r0
 80059f2:	4601      	mov	r1, r0
 80059f4:	428a      	cmp	r2, r1
 80059f6:	d100      	bne.n	80059fa <memmove+0x2a>
 80059f8:	bd10      	pop	{r4, pc}
 80059fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a02:	e7f7      	b.n	80059f4 <memmove+0x24>

08005a04 <memcpy>:
 8005a04:	440a      	add	r2, r1
 8005a06:	4291      	cmp	r1, r2
 8005a08:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a0c:	d100      	bne.n	8005a10 <memcpy+0xc>
 8005a0e:	4770      	bx	lr
 8005a10:	b510      	push	{r4, lr}
 8005a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	d1f9      	bne.n	8005a12 <memcpy+0xe>
 8005a1e:	bd10      	pop	{r4, pc}

08005a20 <__assert_func>:
 8005a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a22:	4614      	mov	r4, r2
 8005a24:	461a      	mov	r2, r3
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <__assert_func+0x2c>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	68d8      	ldr	r0, [r3, #12]
 8005a2e:	b14c      	cbz	r4, 8005a44 <__assert_func+0x24>
 8005a30:	4b07      	ldr	r3, [pc, #28]	; (8005a50 <__assert_func+0x30>)
 8005a32:	9100      	str	r1, [sp, #0]
 8005a34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a38:	4906      	ldr	r1, [pc, #24]	; (8005a54 <__assert_func+0x34>)
 8005a3a:	462b      	mov	r3, r5
 8005a3c:	f000 f872 	bl	8005b24 <fiprintf>
 8005a40:	f000 f882 	bl	8005b48 <abort>
 8005a44:	4b04      	ldr	r3, [pc, #16]	; (8005a58 <__assert_func+0x38>)
 8005a46:	461c      	mov	r4, r3
 8005a48:	e7f3      	b.n	8005a32 <__assert_func+0x12>
 8005a4a:	bf00      	nop
 8005a4c:	20000068 	.word	0x20000068
 8005a50:	08006327 	.word	0x08006327
 8005a54:	08006334 	.word	0x08006334
 8005a58:	08006362 	.word	0x08006362

08005a5c <_calloc_r>:
 8005a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a5e:	fba1 2402 	umull	r2, r4, r1, r2
 8005a62:	b94c      	cbnz	r4, 8005a78 <_calloc_r+0x1c>
 8005a64:	4611      	mov	r1, r2
 8005a66:	9201      	str	r2, [sp, #4]
 8005a68:	f7fd fcc2 	bl	80033f0 <_malloc_r>
 8005a6c:	9a01      	ldr	r2, [sp, #4]
 8005a6e:	4605      	mov	r5, r0
 8005a70:	b930      	cbnz	r0, 8005a80 <_calloc_r+0x24>
 8005a72:	4628      	mov	r0, r5
 8005a74:	b003      	add	sp, #12
 8005a76:	bd30      	pop	{r4, r5, pc}
 8005a78:	220c      	movs	r2, #12
 8005a7a:	6002      	str	r2, [r0, #0]
 8005a7c:	2500      	movs	r5, #0
 8005a7e:	e7f8      	b.n	8005a72 <_calloc_r+0x16>
 8005a80:	4621      	mov	r1, r4
 8005a82:	f7fe facc 	bl	800401e <memset>
 8005a86:	e7f4      	b.n	8005a72 <_calloc_r+0x16>

08005a88 <__ascii_mbtowc>:
 8005a88:	b082      	sub	sp, #8
 8005a8a:	b901      	cbnz	r1, 8005a8e <__ascii_mbtowc+0x6>
 8005a8c:	a901      	add	r1, sp, #4
 8005a8e:	b142      	cbz	r2, 8005aa2 <__ascii_mbtowc+0x1a>
 8005a90:	b14b      	cbz	r3, 8005aa6 <__ascii_mbtowc+0x1e>
 8005a92:	7813      	ldrb	r3, [r2, #0]
 8005a94:	600b      	str	r3, [r1, #0]
 8005a96:	7812      	ldrb	r2, [r2, #0]
 8005a98:	1e10      	subs	r0, r2, #0
 8005a9a:	bf18      	it	ne
 8005a9c:	2001      	movne	r0, #1
 8005a9e:	b002      	add	sp, #8
 8005aa0:	4770      	bx	lr
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	e7fb      	b.n	8005a9e <__ascii_mbtowc+0x16>
 8005aa6:	f06f 0001 	mvn.w	r0, #1
 8005aaa:	e7f8      	b.n	8005a9e <__ascii_mbtowc+0x16>

08005aac <_realloc_r>:
 8005aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ab0:	4680      	mov	r8, r0
 8005ab2:	4614      	mov	r4, r2
 8005ab4:	460e      	mov	r6, r1
 8005ab6:	b921      	cbnz	r1, 8005ac2 <_realloc_r+0x16>
 8005ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005abc:	4611      	mov	r1, r2
 8005abe:	f7fd bc97 	b.w	80033f0 <_malloc_r>
 8005ac2:	b92a      	cbnz	r2, 8005ad0 <_realloc_r+0x24>
 8005ac4:	f7ff f9b6 	bl	8004e34 <_free_r>
 8005ac8:	4625      	mov	r5, r4
 8005aca:	4628      	mov	r0, r5
 8005acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ad0:	f000 f841 	bl	8005b56 <_malloc_usable_size_r>
 8005ad4:	4284      	cmp	r4, r0
 8005ad6:	4607      	mov	r7, r0
 8005ad8:	d802      	bhi.n	8005ae0 <_realloc_r+0x34>
 8005ada:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005ade:	d812      	bhi.n	8005b06 <_realloc_r+0x5a>
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	f7fd fc84 	bl	80033f0 <_malloc_r>
 8005ae8:	4605      	mov	r5, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d0ed      	beq.n	8005aca <_realloc_r+0x1e>
 8005aee:	42bc      	cmp	r4, r7
 8005af0:	4622      	mov	r2, r4
 8005af2:	4631      	mov	r1, r6
 8005af4:	bf28      	it	cs
 8005af6:	463a      	movcs	r2, r7
 8005af8:	f7ff ff84 	bl	8005a04 <memcpy>
 8005afc:	4631      	mov	r1, r6
 8005afe:	4640      	mov	r0, r8
 8005b00:	f7ff f998 	bl	8004e34 <_free_r>
 8005b04:	e7e1      	b.n	8005aca <_realloc_r+0x1e>
 8005b06:	4635      	mov	r5, r6
 8005b08:	e7df      	b.n	8005aca <_realloc_r+0x1e>

08005b0a <__ascii_wctomb>:
 8005b0a:	b149      	cbz	r1, 8005b20 <__ascii_wctomb+0x16>
 8005b0c:	2aff      	cmp	r2, #255	; 0xff
 8005b0e:	bf85      	ittet	hi
 8005b10:	238a      	movhi	r3, #138	; 0x8a
 8005b12:	6003      	strhi	r3, [r0, #0]
 8005b14:	700a      	strbls	r2, [r1, #0]
 8005b16:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005b1a:	bf98      	it	ls
 8005b1c:	2001      	movls	r0, #1
 8005b1e:	4770      	bx	lr
 8005b20:	4608      	mov	r0, r1
 8005b22:	4770      	bx	lr

08005b24 <fiprintf>:
 8005b24:	b40e      	push	{r1, r2, r3}
 8005b26:	b503      	push	{r0, r1, lr}
 8005b28:	4601      	mov	r1, r0
 8005b2a:	ab03      	add	r3, sp, #12
 8005b2c:	4805      	ldr	r0, [pc, #20]	; (8005b44 <fiprintf+0x20>)
 8005b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b32:	6800      	ldr	r0, [r0, #0]
 8005b34:	9301      	str	r3, [sp, #4]
 8005b36:	f000 f83f 	bl	8005bb8 <_vfiprintf_r>
 8005b3a:	b002      	add	sp, #8
 8005b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b40:	b003      	add	sp, #12
 8005b42:	4770      	bx	lr
 8005b44:	20000068 	.word	0x20000068

08005b48 <abort>:
 8005b48:	b508      	push	{r3, lr}
 8005b4a:	2006      	movs	r0, #6
 8005b4c:	f000 fa0c 	bl	8005f68 <raise>
 8005b50:	2001      	movs	r0, #1
 8005b52:	f7fb fffd 	bl	8001b50 <_exit>

08005b56 <_malloc_usable_size_r>:
 8005b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b5a:	1f18      	subs	r0, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bfbc      	itt	lt
 8005b60:	580b      	ldrlt	r3, [r1, r0]
 8005b62:	18c0      	addlt	r0, r0, r3
 8005b64:	4770      	bx	lr

08005b66 <__sfputc_r>:
 8005b66:	6893      	ldr	r3, [r2, #8]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	b410      	push	{r4}
 8005b6e:	6093      	str	r3, [r2, #8]
 8005b70:	da08      	bge.n	8005b84 <__sfputc_r+0x1e>
 8005b72:	6994      	ldr	r4, [r2, #24]
 8005b74:	42a3      	cmp	r3, r4
 8005b76:	db01      	blt.n	8005b7c <__sfputc_r+0x16>
 8005b78:	290a      	cmp	r1, #10
 8005b7a:	d103      	bne.n	8005b84 <__sfputc_r+0x1e>
 8005b7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b80:	f000 b934 	b.w	8005dec <__swbuf_r>
 8005b84:	6813      	ldr	r3, [r2, #0]
 8005b86:	1c58      	adds	r0, r3, #1
 8005b88:	6010      	str	r0, [r2, #0]
 8005b8a:	7019      	strb	r1, [r3, #0]
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <__sfputs_r>:
 8005b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b96:	4606      	mov	r6, r0
 8005b98:	460f      	mov	r7, r1
 8005b9a:	4614      	mov	r4, r2
 8005b9c:	18d5      	adds	r5, r2, r3
 8005b9e:	42ac      	cmp	r4, r5
 8005ba0:	d101      	bne.n	8005ba6 <__sfputs_r+0x12>
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e007      	b.n	8005bb6 <__sfputs_r+0x22>
 8005ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005baa:	463a      	mov	r2, r7
 8005bac:	4630      	mov	r0, r6
 8005bae:	f7ff ffda 	bl	8005b66 <__sfputc_r>
 8005bb2:	1c43      	adds	r3, r0, #1
 8005bb4:	d1f3      	bne.n	8005b9e <__sfputs_r+0xa>
 8005bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005bb8 <_vfiprintf_r>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	460d      	mov	r5, r1
 8005bbe:	b09d      	sub	sp, #116	; 0x74
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	4698      	mov	r8, r3
 8005bc4:	4606      	mov	r6, r0
 8005bc6:	b118      	cbz	r0, 8005bd0 <_vfiprintf_r+0x18>
 8005bc8:	6a03      	ldr	r3, [r0, #32]
 8005bca:	b90b      	cbnz	r3, 8005bd0 <_vfiprintf_r+0x18>
 8005bcc:	f7fe f98e 	bl	8003eec <__sinit>
 8005bd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bd2:	07d9      	lsls	r1, r3, #31
 8005bd4:	d405      	bmi.n	8005be2 <_vfiprintf_r+0x2a>
 8005bd6:	89ab      	ldrh	r3, [r5, #12]
 8005bd8:	059a      	lsls	r2, r3, #22
 8005bda:	d402      	bmi.n	8005be2 <_vfiprintf_r+0x2a>
 8005bdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bde:	f7fe faac 	bl	800413a <__retarget_lock_acquire_recursive>
 8005be2:	89ab      	ldrh	r3, [r5, #12]
 8005be4:	071b      	lsls	r3, r3, #28
 8005be6:	d501      	bpl.n	8005bec <_vfiprintf_r+0x34>
 8005be8:	692b      	ldr	r3, [r5, #16]
 8005bea:	b99b      	cbnz	r3, 8005c14 <_vfiprintf_r+0x5c>
 8005bec:	4629      	mov	r1, r5
 8005bee:	4630      	mov	r0, r6
 8005bf0:	f000 f93a 	bl	8005e68 <__swsetup_r>
 8005bf4:	b170      	cbz	r0, 8005c14 <_vfiprintf_r+0x5c>
 8005bf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bf8:	07dc      	lsls	r4, r3, #31
 8005bfa:	d504      	bpl.n	8005c06 <_vfiprintf_r+0x4e>
 8005bfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c00:	b01d      	add	sp, #116	; 0x74
 8005c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	0598      	lsls	r0, r3, #22
 8005c0a:	d4f7      	bmi.n	8005bfc <_vfiprintf_r+0x44>
 8005c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0e:	f7fe fa95 	bl	800413c <__retarget_lock_release_recursive>
 8005c12:	e7f3      	b.n	8005bfc <_vfiprintf_r+0x44>
 8005c14:	2300      	movs	r3, #0
 8005c16:	9309      	str	r3, [sp, #36]	; 0x24
 8005c18:	2320      	movs	r3, #32
 8005c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c22:	2330      	movs	r3, #48	; 0x30
 8005c24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005dd8 <_vfiprintf_r+0x220>
 8005c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c2c:	f04f 0901 	mov.w	r9, #1
 8005c30:	4623      	mov	r3, r4
 8005c32:	469a      	mov	sl, r3
 8005c34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c38:	b10a      	cbz	r2, 8005c3e <_vfiprintf_r+0x86>
 8005c3a:	2a25      	cmp	r2, #37	; 0x25
 8005c3c:	d1f9      	bne.n	8005c32 <_vfiprintf_r+0x7a>
 8005c3e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c42:	d00b      	beq.n	8005c5c <_vfiprintf_r+0xa4>
 8005c44:	465b      	mov	r3, fp
 8005c46:	4622      	mov	r2, r4
 8005c48:	4629      	mov	r1, r5
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7ff ffa2 	bl	8005b94 <__sfputs_r>
 8005c50:	3001      	adds	r0, #1
 8005c52:	f000 80a9 	beq.w	8005da8 <_vfiprintf_r+0x1f0>
 8005c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c58:	445a      	add	r2, fp
 8005c5a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80a1 	beq.w	8005da8 <_vfiprintf_r+0x1f0>
 8005c66:	2300      	movs	r3, #0
 8005c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c70:	f10a 0a01 	add.w	sl, sl, #1
 8005c74:	9304      	str	r3, [sp, #16]
 8005c76:	9307      	str	r3, [sp, #28]
 8005c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8005c7e:	4654      	mov	r4, sl
 8005c80:	2205      	movs	r2, #5
 8005c82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c86:	4854      	ldr	r0, [pc, #336]	; (8005dd8 <_vfiprintf_r+0x220>)
 8005c88:	f7fa faa2 	bl	80001d0 <memchr>
 8005c8c:	9a04      	ldr	r2, [sp, #16]
 8005c8e:	b9d8      	cbnz	r0, 8005cc8 <_vfiprintf_r+0x110>
 8005c90:	06d1      	lsls	r1, r2, #27
 8005c92:	bf44      	itt	mi
 8005c94:	2320      	movmi	r3, #32
 8005c96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c9a:	0713      	lsls	r3, r2, #28
 8005c9c:	bf44      	itt	mi
 8005c9e:	232b      	movmi	r3, #43	; 0x2b
 8005ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8005caa:	d015      	beq.n	8005cd8 <_vfiprintf_r+0x120>
 8005cac:	9a07      	ldr	r2, [sp, #28]
 8005cae:	4654      	mov	r4, sl
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	f04f 0c0a 	mov.w	ip, #10
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cbc:	3b30      	subs	r3, #48	; 0x30
 8005cbe:	2b09      	cmp	r3, #9
 8005cc0:	d94d      	bls.n	8005d5e <_vfiprintf_r+0x1a6>
 8005cc2:	b1b0      	cbz	r0, 8005cf2 <_vfiprintf_r+0x13a>
 8005cc4:	9207      	str	r2, [sp, #28]
 8005cc6:	e014      	b.n	8005cf2 <_vfiprintf_r+0x13a>
 8005cc8:	eba0 0308 	sub.w	r3, r0, r8
 8005ccc:	fa09 f303 	lsl.w	r3, r9, r3
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	9304      	str	r3, [sp, #16]
 8005cd4:	46a2      	mov	sl, r4
 8005cd6:	e7d2      	b.n	8005c7e <_vfiprintf_r+0xc6>
 8005cd8:	9b03      	ldr	r3, [sp, #12]
 8005cda:	1d19      	adds	r1, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	9103      	str	r1, [sp, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bfbb      	ittet	lt
 8005ce4:	425b      	neglt	r3, r3
 8005ce6:	f042 0202 	orrlt.w	r2, r2, #2
 8005cea:	9307      	strge	r3, [sp, #28]
 8005cec:	9307      	strlt	r3, [sp, #28]
 8005cee:	bfb8      	it	lt
 8005cf0:	9204      	strlt	r2, [sp, #16]
 8005cf2:	7823      	ldrb	r3, [r4, #0]
 8005cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8005cf6:	d10c      	bne.n	8005d12 <_vfiprintf_r+0x15a>
 8005cf8:	7863      	ldrb	r3, [r4, #1]
 8005cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfc:	d134      	bne.n	8005d68 <_vfiprintf_r+0x1b0>
 8005cfe:	9b03      	ldr	r3, [sp, #12]
 8005d00:	1d1a      	adds	r2, r3, #4
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	9203      	str	r2, [sp, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bfb8      	it	lt
 8005d0a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d0e:	3402      	adds	r4, #2
 8005d10:	9305      	str	r3, [sp, #20]
 8005d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005de8 <_vfiprintf_r+0x230>
 8005d16:	7821      	ldrb	r1, [r4, #0]
 8005d18:	2203      	movs	r2, #3
 8005d1a:	4650      	mov	r0, sl
 8005d1c:	f7fa fa58 	bl	80001d0 <memchr>
 8005d20:	b138      	cbz	r0, 8005d32 <_vfiprintf_r+0x17a>
 8005d22:	9b04      	ldr	r3, [sp, #16]
 8005d24:	eba0 000a 	sub.w	r0, r0, sl
 8005d28:	2240      	movs	r2, #64	; 0x40
 8005d2a:	4082      	lsls	r2, r0
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	3401      	adds	r4, #1
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d36:	4829      	ldr	r0, [pc, #164]	; (8005ddc <_vfiprintf_r+0x224>)
 8005d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d3c:	2206      	movs	r2, #6
 8005d3e:	f7fa fa47 	bl	80001d0 <memchr>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d03f      	beq.n	8005dc6 <_vfiprintf_r+0x20e>
 8005d46:	4b26      	ldr	r3, [pc, #152]	; (8005de0 <_vfiprintf_r+0x228>)
 8005d48:	bb1b      	cbnz	r3, 8005d92 <_vfiprintf_r+0x1da>
 8005d4a:	9b03      	ldr	r3, [sp, #12]
 8005d4c:	3307      	adds	r3, #7
 8005d4e:	f023 0307 	bic.w	r3, r3, #7
 8005d52:	3308      	adds	r3, #8
 8005d54:	9303      	str	r3, [sp, #12]
 8005d56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d58:	443b      	add	r3, r7
 8005d5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d5c:	e768      	b.n	8005c30 <_vfiprintf_r+0x78>
 8005d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d62:	460c      	mov	r4, r1
 8005d64:	2001      	movs	r0, #1
 8005d66:	e7a6      	b.n	8005cb6 <_vfiprintf_r+0xfe>
 8005d68:	2300      	movs	r3, #0
 8005d6a:	3401      	adds	r4, #1
 8005d6c:	9305      	str	r3, [sp, #20]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	f04f 0c0a 	mov.w	ip, #10
 8005d74:	4620      	mov	r0, r4
 8005d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d7a:	3a30      	subs	r2, #48	; 0x30
 8005d7c:	2a09      	cmp	r2, #9
 8005d7e:	d903      	bls.n	8005d88 <_vfiprintf_r+0x1d0>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0c6      	beq.n	8005d12 <_vfiprintf_r+0x15a>
 8005d84:	9105      	str	r1, [sp, #20]
 8005d86:	e7c4      	b.n	8005d12 <_vfiprintf_r+0x15a>
 8005d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e7f0      	b.n	8005d74 <_vfiprintf_r+0x1bc>
 8005d92:	ab03      	add	r3, sp, #12
 8005d94:	9300      	str	r3, [sp, #0]
 8005d96:	462a      	mov	r2, r5
 8005d98:	4b12      	ldr	r3, [pc, #72]	; (8005de4 <_vfiprintf_r+0x22c>)
 8005d9a:	a904      	add	r1, sp, #16
 8005d9c:	4630      	mov	r0, r6
 8005d9e:	f7fd fc53 	bl	8003648 <_printf_float>
 8005da2:	4607      	mov	r7, r0
 8005da4:	1c78      	adds	r0, r7, #1
 8005da6:	d1d6      	bne.n	8005d56 <_vfiprintf_r+0x19e>
 8005da8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005daa:	07d9      	lsls	r1, r3, #31
 8005dac:	d405      	bmi.n	8005dba <_vfiprintf_r+0x202>
 8005dae:	89ab      	ldrh	r3, [r5, #12]
 8005db0:	059a      	lsls	r2, r3, #22
 8005db2:	d402      	bmi.n	8005dba <_vfiprintf_r+0x202>
 8005db4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005db6:	f7fe f9c1 	bl	800413c <__retarget_lock_release_recursive>
 8005dba:	89ab      	ldrh	r3, [r5, #12]
 8005dbc:	065b      	lsls	r3, r3, #25
 8005dbe:	f53f af1d 	bmi.w	8005bfc <_vfiprintf_r+0x44>
 8005dc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005dc4:	e71c      	b.n	8005c00 <_vfiprintf_r+0x48>
 8005dc6:	ab03      	add	r3, sp, #12
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	462a      	mov	r2, r5
 8005dcc:	4b05      	ldr	r3, [pc, #20]	; (8005de4 <_vfiprintf_r+0x22c>)
 8005dce:	a904      	add	r1, sp, #16
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	f7fd fedd 	bl	8003b90 <_printf_i>
 8005dd6:	e7e4      	b.n	8005da2 <_vfiprintf_r+0x1ea>
 8005dd8:	0800630c 	.word	0x0800630c
 8005ddc:	08006316 	.word	0x08006316
 8005de0:	08003649 	.word	0x08003649
 8005de4:	08005b95 	.word	0x08005b95
 8005de8:	08006312 	.word	0x08006312

08005dec <__swbuf_r>:
 8005dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dee:	460e      	mov	r6, r1
 8005df0:	4614      	mov	r4, r2
 8005df2:	4605      	mov	r5, r0
 8005df4:	b118      	cbz	r0, 8005dfe <__swbuf_r+0x12>
 8005df6:	6a03      	ldr	r3, [r0, #32]
 8005df8:	b90b      	cbnz	r3, 8005dfe <__swbuf_r+0x12>
 8005dfa:	f7fe f877 	bl	8003eec <__sinit>
 8005dfe:	69a3      	ldr	r3, [r4, #24]
 8005e00:	60a3      	str	r3, [r4, #8]
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	071a      	lsls	r2, r3, #28
 8005e06:	d525      	bpl.n	8005e54 <__swbuf_r+0x68>
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	b31b      	cbz	r3, 8005e54 <__swbuf_r+0x68>
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	6922      	ldr	r2, [r4, #16]
 8005e10:	1a98      	subs	r0, r3, r2
 8005e12:	6963      	ldr	r3, [r4, #20]
 8005e14:	b2f6      	uxtb	r6, r6
 8005e16:	4283      	cmp	r3, r0
 8005e18:	4637      	mov	r7, r6
 8005e1a:	dc04      	bgt.n	8005e26 <__swbuf_r+0x3a>
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f7ff fdae 	bl	8005980 <_fflush_r>
 8005e24:	b9e0      	cbnz	r0, 8005e60 <__swbuf_r+0x74>
 8005e26:	68a3      	ldr	r3, [r4, #8]
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	60a3      	str	r3, [r4, #8]
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	6022      	str	r2, [r4, #0]
 8005e32:	701e      	strb	r6, [r3, #0]
 8005e34:	6962      	ldr	r2, [r4, #20]
 8005e36:	1c43      	adds	r3, r0, #1
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d004      	beq.n	8005e46 <__swbuf_r+0x5a>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	07db      	lsls	r3, r3, #31
 8005e40:	d506      	bpl.n	8005e50 <__swbuf_r+0x64>
 8005e42:	2e0a      	cmp	r6, #10
 8005e44:	d104      	bne.n	8005e50 <__swbuf_r+0x64>
 8005e46:	4621      	mov	r1, r4
 8005e48:	4628      	mov	r0, r5
 8005e4a:	f7ff fd99 	bl	8005980 <_fflush_r>
 8005e4e:	b938      	cbnz	r0, 8005e60 <__swbuf_r+0x74>
 8005e50:	4638      	mov	r0, r7
 8005e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e54:	4621      	mov	r1, r4
 8005e56:	4628      	mov	r0, r5
 8005e58:	f000 f806 	bl	8005e68 <__swsetup_r>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d0d5      	beq.n	8005e0c <__swbuf_r+0x20>
 8005e60:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e64:	e7f4      	b.n	8005e50 <__swbuf_r+0x64>
	...

08005e68 <__swsetup_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	4b2a      	ldr	r3, [pc, #168]	; (8005f14 <__swsetup_r+0xac>)
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	460c      	mov	r4, r1
 8005e72:	b118      	cbz	r0, 8005e7c <__swsetup_r+0x14>
 8005e74:	6a03      	ldr	r3, [r0, #32]
 8005e76:	b90b      	cbnz	r3, 8005e7c <__swsetup_r+0x14>
 8005e78:	f7fe f838 	bl	8003eec <__sinit>
 8005e7c:	89a3      	ldrh	r3, [r4, #12]
 8005e7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e82:	0718      	lsls	r0, r3, #28
 8005e84:	d422      	bmi.n	8005ecc <__swsetup_r+0x64>
 8005e86:	06d9      	lsls	r1, r3, #27
 8005e88:	d407      	bmi.n	8005e9a <__swsetup_r+0x32>
 8005e8a:	2309      	movs	r3, #9
 8005e8c:	602b      	str	r3, [r5, #0]
 8005e8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e92:	81a3      	strh	r3, [r4, #12]
 8005e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e98:	e034      	b.n	8005f04 <__swsetup_r+0x9c>
 8005e9a:	0758      	lsls	r0, r3, #29
 8005e9c:	d512      	bpl.n	8005ec4 <__swsetup_r+0x5c>
 8005e9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ea0:	b141      	cbz	r1, 8005eb4 <__swsetup_r+0x4c>
 8005ea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ea6:	4299      	cmp	r1, r3
 8005ea8:	d002      	beq.n	8005eb0 <__swsetup_r+0x48>
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f7fe ffc2 	bl	8004e34 <_free_r>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	6363      	str	r3, [r4, #52]	; 0x34
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eba:	81a3      	strh	r3, [r4, #12]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	6063      	str	r3, [r4, #4]
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	6023      	str	r3, [r4, #0]
 8005ec4:	89a3      	ldrh	r3, [r4, #12]
 8005ec6:	f043 0308 	orr.w	r3, r3, #8
 8005eca:	81a3      	strh	r3, [r4, #12]
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	b94b      	cbnz	r3, 8005ee4 <__swsetup_r+0x7c>
 8005ed0:	89a3      	ldrh	r3, [r4, #12]
 8005ed2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eda:	d003      	beq.n	8005ee4 <__swsetup_r+0x7c>
 8005edc:	4621      	mov	r1, r4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 f884 	bl	8005fec <__smakebuf_r>
 8005ee4:	89a0      	ldrh	r0, [r4, #12]
 8005ee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eea:	f010 0301 	ands.w	r3, r0, #1
 8005eee:	d00a      	beq.n	8005f06 <__swsetup_r+0x9e>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	60a3      	str	r3, [r4, #8]
 8005ef4:	6963      	ldr	r3, [r4, #20]
 8005ef6:	425b      	negs	r3, r3
 8005ef8:	61a3      	str	r3, [r4, #24]
 8005efa:	6923      	ldr	r3, [r4, #16]
 8005efc:	b943      	cbnz	r3, 8005f10 <__swsetup_r+0xa8>
 8005efe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f02:	d1c4      	bne.n	8005e8e <__swsetup_r+0x26>
 8005f04:	bd38      	pop	{r3, r4, r5, pc}
 8005f06:	0781      	lsls	r1, r0, #30
 8005f08:	bf58      	it	pl
 8005f0a:	6963      	ldrpl	r3, [r4, #20]
 8005f0c:	60a3      	str	r3, [r4, #8]
 8005f0e:	e7f4      	b.n	8005efa <__swsetup_r+0x92>
 8005f10:	2000      	movs	r0, #0
 8005f12:	e7f7      	b.n	8005f04 <__swsetup_r+0x9c>
 8005f14:	20000068 	.word	0x20000068

08005f18 <_raise_r>:
 8005f18:	291f      	cmp	r1, #31
 8005f1a:	b538      	push	{r3, r4, r5, lr}
 8005f1c:	4604      	mov	r4, r0
 8005f1e:	460d      	mov	r5, r1
 8005f20:	d904      	bls.n	8005f2c <_raise_r+0x14>
 8005f22:	2316      	movs	r3, #22
 8005f24:	6003      	str	r3, [r0, #0]
 8005f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005f2e:	b112      	cbz	r2, 8005f36 <_raise_r+0x1e>
 8005f30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f34:	b94b      	cbnz	r3, 8005f4a <_raise_r+0x32>
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 f830 	bl	8005f9c <_getpid_r>
 8005f3c:	462a      	mov	r2, r5
 8005f3e:	4601      	mov	r1, r0
 8005f40:	4620      	mov	r0, r4
 8005f42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f46:	f000 b817 	b.w	8005f78 <_kill_r>
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d00a      	beq.n	8005f64 <_raise_r+0x4c>
 8005f4e:	1c59      	adds	r1, r3, #1
 8005f50:	d103      	bne.n	8005f5a <_raise_r+0x42>
 8005f52:	2316      	movs	r3, #22
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	2001      	movs	r0, #1
 8005f58:	e7e7      	b.n	8005f2a <_raise_r+0x12>
 8005f5a:	2400      	movs	r4, #0
 8005f5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f60:	4628      	mov	r0, r5
 8005f62:	4798      	blx	r3
 8005f64:	2000      	movs	r0, #0
 8005f66:	e7e0      	b.n	8005f2a <_raise_r+0x12>

08005f68 <raise>:
 8005f68:	4b02      	ldr	r3, [pc, #8]	; (8005f74 <raise+0xc>)
 8005f6a:	4601      	mov	r1, r0
 8005f6c:	6818      	ldr	r0, [r3, #0]
 8005f6e:	f7ff bfd3 	b.w	8005f18 <_raise_r>
 8005f72:	bf00      	nop
 8005f74:	20000068 	.word	0x20000068

08005f78 <_kill_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4d07      	ldr	r5, [pc, #28]	; (8005f98 <_kill_r+0x20>)
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4604      	mov	r4, r0
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	f7fb fdd3 	bl	8001b30 <_kill>
 8005f8a:	1c43      	adds	r3, r0, #1
 8005f8c:	d102      	bne.n	8005f94 <_kill_r+0x1c>
 8005f8e:	682b      	ldr	r3, [r5, #0]
 8005f90:	b103      	cbz	r3, 8005f94 <_kill_r+0x1c>
 8005f92:	6023      	str	r3, [r4, #0]
 8005f94:	bd38      	pop	{r3, r4, r5, pc}
 8005f96:	bf00      	nop
 8005f98:	200003cc 	.word	0x200003cc

08005f9c <_getpid_r>:
 8005f9c:	f7fb bdc0 	b.w	8001b20 <_getpid>

08005fa0 <__swhatbuf_r>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fa8:	2900      	cmp	r1, #0
 8005faa:	b096      	sub	sp, #88	; 0x58
 8005fac:	4615      	mov	r5, r2
 8005fae:	461e      	mov	r6, r3
 8005fb0:	da0d      	bge.n	8005fce <__swhatbuf_r+0x2e>
 8005fb2:	89a3      	ldrh	r3, [r4, #12]
 8005fb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	bf0c      	ite	eq
 8005fbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005fc2:	2340      	movne	r3, #64	; 0x40
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	6031      	str	r1, [r6, #0]
 8005fc8:	602b      	str	r3, [r5, #0]
 8005fca:	b016      	add	sp, #88	; 0x58
 8005fcc:	bd70      	pop	{r4, r5, r6, pc}
 8005fce:	466a      	mov	r2, sp
 8005fd0:	f000 f848 	bl	8006064 <_fstat_r>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	dbec      	blt.n	8005fb2 <__swhatbuf_r+0x12>
 8005fd8:	9901      	ldr	r1, [sp, #4]
 8005fda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005fde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005fe2:	4259      	negs	r1, r3
 8005fe4:	4159      	adcs	r1, r3
 8005fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fea:	e7eb      	b.n	8005fc4 <__swhatbuf_r+0x24>

08005fec <__smakebuf_r>:
 8005fec:	898b      	ldrh	r3, [r1, #12]
 8005fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ff0:	079d      	lsls	r5, r3, #30
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	460c      	mov	r4, r1
 8005ff6:	d507      	bpl.n	8006008 <__smakebuf_r+0x1c>
 8005ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	6123      	str	r3, [r4, #16]
 8006000:	2301      	movs	r3, #1
 8006002:	6163      	str	r3, [r4, #20]
 8006004:	b002      	add	sp, #8
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	ab01      	add	r3, sp, #4
 800600a:	466a      	mov	r2, sp
 800600c:	f7ff ffc8 	bl	8005fa0 <__swhatbuf_r>
 8006010:	9900      	ldr	r1, [sp, #0]
 8006012:	4605      	mov	r5, r0
 8006014:	4630      	mov	r0, r6
 8006016:	f7fd f9eb 	bl	80033f0 <_malloc_r>
 800601a:	b948      	cbnz	r0, 8006030 <__smakebuf_r+0x44>
 800601c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006020:	059a      	lsls	r2, r3, #22
 8006022:	d4ef      	bmi.n	8006004 <__smakebuf_r+0x18>
 8006024:	f023 0303 	bic.w	r3, r3, #3
 8006028:	f043 0302 	orr.w	r3, r3, #2
 800602c:	81a3      	strh	r3, [r4, #12]
 800602e:	e7e3      	b.n	8005ff8 <__smakebuf_r+0xc>
 8006030:	89a3      	ldrh	r3, [r4, #12]
 8006032:	6020      	str	r0, [r4, #0]
 8006034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006038:	81a3      	strh	r3, [r4, #12]
 800603a:	9b00      	ldr	r3, [sp, #0]
 800603c:	6163      	str	r3, [r4, #20]
 800603e:	9b01      	ldr	r3, [sp, #4]
 8006040:	6120      	str	r0, [r4, #16]
 8006042:	b15b      	cbz	r3, 800605c <__smakebuf_r+0x70>
 8006044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006048:	4630      	mov	r0, r6
 800604a:	f000 f81d 	bl	8006088 <_isatty_r>
 800604e:	b128      	cbz	r0, 800605c <__smakebuf_r+0x70>
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	f023 0303 	bic.w	r3, r3, #3
 8006056:	f043 0301 	orr.w	r3, r3, #1
 800605a:	81a3      	strh	r3, [r4, #12]
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	431d      	orrs	r5, r3
 8006060:	81a5      	strh	r5, [r4, #12]
 8006062:	e7cf      	b.n	8006004 <__smakebuf_r+0x18>

08006064 <_fstat_r>:
 8006064:	b538      	push	{r3, r4, r5, lr}
 8006066:	4d07      	ldr	r5, [pc, #28]	; (8006084 <_fstat_r+0x20>)
 8006068:	2300      	movs	r3, #0
 800606a:	4604      	mov	r4, r0
 800606c:	4608      	mov	r0, r1
 800606e:	4611      	mov	r1, r2
 8006070:	602b      	str	r3, [r5, #0]
 8006072:	f7fb fdbc 	bl	8001bee <_fstat>
 8006076:	1c43      	adds	r3, r0, #1
 8006078:	d102      	bne.n	8006080 <_fstat_r+0x1c>
 800607a:	682b      	ldr	r3, [r5, #0]
 800607c:	b103      	cbz	r3, 8006080 <_fstat_r+0x1c>
 800607e:	6023      	str	r3, [r4, #0]
 8006080:	bd38      	pop	{r3, r4, r5, pc}
 8006082:	bf00      	nop
 8006084:	200003cc 	.word	0x200003cc

08006088 <_isatty_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_isatty_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fb fdbb 	bl	8001c0e <_isatty>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_isatty_r+0x1a>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_isatty_r+0x1a>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	200003cc 	.word	0x200003cc

080060a8 <_init>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	bf00      	nop
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr

080060b4 <_fini>:
 80060b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b6:	bf00      	nop
 80060b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ba:	bc08      	pop	{r3}
 80060bc:	469e      	mov	lr, r3
 80060be:	4770      	bx	lr
