
kokot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08007468  08007468  00017468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007858  08007858  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007858  08007858  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007858  08007858  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007858  08007858  00017858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800785c  0800785c  0001785c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007860  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000021c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006e85  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cb1  00000000  00000000  000270d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000948  00000000  00000000  00028d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006b4  00000000  00000000  000296d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017a57  00000000  00000000  00029d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000776b  00000000  00000000  000417e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00077aca  00000000  00000000  00048f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000393c  00000000  00000000  000c0a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  000c4354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007450 	.word	0x08007450

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08007450 	.word	0x08007450

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <hts221_read_bytes>:
uint8_t slaveAddress = HTS221_I2C_ADDRESS;

void hts221_write_bytes(uint8_t reg_address, uint8_t *data,uint8_t len){
	masterWriteMultiByte(data,len, slaveAddress, reg_address);
}
void hts221_read_bytes(uint8_t reg_address, uint8_t *data,uint8_t len){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	if(len > 1)
 8000c58:	79bb      	ldrb	r3, [r7, #6]
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d903      	bls.n	8000c66 <hts221_read_bytes+0x1e>
		reg_address |= (1<<7);
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c64:	71fb      	strb	r3, [r7, #7]
	masterReadMultiByte(data,len, slaveAddress, reg_address);
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <hts221_read_bytes+0x34>)
 8000c68:	781a      	ldrb	r2, [r3, #0]
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	79b9      	ldrb	r1, [r7, #6]
 8000c6e:	6838      	ldr	r0, [r7, #0]
 8000c70:	f000 ff26 	bl	8001ac0 <masterReadMultiByte>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000000 	.word	0x20000000

08000c80 <hts221_init>:

uint8_t hts221_init(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	uint8_t ID;
	hts221_read_bytes(HTS221_REG_WHO_AM_I, &ID, 1);
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	200f      	movs	r0, #15
 8000c8e:	f7ff ffdb 	bl	8000c48 <hts221_read_bytes>
	if(ID != HTS221_WHO_AM_I_VALUE){
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2bbc      	cmp	r3, #188	; 0xbc
 8000c96:	d001      	beq.n	8000c9c <hts221_init+0x1c>
		return 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	e0bc      	b.n	8000e16 <hts221_init+0x196>
	}

	uint8_t t1_t0_msb;
	hts221_read_bytes(HTS221_REG_T1_T0_MSB, &t1_t0_msb, 1);
 8000c9c:	1dbb      	adds	r3, r7, #6
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	2035      	movs	r0, #53	; 0x35
 8000ca4:	f7ff ffd0 	bl	8000c48 <hts221_read_bytes>

	uint8_t data[2];
	hts221_read_bytes(HTS221_REG_H0_rH_x2, &data, 1);
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	2201      	movs	r2, #1
 8000cac:	4619      	mov	r1, r3
 8000cae:	2030      	movs	r0, #48	; 0x30
 8000cb0:	f7ff ffca 	bl	8000c48 <hts221_read_bytes>
	hy0 = data[0]/2.0;
 8000cb4:	793b      	ldrb	r3, [r7, #4]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fc34 	bl	8000524 <__aeabi_i2d>
 8000cbc:	f04f 0200 	mov.w	r2, #0
 8000cc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc4:	f7ff fdc2 	bl	800084c <__aeabi_ddiv>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	460b      	mov	r3, r1
 8000ccc:	4610      	mov	r0, r2
 8000cce:	4619      	mov	r1, r3
 8000cd0:	f7ff ff6a 	bl	8000ba8 <__aeabi_d2f>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a52      	ldr	r2, [pc, #328]	; (8000e20 <hts221_init+0x1a0>)
 8000cd8:	6013      	str	r3, [r2, #0]
	hts221_read_bytes(HTS221_REG_H1_rH_x2, &data, 1);
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4619      	mov	r1, r3
 8000ce0:	2031      	movs	r0, #49	; 0x31
 8000ce2:	f7ff ffb1 	bl	8000c48 <hts221_read_bytes>
	hy1 = data[0]/2.0;
 8000ce6:	793b      	ldrb	r3, [r7, #4]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fc1b 	bl	8000524 <__aeabi_i2d>
 8000cee:	f04f 0200 	mov.w	r2, #0
 8000cf2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cf6:	f7ff fda9 	bl	800084c <__aeabi_ddiv>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f7ff ff51 	bl	8000ba8 <__aeabi_d2f>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a46      	ldr	r2, [pc, #280]	; (8000e24 <hts221_init+0x1a4>)
 8000d0a:	6013      	str	r3, [r2, #0]

	hts221_read_bytes(HTS221_REG_H0_T0_OUT_L, &data, 2);
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2202      	movs	r2, #2
 8000d10:	4619      	mov	r1, r3
 8000d12:	2036      	movs	r0, #54	; 0x36
 8000d14:	f7ff ff98 	bl	8000c48 <hts221_read_bytes>
	hx0 = data[0] | data[1] << 8;
 8000d18:	793b      	ldrb	r3, [r7, #4]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	797b      	ldrb	r3, [r7, #5]
 8000d1e:	021b      	lsls	r3, r3, #8
 8000d20:	4313      	orrs	r3, r2
 8000d22:	ee07 3a90 	vmov	s15, r3
 8000d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d2a:	4b3f      	ldr	r3, [pc, #252]	; (8000e28 <hts221_init+0x1a8>)
 8000d2c:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_T0_OUT_L, &data, 2);
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2202      	movs	r2, #2
 8000d34:	4619      	mov	r1, r3
 8000d36:	203a      	movs	r0, #58	; 0x3a
 8000d38:	f7ff ff86 	bl	8000c48 <hts221_read_bytes>
	hx1 = data[0] | data[1] << 8;
 8000d3c:	793b      	ldrb	r3, [r7, #4]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	797b      	ldrb	r3, [r7, #5]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	4313      	orrs	r3, r2
 8000d46:	ee07 3a90 	vmov	s15, r3
 8000d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4e:	4b37      	ldr	r3, [pc, #220]	; (8000e2c <hts221_init+0x1ac>)
 8000d50:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_degC_x8, &data, 1);
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	2201      	movs	r2, #1
 8000d58:	4619      	mov	r1, r3
 8000d5a:	2032      	movs	r0, #50	; 0x32
 8000d5c:	f7ff ff74 	bl	8000c48 <hts221_read_bytes>
	ty0 = (data[0] | ((t1_t0_msb & 0b11) << 8))/8.0;
 8000d60:	793b      	ldrb	r3, [r7, #4]
 8000d62:	461a      	mov	r2, r3
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f7ff fbd8 	bl	8000524 <__aeabi_i2d>
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <hts221_init+0x1b0>)
 8000d7a:	f7ff fd67 	bl	800084c <__aeabi_ddiv>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	f7ff ff0f 	bl	8000ba8 <__aeabi_d2f>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a29      	ldr	r2, [pc, #164]	; (8000e34 <hts221_init+0x1b4>)
 8000d8e:	6013      	str	r3, [r2, #0]
	hts221_read_bytes(HTS221_REG_T1_degC_x8, &data, 1);
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2201      	movs	r2, #1
 8000d94:	4619      	mov	r1, r3
 8000d96:	2033      	movs	r0, #51	; 0x33
 8000d98:	f7ff ff56 	bl	8000c48 <hts221_read_bytes>
	ty1 = (data[0] | ((t1_t0_msb & 0b1100) << (8 - 2)))/8.0;
 8000d9c:	793b      	ldrb	r3, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	79bb      	ldrb	r3, [r7, #6]
 8000da2:	019b      	lsls	r3, r3, #6
 8000da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000da8:	4313      	orrs	r3, r2
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fbba 	bl	8000524 <__aeabi_i2d>
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <hts221_init+0x1b0>)
 8000db6:	f7ff fd49 	bl	800084c <__aeabi_ddiv>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	f7ff fef1 	bl	8000ba8 <__aeabi_d2f>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4a1b      	ldr	r2, [pc, #108]	; (8000e38 <hts221_init+0x1b8>)
 8000dca:	6013      	str	r3, [r2, #0]

	hts221_read_bytes(HTS221_REG_T0_OUT_L, &data, 2);
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	203c      	movs	r0, #60	; 0x3c
 8000dd4:	f7ff ff38 	bl	8000c48 <hts221_read_bytes>
	tx0 = data[0] | data[1] << 8;
 8000dd8:	793b      	ldrb	r3, [r7, #4]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	797b      	ldrb	r3, [r7, #5]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	4313      	orrs	r3, r2
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dea:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <hts221_init+0x1bc>)
 8000dec:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_OUT_L, &data, 2);
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2202      	movs	r2, #2
 8000df4:	4619      	mov	r1, r3
 8000df6:	203e      	movs	r0, #62	; 0x3e
 8000df8:	f7ff ff26 	bl	8000c48 <hts221_read_bytes>
	tx1 = data[0] | data[1] << 8;
 8000dfc:	793b      	ldrb	r3, [r7, #4]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	797b      	ldrb	r3, [r7, #5]
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	4313      	orrs	r3, r2
 8000e06:	ee07 3a90 	vmov	s15, r3
 8000e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e0e:	4b0c      	ldr	r3, [pc, #48]	; (8000e40 <hts221_init+0x1c0>)
 8000e10:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8000e14:	2301      	movs	r3, #1
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000214 	.word	0x20000214
 8000e24:	20000218 	.word	0x20000218
 8000e28:	2000020c 	.word	0x2000020c
 8000e2c:	20000210 	.word	0x20000210
 8000e30:	40200000 	.word	0x40200000
 8000e34:	20000204 	.word	0x20000204
 8000e38:	20000208 	.word	0x20000208
 8000e3c:	200001fc 	.word	0x200001fc
 8000e40:	20000200 	.word	0x20000200

08000e44 <hts221_get_temperature>:
float hts221_get_temperature(){
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_TEMP_OUT_L, &data, 2);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4619      	mov	r1, r3
 8000e50:	202a      	movs	r0, #42	; 0x2a
 8000e52:	f7ff fef9 	bl	8000c48 <hts221_read_bytes>
	x = data[0] | data[1]<<8;
 8000e56:	793b      	ldrb	r3, [r7, #4]
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	797b      	ldrb	r3, [r7, #5]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, tx0, tx1, ty0, ty1);
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <hts221_get_temperature+0x60>)
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <hts221_get_temperature+0x64>)
 8000e6e:	ed93 7a00 	vldr	s14, [r3]
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <hts221_get_temperature+0x68>)
 8000e74:	edd3 6a00 	vldr	s13, [r3]
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <hts221_get_temperature+0x6c>)
 8000e7a:	ed93 6a00 	vldr	s12, [r3]
 8000e7e:	88fb      	ldrh	r3, [r7, #6]
 8000e80:	eef0 1a46 	vmov.f32	s3, s12
 8000e84:	eeb0 1a66 	vmov.f32	s2, s13
 8000e88:	eef0 0a47 	vmov.f32	s1, s14
 8000e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 f847 	bl	8000f24 <linear_interpolation>
 8000e96:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200001fc 	.word	0x200001fc
 8000ea8:	20000200 	.word	0x20000200
 8000eac:	20000204 	.word	0x20000204
 8000eb0:	20000208 	.word	0x20000208

08000eb4 <hts221_get_humidity>:

float hts221_get_humidity(){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_HUMIDITY_OUT_L, &data, 2);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	2028      	movs	r0, #40	; 0x28
 8000ec2:	f7ff fec1 	bl	8000c48 <hts221_read_bytes>
	x = data[0] | data[1]<<8;
 8000ec6:	793b      	ldrb	r3, [r7, #4]
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	797b      	ldrb	r3, [r7, #5]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	b21b      	sxth	r3, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, hx0, hx1, hy0, hy1);
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <hts221_get_humidity+0x60>)
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	4b0e      	ldr	r3, [pc, #56]	; (8000f18 <hts221_get_humidity+0x64>)
 8000ede:	ed93 7a00 	vldr	s14, [r3]
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <hts221_get_humidity+0x68>)
 8000ee4:	edd3 6a00 	vldr	s13, [r3]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <hts221_get_humidity+0x6c>)
 8000eea:	ed93 6a00 	vldr	s12, [r3]
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	eef0 1a46 	vmov.f32	s3, s12
 8000ef4:	eeb0 1a66 	vmov.f32	s2, s13
 8000ef8:	eef0 0a47 	vmov.f32	s1, s14
 8000efc:	eeb0 0a67 	vmov.f32	s0, s15
 8000f00:	4618      	mov	r0, r3
 8000f02:	f000 f80f 	bl	8000f24 <linear_interpolation>
 8000f06:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000020c 	.word	0x2000020c
 8000f18:	20000210 	.word	0x20000210
 8000f1c:	20000214 	.word	0x20000214
 8000f20:	20000218 	.word	0x20000218

08000f24 <linear_interpolation>:
float linear_interpolation(uint16_t x,float x0,float x1,float y0,float y1){
 8000f24:	b480      	push	{r7}
 8000f26:	b087      	sub	sp, #28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	ed87 0a04 	vstr	s0, [r7, #16]
 8000f30:	edc7 0a03 	vstr	s1, [r7, #12]
 8000f34:	ed87 1a02 	vstr	s2, [r7, #8]
 8000f38:	edc7 1a01 	vstr	s3, [r7, #4]
 8000f3c:	82fb      	strh	r3, [r7, #22]
	return (y0 + (((float)x-x0)*(y1-y0))/(x1-x0));
 8000f3e:	8afb      	ldrh	r3, [r7, #22]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f48:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f50:	edd7 6a01 	vldr	s13, [r7, #4]
 8000f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f58:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f5c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f60:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f64:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f70:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f74:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f78:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7c:	371c      	adds	r7, #28
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <lps22hb_write_bytes>:
 */
#include "lps22hb.h"

static uint8_t slaveAddress = LPS22HB_I2C_ADDRESS_0;

void lps22hb_write_bytes(uint8_t *data, uint8_t reg_address, uint8_t len){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	70bb      	strb	r3, [r7, #2]
    masterWriteMultiByte(data, len, slaveAddress, reg_address);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <lps22hb_write_bytes+0x28>)
 8000f9a:	781a      	ldrb	r2, [r3, #0]
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	78b9      	ldrb	r1, [r7, #2]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 fdf9 	bl	8001b98 <masterWriteMultiByte>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000001 	.word	0x20000001

08000fb4 <lps22hb_read_bytes>:
void lps22hb_read_bytes(uint8_t *data, uint8_t reg_address, uint8_t len){
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	70fb      	strb	r3, [r7, #3]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	70bb      	strb	r3, [r7, #2]
	if(len > 1)
 8000fc4:	78bb      	ldrb	r3, [r7, #2]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d903      	bls.n	8000fd2 <lps22hb_read_bytes+0x1e>
		reg_address |= (1<<7);
 8000fca:	78fb      	ldrb	r3, [r7, #3]
 8000fcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fd0:	70fb      	strb	r3, [r7, #3]
    masterReadMultiByte(data, len, slaveAddress, reg_address);
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <lps22hb_read_bytes+0x34>)
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	78fb      	ldrb	r3, [r7, #3]
 8000fd8:	78b9      	ldrb	r1, [r7, #2]
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fd70 	bl	8001ac0 <masterReadMultiByte>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000001 	.word	0x20000001

08000fec <lps22hb_init>:

uint8_t lps22hb_init(){
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
    uint8_t ID;
    lps22hb_read_bytes(&ID,LPS22HB_REG_WHO_AM_I_ADDR,1);
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	210f      	movs	r1, #15
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ffdb 	bl	8000fb4 <lps22hb_read_bytes>
    if(ID != LPS22HB_WHO_AM_I_VALUE){
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2bb1      	cmp	r3, #177	; 0xb1
 8001002:	d00d      	beq.n	8001020 <lps22hb_init+0x34>
        slaveAddress = LPS22HB_I2C_ADDRESS_1;
 8001004:	4b0d      	ldr	r3, [pc, #52]	; (800103c <lps22hb_init+0x50>)
 8001006:	22b8      	movs	r2, #184	; 0xb8
 8001008:	701a      	strb	r2, [r3, #0]
        lps22hb_read_bytes(&ID,LPS22HB_REG_WHO_AM_I_ADDR,1);
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	2201      	movs	r2, #1
 800100e:	210f      	movs	r1, #15
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ffcf 	bl	8000fb4 <lps22hb_read_bytes>
        if(ID != LPS22HB_WHO_AM_I_VALUE)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2bb1      	cmp	r3, #177	; 0xb1
 800101a:	d001      	beq.n	8001020 <lps22hb_init+0x34>
            return 0;
 800101c:	2300      	movs	r3, #0
 800101e:	e008      	b.n	8001032 <lps22hb_init+0x46>
    }
    uint8_t ctrl1 = 0b00110000;
 8001020:	2330      	movs	r3, #48	; 0x30
 8001022:	71bb      	strb	r3, [r7, #6]
    lps22hb_write_bytes(&ctrl1,LPS22HB_REG_CTRL_REG1,1);
 8001024:	1dbb      	adds	r3, r7, #6
 8001026:	2201      	movs	r2, #1
 8001028:	2110      	movs	r1, #16
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffac 	bl	8000f88 <lps22hb_write_bytes>
    return 1;
 8001030:	2301      	movs	r3, #1
}   
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000001 	.word	0x20000001

08001040 <lps22hb_get_pressure>:

float lps22hb_get_pressure(){
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
    uint8_t data[3];
    lps22hb_read_bytes(&data,LPS22HB_REG_PRESS_OUT_XL,3);
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2203      	movs	r2, #3
 800104a:	2128      	movs	r1, #40	; 0x28
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ffb1 	bl	8000fb4 <lps22hb_read_bytes>
    return ((data[0] | data[1] << 8 | data[2] << 16)/4096.0); 
 8001052:	793b      	ldrb	r3, [r7, #4]
 8001054:	461a      	mov	r2, r3
 8001056:	797b      	ldrb	r3, [r7, #5]
 8001058:	021b      	lsls	r3, r3, #8
 800105a:	431a      	orrs	r2, r3
 800105c:	79bb      	ldrb	r3, [r7, #6]
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	4313      	orrs	r3, r2
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fa5e 	bl	8000524 <__aeabi_i2d>
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <lps22hb_get_pressure+0x50>)
 800106e:	f7ff fbed 	bl	800084c <__aeabi_ddiv>
 8001072:	4602      	mov	r2, r0
 8001074:	460b      	mov	r3, r1
 8001076:	4610      	mov	r0, r2
 8001078:	4619      	mov	r1, r3
 800107a:	f7ff fd95 	bl	8000ba8 <__aeabi_d2f>
 800107e:	4603      	mov	r3, r0
 8001080:	ee07 3a90 	vmov	s15, r3
} 
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40b00000 	.word	0x40b00000
 8001094:	00000000 	.word	0x00000000

08001098 <lps22hb_calculate_altitude>:
float lps22hb_calculate_altitude(float pressure){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	ed87 0a01 	vstr	s0, [r7, #4]
    return 44330 * (1 - pow(pressure/1013.25, 1/5.255));
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fa50 	bl	8000548 <__aeabi_f2d>
 80010a8:	a31c      	add	r3, pc, #112	; (adr r3, 800111c <lps22hb_calculate_altitude+0x84>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	f7ff fbcd 	bl	800084c <__aeabi_ddiv>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	ec43 2b17 	vmov	d7, r2, r3
 80010ba:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001108 <lps22hb_calculate_altitude+0x70>
 80010be:	eeb0 0a47 	vmov.f32	s0, s14
 80010c2:	eef0 0a67 	vmov.f32	s1, s15
 80010c6:	f005 fa8b 	bl	80065e0 <pow>
 80010ca:	ec53 2b10 	vmov	r2, r3, d0
 80010ce:	f04f 0000 	mov.w	r0, #0
 80010d2:	4911      	ldr	r1, [pc, #68]	; (8001118 <lps22hb_calculate_altitude+0x80>)
 80010d4:	f7ff f8d8 	bl	8000288 <__aeabi_dsub>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4610      	mov	r0, r2
 80010de:	4619      	mov	r1, r3
 80010e0:	a30b      	add	r3, pc, #44	; (adr r3, 8001110 <lps22hb_calculate_altitude+0x78>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fa87 	bl	80005f8 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4610      	mov	r0, r2
 80010f0:	4619      	mov	r1, r3
 80010f2:	f7ff fd59 	bl	8000ba8 <__aeabi_d2f>
 80010f6:	4603      	mov	r3, r0
 80010f8:	ee07 3a90 	vmov	s15, r3
}
 80010fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	ccd9456c 	.word	0xccd9456c
 800110c:	3fc85b95 	.word	0x3fc85b95
 8001110:	00000000 	.word	0x00000000
 8001114:	40e5a540 	.word	0x40e5a540
 8001118:	3ff00000 	.word	0x3ff00000
 800111c:	00000000 	.word	0x00000000
 8001120:	408faa00 	.word	0x408faa00

08001124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <__NVIC_GetPriorityGrouping+0x18>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	0a1b      	lsrs	r3, r3, #8
 800112e:	f003 0307 	and.w	r3, r3, #7
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	2b00      	cmp	r3, #0
 8001150:	db0b      	blt.n	800116a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f003 021f 	and.w	r2, r3, #31
 8001158:	4907      	ldr	r1, [pc, #28]	; (8001178 <__NVIC_EnableIRQ+0x38>)
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	095b      	lsrs	r3, r3, #5
 8001160:	2001      	movs	r0, #1
 8001162:	fa00 f202 	lsl.w	r2, r0, r2
 8001166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e100 	.word	0xe000e100

0800117c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	6039      	str	r1, [r7, #0]
 8001186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	db0a      	blt.n	80011a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	b2da      	uxtb	r2, r3
 8001194:	490c      	ldr	r1, [pc, #48]	; (80011c8 <__NVIC_SetPriority+0x4c>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	0112      	lsls	r2, r2, #4
 800119c:	b2d2      	uxtb	r2, r2
 800119e:	440b      	add	r3, r1
 80011a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011a4:	e00a      	b.n	80011bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4908      	ldr	r1, [pc, #32]	; (80011cc <__NVIC_SetPriority+0x50>)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	f003 030f 	and.w	r3, r3, #15
 80011b2:	3b04      	subs	r3, #4
 80011b4:	0112      	lsls	r2, r2, #4
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	440b      	add	r3, r1
 80011ba:	761a      	strb	r2, [r3, #24]
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000e100 	.word	0xe000e100
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b089      	sub	sp, #36	; 0x24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f1c3 0307 	rsb	r3, r3, #7
 80011ea:	2b04      	cmp	r3, #4
 80011ec:	bf28      	it	cs
 80011ee:	2304      	movcs	r3, #4
 80011f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3304      	adds	r3, #4
 80011f6:	2b06      	cmp	r3, #6
 80011f8:	d902      	bls.n	8001200 <NVIC_EncodePriority+0x30>
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b03      	subs	r3, #3
 80011fe:	e000      	b.n	8001202 <NVIC_EncodePriority+0x32>
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	fa02 f303 	lsl.w	r3, r2, r3
 800120e:	43da      	mvns	r2, r3
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	401a      	ands	r2, r3
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	fa01 f303 	lsl.w	r3, r1, r3
 8001222:	43d9      	mvns	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	4313      	orrs	r3, r2
         );
}
 800122a:	4618      	mov	r0, r3
 800122c:	3724      	adds	r7, #36	; 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001240:	4b08      	ldr	r3, [pc, #32]	; (8001264 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001242:	695a      	ldr	r2, [r3, #20]
 8001244:	4907      	ldr	r1, [pc, #28]	; (8001264 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4313      	orrs	r3, r2
 800124a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800124e:	695a      	ldr	r2, [r3, #20]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4013      	ands	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000

08001268 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff ffe3 	bl	8001238 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001272:	f7ff ff57 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001276:	4603      	mov	r3, r0
 8001278:	2200      	movs	r2, #0
 800127a:	2100      	movs	r1, #0
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffa7 	bl	80011d0 <NVIC_EncodePriority>
 8001282:	4603      	mov	r3, r0
 8001284:	4619      	mov	r1, r3
 8001286:	200c      	movs	r0, #12
 8001288:	f7ff ff78 	bl	800117c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800128c:	200c      	movs	r0, #12
 800128e:	f7ff ff57 	bl	8001140 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001292:	f7ff ff47 	bl	8001124 <__NVIC_GetPriorityGrouping>
 8001296:	4603      	mov	r3, r0
 8001298:	2200      	movs	r2, #0
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff97 	bl	80011d0 <NVIC_EncodePriority>
 80012a2:	4603      	mov	r3, r0
 80012a4:	4619      	mov	r1, r3
 80012a6:	200d      	movs	r0, #13
 80012a8:	f7ff ff68 	bl	800117c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80012ac:	200d      	movs	r0, #13
 80012ae:	f7ff ff47 	bl	8001140 <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012b2:	f7ff ff37 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2200      	movs	r2, #0
 80012ba:	2100      	movs	r1, #0
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff ff87 	bl	80011d0 <NVIC_EncodePriority>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4619      	mov	r1, r3
 80012c6:	2010      	movs	r0, #16
 80012c8:	f7ff ff58 	bl	800117c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80012cc:	2010      	movs	r0, #16
 80012ce:	f7ff ff37 	bl	8001140 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80012d2:	f7ff ff27 	bl	8001124 <__NVIC_GetPriorityGrouping>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2200      	movs	r2, #0
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff77 	bl	80011d0 <NVIC_EncodePriority>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4619      	mov	r1, r3
 80012e6:	2011      	movs	r0, #17
 80012e8:	f7ff ff48 	bl	800117c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80012ec:	2011      	movs	r0, #17
 80012ee:	f7ff ff27 	bl	8001140 <__NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <LL_AHB1_GRP1_EnableClock>:
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	4907      	ldr	r1, [pc, #28]	; (8001324 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4313      	orrs	r3, r2
 800130a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4013      	ands	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001316:	68fb      	ldr	r3, [r7, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	40021000 	.word	0x40021000

08001328 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800132c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001330:	f7ff ffe2 	bl	80012f8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001334:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001338:	f7ff ffde 	bl	80012f8 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800133c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001340:	f7ff ffda 	bl	80012f8 <LL_AHB1_GRP1_EnableClock>

}
 8001344:	bf00      	nop
 8001346:	bd80      	pop	{r7, pc}

08001348 <__NVIC_GetPriorityGrouping>:
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	; (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	; (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	; (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	; 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	3b01      	subs	r3, #1
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <LL_DMA_SetDataTransferDirection+0x48>)
 800146e:	5cd3      	ldrb	r3, [r2, r3]
 8001470:	461a      	mov	r2, r3
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	4413      	add	r3, r2
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800147c:	f023 0310 	bic.w	r3, r3, #16
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	3a01      	subs	r2, #1
 8001484:	4907      	ldr	r1, [pc, #28]	; (80014a4 <LL_DMA_SetDataTransferDirection+0x48>)
 8001486:	5c8a      	ldrb	r2, [r1, r2]
 8001488:	4611      	mov	r1, r2
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	440a      	add	r2, r1
 800148e:	4611      	mov	r1, r2
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8001496:	bf00      	nop
 8001498:	3714      	adds	r7, #20
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	08007484 	.word	0x08007484

080014a8 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	3b01      	subs	r3, #1
 80014b8:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <LL_DMA_SetMode+0x44>)
 80014ba:	5cd3      	ldrb	r3, [r2, r3]
 80014bc:	461a      	mov	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4413      	add	r3, r2
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f023 0220 	bic.w	r2, r3, #32
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <LL_DMA_SetMode+0x44>)
 80014ce:	5ccb      	ldrb	r3, [r1, r3]
 80014d0:	4619      	mov	r1, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	440b      	add	r3, r1
 80014d6:	4619      	mov	r1, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
             Mode);
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	08007484 	.word	0x08007484

080014f0 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	3b01      	subs	r3, #1
 8001500:	4a0c      	ldr	r2, [pc, #48]	; (8001534 <LL_DMA_SetPeriphIncMode+0x44>)
 8001502:	5cd3      	ldrb	r3, [r2, r3]
 8001504:	461a      	mov	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4413      	add	r3, r2
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	3b01      	subs	r3, #1
 8001514:	4907      	ldr	r1, [pc, #28]	; (8001534 <LL_DMA_SetPeriphIncMode+0x44>)
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	4619      	mov	r1, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	440b      	add	r3, r1
 800151e:	4619      	mov	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001526:	bf00      	nop
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	08007484 	.word	0x08007484

08001538 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	3b01      	subs	r3, #1
 8001548:	4a0c      	ldr	r2, [pc, #48]	; (800157c <LL_DMA_SetMemoryIncMode+0x44>)
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	461a      	mov	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	3b01      	subs	r3, #1
 800155c:	4907      	ldr	r1, [pc, #28]	; (800157c <LL_DMA_SetMemoryIncMode+0x44>)
 800155e:	5ccb      	ldrb	r3, [r1, r3]
 8001560:	4619      	mov	r1, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	440b      	add	r3, r1
 8001566:	4619      	mov	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4313      	orrs	r3, r2
 800156c:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	08007484 	.word	0x08007484

08001580 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	3b01      	subs	r3, #1
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <LL_DMA_SetPeriphSize+0x44>)
 8001592:	5cd3      	ldrb	r3, [r2, r3]
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4413      	add	r3, r2
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <LL_DMA_SetPeriphSize+0x44>)
 80015a6:	5ccb      	ldrb	r3, [r1, r3]
 80015a8:	4619      	mov	r1, r3
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	440b      	add	r3, r1
 80015ae:	4619      	mov	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	08007484 	.word	0x08007484

080015c8 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	4a0c      	ldr	r2, [pc, #48]	; (800160c <LL_DMA_SetMemorySize+0x44>)
 80015da:	5cd3      	ldrb	r3, [r2, r3]
 80015dc:	461a      	mov	r2, r3
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4413      	add	r3, r2
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	4907      	ldr	r1, [pc, #28]	; (800160c <LL_DMA_SetMemorySize+0x44>)
 80015ee:	5ccb      	ldrb	r3, [r1, r3]
 80015f0:	4619      	mov	r1, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	440b      	add	r3, r1
 80015f6:	4619      	mov	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	08007484 	.word	0x08007484

08001610 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001610:	b480      	push	{r7}
 8001612:	b085      	sub	sp, #20
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	3b01      	subs	r3, #1
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	461a      	mov	r2, r3
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4413      	add	r3, r2
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3b01      	subs	r3, #1
 8001634:	4907      	ldr	r1, [pc, #28]	; (8001654 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001636:	5ccb      	ldrb	r3, [r1, r3]
 8001638:	4619      	mov	r1, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	440b      	add	r3, r1
 800163e:	4619      	mov	r1, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	08007484 	.word	0x08007484

08001658 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f043 0201 	orr.w	r2, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	601a      	str	r2, [r3, #0]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	601a      	str	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016cc:	f023 0306 	bic.w	r3, r3, #6
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	431a      	orrs	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	60da      	str	r2, [r3, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	60da      	str	r2, [r3, #12]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f043 0204 	orr.w	r2, r3, #4
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	601a      	str	r2, [r3, #0]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f023 0204 	bic.w	r2, r3, #4
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b02      	cmp	r3, #2
 800175a:	d101      	bne.n	8001760 <LL_I2C_IsActiveFlag_TXIS+0x18>
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	2b04      	cmp	r3, #4
 8001780:	d101      	bne.n	8001786 <LL_I2C_IsActiveFlag_RXNE+0x18>
 8001782:	2301      	movs	r3, #1
 8001784:	e000      	b.n	8001788 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0320 	and.w	r3, r3, #32
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	d101      	bne.n	80017ac <LL_I2C_IsActiveFlag_STOP+0x18>
 80017a8:	2301      	movs	r3, #1
 80017aa:	e000      	b.n	80017ae <LL_I2C_IsActiveFlag_STOP+0x1a>
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	f043 0210 	orr.w	r2, r3, #16
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	61da      	str	r2, [r3, #28]
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80017da:	b480      	push	{r7}
 80017dc:	b083      	sub	sp, #12
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f043 0220 	orr.w	r2, r3, #32
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	61da      	str	r2, [r3, #28]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	605a      	str	r2, [r3, #4]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	0d5b      	lsrs	r3, r3, #21
 8001832:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <LL_I2C_HandleTransfer+0x48>)
 8001838:	430b      	orrs	r3, r1
 800183a:	43db      	mvns	r3, r3
 800183c:	401a      	ands	r2, r3
 800183e:	68b9      	ldr	r1, [r7, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4319      	orrs	r1, r3
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	041b      	lsls	r3, r3, #16
 8001848:	4319      	orrs	r1, r3
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	4319      	orrs	r1, r3
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	430b      	orrs	r3, r1
 8001852:	431a      	orrs	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 8001858:	bf00      	nop
 800185a:	3714      	adds	r7, #20
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr
 8001864:	03ff7bff 	.word	0x03ff7bff

08001868 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	b2db      	uxtb	r3, r3
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <LL_AHB1_GRP1_EnableClock>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018b6:	695a      	ldr	r2, [r3, #20]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4013      	ands	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	bf00      	nop
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	40021000 	.word	0x40021000

080018d0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80018d8:	4b08      	ldr	r3, [pc, #32]	; (80018fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80018da:	69da      	ldr	r2, [r3, #28]
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80018e6:	69da      	ldr	r2, [r3, #28]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4013      	ands	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	bf00      	nop
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	40021000 	.word	0x40021000

08001900 <LL_SYSCFG_SetRemapDMA_I2C>:
  *         @arg @ref LL_SYSCFG_I2C1TX_RMP_DMA1_CH2
  *         @arg @ref LL_SYSCFG_I2C1TX_RMP_DMA1_CH4
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_I2C(uint32_t Remap)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (Remap >> 16U), (Remap & 0x0000FFFF));
 8001908:	4b08      	ldr	r3, [pc, #32]	; (800192c <LL_SYSCFG_SetRemapDMA_I2C+0x2c>)
 800190a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	43db      	mvns	r3, r3
 8001912:	401a      	ands	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	b29b      	uxth	r3, r3
 8001918:	4904      	ldr	r1, [pc, #16]	; (800192c <LL_SYSCFG_SetRemapDMA_I2C+0x2c>)
 800191a:	4313      	orrs	r3, r2
 800191c:	650b      	str	r3, [r1, #80]	; 0x50
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40010000 	.word	0x40010000

08001930 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08e      	sub	sp, #56	; 0x38
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001936:	f107 031c 	add.w	r3, r7, #28
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	605a      	str	r2, [r3, #4]
 8001940:	609a      	str	r2, [r3, #8]
 8001942:	60da      	str	r2, [r3, #12]
 8001944:	611a      	str	r2, [r3, #16]
 8001946:	615a      	str	r2, [r3, #20]
 8001948:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800195a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800195e:	f7ff ff9f 	bl	80018a0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001966:	2302      	movs	r3, #2
 8001968:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800196e:	2301      	movs	r3, #1
 8001970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001976:	2304      	movs	r3, #4
 8001978:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	4619      	mov	r1, r3
 800197e:	484a      	ldr	r0, [pc, #296]	; (8001aa8 <MX_I2C1_Init+0x178>)
 8001980:	f001 fb96 	bl	80030b0 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001984:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001988:	f7ff ffa2 	bl	80018d0 <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800198c:	2200      	movs	r2, #0
 800198e:	2103      	movs	r1, #3
 8001990:	4846      	ldr	r0, [pc, #280]	; (8001aac <MX_I2C1_Init+0x17c>)
 8001992:	f7ff fd63 	bl	800145c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8001996:	2200      	movs	r2, #0
 8001998:	2103      	movs	r1, #3
 800199a:	4844      	ldr	r0, [pc, #272]	; (8001aac <MX_I2C1_Init+0x17c>)
 800199c:	f7ff fe38 	bl	8001610 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 80019a0:	2200      	movs	r2, #0
 80019a2:	2103      	movs	r1, #3
 80019a4:	4841      	ldr	r0, [pc, #260]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019a6:	f7ff fd7f 	bl	80014a8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80019aa:	2200      	movs	r2, #0
 80019ac:	2103      	movs	r1, #3
 80019ae:	483f      	ldr	r0, [pc, #252]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019b0:	f7ff fd9e 	bl	80014f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	2103      	movs	r1, #3
 80019b8:	483c      	ldr	r0, [pc, #240]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019ba:	f7ff fdbd 	bl	8001538 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 80019be:	2200      	movs	r2, #0
 80019c0:	2103      	movs	r1, #3
 80019c2:	483a      	ldr	r0, [pc, #232]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019c4:	f7ff fddc 	bl	8001580 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2103      	movs	r1, #3
 80019cc:	4837      	ldr	r0, [pc, #220]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019ce:	f7ff fdfb 	bl	80015c8 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_I2C(LL_SYSCFG_I2C1RX_RMP_DMA1_CH3);
 80019d2:	4837      	ldr	r0, [pc, #220]	; (8001ab0 <MX_I2C1_Init+0x180>)
 80019d4:	f7ff ff94 	bl	8001900 <LL_SYSCFG_SetRemapDMA_I2C>

  /* I2C1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80019d8:	2210      	movs	r2, #16
 80019da:	2102      	movs	r1, #2
 80019dc:	4833      	ldr	r0, [pc, #204]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019de:	f7ff fd3d 	bl	800145c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2102      	movs	r1, #2
 80019e6:	4831      	ldr	r0, [pc, #196]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019e8:	f7ff fe12 	bl	8001610 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2102      	movs	r1, #2
 80019f0:	482e      	ldr	r0, [pc, #184]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019f2:	f7ff fd59 	bl	80014a8 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 80019f6:	2200      	movs	r2, #0
 80019f8:	2102      	movs	r1, #2
 80019fa:	482c      	ldr	r0, [pc, #176]	; (8001aac <MX_I2C1_Init+0x17c>)
 80019fc:	f7ff fd78 	bl	80014f0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001a00:	2280      	movs	r2, #128	; 0x80
 8001a02:	2102      	movs	r1, #2
 8001a04:	4829      	ldr	r0, [pc, #164]	; (8001aac <MX_I2C1_Init+0x17c>)
 8001a06:	f7ff fd97 	bl	8001538 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2102      	movs	r1, #2
 8001a0e:	4827      	ldr	r0, [pc, #156]	; (8001aac <MX_I2C1_Init+0x17c>)
 8001a10:	f7ff fdb6 	bl	8001580 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2102      	movs	r1, #2
 8001a18:	4824      	ldr	r0, [pc, #144]	; (8001aac <MX_I2C1_Init+0x17c>)
 8001a1a:	f7ff fdd5 	bl	80015c8 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_I2C(LL_SYSCFG_I2C1TX_RMP_DMA1_CH2);
 8001a1e:	4825      	ldr	r0, [pc, #148]	; (8001ab4 <MX_I2C1_Init+0x184>)
 8001a20:	f7ff ff6e 	bl	8001900 <LL_SYSCFG_SetRemapDMA_I2C>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a24:	f7ff fc90 	bl	8001348 <__NVIC_GetPriorityGrouping>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fce0 	bl	80013f4 <NVIC_EncodePriority>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4619      	mov	r1, r3
 8001a38:	201f      	movs	r0, #31
 8001a3a:	f7ff fcb1 	bl	80013a0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a3e:	201f      	movs	r0, #31
 8001a40:	f7ff fc90 	bl	8001364 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN I2C1_Init 1 */
  GPIOB->ODR |= (0b11 << 6);
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <MX_I2C1_Init+0x178>)
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	4a17      	ldr	r2, [pc, #92]	; (8001aa8 <MX_I2C1_Init+0x178>)
 8001a4a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a4e:	6153      	str	r3, [r2, #20]

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001a50:	4819      	ldr	r0, [pc, #100]	; (8001ab8 <MX_I2C1_Init+0x188>)
 8001a52:	f7ff fed2 	bl	80017fa <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001a56:	4818      	ldr	r0, [pc, #96]	; (8001ab8 <MX_I2C1_Init+0x188>)
 8001a58:	f7ff fe46 	bl	80016e8 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001a5c:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <MX_I2C1_Init+0x188>)
 8001a5e:	f7ff fe1b 	bl	8001698 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001a62:	4815      	ldr	r0, [pc, #84]	; (8001ab8 <MX_I2C1_Init+0x188>)
 8001a64:	f7ff fe08 	bl	8001678 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_I2C1_Init+0x18c>)
 8001a6e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <MX_I2C1_Init+0x188>)
 8001a8c:	f001 fc23 	bl	80032d6 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	4808      	ldr	r0, [pc, #32]	; (8001ab8 <MX_I2C1_Init+0x188>)
 8001a96:	f7ff fe0f 	bl	80016b8 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001a9a:	4807      	ldr	r0, [pc, #28]	; (8001ab8 <MX_I2C1_Init+0x188>)
 8001a9c:	f7ff fddc 	bl	8001658 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	3738      	adds	r7, #56	; 0x38
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	00300010 	.word	0x00300010
 8001ab4:	00c00040 	.word	0x00c00040
 8001ab8:	40005400 	.word	0x40005400
 8001abc:	2000090e 	.word	0x2000090e

08001ac0 <masterReadMultiByte>:

/* USER CODE BEGIN 1 */
void masterReadMultiByte(uint8_t *data,uint8_t len, uint8_t slaveAddress, uint8_t registerAddress){
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af02      	add	r7, sp, #8
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	4608      	mov	r0, r1
 8001aca:	4611      	mov	r1, r2
 8001acc:	461a      	mov	r2, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	70fb      	strb	r3, [r7, #3]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	70bb      	strb	r3, [r7, #2]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	707b      	strb	r3, [r7, #1]
		aReceiveBuffer_read = data;
 8001ada:	4a2a      	ldr	r2, [pc, #168]	; (8001b84 <masterReadMultiByte+0xc4>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6013      	str	r3, [r2, #0]

		LL_I2C_EnableIT_RX(I2C1);
 8001ae0:	4829      	ldr	r0, [pc, #164]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001ae2:	f7ff fe11 	bl	8001708 <LL_I2C_EnableIT_RX>

		LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001ae6:	78b9      	ldrb	r1, [r7, #2]
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <masterReadMultiByte+0xcc>)
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2200      	movs	r2, #0
 8001af6:	4824      	ldr	r0, [pc, #144]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001af8:	f7ff fe90 	bl	800181c <LL_I2C_HandleTransfer>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001afc:	e00a      	b.n	8001b14 <masterReadMultiByte+0x54>
		{
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001afe:	4822      	ldr	r0, [pc, #136]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b00:	f7ff fe22 	bl	8001748 <LL_I2C_IsActiveFlag_TXIS>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d004      	beq.n	8001b14 <masterReadMultiByte+0x54>
			{
				LL_I2C_TransmitData8(I2C1, registerAddress);
 8001b0a:	787b      	ldrb	r3, [r7, #1]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	481e      	ldr	r0, [pc, #120]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b10:	f7ff feb7 	bl	8001882 <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b14:	481c      	ldr	r0, [pc, #112]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b16:	f7ff fe3d 	bl	8001794 <LL_I2C_IsActiveFlag_STOP>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0ee      	beq.n	8001afe <masterReadMultiByte+0x3e>
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 8001b20:	4819      	ldr	r0, [pc, #100]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b22:	f7ff fe5a 	bl	80017da <LL_I2C_ClearFlag_STOP>
		while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001b26:	bf00      	nop
 8001b28:	4817      	ldr	r0, [pc, #92]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b2a:	f7ff fe33 	bl	8001794 <LL_I2C_IsActiveFlag_STOP>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d1f9      	bne.n	8001b28 <masterReadMultiByte+0x68>

		LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, len, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001b34:	78b9      	ldrb	r1, [r7, #2]
 8001b36:	78fb      	ldrb	r3, [r7, #3]
 8001b38:	4a15      	ldr	r2, [pc, #84]	; (8001b90 <masterReadMultiByte+0xd0>)
 8001b3a:	9201      	str	r2, [sp, #4]
 8001b3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b40:	9200      	str	r2, [sp, #0]
 8001b42:	2200      	movs	r2, #0
 8001b44:	4810      	ldr	r0, [pc, #64]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b46:	f7ff fe69 	bl	800181c <LL_I2C_HandleTransfer>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001b4a:	bf00      	nop
 8001b4c:	480e      	ldr	r0, [pc, #56]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b4e:	f7ff fe21 	bl	8001794 <LL_I2C_IsActiveFlag_STOP>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0f9      	beq.n	8001b4c <masterReadMultiByte+0x8c>

		//End of transfer
		LL_I2C_ClearFlag_STOP(I2C1);
 8001b58:	480b      	ldr	r0, [pc, #44]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b5a:	f7ff fe3e 	bl	80017da <LL_I2C_ClearFlag_STOP>
		LL_I2C_DisableIT_RX(I2C1);
 8001b5e:	480a      	ldr	r0, [pc, #40]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b60:	f7ff fde2 	bl	8001728 <LL_I2C_DisableIT_RX>
    I2C1->ICR |= (1 << 4);
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b6a:	f043 0310 	orr.w	r3, r3, #16
 8001b6e:	61d3      	str	r3, [r2, #28]
		LL_I2C_ClearFlag_NACK(I2C1);
 8001b70:	4805      	ldr	r0, [pc, #20]	; (8001b88 <masterReadMultiByte+0xc8>)
 8001b72:	f7ff fe22 	bl	80017ba <LL_I2C_ClearFlag_NACK>
		ubReceiveIndex = 0;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <masterReadMultiByte+0xd4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000021c 	.word	0x2000021c
 8001b88:	40005400 	.word	0x40005400
 8001b8c:	80002000 	.word	0x80002000
 8001b90:	80002400 	.word	0x80002400
 8001b94:	20000220 	.word	0x20000220

08001b98 <masterWriteMultiByte>:
void masterWriteMultiByte(uint8_t *data,uint8_t len, uint8_t slaveAddress, uint8_t registerAddress){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	70fb      	strb	r3, [r7, #3]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70bb      	strb	r3, [r7, #2]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	707b      	strb	r3, [r7, #1]
	LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001bb2:	78b9      	ldrb	r1, [r7, #2]
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <masterWriteMultiByte+0x88>)
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4818      	ldr	r0, [pc, #96]	; (8001c24 <masterWriteMultiByte+0x8c>)
 8001bc4:	f7ff fe2a 	bl	800181c <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, registerAddress);
 8001bc8:	787b      	ldrb	r3, [r7, #1]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4815      	ldr	r0, [pc, #84]	; (8001c24 <masterWriteMultiByte+0x8c>)
 8001bce:	f7ff fe58 	bl	8001882 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001bd2:	e017      	b.n	8001c04 <masterWriteMultiByte+0x6c>
	{
		for (size_t i = 0; i < len;i++) {
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	e010      	b.n	8001bfc <masterWriteMultiByte+0x64>
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001bda:	4812      	ldr	r0, [pc, #72]	; (8001c24 <masterWriteMultiByte+0x8c>)
 8001bdc:	f7ff fdb4 	bl	8001748 <LL_I2C_IsActiveFlag_TXIS>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d007      	beq.n	8001bf6 <masterWriteMultiByte+0x5e>
			{
				LL_I2C_TransmitData8(I2C1, data[i]);
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4619      	mov	r1, r3
 8001bf0:	480c      	ldr	r0, [pc, #48]	; (8001c24 <masterWriteMultiByte+0x8c>)
 8001bf2:	f7ff fe46 	bl	8001882 <LL_I2C_TransmitData8>
		for (size_t i = 0; i < len;i++) {
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d3ea      	bcc.n	8001bda <masterWriteMultiByte+0x42>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <masterWriteMultiByte+0x8c>)
 8001c06:	f7ff fdc5 	bl	8001794 <LL_I2C_IsActiveFlag_STOP>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d0e1      	beq.n	8001bd4 <masterWriteMultiByte+0x3c>
			}
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <masterWriteMultiByte+0x8c>)
 8001c12:	f7ff fde2 	bl	80017da <LL_I2C_ClearFlag_STOP>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	80002000 	.word	0x80002000
 8001c24:	40005400 	.word	0x40005400

08001c28 <I2C_IRQHandler>:

void I2C_IRQHandler(){
 8001c28:	b598      	push	{r3, r4, r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001c2c:	4810      	ldr	r0, [pc, #64]	; (8001c70 <I2C_IRQHandler+0x48>)
 8001c2e:	f7ff fd9e 	bl	800176e <LL_I2C_IsActiveFlag_RXNE>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d019      	beq.n	8001c6c <I2C_IRQHandler+0x44>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <I2C_IRQHandler+0x4c>)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <I2C_IRQHandler+0x50>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	1c59      	adds	r1, r3, #1
 8001c44:	b2c8      	uxtb	r0, r1
 8001c46:	490c      	ldr	r1, [pc, #48]	; (8001c78 <I2C_IRQHandler+0x50>)
 8001c48:	7008      	strb	r0, [r1, #0]
 8001c4a:	18d4      	adds	r4, r2, r3
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <I2C_IRQHandler+0x48>)
 8001c4e:	f7ff fe0b 	bl	8001868 <LL_I2C_ReceiveData8>
 8001c52:	4603      	mov	r3, r0
 8001c54:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001c56:	4b08      	ldr	r3, [pc, #32]	; (8001c78 <I2C_IRQHandler+0x50>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b13      	cmp	r3, #19
 8001c5e:	d903      	bls.n	8001c68 <I2C_IRQHandler+0x40>
 8001c60:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <I2C_IRQHandler+0x50>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	701a      	strb	r2, [r3, #0]
	}
}
 8001c66:	e001      	b.n	8001c6c <I2C_IRQHandler+0x44>
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001c68:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <I2C_IRQHandler+0x50>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	bd98      	pop	{r3, r4, r7, pc}
 8001c70:	40005400 	.word	0x40005400
 8001c74:	2000021c 	.word	0x2000021c
 8001c78:	20000220 	.word	0x20000220

08001c7c <__NVIC_SetPriorityGrouping>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <LL_RCC_HSI_Enable+0x1c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <LL_RCC_HSI_Enable+0x1c>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <LL_RCC_HSI_IsReady+0x20>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	bf0c      	ite	eq
 8001cf4:	2301      	moveq	r3, #1
 8001cf6:	2300      	movne	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40021000 	.word	0x40021000

08001d08 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4904      	ldr	r1, [pc, #16]	; (8001d30 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000

08001d34 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <LL_RCC_SetSysClkSource+0x24>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f023 0203 	bic.w	r2, r3, #3
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <LL_RCC_SetSysClkSource+0x24>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40021000 	.word	0x40021000

08001d5c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <LL_RCC_GetSysClkSource+0x18>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000

08001d78 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <LL_RCC_SetAHBPrescaler+0x24>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d88:	4904      	ldr	r1, [pc, #16]	; (8001d9c <LL_RCC_SetAHBPrescaler+0x24>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000

08001da0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001da8:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db0:	4904      	ldr	r1, [pc, #16]	; (8001dc4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000

08001dc8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <LL_RCC_SetAPB2Prescaler+0x24>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dd8:	4904      	ldr	r1, [pc, #16]	; (8001dec <LL_RCC_SetAPB2Prescaler+0x24>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	604b      	str	r3, [r1, #4]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40021000 	.word	0x40021000

08001df0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <LL_RCC_SetI2CClockSource+0x2c>)
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0e1b      	lsrs	r3, r3, #24
 8001e00:	43db      	mvns	r3, r3
 8001e02:	401a      	ands	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001e0a:	4904      	ldr	r1, [pc, #16]	; (8001e1c <LL_RCC_SetI2CClockSource+0x2c>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	40021000 	.word	0x40021000

08001e20 <LL_APB1_GRP1_EnableClock>:
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e2a:	69da      	ldr	r2, [r3, #28]
 8001e2c:	4907      	ldr	r1, [pc, #28]	; (8001e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e34:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e36:	69da      	ldr	r2, [r3, #28]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40021000 	.word	0x40021000

08001e50 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e5a:	699a      	ldr	r2, [r3, #24]
 8001e5c:	4907      	ldr	r1, [pc, #28]	; (8001e7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	40021000 	.word	0x40021000

08001e80 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <LL_FLASH_SetLatency+0x24>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f023 0207 	bic.w	r2, r3, #7
 8001e90:	4904      	ldr	r1, [pc, #16]	; (8001ea4 <LL_FLASH_SetLatency+0x24>)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001eac:	4b04      	ldr	r3, [pc, #16]	; (8001ec0 <LL_FLASH_GetLatency+0x18>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40022000 	.word	0x40022000

08001ec4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ec8:	b08e      	sub	sp, #56	; 0x38
 8001eca:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f7ff ffbf 	bl	8001e50 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001ed2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ed6:	f7ff ffa3 	bl	8001e20 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001eda:	2003      	movs	r0, #3
 8001edc:	f7ff fece 	bl	8001c7c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ee0:	f000 f868 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee4:	f7ff fa20 	bl	8001328 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee8:	f7ff f9be 	bl	8001268 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001eec:	f000 fe4e 	bl	8002b8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001ef0:	f7ff fd1e 	bl	8001930 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t hts_work = hts221_init();
 8001ef4:	f7fe fec4 	bl	8000c80 <hts221_init>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint8_t lps_work = lps22hb_init(); 
 8001efc:	f7ff f876 	bl	8000fec <lps22hb_init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	73bb      	strb	r3, [r7, #14]

  uint8_t *buffer;
  int len;
  while (1)
  {
	  if(hts_work){
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d008      	beq.n	8001f1c <main+0x58>
		  temp = hts221_get_temperature();
 8001f0a:	f7fe ff9b 	bl	8000e44 <hts221_get_temperature>
 8001f0e:	ed87 0a07 	vstr	s0, [r7, #28]
		  hum = hts221_get_humidity();
 8001f12:	f7fe ffcf 	bl	8000eb4 <hts221_get_humidity>
 8001f16:	ed87 0a06 	vstr	s0, [r7, #24]
 8001f1a:	e005      	b.n	8001f28 <main+0x64>
	  }else{
		  temp = 0;
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	61fb      	str	r3, [r7, #28]
		  hum = 0;
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]
	  }
    if(lps_work){
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <main+0x80>
      press = lps22hb_get_pressure();
 8001f2e:	f7ff f887 	bl	8001040 <lps22hb_get_pressure>
 8001f32:	ed87 0a05 	vstr	s0, [r7, #20]
      alt = lps22hb_calculate_altitude(press);
 8001f36:	ed97 0a05 	vldr	s0, [r7, #20]
 8001f3a:	f7ff f8ad 	bl	8001098 <lps22hb_calculate_altitude>
 8001f3e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f42:	e005      	b.n	8001f50 <main+0x8c>
    }else{
      press = 0;
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
      alt = 0;
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]
    }
	  buffer = malloc(32*sizeof(uint8_t));
 8001f50:	2020      	movs	r0, #32
 8001f52:	f001 fcb7 	bl	80038c4 <malloc>
 8001f56:	4603      	mov	r3, r0
 8001f58:	60bb      	str	r3, [r7, #8]
	  len = sprintf(buffer, "%2.1f,%2.0f,%4.2f,%3.2f\n",temp,hum,press,alt);
 8001f5a:	69f8      	ldr	r0, [r7, #28]
 8001f5c:	f7fe faf4 	bl	8000548 <__aeabi_f2d>
 8001f60:	4682      	mov	sl, r0
 8001f62:	468b      	mov	fp, r1
 8001f64:	69b8      	ldr	r0, [r7, #24]
 8001f66:	f7fe faef 	bl	8000548 <__aeabi_f2d>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	460d      	mov	r5, r1
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7fe faea 	bl	8000548 <__aeabi_f2d>
 8001f74:	4680      	mov	r8, r0
 8001f76:	4689      	mov	r9, r1
 8001f78:	6938      	ldr	r0, [r7, #16]
 8001f7a:	f7fe fae5 	bl	8000548 <__aeabi_f2d>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f86:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f8a:	e9cd 4500 	strd	r4, r5, [sp]
 8001f8e:	4652      	mov	r2, sl
 8001f90:	465b      	mov	r3, fp
 8001f92:	4907      	ldr	r1, [pc, #28]	; (8001fb0 <main+0xec>)
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f002 fa79 	bl	800448c <siprintf>
 8001f9a:	6078      	str	r0, [r7, #4]
	  USART2_PutBuffer(buffer, len);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f000 fed4 	bl	8002d50 <USART2_PutBuffer>
	  free(buffer);
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f001 fc93 	bl	80038d4 <free>
	  if(hts_work){
 8001fae:	e7a9      	b.n	8001f04 <main+0x40>
 8001fb0:	08007468 	.word	0x08007468

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff ff61 	bl	8001e80 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001fbe:	bf00      	nop
 8001fc0:	f7ff ff72 	bl	8001ea8 <LL_FLASH_GetLatency>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1fa      	bne.n	8001fc0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001fca:	f7ff fe7b 	bl	8001cc4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001fce:	bf00      	nop
 8001fd0:	f7ff fe88 	bl	8001ce4 <LL_RCC_HSI_IsReady>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d1fa      	bne.n	8001fd0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001fda:	2010      	movs	r0, #16
 8001fdc:	f7ff fe94 	bl	8001d08 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff fec9 	bl	8001d78 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff feda 	bl	8001da0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001fec:	2000      	movs	r0, #0
 8001fee:	f7ff feeb 	bl	8001dc8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f7ff fe9e 	bl	8001d34 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001ff8:	bf00      	nop
 8001ffa:	f7ff feaf 	bl	8001d5c <LL_RCC_GetSysClkSource>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1fa      	bne.n	8001ffa <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <SystemClock_Config+0x68>)
 8002006:	f001 fc3f 	bl	8003888 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800200a:	4804      	ldr	r0, [pc, #16]	; (800201c <SystemClock_Config+0x68>)
 800200c:	f001 fc4a 	bl	80038a4 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8002010:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002014:	f7ff feec 	bl	8001df0 <LL_RCC_SetI2CClockSource>
}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	007a1200 	.word	0x007a1200

08002020 <LL_DMA_DisableChannel>:
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	3b01      	subs	r3, #1
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <LL_DMA_DisableChannel+0x3c>)
 8002030:	5cd3      	ldrb	r3, [r2, r3]
 8002032:	461a      	mov	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4413      	add	r3, r2
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	3a01      	subs	r2, #1
 800203e:	4907      	ldr	r1, [pc, #28]	; (800205c <LL_DMA_DisableChannel+0x3c>)
 8002040:	5c8a      	ldrb	r2, [r1, r2]
 8002042:	4611      	mov	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	440a      	add	r2, r1
 8002048:	f023 0301 	bic.w	r3, r3, #1
 800204c:	6013      	str	r3, [r2, #0]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	0800748c 	.word	0x0800748c

08002060 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002074:	bf0c      	ite	eq
 8002076:	2301      	moveq	r3, #1
 8002078:	2300      	movne	r3, #0
 800207a:	b2db      	uxtb	r3, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800209c:	bf0c      	ite	eq
 800209e:	2301      	moveq	r3, #1
 80020a0:	2300      	movne	r3, #0
 80020a2:	b2db      	uxtb	r3, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c4:	bf0c      	ite	eq
 80020c6:	2301      	moveq	r3, #1
 80020c8:	2300      	movne	r3, #0
 80020ca:	b2db      	uxtb	r3, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80020e6:	605a      	str	r2, [r3, #4]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002102:	605a      	str	r2, [r3, #4]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800211e:	605a      	str	r2, [r3, #4]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b10      	cmp	r3, #16
 800213e:	d101      	bne.n	8002144 <LL_USART_IsActiveFlag_IDLE+0x18>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002162:	2b40      	cmp	r3, #64	; 0x40
 8002164:	d101      	bne.n	800216a <LL_USART_IsActiveFlag_TC+0x18>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_USART_IsActiveFlag_TC+0x1a>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2210      	movs	r2, #16
 8002184:	621a      	str	r2, [r3, #32]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <NMI_Handler+0x4>

08002198 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <HardFault_Handler+0x4>

0800219e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <MemManage_Handler+0x4>

080021a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <BusFault_Handler+0x4>

080021aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <UsageFault_Handler+0x4>

080021b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8002208:	480c      	ldr	r0, [pc, #48]	; (800223c <DMA1_Channel6_IRQHandler+0x38>)
 800220a:	f7ff ff29 	bl	8002060 <LL_DMA_IsActiveFlag_TC6>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8002214:	f000 fdbc 	bl	8002d90 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8002218:	4808      	ldr	r0, [pc, #32]	; (800223c <DMA1_Channel6_IRQHandler+0x38>)
 800221a:	f7ff ff5d 	bl	80020d8 <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 800221e:	e00a      	b.n	8002236 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8002220:	4806      	ldr	r0, [pc, #24]	; (800223c <DMA1_Channel6_IRQHandler+0x38>)
 8002222:	f7ff ff45 	bl	80020b0 <LL_DMA_IsActiveFlag_HT6>
 8002226:	4603      	mov	r3, r0
 8002228:	2b01      	cmp	r3, #1
 800222a:	d104      	bne.n	8002236 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 800222c:	f000 fdb0 	bl	8002d90 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <DMA1_Channel6_IRQHandler+0x38>)
 8002232:	f7ff ff6d 	bl	8002110 <LL_DMA_ClearFlag_HT6>
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40020000 	.word	0x40020000

08002240 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8002244:	480a      	ldr	r0, [pc, #40]	; (8002270 <DMA1_Channel7_IRQHandler+0x30>)
 8002246:	f7ff ff1f 	bl	8002088 <LL_DMA_IsActiveFlag_TC7>
 800224a:	4603      	mov	r3, r0
 800224c:	2b01      	cmp	r3, #1
 800224e:	d10d      	bne.n	800226c <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8002250:	4807      	ldr	r0, [pc, #28]	; (8002270 <DMA1_Channel7_IRQHandler+0x30>)
 8002252:	f7ff ff4f 	bl	80020f4 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8002256:	bf00      	nop
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <DMA1_Channel7_IRQHandler+0x34>)
 800225a:	f7ff ff7a 	bl	8002152 <LL_USART_IsActiveFlag_TC>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f9      	beq.n	8002258 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002264:	2107      	movs	r1, #7
 8002266:	4802      	ldr	r0, [pc, #8]	; (8002270 <DMA1_Channel7_IRQHandler+0x30>)
 8002268:	f7ff feda 	bl	8002020 <LL_DMA_DisableChannel>
	}
}
 800226c:	bf00      	nop
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40020000 	.word	0x40020000
 8002274:	40004400 	.word	0x40004400

08002278 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C_IRQHandler();
 800227c:	f7ff fcd4 	bl	8001c28 <I2C_IRQHandler>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}

08002284 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8002288:	4806      	ldr	r0, [pc, #24]	; (80022a4 <USART2_IRQHandler+0x20>)
 800228a:	f7ff ff4f 	bl	800212c <LL_USART_IsActiveFlag_IDLE>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d004      	beq.n	800229e <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8002294:	f000 fd7c 	bl	8002d90 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <USART2_IRQHandler+0x20>)
 800229a:	f7ff ff6d 	bl	8002178 <LL_USART_ClearFlag_IDLE>
	}
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40004400 	.word	0x40004400

080022a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return 1;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_kill>:

int _kill(int pid, int sig)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80022c2:	f002 f9a9 	bl	8004618 <__errno>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2216      	movs	r2, #22
 80022ca:	601a      	str	r2, [r3, #0]
  return -1;
 80022cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_exit>:

void _exit (int status)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80022e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7ff ffe7 	bl	80022b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80022ea:	e7fe      	b.n	80022ea <_exit+0x12>

080022ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f8:	2300      	movs	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e00a      	b.n	8002314 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022fe:	f3af 8000 	nop.w
 8002302:	4601      	mov	r1, r0
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	60ba      	str	r2, [r7, #8]
 800230a:	b2ca      	uxtb	r2, r1
 800230c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	3301      	adds	r3, #1
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	697a      	ldr	r2, [r7, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	dbf0      	blt.n	80022fe <_read+0x12>
  }

  return len;
 800231c:	687b      	ldr	r3, [r7, #4]
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	60f8      	str	r0, [r7, #12]
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002332:	2300      	movs	r3, #0
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	e009      	b.n	800234c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	1c5a      	adds	r2, r3, #1
 800233c:	60ba      	str	r2, [r7, #8]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	4618      	mov	r0, r3
 8002342:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	3301      	adds	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbf1      	blt.n	8002338 <_write+0x12>
  }
  return len;
 8002354:	687b      	ldr	r3, [r7, #4]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <_close>:

int _close(int file)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002386:	605a      	str	r2, [r3, #4]
  return 0;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <_isatty>:

int _isatty(int file)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023d0:	4a14      	ldr	r2, [pc, #80]	; (8002424 <_sbrk+0x5c>)
 80023d2:	4b15      	ldr	r3, [pc, #84]	; (8002428 <_sbrk+0x60>)
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023dc:	4b13      	ldr	r3, [pc, #76]	; (800242c <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d102      	bne.n	80023ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <_sbrk+0x64>)
 80023e6:	4a12      	ldr	r2, [pc, #72]	; (8002430 <_sbrk+0x68>)
 80023e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <_sbrk+0x64>)
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4413      	add	r3, r2
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d207      	bcs.n	8002408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f8:	f002 f90e 	bl	8004618 <__errno>
 80023fc:	4603      	mov	r3, r0
 80023fe:	220c      	movs	r2, #12
 8002400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002406:	e009      	b.n	800241c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002408:	4b08      	ldr	r3, [pc, #32]	; (800242c <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <_sbrk+0x64>)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4413      	add	r3, r2
 8002416:	4a05      	ldr	r2, [pc, #20]	; (800242c <_sbrk+0x64>)
 8002418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800241a:	68fb      	ldr	r3, [r7, #12]
}
 800241c:	4618      	mov	r0, r3
 800241e:	3718      	adds	r7, #24
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20003000 	.word	0x20003000
 8002428:	00000400 	.word	0x00000400
 800242c:	20000224 	.word	0x20000224
 8002430:	20000400 	.word	0x20000400

08002434 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <SystemInit+0x20>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	4a05      	ldr	r2, [pc, #20]	; (8002454 <SystemInit+0x20>)
 8002440:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002444:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002448:	bf00      	nop
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <LL_DMA_EnableChannel>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <LL_DMA_EnableChannel+0x3c>)
 80024f8:	5cd3      	ldrb	r3, [r2, r3]
 80024fa:	461a      	mov	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	3a01      	subs	r2, #1
 8002506:	4907      	ldr	r1, [pc, #28]	; (8002524 <LL_DMA_EnableChannel+0x3c>)
 8002508:	5c8a      	ldrb	r2, [r1, r2]
 800250a:	4611      	mov	r1, r2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	440a      	add	r2, r1
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6013      	str	r3, [r2, #0]
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	080074ac 	.word	0x080074ac

08002528 <LL_DMA_DisableChannel>:
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	3b01      	subs	r3, #1
 8002536:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <LL_DMA_DisableChannel+0x3c>)
 8002538:	5cd3      	ldrb	r3, [r2, r3]
 800253a:	461a      	mov	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	3a01      	subs	r2, #1
 8002546:	4907      	ldr	r1, [pc, #28]	; (8002564 <LL_DMA_DisableChannel+0x3c>)
 8002548:	5c8a      	ldrb	r2, [r1, r2]
 800254a:	4611      	mov	r1, r2
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	440a      	add	r2, r1
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6013      	str	r3, [r2, #0]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	080074ac 	.word	0x080074ac

08002568 <LL_DMA_SetDataTransferDirection>:
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	3b01      	subs	r3, #1
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <LL_DMA_SetDataTransferDirection+0x48>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002588:	f023 0310 	bic.w	r3, r3, #16
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	3a01      	subs	r2, #1
 8002590:	4907      	ldr	r1, [pc, #28]	; (80025b0 <LL_DMA_SetDataTransferDirection+0x48>)
 8002592:	5c8a      	ldrb	r2, [r1, r2]
 8002594:	4611      	mov	r1, r2
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	440a      	add	r2, r1
 800259a:	4611      	mov	r1, r2
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	4313      	orrs	r3, r2
 80025a0:	600b      	str	r3, [r1, #0]
}
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	080074ac 	.word	0x080074ac

080025b4 <LL_DMA_GetDataTransferDirection>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <LL_DMA_GetDataTransferDirection+0x2c>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	461a      	mov	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f244 0310 	movw	r3, #16400	; 0x4010
 80025d2:	4013      	ands	r3, r2
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	080074ac 	.word	0x080074ac

080025e4 <LL_DMA_SetMode>:
{
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	4a0c      	ldr	r2, [pc, #48]	; (8002628 <LL_DMA_SetMode+0x44>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	461a      	mov	r2, r3
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4413      	add	r3, r2
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f023 0220 	bic.w	r2, r3, #32
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	3b01      	subs	r3, #1
 8002608:	4907      	ldr	r1, [pc, #28]	; (8002628 <LL_DMA_SetMode+0x44>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	4619      	mov	r1, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	440b      	add	r3, r1
 8002612:	4619      	mov	r1, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	080074ac 	.word	0x080074ac

0800262c <LL_DMA_SetPeriphIncMode>:
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	3b01      	subs	r3, #1
 800263c:	4a0c      	ldr	r2, [pc, #48]	; (8002670 <LL_DMA_SetPeriphIncMode+0x44>)
 800263e:	5cd3      	ldrb	r3, [r2, r3]
 8002640:	461a      	mov	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	4413      	add	r3, r2
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	3b01      	subs	r3, #1
 8002650:	4907      	ldr	r1, [pc, #28]	; (8002670 <LL_DMA_SetPeriphIncMode+0x44>)
 8002652:	5ccb      	ldrb	r3, [r1, r3]
 8002654:	4619      	mov	r1, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	440b      	add	r3, r1
 800265a:	4619      	mov	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]
}
 8002662:	bf00      	nop
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	080074ac 	.word	0x080074ac

08002674 <LL_DMA_SetMemoryIncMode>:
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	3b01      	subs	r3, #1
 8002684:	4a0c      	ldr	r2, [pc, #48]	; (80026b8 <LL_DMA_SetMemoryIncMode+0x44>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	461a      	mov	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4413      	add	r3, r2
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	3b01      	subs	r3, #1
 8002698:	4907      	ldr	r1, [pc, #28]	; (80026b8 <LL_DMA_SetMemoryIncMode+0x44>)
 800269a:	5ccb      	ldrb	r3, [r1, r3]
 800269c:	4619      	mov	r1, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	440b      	add	r3, r1
 80026a2:	4619      	mov	r1, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
}
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	080074ac 	.word	0x080074ac

080026bc <LL_DMA_SetPeriphSize>:
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <LL_DMA_SetPeriphSize+0x44>)
 80026ce:	5cd3      	ldrb	r3, [r2, r3]
 80026d0:	461a      	mov	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	4413      	add	r3, r2
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	3b01      	subs	r3, #1
 80026e0:	4907      	ldr	r1, [pc, #28]	; (8002700 <LL_DMA_SetPeriphSize+0x44>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	4619      	mov	r1, r3
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	440b      	add	r3, r1
 80026ea:	4619      	mov	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	600b      	str	r3, [r1, #0]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	080074ac 	.word	0x080074ac

08002704 <LL_DMA_SetMemorySize>:
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	3b01      	subs	r3, #1
 8002714:	4a0c      	ldr	r2, [pc, #48]	; (8002748 <LL_DMA_SetMemorySize+0x44>)
 8002716:	5cd3      	ldrb	r3, [r2, r3]
 8002718:	461a      	mov	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	4413      	add	r3, r2
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	3b01      	subs	r3, #1
 8002728:	4907      	ldr	r1, [pc, #28]	; (8002748 <LL_DMA_SetMemorySize+0x44>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	4619      	mov	r1, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	440b      	add	r3, r1
 8002732:	4619      	mov	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	080074ac 	.word	0x080074ac

0800274c <LL_DMA_SetChannelPriorityLevel>:
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	3b01      	subs	r3, #1
 800275c:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800275e:	5cd3      	ldrb	r3, [r2, r3]
 8002760:	461a      	mov	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	4413      	add	r3, r2
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	3b01      	subs	r3, #1
 8002770:	4907      	ldr	r1, [pc, #28]	; (8002790 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002772:	5ccb      	ldrb	r3, [r1, r3]
 8002774:	4619      	mov	r1, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	440b      	add	r3, r1
 800277a:	4619      	mov	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	080074ac 	.word	0x080074ac

08002794 <LL_DMA_SetDataLength>:
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	4a0c      	ldr	r2, [pc, #48]	; (80027d8 <LL_DMA_SetDataLength+0x44>)
 80027a6:	5cd3      	ldrb	r3, [r2, r3]
 80027a8:	461a      	mov	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	4413      	add	r3, r2
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	0c1b      	lsrs	r3, r3, #16
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	68ba      	ldr	r2, [r7, #8]
 80027b6:	3a01      	subs	r2, #1
 80027b8:	4907      	ldr	r1, [pc, #28]	; (80027d8 <LL_DMA_SetDataLength+0x44>)
 80027ba:	5c8a      	ldrb	r2, [r1, r2]
 80027bc:	4611      	mov	r1, r2
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	440a      	add	r2, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	080074ac 	.word	0x080074ac

080027dc <LL_DMA_GetDataLength>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	3b01      	subs	r3, #1
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <LL_DMA_GetDataLength+0x28>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4413      	add	r3, r2
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	b29b      	uxth	r3, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	080074ac 	.word	0x080074ac

08002808 <LL_DMA_ConfigAddresses>:
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	2b10      	cmp	r3, #16
 800281a:	d114      	bne.n	8002846 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	3b01      	subs	r3, #1
 8002820:	4a16      	ldr	r2, [pc, #88]	; (800287c <LL_DMA_ConfigAddresses+0x74>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	461a      	mov	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4413      	add	r3, r2
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3b01      	subs	r3, #1
 8002834:	4a11      	ldr	r2, [pc, #68]	; (800287c <LL_DMA_ConfigAddresses+0x74>)
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	461a      	mov	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	461a      	mov	r2, r3
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6093      	str	r3, [r2, #8]
}
 8002844:	e013      	b.n	800286e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	3b01      	subs	r3, #1
 800284a:	4a0c      	ldr	r2, [pc, #48]	; (800287c <LL_DMA_ConfigAddresses+0x74>)
 800284c:	5cd3      	ldrb	r3, [r2, r3]
 800284e:	461a      	mov	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4413      	add	r3, r2
 8002854:	461a      	mov	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	3b01      	subs	r3, #1
 800285e:	4a07      	ldr	r2, [pc, #28]	; (800287c <LL_DMA_ConfigAddresses+0x74>)
 8002860:	5cd3      	ldrb	r3, [r2, r3]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4413      	add	r3, r2
 8002868:	461a      	mov	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	60d3      	str	r3, [r2, #12]
}
 800286e:	bf00      	nop
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	080074ac 	.word	0x080074ac

08002880 <LL_DMA_SetMemoryAddress>:
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3b01      	subs	r3, #1
 8002890:	4a06      	ldr	r2, [pc, #24]	; (80028ac <LL_DMA_SetMemoryAddress+0x2c>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4413      	add	r3, r2
 800289a:	461a      	mov	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	60d3      	str	r3, [r2, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	080074ac 	.word	0x080074ac

080028b0 <LL_DMA_SetPeriphAddress>:
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	3b01      	subs	r3, #1
 80028c0:	4a06      	ldr	r2, [pc, #24]	; (80028dc <LL_DMA_SetPeriphAddress+0x2c>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	461a      	mov	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	461a      	mov	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6093      	str	r3, [r2, #8]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	080074ac 	.word	0x080074ac

080028e0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <LL_DMA_EnableIT_TC+0x3c>)
 80028f0:	5cd3      	ldrb	r3, [r2, r3]
 80028f2:	461a      	mov	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	3a01      	subs	r2, #1
 80028fe:	4907      	ldr	r1, [pc, #28]	; (800291c <LL_DMA_EnableIT_TC+0x3c>)
 8002900:	5c8a      	ldrb	r2, [r1, r2]
 8002902:	4611      	mov	r1, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	440a      	add	r2, r1
 8002908:	f043 0302 	orr.w	r3, r3, #2
 800290c:	6013      	str	r3, [r2, #0]
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	080074ac 	.word	0x080074ac

08002920 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	3b01      	subs	r3, #1
 800292e:	4a0b      	ldr	r2, [pc, #44]	; (800295c <LL_DMA_EnableIT_HT+0x3c>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	461a      	mov	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	3a01      	subs	r2, #1
 800293e:	4907      	ldr	r1, [pc, #28]	; (800295c <LL_DMA_EnableIT_HT+0x3c>)
 8002940:	5c8a      	ldrb	r2, [r1, r2]
 8002942:	4611      	mov	r1, r2
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	440a      	add	r2, r1
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6013      	str	r3, [r2, #0]
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	080074ac 	.word	0x080074ac

08002960 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	3b01      	subs	r3, #1
 800296e:	4a0b      	ldr	r2, [pc, #44]	; (800299c <LL_DMA_EnableIT_TE+0x3c>)
 8002970:	5cd3      	ldrb	r3, [r2, r3]
 8002972:	461a      	mov	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4413      	add	r3, r2
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	3a01      	subs	r2, #1
 800297e:	4907      	ldr	r1, [pc, #28]	; (800299c <LL_DMA_EnableIT_TE+0x3c>)
 8002980:	5c8a      	ldrb	r2, [r1, r2]
 8002982:	4611      	mov	r1, r2
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	440a      	add	r2, r1
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	6013      	str	r3, [r2, #0]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	080074ac 	.word	0x080074ac

080029a0 <LL_AHB1_GRP1_EnableClock>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	4907      	ldr	r1, [pc, #28]	; (80029cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4013      	ands	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	40021000 	.word	0x40021000

080029d0 <LL_APB1_GRP1_EnableClock>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029da:	69da      	ldr	r2, [r3, #28]
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80029e4:	4b05      	ldr	r3, [pc, #20]	; (80029fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4013      	ands	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ee:	68fb      	ldr	r3, [r7, #12]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40021000 	.word	0x40021000

08002a00 <LL_USART_Enable>:
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	601a      	str	r2, [r3, #0]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <LL_USART_ConfigAsyncMode>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	; 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	e853 3f00 	ldrex	r3, [r3]
 8002a5e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f043 0310 	orr.w	r3, r3, #16
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	61ba      	str	r2, [r7, #24]
 8002a6e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a70:	6979      	ldr	r1, [r7, #20]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	e841 2300 	strex	r3, r2, [r1]
 8002a78:	613b      	str	r3, [r7, #16]
   return(result);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1e9      	bne.n	8002a54 <LL_USART_EnableIT_IDLE+0x8>
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b089      	sub	sp, #36	; 0x24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3308      	adds	r3, #8
 8002a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	e853 3f00 	ldrex	r3, [r3]
 8002aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3308      	adds	r3, #8
 8002ab0:	69fa      	ldr	r2, [r7, #28]
 8002ab2:	61ba      	str	r2, [r7, #24]
 8002ab4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	6979      	ldr	r1, [r7, #20]
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	613b      	str	r3, [r7, #16]
   return(result);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e7      	bne.n	8002a96 <LL_USART_DisableIT_CTS+0x8>
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	3724      	adds	r7, #36	; 0x24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b089      	sub	sp, #36	; 0x24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3308      	adds	r3, #8
 8002ae0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	e853 3f00 	ldrex	r3, [r3]
 8002ae8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002af0:	61fb      	str	r3, [r7, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3308      	adds	r3, #8
 8002af6:	69fa      	ldr	r2, [r7, #28]
 8002af8:	61ba      	str	r2, [r7, #24]
 8002afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	6979      	ldr	r1, [r7, #20]
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	613b      	str	r3, [r7, #16]
   return(result);
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e7      	bne.n	8002adc <LL_USART_EnableDMAReq_RX+0x8>
}
 8002b0c:	bf00      	nop
 8002b0e:	bf00      	nop
 8002b10:	3724      	adds	r7, #36	; 0x24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b089      	sub	sp, #36	; 0x24
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3308      	adds	r3, #8
 8002b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	e853 3f00 	ldrex	r3, [r3]
 8002b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	69fa      	ldr	r2, [r7, #28]
 8002b3e:	61ba      	str	r2, [r7, #24]
 8002b40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e7      	bne.n	8002b22 <LL_USART_EnableDMAReq_TX+0x8>
}
 8002b52:	bf00      	nop
 8002b54:	bf00      	nop
 8002b56:	3724      	adds	r7, #36	; 0x24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3328      	adds	r3, #40	; 0x28
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	e002      	b.n	8002b7e <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3324      	adds	r3, #36	; 0x24
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <MX_USART2_UART_Init>:
	// type global variables here
uint16_t buf_read_pos = 0;

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002b8c:	b5b0      	push	{r4, r5, r7, lr}
 8002b8e:	b090      	sub	sp, #64	; 0x40
 8002b90:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
 8002b9c:	609a      	str	r2, [r3, #8]
 8002b9e:	60da      	str	r2, [r3, #12]
 8002ba0:	611a      	str	r2, [r3, #16]
 8002ba2:	615a      	str	r2, [r3, #20]
 8002ba4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
 8002bb4:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002bb6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bba:	f7ff ff09 	bl	80029d0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002bbe:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bc2:	f7ff feed 	bl	80029a0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 8002bc6:	f248 0304 	movw	r3, #32772	; 0x8004
 8002bca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002bdc:	2307      	movs	r3, #7
 8002bde:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be0:	1d3b      	adds	r3, r7, #4
 8002be2:	4619      	mov	r1, r3
 8002be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002be8:	f000 fa62 	bl	80030b0 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002bec:	2200      	movs	r2, #0
 8002bee:	2106      	movs	r1, #6
 8002bf0:	4854      	ldr	r0, [pc, #336]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002bf2:	f7ff fcb9 	bl	8002568 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 8002bf6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bfa:	2106      	movs	r1, #6
 8002bfc:	4851      	ldr	r0, [pc, #324]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002bfe:	f7ff fda5 	bl	800274c <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002c02:	2200      	movs	r2, #0
 8002c04:	2106      	movs	r1, #6
 8002c06:	484f      	ldr	r0, [pc, #316]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c08:	f7ff fcec 	bl	80025e4 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2106      	movs	r1, #6
 8002c10:	484c      	ldr	r0, [pc, #304]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c12:	f7ff fd0b 	bl	800262c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	2106      	movs	r1, #6
 8002c1a:	484a      	ldr	r0, [pc, #296]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c1c:	f7ff fd2a 	bl	8002674 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2106      	movs	r1, #6
 8002c24:	4847      	ldr	r0, [pc, #284]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c26:	f7ff fd49 	bl	80026bc <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	2106      	movs	r1, #6
 8002c2e:	4845      	ldr	r0, [pc, #276]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c30:	f7ff fd68 	bl	8002704 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002c34:	2101      	movs	r1, #1
 8002c36:	4844      	ldr	r0, [pc, #272]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002c38:	f7ff ff92 	bl	8002b60 <LL_USART_DMA_GetRegAddr>
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	4d43      	ldr	r5, [pc, #268]	; (8002d4c <MX_USART2_UART_Init+0x1c0>)
 8002c40:	2106      	movs	r1, #6
 8002c42:	4840      	ldr	r0, [pc, #256]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c44:	f7ff fcb6 	bl	80025b4 <LL_DMA_GetDataTransferDirection>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	462b      	mov	r3, r5
 8002c4e:	4622      	mov	r2, r4
 8002c50:	2106      	movs	r1, #6
 8002c52:	483c      	ldr	r0, [pc, #240]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c54:	f7ff fdd8 	bl	8002808 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002c58:	2280      	movs	r2, #128	; 0x80
 8002c5a:	2106      	movs	r1, #6
 8002c5c:	4839      	ldr	r0, [pc, #228]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c5e:	f7ff fd99 	bl	8002794 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002c62:	2106      	movs	r1, #6
 8002c64:	4837      	ldr	r0, [pc, #220]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c66:	f7ff fc3f 	bl	80024e8 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 8002c6a:	4837      	ldr	r0, [pc, #220]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002c6c:	f7ff ff32 	bl	8002ad4 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 8002c70:	2106      	movs	r1, #6
 8002c72:	4834      	ldr	r0, [pc, #208]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c74:	f7ff fe34 	bl	80028e0 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8002c78:	2106      	movs	r1, #6
 8002c7a:	4832      	ldr	r0, [pc, #200]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c7c:	f7ff fe50 	bl	8002920 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002c80:	2210      	movs	r2, #16
 8002c82:	2107      	movs	r1, #7
 8002c84:	482f      	ldr	r0, [pc, #188]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c86:	f7ff fc6f 	bl	8002568 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 8002c8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c8e:	2107      	movs	r1, #7
 8002c90:	482c      	ldr	r0, [pc, #176]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c92:	f7ff fd5b 	bl	800274c <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8002c96:	2200      	movs	r2, #0
 8002c98:	2107      	movs	r1, #7
 8002c9a:	482a      	ldr	r0, [pc, #168]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002c9c:	f7ff fca2 	bl	80025e4 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2107      	movs	r1, #7
 8002ca4:	4827      	ldr	r0, [pc, #156]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002ca6:	f7ff fcc1 	bl	800262c <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002caa:	2280      	movs	r2, #128	; 0x80
 8002cac:	2107      	movs	r1, #7
 8002cae:	4825      	ldr	r0, [pc, #148]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002cb0:	f7ff fce0 	bl	8002674 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2107      	movs	r1, #7
 8002cb8:	4822      	ldr	r0, [pc, #136]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002cba:	f7ff fcff 	bl	80026bc <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2107      	movs	r1, #7
 8002cc2:	4820      	ldr	r0, [pc, #128]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002cc4:	f7ff fd1e 	bl	8002704 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002cc8:	2100      	movs	r1, #0
 8002cca:	481f      	ldr	r0, [pc, #124]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002ccc:	f7ff ff48 	bl	8002b60 <LL_USART_DMA_GetRegAddr>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	2107      	movs	r1, #7
 8002cd6:	481b      	ldr	r0, [pc, #108]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002cd8:	f7ff fdea 	bl	80028b0 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002cdc:	481a      	ldr	r0, [pc, #104]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002cde:	f7ff ff1c 	bl	8002b1a <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002ce2:	2107      	movs	r1, #7
 8002ce4:	4817      	ldr	r0, [pc, #92]	; (8002d44 <MX_USART2_UART_Init+0x1b8>)
 8002ce6:	f7ff fe3b 	bl	8002960 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 8002cea:	2100      	movs	r1, #0
 8002cec:	2026      	movs	r0, #38	; 0x26
 8002cee:	f7ff fbd1 	bl	8002494 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002cf2:	2026      	movs	r0, #38	; 0x26
 8002cf4:	f7ff fbb0 	bl	8002458 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 8002cf8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002cfc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002d02:	2300      	movs	r3, #0
 8002d04:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002d06:	2300      	movs	r3, #0
 8002d08:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002d0a:	230c      	movs	r3, #12
 8002d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002d12:	2300      	movs	r3, #0
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	480a      	ldr	r0, [pc, #40]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002d1e:	f000 fd2d 	bl	800377c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002d22:	4809      	ldr	r0, [pc, #36]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002d24:	f7ff fe7c 	bl	8002a20 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 8002d28:	4807      	ldr	r0, [pc, #28]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002d2a:	f7ff feb0 	bl	8002a8e <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8002d2e:	4806      	ldr	r0, [pc, #24]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002d30:	f7ff fe8c 	bl	8002a4c <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8002d34:	4804      	ldr	r0, [pc, #16]	; (8002d48 <MX_USART2_UART_Init+0x1bc>)
 8002d36:	f7ff fe63 	bl	8002a00 <LL_USART_Enable>
  	  //type your code here:
}
 8002d3a:	bf00      	nop
 8002d3c:	3738      	adds	r7, #56	; 0x38
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bdb0      	pop	{r4, r5, r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40004400 	.word	0x40004400
 8002d4c:	20000228 	.word	0x20000228

08002d50 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2107      	movs	r1, #7
 8002d62:	480a      	ldr	r0, [pc, #40]	; (8002d8c <USART2_PutBuffer+0x3c>)
 8002d64:	f7ff fd8c 	bl	8002880 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	2107      	movs	r1, #7
 8002d6e:	4807      	ldr	r0, [pc, #28]	; (8002d8c <USART2_PutBuffer+0x3c>)
 8002d70:	f7ff fd10 	bl	8002794 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002d74:	2107      	movs	r1, #7
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <USART2_PutBuffer+0x3c>)
 8002d78:	f7ff fdb2 	bl	80028e0 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002d7c:	2107      	movs	r1, #7
 8002d7e:	4803      	ldr	r0, [pc, #12]	; (8002d8c <USART2_PutBuffer+0x3c>)
 8002d80:	f7ff fbb2 	bl	80024e8 <LL_DMA_EnableChannel>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40020000 	.word	0x40020000

08002d90 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8002d96:	2106      	movs	r1, #6
 8002d98:	482a      	ldr	r0, [pc, #168]	; (8002e44 <USART2_CheckDmaReception+0xb4>)
 8002d9a:	f7ff fd1f 	bl	80027dc <LL_DMA_GetDataLength>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002da6:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART2_BUFFER_SIZE)
 8002da8:	88fb      	ldrh	r3, [r7, #6]
 8002daa:	2b7f      	cmp	r3, #127	; 0x7f
 8002dac:	d941      	bls.n	8002e32 <USART2_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002dae:	2106      	movs	r1, #6
 8002db0:	4824      	ldr	r0, [pc, #144]	; (8002e44 <USART2_CheckDmaReception+0xb4>)
 8002db2:	f7ff fbb9 	bl	8002528 <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)bufferUSART2dma);
 8002db6:	4b24      	ldr	r3, [pc, #144]	; (8002e48 <USART2_CheckDmaReception+0xb8>)
 8002db8:	461a      	mov	r2, r3
 8002dba:	2106      	movs	r1, #6
 8002dbc:	4821      	ldr	r0, [pc, #132]	; (8002e44 <USART2_CheckDmaReception+0xb4>)
 8002dbe:	f7ff fd5f 	bl	8002880 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002dc2:	2280      	movs	r2, #128	; 0x80
 8002dc4:	2106      	movs	r1, #6
 8002dc6:	481f      	ldr	r0, [pc, #124]	; (8002e44 <USART2_CheckDmaReception+0xb4>)
 8002dc8:	f7ff fce4 	bl	8002794 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002dcc:	2106      	movs	r1, #6
 8002dce:	481d      	ldr	r0, [pc, #116]	; (8002e44 <USART2_CheckDmaReception+0xb4>)
 8002dd0:	f7ff fb8a 	bl	80024e8 <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002dd4:	e012      	b.n	8002dfc <USART2_CheckDmaReception+0x6c>
		{
			if(USART2_ProcessData != 0)
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <USART2_CheckDmaReception+0xbc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d008      	beq.n	8002df0 <USART2_CheckDmaReception+0x60>
			{
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002dde:	4b1b      	ldr	r3, [pc, #108]	; (8002e4c <USART2_CheckDmaReception+0xbc>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1b      	ldr	r2, [pc, #108]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002de4:	8812      	ldrh	r2, [r2, #0]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4a17      	ldr	r2, [pc, #92]	; (8002e48 <USART2_CheckDmaReception+0xb8>)
 8002dea:	5c52      	ldrb	r2, [r2, r1]
 8002dec:	4610      	mov	r0, r2
 8002dee:	4798      	blx	r3
			}
			buf_read_pos++;
 8002df0:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	3301      	adds	r3, #1
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002dfa:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002dfe:	881b      	ldrh	r3, [r3, #0]
 8002e00:	2b7f      	cmp	r3, #127	; 0x7f
 8002e02:	d9e8      	bls.n	8002dd6 <USART2_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 8002e04:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	801a      	strh	r2, [r3, #0]
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 8002e0a:	e017      	b.n	8002e3c <USART2_CheckDmaReception+0xac>
			if(USART2_ProcessData != 0)
 8002e0c:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <USART2_CheckDmaReception+0xbc>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <USART2_CheckDmaReception+0x96>
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <USART2_CheckDmaReception+0xbc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002e1a:	8812      	ldrh	r2, [r2, #0]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <USART2_CheckDmaReception+0xb8>)
 8002e20:	5c52      	ldrb	r2, [r2, r1]
 8002e22:	4610      	mov	r0, r2
 8002e24:	4798      	blx	r3
			buf_read_pos++;
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	4b08      	ldr	r3, [pc, #32]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002e30:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 8002e32:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <USART2_CheckDmaReception+0xc0>)
 8002e34:	881b      	ldrh	r3, [r3, #0]
 8002e36:	88fa      	ldrh	r2, [r7, #6]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d8e7      	bhi.n	8002e0c <USART2_CheckDmaReception+0x7c>
}
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40020000 	.word	0x40020000
 8002e48:	20000228 	.word	0x20000228
 8002e4c:	200002a8 	.word	0x200002a8
 8002e50:	200002ac 	.word	0x200002ac

08002e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e58:	f7ff faec 	bl	8002434 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e5c:	480c      	ldr	r0, [pc, #48]	; (8002e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e5e:	490d      	ldr	r1, [pc, #52]	; (8002e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e60:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <LoopForever+0xe>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e64:	e002      	b.n	8002e6c <LoopCopyDataInit>

08002e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6a:	3304      	adds	r3, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e70:	d3f9      	bcc.n	8002e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e74:	4c0a      	ldr	r4, [pc, #40]	; (8002ea0 <LoopForever+0x16>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e78:	e001      	b.n	8002e7e <LoopFillZerobss>

08002e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e7c:	3204      	adds	r2, #4

08002e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e80:	d3fb      	bcc.n	8002e7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e82:	f001 fbcf 	bl	8004624 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e86:	f7ff f81d 	bl	8001ec4 <main>

08002e8a <LoopForever>:

LoopForever:
    b LoopForever
 8002e8a:	e7fe      	b.n	8002e8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e8c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e94:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002e98:	08007860 	.word	0x08007860
  ldr r2, =_sbss
 8002e9c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ea0:	200003fc 	.word	0x200003fc

08002ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ea4:	e7fe      	b.n	8002ea4 <ADC1_2_IRQHandler>

08002ea6 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b089      	sub	sp, #36	; 0x24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	613b      	str	r3, [r7, #16]
  return result;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2103      	movs	r1, #3
 8002ece:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	401a      	ands	r2, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	61bb      	str	r3, [r7, #24]
  return result;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	fab3 f383 	clz	r3, r3
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	601a      	str	r2, [r3, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	3724      	adds	r7, #36	; 0x24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	401a      	ands	r2, r3
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	431a      	orrs	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	605a      	str	r2, [r3, #4]
}
 8002f28:	bf00      	nop
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b089      	sub	sp, #36	; 0x24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	613b      	str	r3, [r7, #16]
  return result;
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2103      	movs	r1, #3
 8002f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	401a      	ands	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	61bb      	str	r3, [r7, #24]
  return result;
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f80:	431a      	orrs	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b089      	sub	sp, #36	; 0x24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	613b      	str	r3, [r7, #16]
  return result;
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	fab3 f383 	clz	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2103      	movs	r1, #3
 8002fba:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	61bb      	str	r3, [r7, #24]
  return result;
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	fab3 f383 	clz	r3, r3
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	60da      	str	r2, [r3, #12]
}
 8002fe4:	bf00      	nop
 8002fe6:	3724      	adds	r7, #36	; 0x24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	60b9      	str	r1, [r7, #8]
 8002ffa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a1a      	ldr	r2, [r3, #32]
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa93 f3a3 	rbit	r3, r3
 800300a:	613b      	str	r3, [r7, #16]
  return result;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	210f      	movs	r1, #15
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	401a      	ands	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	61bb      	str	r3, [r7, #24]
  return result;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	6879      	ldr	r1, [r7, #4]
 8003038:	fa01 f303 	lsl.w	r3, r1, r3
 800303c:	431a      	orrs	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003042:	bf00      	nop
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr

0800304e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800304e:	b480      	push	{r7}
 8003050:	b089      	sub	sp, #36	; 0x24
 8003052:	af00      	add	r7, sp, #0
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa93 f3a3 	rbit	r3, r3
 800306a:	613b      	str	r3, [r7, #16]
  return result;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	210f      	movs	r1, #15
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	401a      	ands	r2, r3
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	0a1b      	lsrs	r3, r3, #8
 8003084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa93 f3a3 	rbit	r3, r3
 800308c:	61bb      	str	r3, [r7, #24]
  return result;
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	fa01 f303 	lsl.w	r3, r1, r3
 800309e:	431a      	orrs	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80030a4:	bf00      	nop
 80030a6:	3724      	adds	r7, #36	; 0x24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	613b      	str	r3, [r7, #16]
  return result;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	fab3 f383 	clz	r3, r3
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80030d2:	e051      	b.n	8003178 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	2101      	movs	r1, #1
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d043      	beq.n	8003172 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d003      	beq.n	80030fa <LL_GPIO_Init+0x4a>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d10e      	bne.n	8003118 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	461a      	mov	r2, r3
 8003100:	69b9      	ldr	r1, [r7, #24]
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff16 	bl	8002f34 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	6819      	ldr	r1, [r3, #0]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	461a      	mov	r2, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff fef6 	bl	8002f04 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	461a      	mov	r2, r3
 800311e:	69b9      	ldr	r1, [r7, #24]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff36 	bl	8002f92 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d11a      	bne.n	8003164 <LL_GPIO_Init+0xb4>
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	60bb      	str	r3, [r7, #8]
  return result;
 800313a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800313c:	fab3 f383 	clz	r3, r3
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b07      	cmp	r3, #7
 8003144:	d807      	bhi.n	8003156 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	461a      	mov	r2, r3
 800314c:	69b9      	ldr	r1, [r7, #24]
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ff4e 	bl	8002ff0 <LL_GPIO_SetAFPin_0_7>
 8003154:	e006      	b.n	8003164 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	461a      	mov	r2, r3
 800315c:	69b9      	ldr	r1, [r7, #24]
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff ff75 	bl	800304e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	461a      	mov	r2, r3
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f7ff fe9a 	bl	8002ea6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3301      	adds	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	fa22 f303 	lsr.w	r3, r2, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1a6      	bne.n	80030d4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <LL_I2C_Enable>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f043 0201 	orr.w	r2, r3, #1
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	601a      	str	r2, [r3, #0]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_I2C_Disable>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 0201 	bic.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	601a      	str	r2, [r3, #0]
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <LL_I2C_ConfigFilters>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	0219      	lsls	r1, r3, #8
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	430b      	orrs	r3, r1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	601a      	str	r2, [r3, #0]
}
 80031f2:	bf00      	nop
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <LL_I2C_SetOwnAddress1>:
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003212:	f023 0307 	bic.w	r3, r3, #7
 8003216:	68b9      	ldr	r1, [r7, #8]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	430a      	orrs	r2, r1
 800321c:	431a      	orrs	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	609a      	str	r2, [r3, #8]
}
 8003222:	bf00      	nop
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_I2C_EnableOwnAddress1>:
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	609a      	str	r2, [r3, #8]
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr

0800324e <LL_I2C_DisableOwnAddress1>:
{
 800324e:	b480      	push	{r7}
 8003250:	b083      	sub	sp, #12
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	609a      	str	r2, [r3, #8]
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <LL_I2C_SetTiming>:
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	683a      	ldr	r2, [r7, #0]
 800327c:	611a      	str	r2, [r3, #16]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_I2C_SetMode>:
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	601a      	str	r2, [r3, #0]
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <LL_I2C_AcknowledgeNextData>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	431a      	orrs	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	605a      	str	r2, [r3, #4]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff65 	bl	80031b0 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	461a      	mov	r2, r3
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7ff ff6d 	bl	80031d0 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff ffb6 	bl	800326e <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ff44 	bl	8003190 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff ffa0 	bl	800324e <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6919      	ldr	r1, [r3, #16]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	461a      	mov	r2, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f7ff ff70 	bl	80031fe <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ff81 	bl	800322e <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4619      	mov	r1, r3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ffa9 	bl	800328a <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff ffb6 	bl	80032b0 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <LL_RCC_HSI_IsReady>:
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <LL_RCC_HSI_IsReady+0x20>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
}
 8003366:	4618      	mov	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40021000 	.word	0x40021000

08003374 <LL_RCC_LSE_IsReady>:
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003378:	4b06      	ldr	r3, [pc, #24]	; (8003394 <LL_RCC_LSE_IsReady+0x20>)
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
}
 800338a:	4618      	mov	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	40021000 	.word	0x40021000

08003398 <LL_RCC_GetSysClkSource>:
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <LL_RCC_GetSysClkSource+0x18>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 030c 	and.w	r3, r3, #12
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40021000 	.word	0x40021000

080033b4 <LL_RCC_GetAHBPrescaler>:
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <LL_RCC_GetAHBPrescaler+0x18>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000

080033d0 <LL_RCC_GetAPB1Prescaler>:
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80033d4:	4b04      	ldr	r3, [pc, #16]	; (80033e8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80033dc:	4618      	mov	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40021000 	.word	0x40021000

080033ec <LL_RCC_GetAPB2Prescaler>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <LL_RCC_GetAPB2Prescaler+0x18>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000

08003408 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003410:	4b07      	ldr	r3, [pc, #28]	; (8003430 <LL_RCC_GetUSARTClockSource+0x28>)
 8003412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003414:	2103      	movs	r1, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	401a      	ands	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	061b      	lsls	r3, r3, #24
 8003422:	4313      	orrs	r3, r2
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	40021000 	.word	0x40021000

08003434 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003438:	4b04      	ldr	r3, [pc, #16]	; (800344c <LL_RCC_PLL_GetMainSource+0x18>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	40021000 	.word	0x40021000

08003450 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800345c:	4618      	mov	r0, r3
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000

0800346c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <LL_RCC_PLL_GetPrediv+0x18>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	f003 030f 	and.w	r3, r3, #15
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000

08003488 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003490:	f000 f862 	bl	8003558 <RCC_GetSystemClockFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f880 	bl	80035a4 <RCC_GetHCLKClockFreq>
 80034a4:	4602      	mov	r2, r0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f88e 	bl	80035d0 <RCC_GetPCLK1ClockFreq>
 80034b4:	4602      	mov	r2, r0
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f89a 	bl	80035f8 <RCC_GetPCLK2ClockFreq>
 80034c4:	4602      	mov	r2, r0
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	60da      	str	r2, [r3, #12]
}
 80034ca:	bf00      	nop
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d130      	bne.n	8003548 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ff8e 	bl	8003408 <LL_RCC_GetUSARTClockSource>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d00a      	beq.n	8003508 <LL_RCC_GetUSARTClockFreq+0x34>
 80034f2:	2b03      	cmp	r3, #3
 80034f4:	d819      	bhi.n	800352a <LL_RCC_GetUSARTClockFreq+0x56>
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d002      	beq.n	8003500 <LL_RCC_GetUSARTClockFreq+0x2c>
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d00c      	beq.n	8003518 <LL_RCC_GetUSARTClockFreq+0x44>
 80034fe:	e014      	b.n	800352a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003500:	f000 f82a 	bl	8003558 <RCC_GetSystemClockFreq>
 8003504:	60f8      	str	r0, [r7, #12]
        break;
 8003506:	e01f      	b.n	8003548 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8003508:	f7ff ff22 	bl	8003350 <LL_RCC_HSI_IsReady>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d017      	beq.n	8003542 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <LL_RCC_GetUSARTClockFreq+0x80>)
 8003514:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003516:	e014      	b.n	8003542 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8003518:	f7ff ff2c 	bl	8003374 <LL_RCC_LSE_IsReady>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d011      	beq.n	8003546 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8003522:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003526:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003528:	e00d      	b.n	8003546 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800352a:	f000 f815 	bl	8003558 <RCC_GetSystemClockFreq>
 800352e:	4603      	mov	r3, r0
 8003530:	4618      	mov	r0, r3
 8003532:	f000 f837 	bl	80035a4 <RCC_GetHCLKClockFreq>
 8003536:	4603      	mov	r3, r0
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f849 	bl	80035d0 <RCC_GetPCLK1ClockFreq>
 800353e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8003540:	e002      	b.n	8003548 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8003542:	bf00      	nop
 8003544:	e000      	b.n	8003548 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8003546:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003548:	68fb      	ldr	r3, [r7, #12]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	007a1200 	.word	0x007a1200

08003558 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003562:	f7ff ff19 	bl	8003398 <LL_RCC_GetSysClkSource>
 8003566:	4603      	mov	r3, r0
 8003568:	2b08      	cmp	r3, #8
 800356a:	d00c      	beq.n	8003586 <RCC_GetSystemClockFreq+0x2e>
 800356c:	2b08      	cmp	r3, #8
 800356e:	d80e      	bhi.n	800358e <RCC_GetSystemClockFreq+0x36>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <RCC_GetSystemClockFreq+0x22>
 8003574:	2b04      	cmp	r3, #4
 8003576:	d003      	beq.n	8003580 <RCC_GetSystemClockFreq+0x28>
 8003578:	e009      	b.n	800358e <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <RCC_GetSystemClockFreq+0x48>)
 800357c:	607b      	str	r3, [r7, #4]
      break;
 800357e:	e009      	b.n	8003594 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <RCC_GetSystemClockFreq+0x48>)
 8003582:	607b      	str	r3, [r7, #4]
      break;
 8003584:	e006      	b.n	8003594 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003586:	f000 f84b 	bl	8003620 <RCC_PLL_GetFreqDomain_SYS>
 800358a:	6078      	str	r0, [r7, #4]
      break;
 800358c:	e002      	b.n	8003594 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <RCC_GetSystemClockFreq+0x48>)
 8003590:	607b      	str	r3, [r7, #4]
      break;
 8003592:	bf00      	nop
  }

  return frequency;
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	007a1200 	.word	0x007a1200

080035a4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80035ac:	f7ff ff02 	bl	80033b4 <LL_RCC_GetAHBPrescaler>
 80035b0:	4603      	mov	r3, r0
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <RCC_GetHCLKClockFreq+0x28>)
 80035ba:	5cd3      	ldrb	r3, [r2, r3]
 80035bc:	461a      	mov	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	40d3      	lsrs	r3, r2
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	08007494 	.word	0x08007494

080035d0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80035d8:	f7ff fefa 	bl	80033d0 <LL_RCC_GetAPB1Prescaler>
 80035dc:	4603      	mov	r3, r0
 80035de:	0a1b      	lsrs	r3, r3, #8
 80035e0:	4a04      	ldr	r2, [pc, #16]	; (80035f4 <RCC_GetPCLK1ClockFreq+0x24>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	461a      	mov	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	40d3      	lsrs	r3, r2
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	080074a4 	.word	0x080074a4

080035f8 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003600:	f7ff fef4 	bl	80033ec <LL_RCC_GetAPB2Prescaler>
 8003604:	4603      	mov	r3, r0
 8003606:	0adb      	lsrs	r3, r3, #11
 8003608:	4a04      	ldr	r2, [pc, #16]	; (800361c <RCC_GetPCLK2ClockFreq+0x24>)
 800360a:	5cd3      	ldrb	r3, [r2, r3]
 800360c:	461a      	mov	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	40d3      	lsrs	r3, r2
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	080074a4 	.word	0x080074a4

08003620 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800362e:	f7ff ff01 	bl	8003434 <LL_RCC_PLL_GetMainSource>
 8003632:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d004      	beq.n	8003644 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d003      	beq.n	800364a <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003642:	e005      	b.n	8003650 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8003644:	4b13      	ldr	r3, [pc, #76]	; (8003694 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003646:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003648:	e005      	b.n	8003656 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800364a:	4b13      	ldr	r3, [pc, #76]	; (8003698 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 800364c:	60fb      	str	r3, [r7, #12]
      break;
 800364e:	e002      	b.n	8003656 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003652:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003654:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8003656:	f7ff ff09 	bl	800346c <LL_RCC_PLL_GetPrediv>
 800365a:	4603      	mov	r3, r0
 800365c:	3301      	adds	r3, #1
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	fbb2 f4f3 	udiv	r4, r2, r3
 8003664:	f7ff fef4 	bl	8003450 <LL_RCC_PLL_GetMultiplicator>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800366e:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003672:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	fa92 f2a2 	rbit	r2, r2
 800367a:	603a      	str	r2, [r7, #0]
  return result;
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	fab2 f282 	clz	r2, r2
 8003682:	b2d2      	uxtb	r2, r2
 8003684:	40d3      	lsrs	r3, r2
 8003686:	3302      	adds	r3, #2
 8003688:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bd90      	pop	{r4, r7, pc}
 8003694:	003d0900 	.word	0x003d0900
 8003698:	007a1200 	.word	0x007a1200

0800369c <LL_USART_IsEnabled>:
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <LL_USART_IsEnabled+0x18>
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <LL_USART_IsEnabled+0x1a>
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <LL_USART_SetStopBitsLength>:
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	605a      	str	r2, [r3, #4]
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_USART_SetHWFlowCtrl>:
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	609a      	str	r2, [r3, #8]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <LL_USART_SetBaudRate>:
{
 800370e:	b480      	push	{r7}
 8003710:	b087      	sub	sp, #28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003722:	d11a      	bne.n	800375a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	005a      	lsls	r2, r3, #1
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	085b      	lsrs	r3, r3, #1
 800372c:	441a      	add	r2, r3
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	fbb2 f3f3 	udiv	r3, r2, r3
 8003734:	b29b      	uxth	r3, r3
 8003736:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800373e:	4013      	ands	r3, r2
 8003740:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	085b      	lsrs	r3, r3, #1
 8003746:	b29b      	uxth	r3, r3
 8003748:	f003 0307 	and.w	r3, r3, #7
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	60da      	str	r2, [r3, #12]
}
 8003758:	e00a      	b.n	8003770 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	085a      	lsrs	r2, r3, #1
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	441a      	add	r2, r3
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	b29b      	uxth	r3, r3
 800376a:	461a      	mov	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	60da      	str	r2, [r3, #12]
}
 8003770:	bf00      	nop
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800378a:	2300      	movs	r3, #0
 800378c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff ff84 	bl	800369c <LL_USART_IsEnabled>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d14e      	bne.n	8003838 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <LL_USART_Init+0xc8>)
 80037a0:	4013      	ands	r3, r2
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	6851      	ldr	r1, [r2, #4]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	68d2      	ldr	r2, [r2, #12]
 80037aa:	4311      	orrs	r1, r2
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	6912      	ldr	r2, [r2, #16]
 80037b0:	4311      	orrs	r1, r2
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	6992      	ldr	r2, [r2, #24]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	4619      	mov	r1, r3
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f7ff ff7c 	bl	80036c2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4619      	mov	r1, r3
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ff89 	bl	80036e8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <LL_USART_Init+0xcc>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d104      	bne.n	80037e8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80037de:	2000      	movs	r0, #0
 80037e0:	f7ff fe78 	bl	80034d4 <LL_RCC_GetUSARTClockFreq>
 80037e4:	61b8      	str	r0, [r7, #24]
 80037e6:	e016      	b.n	8003816 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a18      	ldr	r2, [pc, #96]	; (800384c <LL_USART_Init+0xd0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d107      	bne.n	8003800 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80037f0:	f107 0308 	add.w	r3, r7, #8
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7ff fe47 	bl	8003488 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e00a      	b.n	8003816 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a13      	ldr	r2, [pc, #76]	; (8003850 <LL_USART_Init+0xd4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d106      	bne.n	8003816 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003808:	f107 0308 	add.w	r3, r7, #8
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fe3b 	bl	8003488 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00d      	beq.n	8003838 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d009      	beq.n	8003838 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003824:	2300      	movs	r3, #0
 8003826:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003830:	69b9      	ldr	r1, [r7, #24]
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ff6b 	bl	800370e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003838:	7ffb      	ldrb	r3, [r7, #31]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3720      	adds	r7, #32
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	efff69f3 	.word	0xefff69f3
 8003848:	40013800 	.word	0x40013800
 800384c:	40004400 	.word	0x40004400
 8003850:	40004800 	.word	0x40004800

08003854 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	4a07      	ldr	r2, [pc, #28]	; (8003884 <LL_InitTick+0x30>)
 8003868:	3b01      	subs	r3, #1
 800386a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800386c:	4b05      	ldr	r3, [pc, #20]	; (8003884 <LL_InitTick+0x30>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <LL_InitTick+0x30>)
 8003874:	2205      	movs	r2, #5
 8003876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e010 	.word	0xe000e010

08003888 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003890:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ffdd 	bl	8003854 <LL_InitTick>
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80038ac:	4a04      	ldr	r2, [pc, #16]	; (80038c0 <LL_SetSystemCoreClock+0x1c>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6013      	str	r3, [r2, #0]
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000004 	.word	0x20000004

080038c4 <malloc>:
 80038c4:	4b02      	ldr	r3, [pc, #8]	; (80038d0 <malloc+0xc>)
 80038c6:	4601      	mov	r1, r0
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	f000 b82b 	b.w	8003924 <_malloc_r>
 80038ce:	bf00      	nop
 80038d0:	20000060 	.word	0x20000060

080038d4 <free>:
 80038d4:	4b02      	ldr	r3, [pc, #8]	; (80038e0 <free+0xc>)
 80038d6:	4601      	mov	r1, r0
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	f001 bd47 	b.w	800536c <_free_r>
 80038de:	bf00      	nop
 80038e0:	20000060 	.word	0x20000060

080038e4 <sbrk_aligned>:
 80038e4:	b570      	push	{r4, r5, r6, lr}
 80038e6:	4e0e      	ldr	r6, [pc, #56]	; (8003920 <sbrk_aligned+0x3c>)
 80038e8:	460c      	mov	r4, r1
 80038ea:	6831      	ldr	r1, [r6, #0]
 80038ec:	4605      	mov	r5, r0
 80038ee:	b911      	cbnz	r1, 80038f6 <sbrk_aligned+0x12>
 80038f0:	f000 fe70 	bl	80045d4 <_sbrk_r>
 80038f4:	6030      	str	r0, [r6, #0]
 80038f6:	4621      	mov	r1, r4
 80038f8:	4628      	mov	r0, r5
 80038fa:	f000 fe6b 	bl	80045d4 <_sbrk_r>
 80038fe:	1c43      	adds	r3, r0, #1
 8003900:	d00a      	beq.n	8003918 <sbrk_aligned+0x34>
 8003902:	1cc4      	adds	r4, r0, #3
 8003904:	f024 0403 	bic.w	r4, r4, #3
 8003908:	42a0      	cmp	r0, r4
 800390a:	d007      	beq.n	800391c <sbrk_aligned+0x38>
 800390c:	1a21      	subs	r1, r4, r0
 800390e:	4628      	mov	r0, r5
 8003910:	f000 fe60 	bl	80045d4 <_sbrk_r>
 8003914:	3001      	adds	r0, #1
 8003916:	d101      	bne.n	800391c <sbrk_aligned+0x38>
 8003918:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800391c:	4620      	mov	r0, r4
 800391e:	bd70      	pop	{r4, r5, r6, pc}
 8003920:	200002b4 	.word	0x200002b4

08003924 <_malloc_r>:
 8003924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003928:	1ccd      	adds	r5, r1, #3
 800392a:	f025 0503 	bic.w	r5, r5, #3
 800392e:	3508      	adds	r5, #8
 8003930:	2d0c      	cmp	r5, #12
 8003932:	bf38      	it	cc
 8003934:	250c      	movcc	r5, #12
 8003936:	2d00      	cmp	r5, #0
 8003938:	4607      	mov	r7, r0
 800393a:	db01      	blt.n	8003940 <_malloc_r+0x1c>
 800393c:	42a9      	cmp	r1, r5
 800393e:	d905      	bls.n	800394c <_malloc_r+0x28>
 8003940:	230c      	movs	r3, #12
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	2600      	movs	r6, #0
 8003946:	4630      	mov	r0, r6
 8003948:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800394c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003a20 <_malloc_r+0xfc>
 8003950:	f000 f868 	bl	8003a24 <__malloc_lock>
 8003954:	f8d8 3000 	ldr.w	r3, [r8]
 8003958:	461c      	mov	r4, r3
 800395a:	bb5c      	cbnz	r4, 80039b4 <_malloc_r+0x90>
 800395c:	4629      	mov	r1, r5
 800395e:	4638      	mov	r0, r7
 8003960:	f7ff ffc0 	bl	80038e4 <sbrk_aligned>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	4604      	mov	r4, r0
 8003968:	d155      	bne.n	8003a16 <_malloc_r+0xf2>
 800396a:	f8d8 4000 	ldr.w	r4, [r8]
 800396e:	4626      	mov	r6, r4
 8003970:	2e00      	cmp	r6, #0
 8003972:	d145      	bne.n	8003a00 <_malloc_r+0xdc>
 8003974:	2c00      	cmp	r4, #0
 8003976:	d048      	beq.n	8003a0a <_malloc_r+0xe6>
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	4631      	mov	r1, r6
 800397c:	4638      	mov	r0, r7
 800397e:	eb04 0903 	add.w	r9, r4, r3
 8003982:	f000 fe27 	bl	80045d4 <_sbrk_r>
 8003986:	4581      	cmp	r9, r0
 8003988:	d13f      	bne.n	8003a0a <_malloc_r+0xe6>
 800398a:	6821      	ldr	r1, [r4, #0]
 800398c:	1a6d      	subs	r5, r5, r1
 800398e:	4629      	mov	r1, r5
 8003990:	4638      	mov	r0, r7
 8003992:	f7ff ffa7 	bl	80038e4 <sbrk_aligned>
 8003996:	3001      	adds	r0, #1
 8003998:	d037      	beq.n	8003a0a <_malloc_r+0xe6>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	442b      	add	r3, r5
 800399e:	6023      	str	r3, [r4, #0]
 80039a0:	f8d8 3000 	ldr.w	r3, [r8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d038      	beq.n	8003a1a <_malloc_r+0xf6>
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	42a2      	cmp	r2, r4
 80039ac:	d12b      	bne.n	8003a06 <_malloc_r+0xe2>
 80039ae:	2200      	movs	r2, #0
 80039b0:	605a      	str	r2, [r3, #4]
 80039b2:	e00f      	b.n	80039d4 <_malloc_r+0xb0>
 80039b4:	6822      	ldr	r2, [r4, #0]
 80039b6:	1b52      	subs	r2, r2, r5
 80039b8:	d41f      	bmi.n	80039fa <_malloc_r+0xd6>
 80039ba:	2a0b      	cmp	r2, #11
 80039bc:	d917      	bls.n	80039ee <_malloc_r+0xca>
 80039be:	1961      	adds	r1, r4, r5
 80039c0:	42a3      	cmp	r3, r4
 80039c2:	6025      	str	r5, [r4, #0]
 80039c4:	bf18      	it	ne
 80039c6:	6059      	strne	r1, [r3, #4]
 80039c8:	6863      	ldr	r3, [r4, #4]
 80039ca:	bf08      	it	eq
 80039cc:	f8c8 1000 	streq.w	r1, [r8]
 80039d0:	5162      	str	r2, [r4, r5]
 80039d2:	604b      	str	r3, [r1, #4]
 80039d4:	4638      	mov	r0, r7
 80039d6:	f104 060b 	add.w	r6, r4, #11
 80039da:	f000 f829 	bl	8003a30 <__malloc_unlock>
 80039de:	f026 0607 	bic.w	r6, r6, #7
 80039e2:	1d23      	adds	r3, r4, #4
 80039e4:	1af2      	subs	r2, r6, r3
 80039e6:	d0ae      	beq.n	8003946 <_malloc_r+0x22>
 80039e8:	1b9b      	subs	r3, r3, r6
 80039ea:	50a3      	str	r3, [r4, r2]
 80039ec:	e7ab      	b.n	8003946 <_malloc_r+0x22>
 80039ee:	42a3      	cmp	r3, r4
 80039f0:	6862      	ldr	r2, [r4, #4]
 80039f2:	d1dd      	bne.n	80039b0 <_malloc_r+0x8c>
 80039f4:	f8c8 2000 	str.w	r2, [r8]
 80039f8:	e7ec      	b.n	80039d4 <_malloc_r+0xb0>
 80039fa:	4623      	mov	r3, r4
 80039fc:	6864      	ldr	r4, [r4, #4]
 80039fe:	e7ac      	b.n	800395a <_malloc_r+0x36>
 8003a00:	4634      	mov	r4, r6
 8003a02:	6876      	ldr	r6, [r6, #4]
 8003a04:	e7b4      	b.n	8003970 <_malloc_r+0x4c>
 8003a06:	4613      	mov	r3, r2
 8003a08:	e7cc      	b.n	80039a4 <_malloc_r+0x80>
 8003a0a:	230c      	movs	r3, #12
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4638      	mov	r0, r7
 8003a10:	f000 f80e 	bl	8003a30 <__malloc_unlock>
 8003a14:	e797      	b.n	8003946 <_malloc_r+0x22>
 8003a16:	6025      	str	r5, [r4, #0]
 8003a18:	e7dc      	b.n	80039d4 <_malloc_r+0xb0>
 8003a1a:	605b      	str	r3, [r3, #4]
 8003a1c:	deff      	udf	#255	; 0xff
 8003a1e:	bf00      	nop
 8003a20:	200002b0 	.word	0x200002b0

08003a24 <__malloc_lock>:
 8003a24:	4801      	ldr	r0, [pc, #4]	; (8003a2c <__malloc_lock+0x8>)
 8003a26:	f000 be22 	b.w	800466e <__retarget_lock_acquire_recursive>
 8003a2a:	bf00      	nop
 8003a2c:	200003f8 	.word	0x200003f8

08003a30 <__malloc_unlock>:
 8003a30:	4801      	ldr	r0, [pc, #4]	; (8003a38 <__malloc_unlock+0x8>)
 8003a32:	f000 be1d 	b.w	8004670 <__retarget_lock_release_recursive>
 8003a36:	bf00      	nop
 8003a38:	200003f8 	.word	0x200003f8

08003a3c <__cvt>:
 8003a3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a40:	ec55 4b10 	vmov	r4, r5, d0
 8003a44:	2d00      	cmp	r5, #0
 8003a46:	460e      	mov	r6, r1
 8003a48:	4619      	mov	r1, r3
 8003a4a:	462b      	mov	r3, r5
 8003a4c:	bfbb      	ittet	lt
 8003a4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003a52:	461d      	movlt	r5, r3
 8003a54:	2300      	movge	r3, #0
 8003a56:	232d      	movlt	r3, #45	; 0x2d
 8003a58:	700b      	strb	r3, [r1, #0]
 8003a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003a60:	4691      	mov	r9, r2
 8003a62:	f023 0820 	bic.w	r8, r3, #32
 8003a66:	bfbc      	itt	lt
 8003a68:	4622      	movlt	r2, r4
 8003a6a:	4614      	movlt	r4, r2
 8003a6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a70:	d005      	beq.n	8003a7e <__cvt+0x42>
 8003a72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a76:	d100      	bne.n	8003a7a <__cvt+0x3e>
 8003a78:	3601      	adds	r6, #1
 8003a7a:	2102      	movs	r1, #2
 8003a7c:	e000      	b.n	8003a80 <__cvt+0x44>
 8003a7e:	2103      	movs	r1, #3
 8003a80:	ab03      	add	r3, sp, #12
 8003a82:	9301      	str	r3, [sp, #4]
 8003a84:	ab02      	add	r3, sp, #8
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	ec45 4b10 	vmov	d0, r4, r5
 8003a8c:	4653      	mov	r3, sl
 8003a8e:	4632      	mov	r2, r6
 8003a90:	f000 fe7a 	bl	8004788 <_dtoa_r>
 8003a94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003a98:	4607      	mov	r7, r0
 8003a9a:	d102      	bne.n	8003aa2 <__cvt+0x66>
 8003a9c:	f019 0f01 	tst.w	r9, #1
 8003aa0:	d022      	beq.n	8003ae8 <__cvt+0xac>
 8003aa2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003aa6:	eb07 0906 	add.w	r9, r7, r6
 8003aaa:	d110      	bne.n	8003ace <__cvt+0x92>
 8003aac:	783b      	ldrb	r3, [r7, #0]
 8003aae:	2b30      	cmp	r3, #48	; 0x30
 8003ab0:	d10a      	bne.n	8003ac8 <__cvt+0x8c>
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	4620      	mov	r0, r4
 8003ab8:	4629      	mov	r1, r5
 8003aba:	f7fd f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8003abe:	b918      	cbnz	r0, 8003ac8 <__cvt+0x8c>
 8003ac0:	f1c6 0601 	rsb	r6, r6, #1
 8003ac4:	f8ca 6000 	str.w	r6, [sl]
 8003ac8:	f8da 3000 	ldr.w	r3, [sl]
 8003acc:	4499      	add	r9, r3
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	f7fc fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8003ada:	b108      	cbz	r0, 8003ae0 <__cvt+0xa4>
 8003adc:	f8cd 900c 	str.w	r9, [sp, #12]
 8003ae0:	2230      	movs	r2, #48	; 0x30
 8003ae2:	9b03      	ldr	r3, [sp, #12]
 8003ae4:	454b      	cmp	r3, r9
 8003ae6:	d307      	bcc.n	8003af8 <__cvt+0xbc>
 8003ae8:	9b03      	ldr	r3, [sp, #12]
 8003aea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003aec:	1bdb      	subs	r3, r3, r7
 8003aee:	4638      	mov	r0, r7
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	b004      	add	sp, #16
 8003af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af8:	1c59      	adds	r1, r3, #1
 8003afa:	9103      	str	r1, [sp, #12]
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e7f0      	b.n	8003ae2 <__cvt+0xa6>

08003b00 <__exponent>:
 8003b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b02:	4603      	mov	r3, r0
 8003b04:	2900      	cmp	r1, #0
 8003b06:	bfb8      	it	lt
 8003b08:	4249      	neglt	r1, r1
 8003b0a:	f803 2b02 	strb.w	r2, [r3], #2
 8003b0e:	bfb4      	ite	lt
 8003b10:	222d      	movlt	r2, #45	; 0x2d
 8003b12:	222b      	movge	r2, #43	; 0x2b
 8003b14:	2909      	cmp	r1, #9
 8003b16:	7042      	strb	r2, [r0, #1]
 8003b18:	dd2a      	ble.n	8003b70 <__exponent+0x70>
 8003b1a:	f10d 0207 	add.w	r2, sp, #7
 8003b1e:	4617      	mov	r7, r2
 8003b20:	260a      	movs	r6, #10
 8003b22:	4694      	mov	ip, r2
 8003b24:	fb91 f5f6 	sdiv	r5, r1, r6
 8003b28:	fb06 1415 	mls	r4, r6, r5, r1
 8003b2c:	3430      	adds	r4, #48	; 0x30
 8003b2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003b32:	460c      	mov	r4, r1
 8003b34:	2c63      	cmp	r4, #99	; 0x63
 8003b36:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	dcf1      	bgt.n	8003b22 <__exponent+0x22>
 8003b3e:	3130      	adds	r1, #48	; 0x30
 8003b40:	f1ac 0402 	sub.w	r4, ip, #2
 8003b44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b48:	1c41      	adds	r1, r0, #1
 8003b4a:	4622      	mov	r2, r4
 8003b4c:	42ba      	cmp	r2, r7
 8003b4e:	d30a      	bcc.n	8003b66 <__exponent+0x66>
 8003b50:	f10d 0209 	add.w	r2, sp, #9
 8003b54:	eba2 020c 	sub.w	r2, r2, ip
 8003b58:	42bc      	cmp	r4, r7
 8003b5a:	bf88      	it	hi
 8003b5c:	2200      	movhi	r2, #0
 8003b5e:	4413      	add	r3, r2
 8003b60:	1a18      	subs	r0, r3, r0
 8003b62:	b003      	add	sp, #12
 8003b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b66:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003b6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003b6e:	e7ed      	b.n	8003b4c <__exponent+0x4c>
 8003b70:	2330      	movs	r3, #48	; 0x30
 8003b72:	3130      	adds	r1, #48	; 0x30
 8003b74:	7083      	strb	r3, [r0, #2]
 8003b76:	70c1      	strb	r1, [r0, #3]
 8003b78:	1d03      	adds	r3, r0, #4
 8003b7a:	e7f1      	b.n	8003b60 <__exponent+0x60>

08003b7c <_printf_float>:
 8003b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b80:	ed2d 8b02 	vpush	{d8}
 8003b84:	b08d      	sub	sp, #52	; 0x34
 8003b86:	460c      	mov	r4, r1
 8003b88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003b8c:	4616      	mov	r6, r2
 8003b8e:	461f      	mov	r7, r3
 8003b90:	4605      	mov	r5, r0
 8003b92:	f000 fce7 	bl	8004564 <_localeconv_r>
 8003b96:	f8d0 a000 	ldr.w	sl, [r0]
 8003b9a:	4650      	mov	r0, sl
 8003b9c:	f7fc fb68 	bl	8000270 <strlen>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	930a      	str	r3, [sp, #40]	; 0x28
 8003ba4:	6823      	ldr	r3, [r4, #0]
 8003ba6:	9305      	str	r3, [sp, #20]
 8003ba8:	f8d8 3000 	ldr.w	r3, [r8]
 8003bac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003bb0:	3307      	adds	r3, #7
 8003bb2:	f023 0307 	bic.w	r3, r3, #7
 8003bb6:	f103 0208 	add.w	r2, r3, #8
 8003bba:	f8c8 2000 	str.w	r2, [r8]
 8003bbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003bc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003bc6:	9307      	str	r3, [sp, #28]
 8003bc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8003bcc:	ee08 0a10 	vmov	s16, r0
 8003bd0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bd8:	4b9e      	ldr	r3, [pc, #632]	; (8003e54 <_printf_float+0x2d8>)
 8003bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bde:	f7fc ffa5 	bl	8000b2c <__aeabi_dcmpun>
 8003be2:	bb88      	cbnz	r0, 8003c48 <_printf_float+0xcc>
 8003be4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003be8:	4b9a      	ldr	r3, [pc, #616]	; (8003e54 <_printf_float+0x2d8>)
 8003bea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bee:	f7fc ff7f 	bl	8000af0 <__aeabi_dcmple>
 8003bf2:	bb48      	cbnz	r0, 8003c48 <_printf_float+0xcc>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	4640      	mov	r0, r8
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	f7fc ff6e 	bl	8000adc <__aeabi_dcmplt>
 8003c00:	b110      	cbz	r0, 8003c08 <_printf_float+0x8c>
 8003c02:	232d      	movs	r3, #45	; 0x2d
 8003c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c08:	4a93      	ldr	r2, [pc, #588]	; (8003e58 <_printf_float+0x2dc>)
 8003c0a:	4b94      	ldr	r3, [pc, #592]	; (8003e5c <_printf_float+0x2e0>)
 8003c0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003c10:	bf94      	ite	ls
 8003c12:	4690      	movls	r8, r2
 8003c14:	4698      	movhi	r8, r3
 8003c16:	2303      	movs	r3, #3
 8003c18:	6123      	str	r3, [r4, #16]
 8003c1a:	9b05      	ldr	r3, [sp, #20]
 8003c1c:	f023 0304 	bic.w	r3, r3, #4
 8003c20:	6023      	str	r3, [r4, #0]
 8003c22:	f04f 0900 	mov.w	r9, #0
 8003c26:	9700      	str	r7, [sp, #0]
 8003c28:	4633      	mov	r3, r6
 8003c2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003c2c:	4621      	mov	r1, r4
 8003c2e:	4628      	mov	r0, r5
 8003c30:	f000 f9da 	bl	8003fe8 <_printf_common>
 8003c34:	3001      	adds	r0, #1
 8003c36:	f040 8090 	bne.w	8003d5a <_printf_float+0x1de>
 8003c3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c3e:	b00d      	add	sp, #52	; 0x34
 8003c40:	ecbd 8b02 	vpop	{d8}
 8003c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c48:	4642      	mov	r2, r8
 8003c4a:	464b      	mov	r3, r9
 8003c4c:	4640      	mov	r0, r8
 8003c4e:	4649      	mov	r1, r9
 8003c50:	f7fc ff6c 	bl	8000b2c <__aeabi_dcmpun>
 8003c54:	b140      	cbz	r0, 8003c68 <_printf_float+0xec>
 8003c56:	464b      	mov	r3, r9
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bfbc      	itt	lt
 8003c5c:	232d      	movlt	r3, #45	; 0x2d
 8003c5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c62:	4a7f      	ldr	r2, [pc, #508]	; (8003e60 <_printf_float+0x2e4>)
 8003c64:	4b7f      	ldr	r3, [pc, #508]	; (8003e64 <_printf_float+0x2e8>)
 8003c66:	e7d1      	b.n	8003c0c <_printf_float+0x90>
 8003c68:	6863      	ldr	r3, [r4, #4]
 8003c6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003c6e:	9206      	str	r2, [sp, #24]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	d13f      	bne.n	8003cf4 <_printf_float+0x178>
 8003c74:	2306      	movs	r3, #6
 8003c76:	6063      	str	r3, [r4, #4]
 8003c78:	9b05      	ldr	r3, [sp, #20]
 8003c7a:	6861      	ldr	r1, [r4, #4]
 8003c7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003c80:	2300      	movs	r3, #0
 8003c82:	9303      	str	r3, [sp, #12]
 8003c84:	ab0a      	add	r3, sp, #40	; 0x28
 8003c86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003c8a:	ab09      	add	r3, sp, #36	; 0x24
 8003c8c:	ec49 8b10 	vmov	d0, r8, r9
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	6022      	str	r2, [r4, #0]
 8003c94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f7ff fecf 	bl	8003a3c <__cvt>
 8003c9e:	9b06      	ldr	r3, [sp, #24]
 8003ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ca2:	2b47      	cmp	r3, #71	; 0x47
 8003ca4:	4680      	mov	r8, r0
 8003ca6:	d108      	bne.n	8003cba <_printf_float+0x13e>
 8003ca8:	1cc8      	adds	r0, r1, #3
 8003caa:	db02      	blt.n	8003cb2 <_printf_float+0x136>
 8003cac:	6863      	ldr	r3, [r4, #4]
 8003cae:	4299      	cmp	r1, r3
 8003cb0:	dd41      	ble.n	8003d36 <_printf_float+0x1ba>
 8003cb2:	f1ab 0302 	sub.w	r3, fp, #2
 8003cb6:	fa5f fb83 	uxtb.w	fp, r3
 8003cba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003cbe:	d820      	bhi.n	8003d02 <_printf_float+0x186>
 8003cc0:	3901      	subs	r1, #1
 8003cc2:	465a      	mov	r2, fp
 8003cc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cc8:	9109      	str	r1, [sp, #36]	; 0x24
 8003cca:	f7ff ff19 	bl	8003b00 <__exponent>
 8003cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cd0:	1813      	adds	r3, r2, r0
 8003cd2:	2a01      	cmp	r2, #1
 8003cd4:	4681      	mov	r9, r0
 8003cd6:	6123      	str	r3, [r4, #16]
 8003cd8:	dc02      	bgt.n	8003ce0 <_printf_float+0x164>
 8003cda:	6822      	ldr	r2, [r4, #0]
 8003cdc:	07d2      	lsls	r2, r2, #31
 8003cde:	d501      	bpl.n	8003ce4 <_printf_float+0x168>
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	6123      	str	r3, [r4, #16]
 8003ce4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d09c      	beq.n	8003c26 <_printf_float+0xaa>
 8003cec:	232d      	movs	r3, #45	; 0x2d
 8003cee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cf2:	e798      	b.n	8003c26 <_printf_float+0xaa>
 8003cf4:	9a06      	ldr	r2, [sp, #24]
 8003cf6:	2a47      	cmp	r2, #71	; 0x47
 8003cf8:	d1be      	bne.n	8003c78 <_printf_float+0xfc>
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1bc      	bne.n	8003c78 <_printf_float+0xfc>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e7b9      	b.n	8003c76 <_printf_float+0xfa>
 8003d02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003d06:	d118      	bne.n	8003d3a <_printf_float+0x1be>
 8003d08:	2900      	cmp	r1, #0
 8003d0a:	6863      	ldr	r3, [r4, #4]
 8003d0c:	dd0b      	ble.n	8003d26 <_printf_float+0x1aa>
 8003d0e:	6121      	str	r1, [r4, #16]
 8003d10:	b913      	cbnz	r3, 8003d18 <_printf_float+0x19c>
 8003d12:	6822      	ldr	r2, [r4, #0]
 8003d14:	07d0      	lsls	r0, r2, #31
 8003d16:	d502      	bpl.n	8003d1e <_printf_float+0x1a2>
 8003d18:	3301      	adds	r3, #1
 8003d1a:	440b      	add	r3, r1
 8003d1c:	6123      	str	r3, [r4, #16]
 8003d1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d20:	f04f 0900 	mov.w	r9, #0
 8003d24:	e7de      	b.n	8003ce4 <_printf_float+0x168>
 8003d26:	b913      	cbnz	r3, 8003d2e <_printf_float+0x1b2>
 8003d28:	6822      	ldr	r2, [r4, #0]
 8003d2a:	07d2      	lsls	r2, r2, #31
 8003d2c:	d501      	bpl.n	8003d32 <_printf_float+0x1b6>
 8003d2e:	3302      	adds	r3, #2
 8003d30:	e7f4      	b.n	8003d1c <_printf_float+0x1a0>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e7f2      	b.n	8003d1c <_printf_float+0x1a0>
 8003d36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	db05      	blt.n	8003d4c <_printf_float+0x1d0>
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	6121      	str	r1, [r4, #16]
 8003d44:	07d8      	lsls	r0, r3, #31
 8003d46:	d5ea      	bpl.n	8003d1e <_printf_float+0x1a2>
 8003d48:	1c4b      	adds	r3, r1, #1
 8003d4a:	e7e7      	b.n	8003d1c <_printf_float+0x1a0>
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	bfd4      	ite	le
 8003d50:	f1c1 0202 	rsble	r2, r1, #2
 8003d54:	2201      	movgt	r2, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	e7e0      	b.n	8003d1c <_printf_float+0x1a0>
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	055a      	lsls	r2, r3, #21
 8003d5e:	d407      	bmi.n	8003d70 <_printf_float+0x1f4>
 8003d60:	6923      	ldr	r3, [r4, #16]
 8003d62:	4642      	mov	r2, r8
 8003d64:	4631      	mov	r1, r6
 8003d66:	4628      	mov	r0, r5
 8003d68:	47b8      	blx	r7
 8003d6a:	3001      	adds	r0, #1
 8003d6c:	d12c      	bne.n	8003dc8 <_printf_float+0x24c>
 8003d6e:	e764      	b.n	8003c3a <_printf_float+0xbe>
 8003d70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d74:	f240 80e0 	bls.w	8003f38 <_printf_float+0x3bc>
 8003d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f7fc fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d034      	beq.n	8003df2 <_printf_float+0x276>
 8003d88:	4a37      	ldr	r2, [pc, #220]	; (8003e68 <_printf_float+0x2ec>)
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4631      	mov	r1, r6
 8003d8e:	4628      	mov	r0, r5
 8003d90:	47b8      	blx	r7
 8003d92:	3001      	adds	r0, #1
 8003d94:	f43f af51 	beq.w	8003c3a <_printf_float+0xbe>
 8003d98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	db02      	blt.n	8003da6 <_printf_float+0x22a>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	07d8      	lsls	r0, r3, #31
 8003da4:	d510      	bpl.n	8003dc8 <_printf_float+0x24c>
 8003da6:	ee18 3a10 	vmov	r3, s16
 8003daa:	4652      	mov	r2, sl
 8003dac:	4631      	mov	r1, r6
 8003dae:	4628      	mov	r0, r5
 8003db0:	47b8      	blx	r7
 8003db2:	3001      	adds	r0, #1
 8003db4:	f43f af41 	beq.w	8003c3a <_printf_float+0xbe>
 8003db8:	f04f 0800 	mov.w	r8, #0
 8003dbc:	f104 091a 	add.w	r9, r4, #26
 8003dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	4543      	cmp	r3, r8
 8003dc6:	dc09      	bgt.n	8003ddc <_printf_float+0x260>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	079b      	lsls	r3, r3, #30
 8003dcc:	f100 8107 	bmi.w	8003fde <_printf_float+0x462>
 8003dd0:	68e0      	ldr	r0, [r4, #12]
 8003dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dd4:	4298      	cmp	r0, r3
 8003dd6:	bfb8      	it	lt
 8003dd8:	4618      	movlt	r0, r3
 8003dda:	e730      	b.n	8003c3e <_printf_float+0xc2>
 8003ddc:	2301      	movs	r3, #1
 8003dde:	464a      	mov	r2, r9
 8003de0:	4631      	mov	r1, r6
 8003de2:	4628      	mov	r0, r5
 8003de4:	47b8      	blx	r7
 8003de6:	3001      	adds	r0, #1
 8003de8:	f43f af27 	beq.w	8003c3a <_printf_float+0xbe>
 8003dec:	f108 0801 	add.w	r8, r8, #1
 8003df0:	e7e6      	b.n	8003dc0 <_printf_float+0x244>
 8003df2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	dc39      	bgt.n	8003e6c <_printf_float+0x2f0>
 8003df8:	4a1b      	ldr	r2, [pc, #108]	; (8003e68 <_printf_float+0x2ec>)
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	4631      	mov	r1, r6
 8003dfe:	4628      	mov	r0, r5
 8003e00:	47b8      	blx	r7
 8003e02:	3001      	adds	r0, #1
 8003e04:	f43f af19 	beq.w	8003c3a <_printf_float+0xbe>
 8003e08:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	d102      	bne.n	8003e16 <_printf_float+0x29a>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	07d9      	lsls	r1, r3, #31
 8003e14:	d5d8      	bpl.n	8003dc8 <_printf_float+0x24c>
 8003e16:	ee18 3a10 	vmov	r3, s16
 8003e1a:	4652      	mov	r2, sl
 8003e1c:	4631      	mov	r1, r6
 8003e1e:	4628      	mov	r0, r5
 8003e20:	47b8      	blx	r7
 8003e22:	3001      	adds	r0, #1
 8003e24:	f43f af09 	beq.w	8003c3a <_printf_float+0xbe>
 8003e28:	f04f 0900 	mov.w	r9, #0
 8003e2c:	f104 0a1a 	add.w	sl, r4, #26
 8003e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e32:	425b      	negs	r3, r3
 8003e34:	454b      	cmp	r3, r9
 8003e36:	dc01      	bgt.n	8003e3c <_printf_float+0x2c0>
 8003e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e3a:	e792      	b.n	8003d62 <_printf_float+0x1e6>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4652      	mov	r2, sl
 8003e40:	4631      	mov	r1, r6
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b8      	blx	r7
 8003e46:	3001      	adds	r0, #1
 8003e48:	f43f aef7 	beq.w	8003c3a <_printf_float+0xbe>
 8003e4c:	f109 0901 	add.w	r9, r9, #1
 8003e50:	e7ee      	b.n	8003e30 <_printf_float+0x2b4>
 8003e52:	bf00      	nop
 8003e54:	7fefffff 	.word	0x7fefffff
 8003e58:	080074b3 	.word	0x080074b3
 8003e5c:	080074b7 	.word	0x080074b7
 8003e60:	080074bb 	.word	0x080074bb
 8003e64:	080074bf 	.word	0x080074bf
 8003e68:	080074c3 	.word	0x080074c3
 8003e6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e70:	429a      	cmp	r2, r3
 8003e72:	bfa8      	it	ge
 8003e74:	461a      	movge	r2, r3
 8003e76:	2a00      	cmp	r2, #0
 8003e78:	4691      	mov	r9, r2
 8003e7a:	dc37      	bgt.n	8003eec <_printf_float+0x370>
 8003e7c:	f04f 0b00 	mov.w	fp, #0
 8003e80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e84:	f104 021a 	add.w	r2, r4, #26
 8003e88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e8a:	9305      	str	r3, [sp, #20]
 8003e8c:	eba3 0309 	sub.w	r3, r3, r9
 8003e90:	455b      	cmp	r3, fp
 8003e92:	dc33      	bgt.n	8003efc <_printf_float+0x380>
 8003e94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	db3b      	blt.n	8003f14 <_printf_float+0x398>
 8003e9c:	6823      	ldr	r3, [r4, #0]
 8003e9e:	07da      	lsls	r2, r3, #31
 8003ea0:	d438      	bmi.n	8003f14 <_printf_float+0x398>
 8003ea2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003ea6:	eba2 0903 	sub.w	r9, r2, r3
 8003eaa:	9b05      	ldr	r3, [sp, #20]
 8003eac:	1ad2      	subs	r2, r2, r3
 8003eae:	4591      	cmp	r9, r2
 8003eb0:	bfa8      	it	ge
 8003eb2:	4691      	movge	r9, r2
 8003eb4:	f1b9 0f00 	cmp.w	r9, #0
 8003eb8:	dc35      	bgt.n	8003f26 <_printf_float+0x3aa>
 8003eba:	f04f 0800 	mov.w	r8, #0
 8003ebe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ec2:	f104 0a1a 	add.w	sl, r4, #26
 8003ec6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	eba3 0309 	sub.w	r3, r3, r9
 8003ed0:	4543      	cmp	r3, r8
 8003ed2:	f77f af79 	ble.w	8003dc8 <_printf_float+0x24c>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	4652      	mov	r2, sl
 8003eda:	4631      	mov	r1, r6
 8003edc:	4628      	mov	r0, r5
 8003ede:	47b8      	blx	r7
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	f43f aeaa 	beq.w	8003c3a <_printf_float+0xbe>
 8003ee6:	f108 0801 	add.w	r8, r8, #1
 8003eea:	e7ec      	b.n	8003ec6 <_printf_float+0x34a>
 8003eec:	4613      	mov	r3, r2
 8003eee:	4631      	mov	r1, r6
 8003ef0:	4642      	mov	r2, r8
 8003ef2:	4628      	mov	r0, r5
 8003ef4:	47b8      	blx	r7
 8003ef6:	3001      	adds	r0, #1
 8003ef8:	d1c0      	bne.n	8003e7c <_printf_float+0x300>
 8003efa:	e69e      	b.n	8003c3a <_printf_float+0xbe>
 8003efc:	2301      	movs	r3, #1
 8003efe:	4631      	mov	r1, r6
 8003f00:	4628      	mov	r0, r5
 8003f02:	9205      	str	r2, [sp, #20]
 8003f04:	47b8      	blx	r7
 8003f06:	3001      	adds	r0, #1
 8003f08:	f43f ae97 	beq.w	8003c3a <_printf_float+0xbe>
 8003f0c:	9a05      	ldr	r2, [sp, #20]
 8003f0e:	f10b 0b01 	add.w	fp, fp, #1
 8003f12:	e7b9      	b.n	8003e88 <_printf_float+0x30c>
 8003f14:	ee18 3a10 	vmov	r3, s16
 8003f18:	4652      	mov	r2, sl
 8003f1a:	4631      	mov	r1, r6
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	47b8      	blx	r7
 8003f20:	3001      	adds	r0, #1
 8003f22:	d1be      	bne.n	8003ea2 <_printf_float+0x326>
 8003f24:	e689      	b.n	8003c3a <_printf_float+0xbe>
 8003f26:	9a05      	ldr	r2, [sp, #20]
 8003f28:	464b      	mov	r3, r9
 8003f2a:	4442      	add	r2, r8
 8003f2c:	4631      	mov	r1, r6
 8003f2e:	4628      	mov	r0, r5
 8003f30:	47b8      	blx	r7
 8003f32:	3001      	adds	r0, #1
 8003f34:	d1c1      	bne.n	8003eba <_printf_float+0x33e>
 8003f36:	e680      	b.n	8003c3a <_printf_float+0xbe>
 8003f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f3a:	2a01      	cmp	r2, #1
 8003f3c:	dc01      	bgt.n	8003f42 <_printf_float+0x3c6>
 8003f3e:	07db      	lsls	r3, r3, #31
 8003f40:	d53a      	bpl.n	8003fb8 <_printf_float+0x43c>
 8003f42:	2301      	movs	r3, #1
 8003f44:	4642      	mov	r2, r8
 8003f46:	4631      	mov	r1, r6
 8003f48:	4628      	mov	r0, r5
 8003f4a:	47b8      	blx	r7
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	f43f ae74 	beq.w	8003c3a <_printf_float+0xbe>
 8003f52:	ee18 3a10 	vmov	r3, s16
 8003f56:	4652      	mov	r2, sl
 8003f58:	4631      	mov	r1, r6
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	47b8      	blx	r7
 8003f5e:	3001      	adds	r0, #1
 8003f60:	f43f ae6b 	beq.w	8003c3a <_printf_float+0xbe>
 8003f64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003f70:	f7fc fdaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f74:	b9d8      	cbnz	r0, 8003fae <_printf_float+0x432>
 8003f76:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003f7a:	f108 0201 	add.w	r2, r8, #1
 8003f7e:	4631      	mov	r1, r6
 8003f80:	4628      	mov	r0, r5
 8003f82:	47b8      	blx	r7
 8003f84:	3001      	adds	r0, #1
 8003f86:	d10e      	bne.n	8003fa6 <_printf_float+0x42a>
 8003f88:	e657      	b.n	8003c3a <_printf_float+0xbe>
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	4652      	mov	r2, sl
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b8      	blx	r7
 8003f94:	3001      	adds	r0, #1
 8003f96:	f43f ae50 	beq.w	8003c3a <_printf_float+0xbe>
 8003f9a:	f108 0801 	add.w	r8, r8, #1
 8003f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	4543      	cmp	r3, r8
 8003fa4:	dcf1      	bgt.n	8003f8a <_printf_float+0x40e>
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003fac:	e6da      	b.n	8003d64 <_printf_float+0x1e8>
 8003fae:	f04f 0800 	mov.w	r8, #0
 8003fb2:	f104 0a1a 	add.w	sl, r4, #26
 8003fb6:	e7f2      	b.n	8003f9e <_printf_float+0x422>
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4642      	mov	r2, r8
 8003fbc:	e7df      	b.n	8003f7e <_printf_float+0x402>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	464a      	mov	r2, r9
 8003fc2:	4631      	mov	r1, r6
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	47b8      	blx	r7
 8003fc8:	3001      	adds	r0, #1
 8003fca:	f43f ae36 	beq.w	8003c3a <_printf_float+0xbe>
 8003fce:	f108 0801 	add.w	r8, r8, #1
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fd6:	1a5b      	subs	r3, r3, r1
 8003fd8:	4543      	cmp	r3, r8
 8003fda:	dcf0      	bgt.n	8003fbe <_printf_float+0x442>
 8003fdc:	e6f8      	b.n	8003dd0 <_printf_float+0x254>
 8003fde:	f04f 0800 	mov.w	r8, #0
 8003fe2:	f104 0919 	add.w	r9, r4, #25
 8003fe6:	e7f4      	b.n	8003fd2 <_printf_float+0x456>

08003fe8 <_printf_common>:
 8003fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fec:	4616      	mov	r6, r2
 8003fee:	4699      	mov	r9, r3
 8003ff0:	688a      	ldr	r2, [r1, #8]
 8003ff2:	690b      	ldr	r3, [r1, #16]
 8003ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	bfb8      	it	lt
 8003ffc:	4613      	movlt	r3, r2
 8003ffe:	6033      	str	r3, [r6, #0]
 8004000:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004004:	4607      	mov	r7, r0
 8004006:	460c      	mov	r4, r1
 8004008:	b10a      	cbz	r2, 800400e <_printf_common+0x26>
 800400a:	3301      	adds	r3, #1
 800400c:	6033      	str	r3, [r6, #0]
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	0699      	lsls	r1, r3, #26
 8004012:	bf42      	ittt	mi
 8004014:	6833      	ldrmi	r3, [r6, #0]
 8004016:	3302      	addmi	r3, #2
 8004018:	6033      	strmi	r3, [r6, #0]
 800401a:	6825      	ldr	r5, [r4, #0]
 800401c:	f015 0506 	ands.w	r5, r5, #6
 8004020:	d106      	bne.n	8004030 <_printf_common+0x48>
 8004022:	f104 0a19 	add.w	sl, r4, #25
 8004026:	68e3      	ldr	r3, [r4, #12]
 8004028:	6832      	ldr	r2, [r6, #0]
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	42ab      	cmp	r3, r5
 800402e:	dc26      	bgt.n	800407e <_printf_common+0x96>
 8004030:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004034:	1e13      	subs	r3, r2, #0
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	bf18      	it	ne
 800403a:	2301      	movne	r3, #1
 800403c:	0692      	lsls	r2, r2, #26
 800403e:	d42b      	bmi.n	8004098 <_printf_common+0xb0>
 8004040:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004044:	4649      	mov	r1, r9
 8004046:	4638      	mov	r0, r7
 8004048:	47c0      	blx	r8
 800404a:	3001      	adds	r0, #1
 800404c:	d01e      	beq.n	800408c <_printf_common+0xa4>
 800404e:	6823      	ldr	r3, [r4, #0]
 8004050:	6922      	ldr	r2, [r4, #16]
 8004052:	f003 0306 	and.w	r3, r3, #6
 8004056:	2b04      	cmp	r3, #4
 8004058:	bf02      	ittt	eq
 800405a:	68e5      	ldreq	r5, [r4, #12]
 800405c:	6833      	ldreq	r3, [r6, #0]
 800405e:	1aed      	subeq	r5, r5, r3
 8004060:	68a3      	ldr	r3, [r4, #8]
 8004062:	bf0c      	ite	eq
 8004064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004068:	2500      	movne	r5, #0
 800406a:	4293      	cmp	r3, r2
 800406c:	bfc4      	itt	gt
 800406e:	1a9b      	subgt	r3, r3, r2
 8004070:	18ed      	addgt	r5, r5, r3
 8004072:	2600      	movs	r6, #0
 8004074:	341a      	adds	r4, #26
 8004076:	42b5      	cmp	r5, r6
 8004078:	d11a      	bne.n	80040b0 <_printf_common+0xc8>
 800407a:	2000      	movs	r0, #0
 800407c:	e008      	b.n	8004090 <_printf_common+0xa8>
 800407e:	2301      	movs	r3, #1
 8004080:	4652      	mov	r2, sl
 8004082:	4649      	mov	r1, r9
 8004084:	4638      	mov	r0, r7
 8004086:	47c0      	blx	r8
 8004088:	3001      	adds	r0, #1
 800408a:	d103      	bne.n	8004094 <_printf_common+0xac>
 800408c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004094:	3501      	adds	r5, #1
 8004096:	e7c6      	b.n	8004026 <_printf_common+0x3e>
 8004098:	18e1      	adds	r1, r4, r3
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	2030      	movs	r0, #48	; 0x30
 800409e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040a2:	4422      	add	r2, r4
 80040a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040ac:	3302      	adds	r3, #2
 80040ae:	e7c7      	b.n	8004040 <_printf_common+0x58>
 80040b0:	2301      	movs	r3, #1
 80040b2:	4622      	mov	r2, r4
 80040b4:	4649      	mov	r1, r9
 80040b6:	4638      	mov	r0, r7
 80040b8:	47c0      	blx	r8
 80040ba:	3001      	adds	r0, #1
 80040bc:	d0e6      	beq.n	800408c <_printf_common+0xa4>
 80040be:	3601      	adds	r6, #1
 80040c0:	e7d9      	b.n	8004076 <_printf_common+0x8e>
	...

080040c4 <_printf_i>:
 80040c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c8:	7e0f      	ldrb	r7, [r1, #24]
 80040ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040cc:	2f78      	cmp	r7, #120	; 0x78
 80040ce:	4691      	mov	r9, r2
 80040d0:	4680      	mov	r8, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	469a      	mov	sl, r3
 80040d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040da:	d807      	bhi.n	80040ec <_printf_i+0x28>
 80040dc:	2f62      	cmp	r7, #98	; 0x62
 80040de:	d80a      	bhi.n	80040f6 <_printf_i+0x32>
 80040e0:	2f00      	cmp	r7, #0
 80040e2:	f000 80d4 	beq.w	800428e <_printf_i+0x1ca>
 80040e6:	2f58      	cmp	r7, #88	; 0x58
 80040e8:	f000 80c0 	beq.w	800426c <_printf_i+0x1a8>
 80040ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80040f4:	e03a      	b.n	800416c <_printf_i+0xa8>
 80040f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80040fa:	2b15      	cmp	r3, #21
 80040fc:	d8f6      	bhi.n	80040ec <_printf_i+0x28>
 80040fe:	a101      	add	r1, pc, #4	; (adr r1, 8004104 <_printf_i+0x40>)
 8004100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004104:	0800415d 	.word	0x0800415d
 8004108:	08004171 	.word	0x08004171
 800410c:	080040ed 	.word	0x080040ed
 8004110:	080040ed 	.word	0x080040ed
 8004114:	080040ed 	.word	0x080040ed
 8004118:	080040ed 	.word	0x080040ed
 800411c:	08004171 	.word	0x08004171
 8004120:	080040ed 	.word	0x080040ed
 8004124:	080040ed 	.word	0x080040ed
 8004128:	080040ed 	.word	0x080040ed
 800412c:	080040ed 	.word	0x080040ed
 8004130:	08004275 	.word	0x08004275
 8004134:	0800419d 	.word	0x0800419d
 8004138:	0800422f 	.word	0x0800422f
 800413c:	080040ed 	.word	0x080040ed
 8004140:	080040ed 	.word	0x080040ed
 8004144:	08004297 	.word	0x08004297
 8004148:	080040ed 	.word	0x080040ed
 800414c:	0800419d 	.word	0x0800419d
 8004150:	080040ed 	.word	0x080040ed
 8004154:	080040ed 	.word	0x080040ed
 8004158:	08004237 	.word	0x08004237
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	1d1a      	adds	r2, r3, #4
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	602a      	str	r2, [r5, #0]
 8004164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004168:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800416c:	2301      	movs	r3, #1
 800416e:	e09f      	b.n	80042b0 <_printf_i+0x1ec>
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	682b      	ldr	r3, [r5, #0]
 8004174:	0607      	lsls	r7, r0, #24
 8004176:	f103 0104 	add.w	r1, r3, #4
 800417a:	6029      	str	r1, [r5, #0]
 800417c:	d501      	bpl.n	8004182 <_printf_i+0xbe>
 800417e:	681e      	ldr	r6, [r3, #0]
 8004180:	e003      	b.n	800418a <_printf_i+0xc6>
 8004182:	0646      	lsls	r6, r0, #25
 8004184:	d5fb      	bpl.n	800417e <_printf_i+0xba>
 8004186:	f9b3 6000 	ldrsh.w	r6, [r3]
 800418a:	2e00      	cmp	r6, #0
 800418c:	da03      	bge.n	8004196 <_printf_i+0xd2>
 800418e:	232d      	movs	r3, #45	; 0x2d
 8004190:	4276      	negs	r6, r6
 8004192:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004196:	485a      	ldr	r0, [pc, #360]	; (8004300 <_printf_i+0x23c>)
 8004198:	230a      	movs	r3, #10
 800419a:	e012      	b.n	80041c2 <_printf_i+0xfe>
 800419c:	682b      	ldr	r3, [r5, #0]
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	1d19      	adds	r1, r3, #4
 80041a2:	6029      	str	r1, [r5, #0]
 80041a4:	0605      	lsls	r5, r0, #24
 80041a6:	d501      	bpl.n	80041ac <_printf_i+0xe8>
 80041a8:	681e      	ldr	r6, [r3, #0]
 80041aa:	e002      	b.n	80041b2 <_printf_i+0xee>
 80041ac:	0641      	lsls	r1, r0, #25
 80041ae:	d5fb      	bpl.n	80041a8 <_printf_i+0xe4>
 80041b0:	881e      	ldrh	r6, [r3, #0]
 80041b2:	4853      	ldr	r0, [pc, #332]	; (8004300 <_printf_i+0x23c>)
 80041b4:	2f6f      	cmp	r7, #111	; 0x6f
 80041b6:	bf0c      	ite	eq
 80041b8:	2308      	moveq	r3, #8
 80041ba:	230a      	movne	r3, #10
 80041bc:	2100      	movs	r1, #0
 80041be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041c2:	6865      	ldr	r5, [r4, #4]
 80041c4:	60a5      	str	r5, [r4, #8]
 80041c6:	2d00      	cmp	r5, #0
 80041c8:	bfa2      	ittt	ge
 80041ca:	6821      	ldrge	r1, [r4, #0]
 80041cc:	f021 0104 	bicge.w	r1, r1, #4
 80041d0:	6021      	strge	r1, [r4, #0]
 80041d2:	b90e      	cbnz	r6, 80041d8 <_printf_i+0x114>
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	d04b      	beq.n	8004270 <_printf_i+0x1ac>
 80041d8:	4615      	mov	r5, r2
 80041da:	fbb6 f1f3 	udiv	r1, r6, r3
 80041de:	fb03 6711 	mls	r7, r3, r1, r6
 80041e2:	5dc7      	ldrb	r7, [r0, r7]
 80041e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80041e8:	4637      	mov	r7, r6
 80041ea:	42bb      	cmp	r3, r7
 80041ec:	460e      	mov	r6, r1
 80041ee:	d9f4      	bls.n	80041da <_printf_i+0x116>
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d10b      	bne.n	800420c <_printf_i+0x148>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	07de      	lsls	r6, r3, #31
 80041f8:	d508      	bpl.n	800420c <_printf_i+0x148>
 80041fa:	6923      	ldr	r3, [r4, #16]
 80041fc:	6861      	ldr	r1, [r4, #4]
 80041fe:	4299      	cmp	r1, r3
 8004200:	bfde      	ittt	le
 8004202:	2330      	movle	r3, #48	; 0x30
 8004204:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004208:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800420c:	1b52      	subs	r2, r2, r5
 800420e:	6122      	str	r2, [r4, #16]
 8004210:	f8cd a000 	str.w	sl, [sp]
 8004214:	464b      	mov	r3, r9
 8004216:	aa03      	add	r2, sp, #12
 8004218:	4621      	mov	r1, r4
 800421a:	4640      	mov	r0, r8
 800421c:	f7ff fee4 	bl	8003fe8 <_printf_common>
 8004220:	3001      	adds	r0, #1
 8004222:	d14a      	bne.n	80042ba <_printf_i+0x1f6>
 8004224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004228:	b004      	add	sp, #16
 800422a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422e:	6823      	ldr	r3, [r4, #0]
 8004230:	f043 0320 	orr.w	r3, r3, #32
 8004234:	6023      	str	r3, [r4, #0]
 8004236:	4833      	ldr	r0, [pc, #204]	; (8004304 <_printf_i+0x240>)
 8004238:	2778      	movs	r7, #120	; 0x78
 800423a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800423e:	6823      	ldr	r3, [r4, #0]
 8004240:	6829      	ldr	r1, [r5, #0]
 8004242:	061f      	lsls	r7, r3, #24
 8004244:	f851 6b04 	ldr.w	r6, [r1], #4
 8004248:	d402      	bmi.n	8004250 <_printf_i+0x18c>
 800424a:	065f      	lsls	r7, r3, #25
 800424c:	bf48      	it	mi
 800424e:	b2b6      	uxthmi	r6, r6
 8004250:	07df      	lsls	r7, r3, #31
 8004252:	bf48      	it	mi
 8004254:	f043 0320 	orrmi.w	r3, r3, #32
 8004258:	6029      	str	r1, [r5, #0]
 800425a:	bf48      	it	mi
 800425c:	6023      	strmi	r3, [r4, #0]
 800425e:	b91e      	cbnz	r6, 8004268 <_printf_i+0x1a4>
 8004260:	6823      	ldr	r3, [r4, #0]
 8004262:	f023 0320 	bic.w	r3, r3, #32
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	2310      	movs	r3, #16
 800426a:	e7a7      	b.n	80041bc <_printf_i+0xf8>
 800426c:	4824      	ldr	r0, [pc, #144]	; (8004300 <_printf_i+0x23c>)
 800426e:	e7e4      	b.n	800423a <_printf_i+0x176>
 8004270:	4615      	mov	r5, r2
 8004272:	e7bd      	b.n	80041f0 <_printf_i+0x12c>
 8004274:	682b      	ldr	r3, [r5, #0]
 8004276:	6826      	ldr	r6, [r4, #0]
 8004278:	6961      	ldr	r1, [r4, #20]
 800427a:	1d18      	adds	r0, r3, #4
 800427c:	6028      	str	r0, [r5, #0]
 800427e:	0635      	lsls	r5, r6, #24
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	d501      	bpl.n	8004288 <_printf_i+0x1c4>
 8004284:	6019      	str	r1, [r3, #0]
 8004286:	e002      	b.n	800428e <_printf_i+0x1ca>
 8004288:	0670      	lsls	r0, r6, #25
 800428a:	d5fb      	bpl.n	8004284 <_printf_i+0x1c0>
 800428c:	8019      	strh	r1, [r3, #0]
 800428e:	2300      	movs	r3, #0
 8004290:	6123      	str	r3, [r4, #16]
 8004292:	4615      	mov	r5, r2
 8004294:	e7bc      	b.n	8004210 <_printf_i+0x14c>
 8004296:	682b      	ldr	r3, [r5, #0]
 8004298:	1d1a      	adds	r2, r3, #4
 800429a:	602a      	str	r2, [r5, #0]
 800429c:	681d      	ldr	r5, [r3, #0]
 800429e:	6862      	ldr	r2, [r4, #4]
 80042a0:	2100      	movs	r1, #0
 80042a2:	4628      	mov	r0, r5
 80042a4:	f7fb ff94 	bl	80001d0 <memchr>
 80042a8:	b108      	cbz	r0, 80042ae <_printf_i+0x1ea>
 80042aa:	1b40      	subs	r0, r0, r5
 80042ac:	6060      	str	r0, [r4, #4]
 80042ae:	6863      	ldr	r3, [r4, #4]
 80042b0:	6123      	str	r3, [r4, #16]
 80042b2:	2300      	movs	r3, #0
 80042b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042b8:	e7aa      	b.n	8004210 <_printf_i+0x14c>
 80042ba:	6923      	ldr	r3, [r4, #16]
 80042bc:	462a      	mov	r2, r5
 80042be:	4649      	mov	r1, r9
 80042c0:	4640      	mov	r0, r8
 80042c2:	47d0      	blx	sl
 80042c4:	3001      	adds	r0, #1
 80042c6:	d0ad      	beq.n	8004224 <_printf_i+0x160>
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	079b      	lsls	r3, r3, #30
 80042cc:	d413      	bmi.n	80042f6 <_printf_i+0x232>
 80042ce:	68e0      	ldr	r0, [r4, #12]
 80042d0:	9b03      	ldr	r3, [sp, #12]
 80042d2:	4298      	cmp	r0, r3
 80042d4:	bfb8      	it	lt
 80042d6:	4618      	movlt	r0, r3
 80042d8:	e7a6      	b.n	8004228 <_printf_i+0x164>
 80042da:	2301      	movs	r3, #1
 80042dc:	4632      	mov	r2, r6
 80042de:	4649      	mov	r1, r9
 80042e0:	4640      	mov	r0, r8
 80042e2:	47d0      	blx	sl
 80042e4:	3001      	adds	r0, #1
 80042e6:	d09d      	beq.n	8004224 <_printf_i+0x160>
 80042e8:	3501      	adds	r5, #1
 80042ea:	68e3      	ldr	r3, [r4, #12]
 80042ec:	9903      	ldr	r1, [sp, #12]
 80042ee:	1a5b      	subs	r3, r3, r1
 80042f0:	42ab      	cmp	r3, r5
 80042f2:	dcf2      	bgt.n	80042da <_printf_i+0x216>
 80042f4:	e7eb      	b.n	80042ce <_printf_i+0x20a>
 80042f6:	2500      	movs	r5, #0
 80042f8:	f104 0619 	add.w	r6, r4, #25
 80042fc:	e7f5      	b.n	80042ea <_printf_i+0x226>
 80042fe:	bf00      	nop
 8004300:	080074c5 	.word	0x080074c5
 8004304:	080074d6 	.word	0x080074d6

08004308 <std>:
 8004308:	2300      	movs	r3, #0
 800430a:	b510      	push	{r4, lr}
 800430c:	4604      	mov	r4, r0
 800430e:	e9c0 3300 	strd	r3, r3, [r0]
 8004312:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004316:	6083      	str	r3, [r0, #8]
 8004318:	8181      	strh	r1, [r0, #12]
 800431a:	6643      	str	r3, [r0, #100]	; 0x64
 800431c:	81c2      	strh	r2, [r0, #14]
 800431e:	6183      	str	r3, [r0, #24]
 8004320:	4619      	mov	r1, r3
 8004322:	2208      	movs	r2, #8
 8004324:	305c      	adds	r0, #92	; 0x5c
 8004326:	f000 f914 	bl	8004552 <memset>
 800432a:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <std+0x58>)
 800432c:	6263      	str	r3, [r4, #36]	; 0x24
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <std+0x5c>)
 8004330:	62a3      	str	r3, [r4, #40]	; 0x28
 8004332:	4b0d      	ldr	r3, [pc, #52]	; (8004368 <std+0x60>)
 8004334:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <std+0x64>)
 8004338:	6323      	str	r3, [r4, #48]	; 0x30
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <std+0x68>)
 800433c:	6224      	str	r4, [r4, #32]
 800433e:	429c      	cmp	r4, r3
 8004340:	d006      	beq.n	8004350 <std+0x48>
 8004342:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004346:	4294      	cmp	r4, r2
 8004348:	d002      	beq.n	8004350 <std+0x48>
 800434a:	33d0      	adds	r3, #208	; 0xd0
 800434c:	429c      	cmp	r4, r3
 800434e:	d105      	bne.n	800435c <std+0x54>
 8004350:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004358:	f000 b988 	b.w	800466c <__retarget_lock_init_recursive>
 800435c:	bd10      	pop	{r4, pc}
 800435e:	bf00      	nop
 8004360:	080044cd 	.word	0x080044cd
 8004364:	080044ef 	.word	0x080044ef
 8004368:	08004527 	.word	0x08004527
 800436c:	0800454b 	.word	0x0800454b
 8004370:	200002b8 	.word	0x200002b8

08004374 <stdio_exit_handler>:
 8004374:	4a02      	ldr	r2, [pc, #8]	; (8004380 <stdio_exit_handler+0xc>)
 8004376:	4903      	ldr	r1, [pc, #12]	; (8004384 <stdio_exit_handler+0x10>)
 8004378:	4803      	ldr	r0, [pc, #12]	; (8004388 <stdio_exit_handler+0x14>)
 800437a:	f000 b869 	b.w	8004450 <_fwalk_sglue>
 800437e:	bf00      	nop
 8004380:	20000008 	.word	0x20000008
 8004384:	08005eb9 	.word	0x08005eb9
 8004388:	20000014 	.word	0x20000014

0800438c <cleanup_stdio>:
 800438c:	6841      	ldr	r1, [r0, #4]
 800438e:	4b0c      	ldr	r3, [pc, #48]	; (80043c0 <cleanup_stdio+0x34>)
 8004390:	4299      	cmp	r1, r3
 8004392:	b510      	push	{r4, lr}
 8004394:	4604      	mov	r4, r0
 8004396:	d001      	beq.n	800439c <cleanup_stdio+0x10>
 8004398:	f001 fd8e 	bl	8005eb8 <_fflush_r>
 800439c:	68a1      	ldr	r1, [r4, #8]
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <cleanup_stdio+0x38>)
 80043a0:	4299      	cmp	r1, r3
 80043a2:	d002      	beq.n	80043aa <cleanup_stdio+0x1e>
 80043a4:	4620      	mov	r0, r4
 80043a6:	f001 fd87 	bl	8005eb8 <_fflush_r>
 80043aa:	68e1      	ldr	r1, [r4, #12]
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <cleanup_stdio+0x3c>)
 80043ae:	4299      	cmp	r1, r3
 80043b0:	d004      	beq.n	80043bc <cleanup_stdio+0x30>
 80043b2:	4620      	mov	r0, r4
 80043b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043b8:	f001 bd7e 	b.w	8005eb8 <_fflush_r>
 80043bc:	bd10      	pop	{r4, pc}
 80043be:	bf00      	nop
 80043c0:	200002b8 	.word	0x200002b8
 80043c4:	20000320 	.word	0x20000320
 80043c8:	20000388 	.word	0x20000388

080043cc <global_stdio_init.part.0>:
 80043cc:	b510      	push	{r4, lr}
 80043ce:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <global_stdio_init.part.0+0x30>)
 80043d0:	4c0b      	ldr	r4, [pc, #44]	; (8004400 <global_stdio_init.part.0+0x34>)
 80043d2:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <global_stdio_init.part.0+0x38>)
 80043d4:	601a      	str	r2, [r3, #0]
 80043d6:	4620      	mov	r0, r4
 80043d8:	2200      	movs	r2, #0
 80043da:	2104      	movs	r1, #4
 80043dc:	f7ff ff94 	bl	8004308 <std>
 80043e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80043e4:	2201      	movs	r2, #1
 80043e6:	2109      	movs	r1, #9
 80043e8:	f7ff ff8e 	bl	8004308 <std>
 80043ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80043f0:	2202      	movs	r2, #2
 80043f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043f6:	2112      	movs	r1, #18
 80043f8:	f7ff bf86 	b.w	8004308 <std>
 80043fc:	200003f0 	.word	0x200003f0
 8004400:	200002b8 	.word	0x200002b8
 8004404:	08004375 	.word	0x08004375

08004408 <__sfp_lock_acquire>:
 8004408:	4801      	ldr	r0, [pc, #4]	; (8004410 <__sfp_lock_acquire+0x8>)
 800440a:	f000 b930 	b.w	800466e <__retarget_lock_acquire_recursive>
 800440e:	bf00      	nop
 8004410:	200003f9 	.word	0x200003f9

08004414 <__sfp_lock_release>:
 8004414:	4801      	ldr	r0, [pc, #4]	; (800441c <__sfp_lock_release+0x8>)
 8004416:	f000 b92b 	b.w	8004670 <__retarget_lock_release_recursive>
 800441a:	bf00      	nop
 800441c:	200003f9 	.word	0x200003f9

08004420 <__sinit>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	f7ff fff0 	bl	8004408 <__sfp_lock_acquire>
 8004428:	6a23      	ldr	r3, [r4, #32]
 800442a:	b11b      	cbz	r3, 8004434 <__sinit+0x14>
 800442c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004430:	f7ff bff0 	b.w	8004414 <__sfp_lock_release>
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <__sinit+0x28>)
 8004436:	6223      	str	r3, [r4, #32]
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <__sinit+0x2c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1f5      	bne.n	800442c <__sinit+0xc>
 8004440:	f7ff ffc4 	bl	80043cc <global_stdio_init.part.0>
 8004444:	e7f2      	b.n	800442c <__sinit+0xc>
 8004446:	bf00      	nop
 8004448:	0800438d 	.word	0x0800438d
 800444c:	200003f0 	.word	0x200003f0

08004450 <_fwalk_sglue>:
 8004450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004454:	4607      	mov	r7, r0
 8004456:	4688      	mov	r8, r1
 8004458:	4614      	mov	r4, r2
 800445a:	2600      	movs	r6, #0
 800445c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004460:	f1b9 0901 	subs.w	r9, r9, #1
 8004464:	d505      	bpl.n	8004472 <_fwalk_sglue+0x22>
 8004466:	6824      	ldr	r4, [r4, #0]
 8004468:	2c00      	cmp	r4, #0
 800446a:	d1f7      	bne.n	800445c <_fwalk_sglue+0xc>
 800446c:	4630      	mov	r0, r6
 800446e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004472:	89ab      	ldrh	r3, [r5, #12]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d907      	bls.n	8004488 <_fwalk_sglue+0x38>
 8004478:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800447c:	3301      	adds	r3, #1
 800447e:	d003      	beq.n	8004488 <_fwalk_sglue+0x38>
 8004480:	4629      	mov	r1, r5
 8004482:	4638      	mov	r0, r7
 8004484:	47c0      	blx	r8
 8004486:	4306      	orrs	r6, r0
 8004488:	3568      	adds	r5, #104	; 0x68
 800448a:	e7e9      	b.n	8004460 <_fwalk_sglue+0x10>

0800448c <siprintf>:
 800448c:	b40e      	push	{r1, r2, r3}
 800448e:	b500      	push	{lr}
 8004490:	b09c      	sub	sp, #112	; 0x70
 8004492:	ab1d      	add	r3, sp, #116	; 0x74
 8004494:	9002      	str	r0, [sp, #8]
 8004496:	9006      	str	r0, [sp, #24]
 8004498:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800449c:	4809      	ldr	r0, [pc, #36]	; (80044c4 <siprintf+0x38>)
 800449e:	9107      	str	r1, [sp, #28]
 80044a0:	9104      	str	r1, [sp, #16]
 80044a2:	4909      	ldr	r1, [pc, #36]	; (80044c8 <siprintf+0x3c>)
 80044a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80044a8:	9105      	str	r1, [sp, #20]
 80044aa:	6800      	ldr	r0, [r0, #0]
 80044ac:	9301      	str	r3, [sp, #4]
 80044ae:	a902      	add	r1, sp, #8
 80044b0:	f001 fb7e 	bl	8005bb0 <_svfiprintf_r>
 80044b4:	9b02      	ldr	r3, [sp, #8]
 80044b6:	2200      	movs	r2, #0
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	b01c      	add	sp, #112	; 0x70
 80044bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80044c0:	b003      	add	sp, #12
 80044c2:	4770      	bx	lr
 80044c4:	20000060 	.word	0x20000060
 80044c8:	ffff0208 	.word	0xffff0208

080044cc <__sread>:
 80044cc:	b510      	push	{r4, lr}
 80044ce:	460c      	mov	r4, r1
 80044d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044d4:	f000 f86c 	bl	80045b0 <_read_r>
 80044d8:	2800      	cmp	r0, #0
 80044da:	bfab      	itete	ge
 80044dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80044de:	89a3      	ldrhlt	r3, [r4, #12]
 80044e0:	181b      	addge	r3, r3, r0
 80044e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80044e6:	bfac      	ite	ge
 80044e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80044ea:	81a3      	strhlt	r3, [r4, #12]
 80044ec:	bd10      	pop	{r4, pc}

080044ee <__swrite>:
 80044ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f2:	461f      	mov	r7, r3
 80044f4:	898b      	ldrh	r3, [r1, #12]
 80044f6:	05db      	lsls	r3, r3, #23
 80044f8:	4605      	mov	r5, r0
 80044fa:	460c      	mov	r4, r1
 80044fc:	4616      	mov	r6, r2
 80044fe:	d505      	bpl.n	800450c <__swrite+0x1e>
 8004500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004504:	2302      	movs	r3, #2
 8004506:	2200      	movs	r2, #0
 8004508:	f000 f840 	bl	800458c <_lseek_r>
 800450c:	89a3      	ldrh	r3, [r4, #12]
 800450e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004516:	81a3      	strh	r3, [r4, #12]
 8004518:	4632      	mov	r2, r6
 800451a:	463b      	mov	r3, r7
 800451c:	4628      	mov	r0, r5
 800451e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004522:	f000 b867 	b.w	80045f4 <_write_r>

08004526 <__sseek>:
 8004526:	b510      	push	{r4, lr}
 8004528:	460c      	mov	r4, r1
 800452a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800452e:	f000 f82d 	bl	800458c <_lseek_r>
 8004532:	1c43      	adds	r3, r0, #1
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	bf15      	itete	ne
 8004538:	6560      	strne	r0, [r4, #84]	; 0x54
 800453a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800453e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004542:	81a3      	strheq	r3, [r4, #12]
 8004544:	bf18      	it	ne
 8004546:	81a3      	strhne	r3, [r4, #12]
 8004548:	bd10      	pop	{r4, pc}

0800454a <__sclose>:
 800454a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800454e:	f000 b80d 	b.w	800456c <_close_r>

08004552 <memset>:
 8004552:	4402      	add	r2, r0
 8004554:	4603      	mov	r3, r0
 8004556:	4293      	cmp	r3, r2
 8004558:	d100      	bne.n	800455c <memset+0xa>
 800455a:	4770      	bx	lr
 800455c:	f803 1b01 	strb.w	r1, [r3], #1
 8004560:	e7f9      	b.n	8004556 <memset+0x4>
	...

08004564 <_localeconv_r>:
 8004564:	4800      	ldr	r0, [pc, #0]	; (8004568 <_localeconv_r+0x4>)
 8004566:	4770      	bx	lr
 8004568:	20000154 	.word	0x20000154

0800456c <_close_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	4d06      	ldr	r5, [pc, #24]	; (8004588 <_close_r+0x1c>)
 8004570:	2300      	movs	r3, #0
 8004572:	4604      	mov	r4, r0
 8004574:	4608      	mov	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fd fef1 	bl	800235e <_close>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d102      	bne.n	8004586 <_close_r+0x1a>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	b103      	cbz	r3, 8004586 <_close_r+0x1a>
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	bd38      	pop	{r3, r4, r5, pc}
 8004588:	200003f4 	.word	0x200003f4

0800458c <_lseek_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4d07      	ldr	r5, [pc, #28]	; (80045ac <_lseek_r+0x20>)
 8004590:	4604      	mov	r4, r0
 8004592:	4608      	mov	r0, r1
 8004594:	4611      	mov	r1, r2
 8004596:	2200      	movs	r2, #0
 8004598:	602a      	str	r2, [r5, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	f7fd ff06 	bl	80023ac <_lseek>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d102      	bne.n	80045aa <_lseek_r+0x1e>
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	b103      	cbz	r3, 80045aa <_lseek_r+0x1e>
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	200003f4 	.word	0x200003f4

080045b0 <_read_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4d07      	ldr	r5, [pc, #28]	; (80045d0 <_read_r+0x20>)
 80045b4:	4604      	mov	r4, r0
 80045b6:	4608      	mov	r0, r1
 80045b8:	4611      	mov	r1, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	602a      	str	r2, [r5, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	f7fd fe94 	bl	80022ec <_read>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d102      	bne.n	80045ce <_read_r+0x1e>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	b103      	cbz	r3, 80045ce <_read_r+0x1e>
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	200003f4 	.word	0x200003f4

080045d4 <_sbrk_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	4d06      	ldr	r5, [pc, #24]	; (80045f0 <_sbrk_r+0x1c>)
 80045d8:	2300      	movs	r3, #0
 80045da:	4604      	mov	r4, r0
 80045dc:	4608      	mov	r0, r1
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	f7fd fef2 	bl	80023c8 <_sbrk>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_sbrk_r+0x1a>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_sbrk_r+0x1a>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	200003f4 	.word	0x200003f4

080045f4 <_write_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4d07      	ldr	r5, [pc, #28]	; (8004614 <_write_r+0x20>)
 80045f8:	4604      	mov	r4, r0
 80045fa:	4608      	mov	r0, r1
 80045fc:	4611      	mov	r1, r2
 80045fe:	2200      	movs	r2, #0
 8004600:	602a      	str	r2, [r5, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	f7fd fe8f 	bl	8002326 <_write>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_write_r+0x1e>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_write_r+0x1e>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	200003f4 	.word	0x200003f4

08004618 <__errno>:
 8004618:	4b01      	ldr	r3, [pc, #4]	; (8004620 <__errno+0x8>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000060 	.word	0x20000060

08004624 <__libc_init_array>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	4d0d      	ldr	r5, [pc, #52]	; (800465c <__libc_init_array+0x38>)
 8004628:	4c0d      	ldr	r4, [pc, #52]	; (8004660 <__libc_init_array+0x3c>)
 800462a:	1b64      	subs	r4, r4, r5
 800462c:	10a4      	asrs	r4, r4, #2
 800462e:	2600      	movs	r6, #0
 8004630:	42a6      	cmp	r6, r4
 8004632:	d109      	bne.n	8004648 <__libc_init_array+0x24>
 8004634:	4d0b      	ldr	r5, [pc, #44]	; (8004664 <__libc_init_array+0x40>)
 8004636:	4c0c      	ldr	r4, [pc, #48]	; (8004668 <__libc_init_array+0x44>)
 8004638:	f002 ff0a 	bl	8007450 <_init>
 800463c:	1b64      	subs	r4, r4, r5
 800463e:	10a4      	asrs	r4, r4, #2
 8004640:	2600      	movs	r6, #0
 8004642:	42a6      	cmp	r6, r4
 8004644:	d105      	bne.n	8004652 <__libc_init_array+0x2e>
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	f855 3b04 	ldr.w	r3, [r5], #4
 800464c:	4798      	blx	r3
 800464e:	3601      	adds	r6, #1
 8004650:	e7ee      	b.n	8004630 <__libc_init_array+0xc>
 8004652:	f855 3b04 	ldr.w	r3, [r5], #4
 8004656:	4798      	blx	r3
 8004658:	3601      	adds	r6, #1
 800465a:	e7f2      	b.n	8004642 <__libc_init_array+0x1e>
 800465c:	08007858 	.word	0x08007858
 8004660:	08007858 	.word	0x08007858
 8004664:	08007858 	.word	0x08007858
 8004668:	0800785c 	.word	0x0800785c

0800466c <__retarget_lock_init_recursive>:
 800466c:	4770      	bx	lr

0800466e <__retarget_lock_acquire_recursive>:
 800466e:	4770      	bx	lr

08004670 <__retarget_lock_release_recursive>:
 8004670:	4770      	bx	lr

08004672 <quorem>:
 8004672:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004676:	6903      	ldr	r3, [r0, #16]
 8004678:	690c      	ldr	r4, [r1, #16]
 800467a:	42a3      	cmp	r3, r4
 800467c:	4607      	mov	r7, r0
 800467e:	db7e      	blt.n	800477e <quorem+0x10c>
 8004680:	3c01      	subs	r4, #1
 8004682:	f101 0814 	add.w	r8, r1, #20
 8004686:	f100 0514 	add.w	r5, r0, #20
 800468a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800468e:	9301      	str	r3, [sp, #4]
 8004690:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004694:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004698:	3301      	adds	r3, #1
 800469a:	429a      	cmp	r2, r3
 800469c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80046a8:	d331      	bcc.n	800470e <quorem+0x9c>
 80046aa:	f04f 0e00 	mov.w	lr, #0
 80046ae:	4640      	mov	r0, r8
 80046b0:	46ac      	mov	ip, r5
 80046b2:	46f2      	mov	sl, lr
 80046b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80046b8:	b293      	uxth	r3, r2
 80046ba:	fb06 e303 	mla	r3, r6, r3, lr
 80046be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046c2:	0c1a      	lsrs	r2, r3, #16
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	ebaa 0303 	sub.w	r3, sl, r3
 80046ca:	f8dc a000 	ldr.w	sl, [ip]
 80046ce:	fa13 f38a 	uxtah	r3, r3, sl
 80046d2:	fb06 220e 	mla	r2, r6, lr, r2
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	9b00      	ldr	r3, [sp, #0]
 80046da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046de:	b292      	uxth	r2, r2
 80046e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80046e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80046e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80046ec:	4581      	cmp	r9, r0
 80046ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046f2:	f84c 3b04 	str.w	r3, [ip], #4
 80046f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80046fa:	d2db      	bcs.n	80046b4 <quorem+0x42>
 80046fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004700:	b92b      	cbnz	r3, 800470e <quorem+0x9c>
 8004702:	9b01      	ldr	r3, [sp, #4]
 8004704:	3b04      	subs	r3, #4
 8004706:	429d      	cmp	r5, r3
 8004708:	461a      	mov	r2, r3
 800470a:	d32c      	bcc.n	8004766 <quorem+0xf4>
 800470c:	613c      	str	r4, [r7, #16]
 800470e:	4638      	mov	r0, r7
 8004710:	f001 f8f4 	bl	80058fc <__mcmp>
 8004714:	2800      	cmp	r0, #0
 8004716:	db22      	blt.n	800475e <quorem+0xec>
 8004718:	3601      	adds	r6, #1
 800471a:	4629      	mov	r1, r5
 800471c:	2000      	movs	r0, #0
 800471e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004722:	f8d1 c000 	ldr.w	ip, [r1]
 8004726:	b293      	uxth	r3, r2
 8004728:	1ac3      	subs	r3, r0, r3
 800472a:	0c12      	lsrs	r2, r2, #16
 800472c:	fa13 f38c 	uxtah	r3, r3, ip
 8004730:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004734:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004738:	b29b      	uxth	r3, r3
 800473a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800473e:	45c1      	cmp	r9, r8
 8004740:	f841 3b04 	str.w	r3, [r1], #4
 8004744:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004748:	d2e9      	bcs.n	800471e <quorem+0xac>
 800474a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800474e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004752:	b922      	cbnz	r2, 800475e <quorem+0xec>
 8004754:	3b04      	subs	r3, #4
 8004756:	429d      	cmp	r5, r3
 8004758:	461a      	mov	r2, r3
 800475a:	d30a      	bcc.n	8004772 <quorem+0x100>
 800475c:	613c      	str	r4, [r7, #16]
 800475e:	4630      	mov	r0, r6
 8004760:	b003      	add	sp, #12
 8004762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	3b04      	subs	r3, #4
 800476a:	2a00      	cmp	r2, #0
 800476c:	d1ce      	bne.n	800470c <quorem+0x9a>
 800476e:	3c01      	subs	r4, #1
 8004770:	e7c9      	b.n	8004706 <quorem+0x94>
 8004772:	6812      	ldr	r2, [r2, #0]
 8004774:	3b04      	subs	r3, #4
 8004776:	2a00      	cmp	r2, #0
 8004778:	d1f0      	bne.n	800475c <quorem+0xea>
 800477a:	3c01      	subs	r4, #1
 800477c:	e7eb      	b.n	8004756 <quorem+0xe4>
 800477e:	2000      	movs	r0, #0
 8004780:	e7ee      	b.n	8004760 <quorem+0xee>
 8004782:	0000      	movs	r0, r0
 8004784:	0000      	movs	r0, r0
	...

08004788 <_dtoa_r>:
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	ed2d 8b04 	vpush	{d8-d9}
 8004790:	69c5      	ldr	r5, [r0, #28]
 8004792:	b093      	sub	sp, #76	; 0x4c
 8004794:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004798:	ec57 6b10 	vmov	r6, r7, d0
 800479c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80047a0:	9107      	str	r1, [sp, #28]
 80047a2:	4604      	mov	r4, r0
 80047a4:	920a      	str	r2, [sp, #40]	; 0x28
 80047a6:	930d      	str	r3, [sp, #52]	; 0x34
 80047a8:	b975      	cbnz	r5, 80047c8 <_dtoa_r+0x40>
 80047aa:	2010      	movs	r0, #16
 80047ac:	f7ff f88a 	bl	80038c4 <malloc>
 80047b0:	4602      	mov	r2, r0
 80047b2:	61e0      	str	r0, [r4, #28]
 80047b4:	b920      	cbnz	r0, 80047c0 <_dtoa_r+0x38>
 80047b6:	4bae      	ldr	r3, [pc, #696]	; (8004a70 <_dtoa_r+0x2e8>)
 80047b8:	21ef      	movs	r1, #239	; 0xef
 80047ba:	48ae      	ldr	r0, [pc, #696]	; (8004a74 <_dtoa_r+0x2ec>)
 80047bc:	f001 fbcc 	bl	8005f58 <__assert_func>
 80047c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80047c4:	6005      	str	r5, [r0, #0]
 80047c6:	60c5      	str	r5, [r0, #12]
 80047c8:	69e3      	ldr	r3, [r4, #28]
 80047ca:	6819      	ldr	r1, [r3, #0]
 80047cc:	b151      	cbz	r1, 80047e4 <_dtoa_r+0x5c>
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	604a      	str	r2, [r1, #4]
 80047d2:	2301      	movs	r3, #1
 80047d4:	4093      	lsls	r3, r2
 80047d6:	608b      	str	r3, [r1, #8]
 80047d8:	4620      	mov	r0, r4
 80047da:	f000 fe53 	bl	8005484 <_Bfree>
 80047de:	69e3      	ldr	r3, [r4, #28]
 80047e0:	2200      	movs	r2, #0
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	1e3b      	subs	r3, r7, #0
 80047e6:	bfbb      	ittet	lt
 80047e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80047ec:	9303      	strlt	r3, [sp, #12]
 80047ee:	2300      	movge	r3, #0
 80047f0:	2201      	movlt	r2, #1
 80047f2:	bfac      	ite	ge
 80047f4:	f8c8 3000 	strge.w	r3, [r8]
 80047f8:	f8c8 2000 	strlt.w	r2, [r8]
 80047fc:	4b9e      	ldr	r3, [pc, #632]	; (8004a78 <_dtoa_r+0x2f0>)
 80047fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004802:	ea33 0308 	bics.w	r3, r3, r8
 8004806:	d11b      	bne.n	8004840 <_dtoa_r+0xb8>
 8004808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800480a:	f242 730f 	movw	r3, #9999	; 0x270f
 800480e:	6013      	str	r3, [r2, #0]
 8004810:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004814:	4333      	orrs	r3, r6
 8004816:	f000 8593 	beq.w	8005340 <_dtoa_r+0xbb8>
 800481a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800481c:	b963      	cbnz	r3, 8004838 <_dtoa_r+0xb0>
 800481e:	4b97      	ldr	r3, [pc, #604]	; (8004a7c <_dtoa_r+0x2f4>)
 8004820:	e027      	b.n	8004872 <_dtoa_r+0xea>
 8004822:	4b97      	ldr	r3, [pc, #604]	; (8004a80 <_dtoa_r+0x2f8>)
 8004824:	9300      	str	r3, [sp, #0]
 8004826:	3308      	adds	r3, #8
 8004828:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800482a:	6013      	str	r3, [r2, #0]
 800482c:	9800      	ldr	r0, [sp, #0]
 800482e:	b013      	add	sp, #76	; 0x4c
 8004830:	ecbd 8b04 	vpop	{d8-d9}
 8004834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004838:	4b90      	ldr	r3, [pc, #576]	; (8004a7c <_dtoa_r+0x2f4>)
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	3303      	adds	r3, #3
 800483e:	e7f3      	b.n	8004828 <_dtoa_r+0xa0>
 8004840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004844:	2200      	movs	r2, #0
 8004846:	ec51 0b17 	vmov	r0, r1, d7
 800484a:	eeb0 8a47 	vmov.f32	s16, s14
 800484e:	eef0 8a67 	vmov.f32	s17, s15
 8004852:	2300      	movs	r3, #0
 8004854:	f7fc f938 	bl	8000ac8 <__aeabi_dcmpeq>
 8004858:	4681      	mov	r9, r0
 800485a:	b160      	cbz	r0, 8004876 <_dtoa_r+0xee>
 800485c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800485e:	2301      	movs	r3, #1
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004864:	2b00      	cmp	r3, #0
 8004866:	f000 8568 	beq.w	800533a <_dtoa_r+0xbb2>
 800486a:	4b86      	ldr	r3, [pc, #536]	; (8004a84 <_dtoa_r+0x2fc>)
 800486c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800486e:	6013      	str	r3, [r2, #0]
 8004870:	3b01      	subs	r3, #1
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	e7da      	b.n	800482c <_dtoa_r+0xa4>
 8004876:	aa10      	add	r2, sp, #64	; 0x40
 8004878:	a911      	add	r1, sp, #68	; 0x44
 800487a:	4620      	mov	r0, r4
 800487c:	eeb0 0a48 	vmov.f32	s0, s16
 8004880:	eef0 0a68 	vmov.f32	s1, s17
 8004884:	f001 f8e0 	bl	8005a48 <__d2b>
 8004888:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800488c:	4682      	mov	sl, r0
 800488e:	2d00      	cmp	r5, #0
 8004890:	d07f      	beq.n	8004992 <_dtoa_r+0x20a>
 8004892:	ee18 3a90 	vmov	r3, s17
 8004896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800489a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800489e:	ec51 0b18 	vmov	r0, r1, d8
 80048a2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80048a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80048aa:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80048ae:	4619      	mov	r1, r3
 80048b0:	2200      	movs	r2, #0
 80048b2:	4b75      	ldr	r3, [pc, #468]	; (8004a88 <_dtoa_r+0x300>)
 80048b4:	f7fb fce8 	bl	8000288 <__aeabi_dsub>
 80048b8:	a367      	add	r3, pc, #412	; (adr r3, 8004a58 <_dtoa_r+0x2d0>)
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f7fb fe9b 	bl	80005f8 <__aeabi_dmul>
 80048c2:	a367      	add	r3, pc, #412	; (adr r3, 8004a60 <_dtoa_r+0x2d8>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f7fb fce0 	bl	800028c <__adddf3>
 80048cc:	4606      	mov	r6, r0
 80048ce:	4628      	mov	r0, r5
 80048d0:	460f      	mov	r7, r1
 80048d2:	f7fb fe27 	bl	8000524 <__aeabi_i2d>
 80048d6:	a364      	add	r3, pc, #400	; (adr r3, 8004a68 <_dtoa_r+0x2e0>)
 80048d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048dc:	f7fb fe8c 	bl	80005f8 <__aeabi_dmul>
 80048e0:	4602      	mov	r2, r0
 80048e2:	460b      	mov	r3, r1
 80048e4:	4630      	mov	r0, r6
 80048e6:	4639      	mov	r1, r7
 80048e8:	f7fb fcd0 	bl	800028c <__adddf3>
 80048ec:	4606      	mov	r6, r0
 80048ee:	460f      	mov	r7, r1
 80048f0:	f7fc f932 	bl	8000b58 <__aeabi_d2iz>
 80048f4:	2200      	movs	r2, #0
 80048f6:	4683      	mov	fp, r0
 80048f8:	2300      	movs	r3, #0
 80048fa:	4630      	mov	r0, r6
 80048fc:	4639      	mov	r1, r7
 80048fe:	f7fc f8ed 	bl	8000adc <__aeabi_dcmplt>
 8004902:	b148      	cbz	r0, 8004918 <_dtoa_r+0x190>
 8004904:	4658      	mov	r0, fp
 8004906:	f7fb fe0d 	bl	8000524 <__aeabi_i2d>
 800490a:	4632      	mov	r2, r6
 800490c:	463b      	mov	r3, r7
 800490e:	f7fc f8db 	bl	8000ac8 <__aeabi_dcmpeq>
 8004912:	b908      	cbnz	r0, 8004918 <_dtoa_r+0x190>
 8004914:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004918:	f1bb 0f16 	cmp.w	fp, #22
 800491c:	d857      	bhi.n	80049ce <_dtoa_r+0x246>
 800491e:	4b5b      	ldr	r3, [pc, #364]	; (8004a8c <_dtoa_r+0x304>)
 8004920:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	ec51 0b18 	vmov	r0, r1, d8
 800492c:	f7fc f8d6 	bl	8000adc <__aeabi_dcmplt>
 8004930:	2800      	cmp	r0, #0
 8004932:	d04e      	beq.n	80049d2 <_dtoa_r+0x24a>
 8004934:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004938:	2300      	movs	r3, #0
 800493a:	930c      	str	r3, [sp, #48]	; 0x30
 800493c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800493e:	1b5b      	subs	r3, r3, r5
 8004940:	1e5a      	subs	r2, r3, #1
 8004942:	bf45      	ittet	mi
 8004944:	f1c3 0301 	rsbmi	r3, r3, #1
 8004948:	9305      	strmi	r3, [sp, #20]
 800494a:	2300      	movpl	r3, #0
 800494c:	2300      	movmi	r3, #0
 800494e:	9206      	str	r2, [sp, #24]
 8004950:	bf54      	ite	pl
 8004952:	9305      	strpl	r3, [sp, #20]
 8004954:	9306      	strmi	r3, [sp, #24]
 8004956:	f1bb 0f00 	cmp.w	fp, #0
 800495a:	db3c      	blt.n	80049d6 <_dtoa_r+0x24e>
 800495c:	9b06      	ldr	r3, [sp, #24]
 800495e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004962:	445b      	add	r3, fp
 8004964:	9306      	str	r3, [sp, #24]
 8004966:	2300      	movs	r3, #0
 8004968:	9308      	str	r3, [sp, #32]
 800496a:	9b07      	ldr	r3, [sp, #28]
 800496c:	2b09      	cmp	r3, #9
 800496e:	d868      	bhi.n	8004a42 <_dtoa_r+0x2ba>
 8004970:	2b05      	cmp	r3, #5
 8004972:	bfc4      	itt	gt
 8004974:	3b04      	subgt	r3, #4
 8004976:	9307      	strgt	r3, [sp, #28]
 8004978:	9b07      	ldr	r3, [sp, #28]
 800497a:	f1a3 0302 	sub.w	r3, r3, #2
 800497e:	bfcc      	ite	gt
 8004980:	2500      	movgt	r5, #0
 8004982:	2501      	movle	r5, #1
 8004984:	2b03      	cmp	r3, #3
 8004986:	f200 8085 	bhi.w	8004a94 <_dtoa_r+0x30c>
 800498a:	e8df f003 	tbb	[pc, r3]
 800498e:	3b2e      	.short	0x3b2e
 8004990:	5839      	.short	0x5839
 8004992:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004996:	441d      	add	r5, r3
 8004998:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800499c:	2b20      	cmp	r3, #32
 800499e:	bfc1      	itttt	gt
 80049a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049a4:	fa08 f803 	lslgt.w	r8, r8, r3
 80049a8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80049ac:	fa26 f303 	lsrgt.w	r3, r6, r3
 80049b0:	bfd6      	itet	le
 80049b2:	f1c3 0320 	rsble	r3, r3, #32
 80049b6:	ea48 0003 	orrgt.w	r0, r8, r3
 80049ba:	fa06 f003 	lslle.w	r0, r6, r3
 80049be:	f7fb fda1 	bl	8000504 <__aeabi_ui2d>
 80049c2:	2201      	movs	r2, #1
 80049c4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80049c8:	3d01      	subs	r5, #1
 80049ca:	920e      	str	r2, [sp, #56]	; 0x38
 80049cc:	e76f      	b.n	80048ae <_dtoa_r+0x126>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e7b3      	b.n	800493a <_dtoa_r+0x1b2>
 80049d2:	900c      	str	r0, [sp, #48]	; 0x30
 80049d4:	e7b2      	b.n	800493c <_dtoa_r+0x1b4>
 80049d6:	9b05      	ldr	r3, [sp, #20]
 80049d8:	eba3 030b 	sub.w	r3, r3, fp
 80049dc:	9305      	str	r3, [sp, #20]
 80049de:	f1cb 0300 	rsb	r3, fp, #0
 80049e2:	9308      	str	r3, [sp, #32]
 80049e4:	2300      	movs	r3, #0
 80049e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80049e8:	e7bf      	b.n	800496a <_dtoa_r+0x1e2>
 80049ea:	2300      	movs	r3, #0
 80049ec:	9309      	str	r3, [sp, #36]	; 0x24
 80049ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	dc52      	bgt.n	8004a9a <_dtoa_r+0x312>
 80049f4:	2301      	movs	r3, #1
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	9304      	str	r3, [sp, #16]
 80049fa:	461a      	mov	r2, r3
 80049fc:	920a      	str	r2, [sp, #40]	; 0x28
 80049fe:	e00b      	b.n	8004a18 <_dtoa_r+0x290>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e7f3      	b.n	80049ec <_dtoa_r+0x264>
 8004a04:	2300      	movs	r3, #0
 8004a06:	9309      	str	r3, [sp, #36]	; 0x24
 8004a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a0a:	445b      	add	r3, fp
 8004a0c:	9301      	str	r3, [sp, #4]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	9304      	str	r3, [sp, #16]
 8004a14:	bfb8      	it	lt
 8004a16:	2301      	movlt	r3, #1
 8004a18:	69e0      	ldr	r0, [r4, #28]
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	f102 0614 	add.w	r6, r2, #20
 8004a22:	429e      	cmp	r6, r3
 8004a24:	d93d      	bls.n	8004aa2 <_dtoa_r+0x31a>
 8004a26:	6041      	str	r1, [r0, #4]
 8004a28:	4620      	mov	r0, r4
 8004a2a:	f000 fceb 	bl	8005404 <_Balloc>
 8004a2e:	9000      	str	r0, [sp, #0]
 8004a30:	2800      	cmp	r0, #0
 8004a32:	d139      	bne.n	8004aa8 <_dtoa_r+0x320>
 8004a34:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <_dtoa_r+0x308>)
 8004a36:	4602      	mov	r2, r0
 8004a38:	f240 11af 	movw	r1, #431	; 0x1af
 8004a3c:	e6bd      	b.n	80047ba <_dtoa_r+0x32>
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e7e1      	b.n	8004a06 <_dtoa_r+0x27e>
 8004a42:	2501      	movs	r5, #1
 8004a44:	2300      	movs	r3, #0
 8004a46:	9307      	str	r3, [sp, #28]
 8004a48:	9509      	str	r5, [sp, #36]	; 0x24
 8004a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a4e:	9301      	str	r3, [sp, #4]
 8004a50:	9304      	str	r3, [sp, #16]
 8004a52:	2200      	movs	r2, #0
 8004a54:	2312      	movs	r3, #18
 8004a56:	e7d1      	b.n	80049fc <_dtoa_r+0x274>
 8004a58:	636f4361 	.word	0x636f4361
 8004a5c:	3fd287a7 	.word	0x3fd287a7
 8004a60:	8b60c8b3 	.word	0x8b60c8b3
 8004a64:	3fc68a28 	.word	0x3fc68a28
 8004a68:	509f79fb 	.word	0x509f79fb
 8004a6c:	3fd34413 	.word	0x3fd34413
 8004a70:	080074f4 	.word	0x080074f4
 8004a74:	0800750b 	.word	0x0800750b
 8004a78:	7ff00000 	.word	0x7ff00000
 8004a7c:	080074f0 	.word	0x080074f0
 8004a80:	080074e7 	.word	0x080074e7
 8004a84:	080074c4 	.word	0x080074c4
 8004a88:	3ff80000 	.word	0x3ff80000
 8004a8c:	080075f8 	.word	0x080075f8
 8004a90:	08007563 	.word	0x08007563
 8004a94:	2301      	movs	r3, #1
 8004a96:	9309      	str	r3, [sp, #36]	; 0x24
 8004a98:	e7d7      	b.n	8004a4a <_dtoa_r+0x2c2>
 8004a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a9c:	9301      	str	r3, [sp, #4]
 8004a9e:	9304      	str	r3, [sp, #16]
 8004aa0:	e7ba      	b.n	8004a18 <_dtoa_r+0x290>
 8004aa2:	3101      	adds	r1, #1
 8004aa4:	0052      	lsls	r2, r2, #1
 8004aa6:	e7ba      	b.n	8004a1e <_dtoa_r+0x296>
 8004aa8:	69e3      	ldr	r3, [r4, #28]
 8004aaa:	9a00      	ldr	r2, [sp, #0]
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	9b04      	ldr	r3, [sp, #16]
 8004ab0:	2b0e      	cmp	r3, #14
 8004ab2:	f200 80a8 	bhi.w	8004c06 <_dtoa_r+0x47e>
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	f000 80a5 	beq.w	8004c06 <_dtoa_r+0x47e>
 8004abc:	f1bb 0f00 	cmp.w	fp, #0
 8004ac0:	dd38      	ble.n	8004b34 <_dtoa_r+0x3ac>
 8004ac2:	4bc0      	ldr	r3, [pc, #768]	; (8004dc4 <_dtoa_r+0x63c>)
 8004ac4:	f00b 020f 	and.w	r2, fp, #15
 8004ac8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004acc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004ad0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004ad4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004ad8:	d019      	beq.n	8004b0e <_dtoa_r+0x386>
 8004ada:	4bbb      	ldr	r3, [pc, #748]	; (8004dc8 <_dtoa_r+0x640>)
 8004adc:	ec51 0b18 	vmov	r0, r1, d8
 8004ae0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ae4:	f7fb feb2 	bl	800084c <__aeabi_ddiv>
 8004ae8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004aec:	f008 080f 	and.w	r8, r8, #15
 8004af0:	2503      	movs	r5, #3
 8004af2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004dc8 <_dtoa_r+0x640>
 8004af6:	f1b8 0f00 	cmp.w	r8, #0
 8004afa:	d10a      	bne.n	8004b12 <_dtoa_r+0x38a>
 8004afc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b00:	4632      	mov	r2, r6
 8004b02:	463b      	mov	r3, r7
 8004b04:	f7fb fea2 	bl	800084c <__aeabi_ddiv>
 8004b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b0c:	e02b      	b.n	8004b66 <_dtoa_r+0x3de>
 8004b0e:	2502      	movs	r5, #2
 8004b10:	e7ef      	b.n	8004af2 <_dtoa_r+0x36a>
 8004b12:	f018 0f01 	tst.w	r8, #1
 8004b16:	d008      	beq.n	8004b2a <_dtoa_r+0x3a2>
 8004b18:	4630      	mov	r0, r6
 8004b1a:	4639      	mov	r1, r7
 8004b1c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004b20:	f7fb fd6a 	bl	80005f8 <__aeabi_dmul>
 8004b24:	3501      	adds	r5, #1
 8004b26:	4606      	mov	r6, r0
 8004b28:	460f      	mov	r7, r1
 8004b2a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004b2e:	f109 0908 	add.w	r9, r9, #8
 8004b32:	e7e0      	b.n	8004af6 <_dtoa_r+0x36e>
 8004b34:	f000 809f 	beq.w	8004c76 <_dtoa_r+0x4ee>
 8004b38:	f1cb 0600 	rsb	r6, fp, #0
 8004b3c:	4ba1      	ldr	r3, [pc, #644]	; (8004dc4 <_dtoa_r+0x63c>)
 8004b3e:	4fa2      	ldr	r7, [pc, #648]	; (8004dc8 <_dtoa_r+0x640>)
 8004b40:	f006 020f 	and.w	r2, r6, #15
 8004b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	ec51 0b18 	vmov	r0, r1, d8
 8004b50:	f7fb fd52 	bl	80005f8 <__aeabi_dmul>
 8004b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b58:	1136      	asrs	r6, r6, #4
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	2502      	movs	r5, #2
 8004b5e:	2e00      	cmp	r6, #0
 8004b60:	d17e      	bne.n	8004c60 <_dtoa_r+0x4d8>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1d0      	bne.n	8004b08 <_dtoa_r+0x380>
 8004b66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b68:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8084 	beq.w	8004c7a <_dtoa_r+0x4f2>
 8004b72:	4b96      	ldr	r3, [pc, #600]	; (8004dcc <_dtoa_r+0x644>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	4640      	mov	r0, r8
 8004b78:	4649      	mov	r1, r9
 8004b7a:	f7fb ffaf 	bl	8000adc <__aeabi_dcmplt>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d07b      	beq.n	8004c7a <_dtoa_r+0x4f2>
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d078      	beq.n	8004c7a <_dtoa_r+0x4f2>
 8004b88:	9b01      	ldr	r3, [sp, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dd39      	ble.n	8004c02 <_dtoa_r+0x47a>
 8004b8e:	4b90      	ldr	r3, [pc, #576]	; (8004dd0 <_dtoa_r+0x648>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	4640      	mov	r0, r8
 8004b94:	4649      	mov	r1, r9
 8004b96:	f7fb fd2f 	bl	80005f8 <__aeabi_dmul>
 8004b9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b9e:	9e01      	ldr	r6, [sp, #4]
 8004ba0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004baa:	4628      	mov	r0, r5
 8004bac:	f7fb fcba 	bl	8000524 <__aeabi_i2d>
 8004bb0:	4642      	mov	r2, r8
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	f7fb fd20 	bl	80005f8 <__aeabi_dmul>
 8004bb8:	4b86      	ldr	r3, [pc, #536]	; (8004dd4 <_dtoa_r+0x64c>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f7fb fb66 	bl	800028c <__adddf3>
 8004bc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	2e00      	cmp	r6, #0
 8004bcc:	d158      	bne.n	8004c80 <_dtoa_r+0x4f8>
 8004bce:	4b82      	ldr	r3, [pc, #520]	; (8004dd8 <_dtoa_r+0x650>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	f7fb fb57 	bl	8000288 <__aeabi_dsub>
 8004bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bde:	4680      	mov	r8, r0
 8004be0:	4689      	mov	r9, r1
 8004be2:	f7fb ff99 	bl	8000b18 <__aeabi_dcmpgt>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	f040 8296 	bne.w	8005118 <_dtoa_r+0x990>
 8004bec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	f7fb ff70 	bl	8000adc <__aeabi_dcmplt>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	f040 8289 	bne.w	8005114 <_dtoa_r+0x98c>
 8004c02:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f2c0 814e 	blt.w	8004eaa <_dtoa_r+0x722>
 8004c0e:	f1bb 0f0e 	cmp.w	fp, #14
 8004c12:	f300 814a 	bgt.w	8004eaa <_dtoa_r+0x722>
 8004c16:	4b6b      	ldr	r3, [pc, #428]	; (8004dc4 <_dtoa_r+0x63c>)
 8004c18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f280 80dc 	bge.w	8004de0 <_dtoa_r+0x658>
 8004c28:	9b04      	ldr	r3, [sp, #16]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f300 80d8 	bgt.w	8004de0 <_dtoa_r+0x658>
 8004c30:	f040 826f 	bne.w	8005112 <_dtoa_r+0x98a>
 8004c34:	4b68      	ldr	r3, [pc, #416]	; (8004dd8 <_dtoa_r+0x650>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	4640      	mov	r0, r8
 8004c3a:	4649      	mov	r1, r9
 8004c3c:	f7fb fcdc 	bl	80005f8 <__aeabi_dmul>
 8004c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c44:	f7fb ff5e 	bl	8000b04 <__aeabi_dcmpge>
 8004c48:	9e04      	ldr	r6, [sp, #16]
 8004c4a:	4637      	mov	r7, r6
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f040 8245 	bne.w	80050dc <_dtoa_r+0x954>
 8004c52:	9d00      	ldr	r5, [sp, #0]
 8004c54:	2331      	movs	r3, #49	; 0x31
 8004c56:	f805 3b01 	strb.w	r3, [r5], #1
 8004c5a:	f10b 0b01 	add.w	fp, fp, #1
 8004c5e:	e241      	b.n	80050e4 <_dtoa_r+0x95c>
 8004c60:	07f2      	lsls	r2, r6, #31
 8004c62:	d505      	bpl.n	8004c70 <_dtoa_r+0x4e8>
 8004c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c68:	f7fb fcc6 	bl	80005f8 <__aeabi_dmul>
 8004c6c:	3501      	adds	r5, #1
 8004c6e:	2301      	movs	r3, #1
 8004c70:	1076      	asrs	r6, r6, #1
 8004c72:	3708      	adds	r7, #8
 8004c74:	e773      	b.n	8004b5e <_dtoa_r+0x3d6>
 8004c76:	2502      	movs	r5, #2
 8004c78:	e775      	b.n	8004b66 <_dtoa_r+0x3de>
 8004c7a:	9e04      	ldr	r6, [sp, #16]
 8004c7c:	465f      	mov	r7, fp
 8004c7e:	e792      	b.n	8004ba6 <_dtoa_r+0x41e>
 8004c80:	9900      	ldr	r1, [sp, #0]
 8004c82:	4b50      	ldr	r3, [pc, #320]	; (8004dc4 <_dtoa_r+0x63c>)
 8004c84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c88:	4431      	add	r1, r6
 8004c8a:	9102      	str	r1, [sp, #8]
 8004c8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004c8e:	eeb0 9a47 	vmov.f32	s18, s14
 8004c92:	eef0 9a67 	vmov.f32	s19, s15
 8004c96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004c9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c9e:	2900      	cmp	r1, #0
 8004ca0:	d044      	beq.n	8004d2c <_dtoa_r+0x5a4>
 8004ca2:	494e      	ldr	r1, [pc, #312]	; (8004ddc <_dtoa_r+0x654>)
 8004ca4:	2000      	movs	r0, #0
 8004ca6:	f7fb fdd1 	bl	800084c <__aeabi_ddiv>
 8004caa:	ec53 2b19 	vmov	r2, r3, d9
 8004cae:	f7fb faeb 	bl	8000288 <__aeabi_dsub>
 8004cb2:	9d00      	ldr	r5, [sp, #0]
 8004cb4:	ec41 0b19 	vmov	d9, r0, r1
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f7fb ff4c 	bl	8000b58 <__aeabi_d2iz>
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	f7fb fc2f 	bl	8000524 <__aeabi_i2d>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4640      	mov	r0, r8
 8004ccc:	4649      	mov	r1, r9
 8004cce:	f7fb fadb 	bl	8000288 <__aeabi_dsub>
 8004cd2:	3630      	adds	r6, #48	; 0x30
 8004cd4:	f805 6b01 	strb.w	r6, [r5], #1
 8004cd8:	ec53 2b19 	vmov	r2, r3, d9
 8004cdc:	4680      	mov	r8, r0
 8004cde:	4689      	mov	r9, r1
 8004ce0:	f7fb fefc 	bl	8000adc <__aeabi_dcmplt>
 8004ce4:	2800      	cmp	r0, #0
 8004ce6:	d164      	bne.n	8004db2 <_dtoa_r+0x62a>
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	4937      	ldr	r1, [pc, #220]	; (8004dcc <_dtoa_r+0x644>)
 8004cee:	2000      	movs	r0, #0
 8004cf0:	f7fb faca 	bl	8000288 <__aeabi_dsub>
 8004cf4:	ec53 2b19 	vmov	r2, r3, d9
 8004cf8:	f7fb fef0 	bl	8000adc <__aeabi_dcmplt>
 8004cfc:	2800      	cmp	r0, #0
 8004cfe:	f040 80b6 	bne.w	8004e6e <_dtoa_r+0x6e6>
 8004d02:	9b02      	ldr	r3, [sp, #8]
 8004d04:	429d      	cmp	r5, r3
 8004d06:	f43f af7c 	beq.w	8004c02 <_dtoa_r+0x47a>
 8004d0a:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <_dtoa_r+0x648>)
 8004d0c:	ec51 0b19 	vmov	r0, r1, d9
 8004d10:	2200      	movs	r2, #0
 8004d12:	f7fb fc71 	bl	80005f8 <__aeabi_dmul>
 8004d16:	4b2e      	ldr	r3, [pc, #184]	; (8004dd0 <_dtoa_r+0x648>)
 8004d18:	ec41 0b19 	vmov	d9, r0, r1
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	4640      	mov	r0, r8
 8004d20:	4649      	mov	r1, r9
 8004d22:	f7fb fc69 	bl	80005f8 <__aeabi_dmul>
 8004d26:	4680      	mov	r8, r0
 8004d28:	4689      	mov	r9, r1
 8004d2a:	e7c5      	b.n	8004cb8 <_dtoa_r+0x530>
 8004d2c:	ec51 0b17 	vmov	r0, r1, d7
 8004d30:	f7fb fc62 	bl	80005f8 <__aeabi_dmul>
 8004d34:	9b02      	ldr	r3, [sp, #8]
 8004d36:	9d00      	ldr	r5, [sp, #0]
 8004d38:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d3a:	ec41 0b19 	vmov	d9, r0, r1
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	f7fb ff09 	bl	8000b58 <__aeabi_d2iz>
 8004d46:	4606      	mov	r6, r0
 8004d48:	f7fb fbec 	bl	8000524 <__aeabi_i2d>
 8004d4c:	3630      	adds	r6, #48	; 0x30
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	4640      	mov	r0, r8
 8004d54:	4649      	mov	r1, r9
 8004d56:	f7fb fa97 	bl	8000288 <__aeabi_dsub>
 8004d5a:	f805 6b01 	strb.w	r6, [r5], #1
 8004d5e:	9b02      	ldr	r3, [sp, #8]
 8004d60:	429d      	cmp	r5, r3
 8004d62:	4680      	mov	r8, r0
 8004d64:	4689      	mov	r9, r1
 8004d66:	f04f 0200 	mov.w	r2, #0
 8004d6a:	d124      	bne.n	8004db6 <_dtoa_r+0x62e>
 8004d6c:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <_dtoa_r+0x654>)
 8004d6e:	ec51 0b19 	vmov	r0, r1, d9
 8004d72:	f7fb fa8b 	bl	800028c <__adddf3>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4640      	mov	r0, r8
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	f7fb fecb 	bl	8000b18 <__aeabi_dcmpgt>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d173      	bne.n	8004e6e <_dtoa_r+0x6e6>
 8004d86:	ec53 2b19 	vmov	r2, r3, d9
 8004d8a:	4914      	ldr	r1, [pc, #80]	; (8004ddc <_dtoa_r+0x654>)
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	f7fb fa7b 	bl	8000288 <__aeabi_dsub>
 8004d92:	4602      	mov	r2, r0
 8004d94:	460b      	mov	r3, r1
 8004d96:	4640      	mov	r0, r8
 8004d98:	4649      	mov	r1, r9
 8004d9a:	f7fb fe9f 	bl	8000adc <__aeabi_dcmplt>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	f43f af2f 	beq.w	8004c02 <_dtoa_r+0x47a>
 8004da4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004da6:	1e6b      	subs	r3, r5, #1
 8004da8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004daa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004dae:	2b30      	cmp	r3, #48	; 0x30
 8004db0:	d0f8      	beq.n	8004da4 <_dtoa_r+0x61c>
 8004db2:	46bb      	mov	fp, r7
 8004db4:	e04a      	b.n	8004e4c <_dtoa_r+0x6c4>
 8004db6:	4b06      	ldr	r3, [pc, #24]	; (8004dd0 <_dtoa_r+0x648>)
 8004db8:	f7fb fc1e 	bl	80005f8 <__aeabi_dmul>
 8004dbc:	4680      	mov	r8, r0
 8004dbe:	4689      	mov	r9, r1
 8004dc0:	e7bd      	b.n	8004d3e <_dtoa_r+0x5b6>
 8004dc2:	bf00      	nop
 8004dc4:	080075f8 	.word	0x080075f8
 8004dc8:	080075d0 	.word	0x080075d0
 8004dcc:	3ff00000 	.word	0x3ff00000
 8004dd0:	40240000 	.word	0x40240000
 8004dd4:	401c0000 	.word	0x401c0000
 8004dd8:	40140000 	.word	0x40140000
 8004ddc:	3fe00000 	.word	0x3fe00000
 8004de0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004de4:	9d00      	ldr	r5, [sp, #0]
 8004de6:	4642      	mov	r2, r8
 8004de8:	464b      	mov	r3, r9
 8004dea:	4630      	mov	r0, r6
 8004dec:	4639      	mov	r1, r7
 8004dee:	f7fb fd2d 	bl	800084c <__aeabi_ddiv>
 8004df2:	f7fb feb1 	bl	8000b58 <__aeabi_d2iz>
 8004df6:	9001      	str	r0, [sp, #4]
 8004df8:	f7fb fb94 	bl	8000524 <__aeabi_i2d>
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	f7fb fbfa 	bl	80005f8 <__aeabi_dmul>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4630      	mov	r0, r6
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	f7fb fa3c 	bl	8000288 <__aeabi_dsub>
 8004e10:	9e01      	ldr	r6, [sp, #4]
 8004e12:	9f04      	ldr	r7, [sp, #16]
 8004e14:	3630      	adds	r6, #48	; 0x30
 8004e16:	f805 6b01 	strb.w	r6, [r5], #1
 8004e1a:	9e00      	ldr	r6, [sp, #0]
 8004e1c:	1bae      	subs	r6, r5, r6
 8004e1e:	42b7      	cmp	r7, r6
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	d134      	bne.n	8004e90 <_dtoa_r+0x708>
 8004e26:	f7fb fa31 	bl	800028c <__adddf3>
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	4606      	mov	r6, r0
 8004e30:	460f      	mov	r7, r1
 8004e32:	f7fb fe71 	bl	8000b18 <__aeabi_dcmpgt>
 8004e36:	b9c8      	cbnz	r0, 8004e6c <_dtoa_r+0x6e4>
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	4639      	mov	r1, r7
 8004e40:	f7fb fe42 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e44:	b110      	cbz	r0, 8004e4c <_dtoa_r+0x6c4>
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	07db      	lsls	r3, r3, #31
 8004e4a:	d40f      	bmi.n	8004e6c <_dtoa_r+0x6e4>
 8004e4c:	4651      	mov	r1, sl
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 fb18 	bl	8005484 <_Bfree>
 8004e54:	2300      	movs	r3, #0
 8004e56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e58:	702b      	strb	r3, [r5, #0]
 8004e5a:	f10b 0301 	add.w	r3, fp, #1
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f43f ace2 	beq.w	800482c <_dtoa_r+0xa4>
 8004e68:	601d      	str	r5, [r3, #0]
 8004e6a:	e4df      	b.n	800482c <_dtoa_r+0xa4>
 8004e6c:	465f      	mov	r7, fp
 8004e6e:	462b      	mov	r3, r5
 8004e70:	461d      	mov	r5, r3
 8004e72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e76:	2a39      	cmp	r2, #57	; 0x39
 8004e78:	d106      	bne.n	8004e88 <_dtoa_r+0x700>
 8004e7a:	9a00      	ldr	r2, [sp, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d1f7      	bne.n	8004e70 <_dtoa_r+0x6e8>
 8004e80:	9900      	ldr	r1, [sp, #0]
 8004e82:	2230      	movs	r2, #48	; 0x30
 8004e84:	3701      	adds	r7, #1
 8004e86:	700a      	strb	r2, [r1, #0]
 8004e88:	781a      	ldrb	r2, [r3, #0]
 8004e8a:	3201      	adds	r2, #1
 8004e8c:	701a      	strb	r2, [r3, #0]
 8004e8e:	e790      	b.n	8004db2 <_dtoa_r+0x62a>
 8004e90:	4ba3      	ldr	r3, [pc, #652]	; (8005120 <_dtoa_r+0x998>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	f7fb fbb0 	bl	80005f8 <__aeabi_dmul>
 8004e98:	2200      	movs	r2, #0
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	460f      	mov	r7, r1
 8004ea0:	f7fb fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ea4:	2800      	cmp	r0, #0
 8004ea6:	d09e      	beq.n	8004de6 <_dtoa_r+0x65e>
 8004ea8:	e7d0      	b.n	8004e4c <_dtoa_r+0x6c4>
 8004eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eac:	2a00      	cmp	r2, #0
 8004eae:	f000 80ca 	beq.w	8005046 <_dtoa_r+0x8be>
 8004eb2:	9a07      	ldr	r2, [sp, #28]
 8004eb4:	2a01      	cmp	r2, #1
 8004eb6:	f300 80ad 	bgt.w	8005014 <_dtoa_r+0x88c>
 8004eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	f000 80a5 	beq.w	800500c <_dtoa_r+0x884>
 8004ec2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ec6:	9e08      	ldr	r6, [sp, #32]
 8004ec8:	9d05      	ldr	r5, [sp, #20]
 8004eca:	9a05      	ldr	r2, [sp, #20]
 8004ecc:	441a      	add	r2, r3
 8004ece:	9205      	str	r2, [sp, #20]
 8004ed0:	9a06      	ldr	r2, [sp, #24]
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	441a      	add	r2, r3
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	9206      	str	r2, [sp, #24]
 8004eda:	f000 fb89 	bl	80055f0 <__i2b>
 8004ede:	4607      	mov	r7, r0
 8004ee0:	b165      	cbz	r5, 8004efc <_dtoa_r+0x774>
 8004ee2:	9b06      	ldr	r3, [sp, #24]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	dd09      	ble.n	8004efc <_dtoa_r+0x774>
 8004ee8:	42ab      	cmp	r3, r5
 8004eea:	9a05      	ldr	r2, [sp, #20]
 8004eec:	bfa8      	it	ge
 8004eee:	462b      	movge	r3, r5
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	9205      	str	r2, [sp, #20]
 8004ef4:	9a06      	ldr	r2, [sp, #24]
 8004ef6:	1aed      	subs	r5, r5, r3
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	9306      	str	r3, [sp, #24]
 8004efc:	9b08      	ldr	r3, [sp, #32]
 8004efe:	b1f3      	cbz	r3, 8004f3e <_dtoa_r+0x7b6>
 8004f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80a3 	beq.w	800504e <_dtoa_r+0x8c6>
 8004f08:	2e00      	cmp	r6, #0
 8004f0a:	dd10      	ble.n	8004f2e <_dtoa_r+0x7a6>
 8004f0c:	4639      	mov	r1, r7
 8004f0e:	4632      	mov	r2, r6
 8004f10:	4620      	mov	r0, r4
 8004f12:	f000 fc2d 	bl	8005770 <__pow5mult>
 8004f16:	4652      	mov	r2, sl
 8004f18:	4601      	mov	r1, r0
 8004f1a:	4607      	mov	r7, r0
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f000 fb7d 	bl	800561c <__multiply>
 8004f22:	4651      	mov	r1, sl
 8004f24:	4680      	mov	r8, r0
 8004f26:	4620      	mov	r0, r4
 8004f28:	f000 faac 	bl	8005484 <_Bfree>
 8004f2c:	46c2      	mov	sl, r8
 8004f2e:	9b08      	ldr	r3, [sp, #32]
 8004f30:	1b9a      	subs	r2, r3, r6
 8004f32:	d004      	beq.n	8004f3e <_dtoa_r+0x7b6>
 8004f34:	4651      	mov	r1, sl
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 fc1a 	bl	8005770 <__pow5mult>
 8004f3c:	4682      	mov	sl, r0
 8004f3e:	2101      	movs	r1, #1
 8004f40:	4620      	mov	r0, r4
 8004f42:	f000 fb55 	bl	80055f0 <__i2b>
 8004f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	4606      	mov	r6, r0
 8004f4c:	f340 8081 	ble.w	8005052 <_dtoa_r+0x8ca>
 8004f50:	461a      	mov	r2, r3
 8004f52:	4601      	mov	r1, r0
 8004f54:	4620      	mov	r0, r4
 8004f56:	f000 fc0b 	bl	8005770 <__pow5mult>
 8004f5a:	9b07      	ldr	r3, [sp, #28]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	4606      	mov	r6, r0
 8004f60:	dd7a      	ble.n	8005058 <_dtoa_r+0x8d0>
 8004f62:	f04f 0800 	mov.w	r8, #0
 8004f66:	6933      	ldr	r3, [r6, #16]
 8004f68:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f6c:	6918      	ldr	r0, [r3, #16]
 8004f6e:	f000 faf1 	bl	8005554 <__hi0bits>
 8004f72:	f1c0 0020 	rsb	r0, r0, #32
 8004f76:	9b06      	ldr	r3, [sp, #24]
 8004f78:	4418      	add	r0, r3
 8004f7a:	f010 001f 	ands.w	r0, r0, #31
 8004f7e:	f000 8094 	beq.w	80050aa <_dtoa_r+0x922>
 8004f82:	f1c0 0320 	rsb	r3, r0, #32
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	f340 8085 	ble.w	8005096 <_dtoa_r+0x90e>
 8004f8c:	9b05      	ldr	r3, [sp, #20]
 8004f8e:	f1c0 001c 	rsb	r0, r0, #28
 8004f92:	4403      	add	r3, r0
 8004f94:	9305      	str	r3, [sp, #20]
 8004f96:	9b06      	ldr	r3, [sp, #24]
 8004f98:	4403      	add	r3, r0
 8004f9a:	4405      	add	r5, r0
 8004f9c:	9306      	str	r3, [sp, #24]
 8004f9e:	9b05      	ldr	r3, [sp, #20]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	dd05      	ble.n	8004fb0 <_dtoa_r+0x828>
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 fc3b 	bl	8005824 <__lshift>
 8004fae:	4682      	mov	sl, r0
 8004fb0:	9b06      	ldr	r3, [sp, #24]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	dd05      	ble.n	8004fc2 <_dtoa_r+0x83a>
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4620      	mov	r0, r4
 8004fbc:	f000 fc32 	bl	8005824 <__lshift>
 8004fc0:	4606      	mov	r6, r0
 8004fc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d072      	beq.n	80050ae <_dtoa_r+0x926>
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4650      	mov	r0, sl
 8004fcc:	f000 fc96 	bl	80058fc <__mcmp>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	da6c      	bge.n	80050ae <_dtoa_r+0x926>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	4651      	mov	r1, sl
 8004fd8:	220a      	movs	r2, #10
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 fa74 	bl	80054c8 <__multadd>
 8004fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fe2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004fe6:	4682      	mov	sl, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 81b0 	beq.w	800534e <_dtoa_r+0xbc6>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	220a      	movs	r2, #10
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f000 fa67 	bl	80054c8 <__multadd>
 8004ffa:	9b01      	ldr	r3, [sp, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	4607      	mov	r7, r0
 8005000:	f300 8096 	bgt.w	8005130 <_dtoa_r+0x9a8>
 8005004:	9b07      	ldr	r3, [sp, #28]
 8005006:	2b02      	cmp	r3, #2
 8005008:	dc59      	bgt.n	80050be <_dtoa_r+0x936>
 800500a:	e091      	b.n	8005130 <_dtoa_r+0x9a8>
 800500c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800500e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005012:	e758      	b.n	8004ec6 <_dtoa_r+0x73e>
 8005014:	9b04      	ldr	r3, [sp, #16]
 8005016:	1e5e      	subs	r6, r3, #1
 8005018:	9b08      	ldr	r3, [sp, #32]
 800501a:	42b3      	cmp	r3, r6
 800501c:	bfbf      	itttt	lt
 800501e:	9b08      	ldrlt	r3, [sp, #32]
 8005020:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005022:	9608      	strlt	r6, [sp, #32]
 8005024:	1af3      	sublt	r3, r6, r3
 8005026:	bfb4      	ite	lt
 8005028:	18d2      	addlt	r2, r2, r3
 800502a:	1b9e      	subge	r6, r3, r6
 800502c:	9b04      	ldr	r3, [sp, #16]
 800502e:	bfbc      	itt	lt
 8005030:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005032:	2600      	movlt	r6, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	bfb7      	itett	lt
 8005038:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800503c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005040:	1a9d      	sublt	r5, r3, r2
 8005042:	2300      	movlt	r3, #0
 8005044:	e741      	b.n	8004eca <_dtoa_r+0x742>
 8005046:	9e08      	ldr	r6, [sp, #32]
 8005048:	9d05      	ldr	r5, [sp, #20]
 800504a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800504c:	e748      	b.n	8004ee0 <_dtoa_r+0x758>
 800504e:	9a08      	ldr	r2, [sp, #32]
 8005050:	e770      	b.n	8004f34 <_dtoa_r+0x7ac>
 8005052:	9b07      	ldr	r3, [sp, #28]
 8005054:	2b01      	cmp	r3, #1
 8005056:	dc19      	bgt.n	800508c <_dtoa_r+0x904>
 8005058:	9b02      	ldr	r3, [sp, #8]
 800505a:	b9bb      	cbnz	r3, 800508c <_dtoa_r+0x904>
 800505c:	9b03      	ldr	r3, [sp, #12]
 800505e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005062:	b99b      	cbnz	r3, 800508c <_dtoa_r+0x904>
 8005064:	9b03      	ldr	r3, [sp, #12]
 8005066:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800506a:	0d1b      	lsrs	r3, r3, #20
 800506c:	051b      	lsls	r3, r3, #20
 800506e:	b183      	cbz	r3, 8005092 <_dtoa_r+0x90a>
 8005070:	9b05      	ldr	r3, [sp, #20]
 8005072:	3301      	adds	r3, #1
 8005074:	9305      	str	r3, [sp, #20]
 8005076:	9b06      	ldr	r3, [sp, #24]
 8005078:	3301      	adds	r3, #1
 800507a:	9306      	str	r3, [sp, #24]
 800507c:	f04f 0801 	mov.w	r8, #1
 8005080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005082:	2b00      	cmp	r3, #0
 8005084:	f47f af6f 	bne.w	8004f66 <_dtoa_r+0x7de>
 8005088:	2001      	movs	r0, #1
 800508a:	e774      	b.n	8004f76 <_dtoa_r+0x7ee>
 800508c:	f04f 0800 	mov.w	r8, #0
 8005090:	e7f6      	b.n	8005080 <_dtoa_r+0x8f8>
 8005092:	4698      	mov	r8, r3
 8005094:	e7f4      	b.n	8005080 <_dtoa_r+0x8f8>
 8005096:	d082      	beq.n	8004f9e <_dtoa_r+0x816>
 8005098:	9a05      	ldr	r2, [sp, #20]
 800509a:	331c      	adds	r3, #28
 800509c:	441a      	add	r2, r3
 800509e:	9205      	str	r2, [sp, #20]
 80050a0:	9a06      	ldr	r2, [sp, #24]
 80050a2:	441a      	add	r2, r3
 80050a4:	441d      	add	r5, r3
 80050a6:	9206      	str	r2, [sp, #24]
 80050a8:	e779      	b.n	8004f9e <_dtoa_r+0x816>
 80050aa:	4603      	mov	r3, r0
 80050ac:	e7f4      	b.n	8005098 <_dtoa_r+0x910>
 80050ae:	9b04      	ldr	r3, [sp, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	dc37      	bgt.n	8005124 <_dtoa_r+0x99c>
 80050b4:	9b07      	ldr	r3, [sp, #28]
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	dd34      	ble.n	8005124 <_dtoa_r+0x99c>
 80050ba:	9b04      	ldr	r3, [sp, #16]
 80050bc:	9301      	str	r3, [sp, #4]
 80050be:	9b01      	ldr	r3, [sp, #4]
 80050c0:	b963      	cbnz	r3, 80050dc <_dtoa_r+0x954>
 80050c2:	4631      	mov	r1, r6
 80050c4:	2205      	movs	r2, #5
 80050c6:	4620      	mov	r0, r4
 80050c8:	f000 f9fe 	bl	80054c8 <__multadd>
 80050cc:	4601      	mov	r1, r0
 80050ce:	4606      	mov	r6, r0
 80050d0:	4650      	mov	r0, sl
 80050d2:	f000 fc13 	bl	80058fc <__mcmp>
 80050d6:	2800      	cmp	r0, #0
 80050d8:	f73f adbb 	bgt.w	8004c52 <_dtoa_r+0x4ca>
 80050dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050de:	9d00      	ldr	r5, [sp, #0]
 80050e0:	ea6f 0b03 	mvn.w	fp, r3
 80050e4:	f04f 0800 	mov.w	r8, #0
 80050e8:	4631      	mov	r1, r6
 80050ea:	4620      	mov	r0, r4
 80050ec:	f000 f9ca 	bl	8005484 <_Bfree>
 80050f0:	2f00      	cmp	r7, #0
 80050f2:	f43f aeab 	beq.w	8004e4c <_dtoa_r+0x6c4>
 80050f6:	f1b8 0f00 	cmp.w	r8, #0
 80050fa:	d005      	beq.n	8005108 <_dtoa_r+0x980>
 80050fc:	45b8      	cmp	r8, r7
 80050fe:	d003      	beq.n	8005108 <_dtoa_r+0x980>
 8005100:	4641      	mov	r1, r8
 8005102:	4620      	mov	r0, r4
 8005104:	f000 f9be 	bl	8005484 <_Bfree>
 8005108:	4639      	mov	r1, r7
 800510a:	4620      	mov	r0, r4
 800510c:	f000 f9ba 	bl	8005484 <_Bfree>
 8005110:	e69c      	b.n	8004e4c <_dtoa_r+0x6c4>
 8005112:	2600      	movs	r6, #0
 8005114:	4637      	mov	r7, r6
 8005116:	e7e1      	b.n	80050dc <_dtoa_r+0x954>
 8005118:	46bb      	mov	fp, r7
 800511a:	4637      	mov	r7, r6
 800511c:	e599      	b.n	8004c52 <_dtoa_r+0x4ca>
 800511e:	bf00      	nop
 8005120:	40240000 	.word	0x40240000
 8005124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 80c8 	beq.w	80052bc <_dtoa_r+0xb34>
 800512c:	9b04      	ldr	r3, [sp, #16]
 800512e:	9301      	str	r3, [sp, #4]
 8005130:	2d00      	cmp	r5, #0
 8005132:	dd05      	ble.n	8005140 <_dtoa_r+0x9b8>
 8005134:	4639      	mov	r1, r7
 8005136:	462a      	mov	r2, r5
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fb73 	bl	8005824 <__lshift>
 800513e:	4607      	mov	r7, r0
 8005140:	f1b8 0f00 	cmp.w	r8, #0
 8005144:	d05b      	beq.n	80051fe <_dtoa_r+0xa76>
 8005146:	6879      	ldr	r1, [r7, #4]
 8005148:	4620      	mov	r0, r4
 800514a:	f000 f95b 	bl	8005404 <_Balloc>
 800514e:	4605      	mov	r5, r0
 8005150:	b928      	cbnz	r0, 800515e <_dtoa_r+0x9d6>
 8005152:	4b83      	ldr	r3, [pc, #524]	; (8005360 <_dtoa_r+0xbd8>)
 8005154:	4602      	mov	r2, r0
 8005156:	f240 21ef 	movw	r1, #751	; 0x2ef
 800515a:	f7ff bb2e 	b.w	80047ba <_dtoa_r+0x32>
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	3202      	adds	r2, #2
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	f107 010c 	add.w	r1, r7, #12
 8005168:	300c      	adds	r0, #12
 800516a:	f000 fee7 	bl	8005f3c <memcpy>
 800516e:	2201      	movs	r2, #1
 8005170:	4629      	mov	r1, r5
 8005172:	4620      	mov	r0, r4
 8005174:	f000 fb56 	bl	8005824 <__lshift>
 8005178:	9b00      	ldr	r3, [sp, #0]
 800517a:	3301      	adds	r3, #1
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005182:	4413      	add	r3, r2
 8005184:	9308      	str	r3, [sp, #32]
 8005186:	9b02      	ldr	r3, [sp, #8]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	46b8      	mov	r8, r7
 800518e:	9306      	str	r3, [sp, #24]
 8005190:	4607      	mov	r7, r0
 8005192:	9b04      	ldr	r3, [sp, #16]
 8005194:	4631      	mov	r1, r6
 8005196:	3b01      	subs	r3, #1
 8005198:	4650      	mov	r0, sl
 800519a:	9301      	str	r3, [sp, #4]
 800519c:	f7ff fa69 	bl	8004672 <quorem>
 80051a0:	4641      	mov	r1, r8
 80051a2:	9002      	str	r0, [sp, #8]
 80051a4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80051a8:	4650      	mov	r0, sl
 80051aa:	f000 fba7 	bl	80058fc <__mcmp>
 80051ae:	463a      	mov	r2, r7
 80051b0:	9005      	str	r0, [sp, #20]
 80051b2:	4631      	mov	r1, r6
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 fbbd 	bl	8005934 <__mdiff>
 80051ba:	68c2      	ldr	r2, [r0, #12]
 80051bc:	4605      	mov	r5, r0
 80051be:	bb02      	cbnz	r2, 8005202 <_dtoa_r+0xa7a>
 80051c0:	4601      	mov	r1, r0
 80051c2:	4650      	mov	r0, sl
 80051c4:	f000 fb9a 	bl	80058fc <__mcmp>
 80051c8:	4602      	mov	r2, r0
 80051ca:	4629      	mov	r1, r5
 80051cc:	4620      	mov	r0, r4
 80051ce:	9209      	str	r2, [sp, #36]	; 0x24
 80051d0:	f000 f958 	bl	8005484 <_Bfree>
 80051d4:	9b07      	ldr	r3, [sp, #28]
 80051d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051d8:	9d04      	ldr	r5, [sp, #16]
 80051da:	ea43 0102 	orr.w	r1, r3, r2
 80051de:	9b06      	ldr	r3, [sp, #24]
 80051e0:	4319      	orrs	r1, r3
 80051e2:	d110      	bne.n	8005206 <_dtoa_r+0xa7e>
 80051e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80051e8:	d029      	beq.n	800523e <_dtoa_r+0xab6>
 80051ea:	9b05      	ldr	r3, [sp, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	dd02      	ble.n	80051f6 <_dtoa_r+0xa6e>
 80051f0:	9b02      	ldr	r3, [sp, #8]
 80051f2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80051f6:	9b01      	ldr	r3, [sp, #4]
 80051f8:	f883 9000 	strb.w	r9, [r3]
 80051fc:	e774      	b.n	80050e8 <_dtoa_r+0x960>
 80051fe:	4638      	mov	r0, r7
 8005200:	e7ba      	b.n	8005178 <_dtoa_r+0x9f0>
 8005202:	2201      	movs	r2, #1
 8005204:	e7e1      	b.n	80051ca <_dtoa_r+0xa42>
 8005206:	9b05      	ldr	r3, [sp, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	db04      	blt.n	8005216 <_dtoa_r+0xa8e>
 800520c:	9907      	ldr	r1, [sp, #28]
 800520e:	430b      	orrs	r3, r1
 8005210:	9906      	ldr	r1, [sp, #24]
 8005212:	430b      	orrs	r3, r1
 8005214:	d120      	bne.n	8005258 <_dtoa_r+0xad0>
 8005216:	2a00      	cmp	r2, #0
 8005218:	dded      	ble.n	80051f6 <_dtoa_r+0xa6e>
 800521a:	4651      	mov	r1, sl
 800521c:	2201      	movs	r2, #1
 800521e:	4620      	mov	r0, r4
 8005220:	f000 fb00 	bl	8005824 <__lshift>
 8005224:	4631      	mov	r1, r6
 8005226:	4682      	mov	sl, r0
 8005228:	f000 fb68 	bl	80058fc <__mcmp>
 800522c:	2800      	cmp	r0, #0
 800522e:	dc03      	bgt.n	8005238 <_dtoa_r+0xab0>
 8005230:	d1e1      	bne.n	80051f6 <_dtoa_r+0xa6e>
 8005232:	f019 0f01 	tst.w	r9, #1
 8005236:	d0de      	beq.n	80051f6 <_dtoa_r+0xa6e>
 8005238:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800523c:	d1d8      	bne.n	80051f0 <_dtoa_r+0xa68>
 800523e:	9a01      	ldr	r2, [sp, #4]
 8005240:	2339      	movs	r3, #57	; 0x39
 8005242:	7013      	strb	r3, [r2, #0]
 8005244:	462b      	mov	r3, r5
 8005246:	461d      	mov	r5, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800524e:	2a39      	cmp	r2, #57	; 0x39
 8005250:	d06c      	beq.n	800532c <_dtoa_r+0xba4>
 8005252:	3201      	adds	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e747      	b.n	80050e8 <_dtoa_r+0x960>
 8005258:	2a00      	cmp	r2, #0
 800525a:	dd07      	ble.n	800526c <_dtoa_r+0xae4>
 800525c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005260:	d0ed      	beq.n	800523e <_dtoa_r+0xab6>
 8005262:	9a01      	ldr	r2, [sp, #4]
 8005264:	f109 0301 	add.w	r3, r9, #1
 8005268:	7013      	strb	r3, [r2, #0]
 800526a:	e73d      	b.n	80050e8 <_dtoa_r+0x960>
 800526c:	9b04      	ldr	r3, [sp, #16]
 800526e:	9a08      	ldr	r2, [sp, #32]
 8005270:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005274:	4293      	cmp	r3, r2
 8005276:	d043      	beq.n	8005300 <_dtoa_r+0xb78>
 8005278:	4651      	mov	r1, sl
 800527a:	2300      	movs	r3, #0
 800527c:	220a      	movs	r2, #10
 800527e:	4620      	mov	r0, r4
 8005280:	f000 f922 	bl	80054c8 <__multadd>
 8005284:	45b8      	cmp	r8, r7
 8005286:	4682      	mov	sl, r0
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	f04f 020a 	mov.w	r2, #10
 8005290:	4641      	mov	r1, r8
 8005292:	4620      	mov	r0, r4
 8005294:	d107      	bne.n	80052a6 <_dtoa_r+0xb1e>
 8005296:	f000 f917 	bl	80054c8 <__multadd>
 800529a:	4680      	mov	r8, r0
 800529c:	4607      	mov	r7, r0
 800529e:	9b04      	ldr	r3, [sp, #16]
 80052a0:	3301      	adds	r3, #1
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	e775      	b.n	8005192 <_dtoa_r+0xa0a>
 80052a6:	f000 f90f 	bl	80054c8 <__multadd>
 80052aa:	4639      	mov	r1, r7
 80052ac:	4680      	mov	r8, r0
 80052ae:	2300      	movs	r3, #0
 80052b0:	220a      	movs	r2, #10
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 f908 	bl	80054c8 <__multadd>
 80052b8:	4607      	mov	r7, r0
 80052ba:	e7f0      	b.n	800529e <_dtoa_r+0xb16>
 80052bc:	9b04      	ldr	r3, [sp, #16]
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	9d00      	ldr	r5, [sp, #0]
 80052c2:	4631      	mov	r1, r6
 80052c4:	4650      	mov	r0, sl
 80052c6:	f7ff f9d4 	bl	8004672 <quorem>
 80052ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80052ce:	9b00      	ldr	r3, [sp, #0]
 80052d0:	f805 9b01 	strb.w	r9, [r5], #1
 80052d4:	1aea      	subs	r2, r5, r3
 80052d6:	9b01      	ldr	r3, [sp, #4]
 80052d8:	4293      	cmp	r3, r2
 80052da:	dd07      	ble.n	80052ec <_dtoa_r+0xb64>
 80052dc:	4651      	mov	r1, sl
 80052de:	2300      	movs	r3, #0
 80052e0:	220a      	movs	r2, #10
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 f8f0 	bl	80054c8 <__multadd>
 80052e8:	4682      	mov	sl, r0
 80052ea:	e7ea      	b.n	80052c2 <_dtoa_r+0xb3a>
 80052ec:	9b01      	ldr	r3, [sp, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	bfc8      	it	gt
 80052f2:	461d      	movgt	r5, r3
 80052f4:	9b00      	ldr	r3, [sp, #0]
 80052f6:	bfd8      	it	le
 80052f8:	2501      	movle	r5, #1
 80052fa:	441d      	add	r5, r3
 80052fc:	f04f 0800 	mov.w	r8, #0
 8005300:	4651      	mov	r1, sl
 8005302:	2201      	movs	r2, #1
 8005304:	4620      	mov	r0, r4
 8005306:	f000 fa8d 	bl	8005824 <__lshift>
 800530a:	4631      	mov	r1, r6
 800530c:	4682      	mov	sl, r0
 800530e:	f000 faf5 	bl	80058fc <__mcmp>
 8005312:	2800      	cmp	r0, #0
 8005314:	dc96      	bgt.n	8005244 <_dtoa_r+0xabc>
 8005316:	d102      	bne.n	800531e <_dtoa_r+0xb96>
 8005318:	f019 0f01 	tst.w	r9, #1
 800531c:	d192      	bne.n	8005244 <_dtoa_r+0xabc>
 800531e:	462b      	mov	r3, r5
 8005320:	461d      	mov	r5, r3
 8005322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005326:	2a30      	cmp	r2, #48	; 0x30
 8005328:	d0fa      	beq.n	8005320 <_dtoa_r+0xb98>
 800532a:	e6dd      	b.n	80050e8 <_dtoa_r+0x960>
 800532c:	9a00      	ldr	r2, [sp, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d189      	bne.n	8005246 <_dtoa_r+0xabe>
 8005332:	f10b 0b01 	add.w	fp, fp, #1
 8005336:	2331      	movs	r3, #49	; 0x31
 8005338:	e796      	b.n	8005268 <_dtoa_r+0xae0>
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <_dtoa_r+0xbdc>)
 800533c:	f7ff ba99 	b.w	8004872 <_dtoa_r+0xea>
 8005340:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005342:	2b00      	cmp	r3, #0
 8005344:	f47f aa6d 	bne.w	8004822 <_dtoa_r+0x9a>
 8005348:	4b07      	ldr	r3, [pc, #28]	; (8005368 <_dtoa_r+0xbe0>)
 800534a:	f7ff ba92 	b.w	8004872 <_dtoa_r+0xea>
 800534e:	9b01      	ldr	r3, [sp, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	dcb5      	bgt.n	80052c0 <_dtoa_r+0xb38>
 8005354:	9b07      	ldr	r3, [sp, #28]
 8005356:	2b02      	cmp	r3, #2
 8005358:	f73f aeb1 	bgt.w	80050be <_dtoa_r+0x936>
 800535c:	e7b0      	b.n	80052c0 <_dtoa_r+0xb38>
 800535e:	bf00      	nop
 8005360:	08007563 	.word	0x08007563
 8005364:	080074c3 	.word	0x080074c3
 8005368:	080074e7 	.word	0x080074e7

0800536c <_free_r>:
 800536c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800536e:	2900      	cmp	r1, #0
 8005370:	d044      	beq.n	80053fc <_free_r+0x90>
 8005372:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005376:	9001      	str	r0, [sp, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	f1a1 0404 	sub.w	r4, r1, #4
 800537e:	bfb8      	it	lt
 8005380:	18e4      	addlt	r4, r4, r3
 8005382:	f7fe fb4f 	bl	8003a24 <__malloc_lock>
 8005386:	4a1e      	ldr	r2, [pc, #120]	; (8005400 <_free_r+0x94>)
 8005388:	9801      	ldr	r0, [sp, #4]
 800538a:	6813      	ldr	r3, [r2, #0]
 800538c:	b933      	cbnz	r3, 800539c <_free_r+0x30>
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	6014      	str	r4, [r2, #0]
 8005392:	b003      	add	sp, #12
 8005394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005398:	f7fe bb4a 	b.w	8003a30 <__malloc_unlock>
 800539c:	42a3      	cmp	r3, r4
 800539e:	d908      	bls.n	80053b2 <_free_r+0x46>
 80053a0:	6825      	ldr	r5, [r4, #0]
 80053a2:	1961      	adds	r1, r4, r5
 80053a4:	428b      	cmp	r3, r1
 80053a6:	bf01      	itttt	eq
 80053a8:	6819      	ldreq	r1, [r3, #0]
 80053aa:	685b      	ldreq	r3, [r3, #4]
 80053ac:	1949      	addeq	r1, r1, r5
 80053ae:	6021      	streq	r1, [r4, #0]
 80053b0:	e7ed      	b.n	800538e <_free_r+0x22>
 80053b2:	461a      	mov	r2, r3
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	b10b      	cbz	r3, 80053bc <_free_r+0x50>
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	d9fa      	bls.n	80053b2 <_free_r+0x46>
 80053bc:	6811      	ldr	r1, [r2, #0]
 80053be:	1855      	adds	r5, r2, r1
 80053c0:	42a5      	cmp	r5, r4
 80053c2:	d10b      	bne.n	80053dc <_free_r+0x70>
 80053c4:	6824      	ldr	r4, [r4, #0]
 80053c6:	4421      	add	r1, r4
 80053c8:	1854      	adds	r4, r2, r1
 80053ca:	42a3      	cmp	r3, r4
 80053cc:	6011      	str	r1, [r2, #0]
 80053ce:	d1e0      	bne.n	8005392 <_free_r+0x26>
 80053d0:	681c      	ldr	r4, [r3, #0]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	6053      	str	r3, [r2, #4]
 80053d6:	440c      	add	r4, r1
 80053d8:	6014      	str	r4, [r2, #0]
 80053da:	e7da      	b.n	8005392 <_free_r+0x26>
 80053dc:	d902      	bls.n	80053e4 <_free_r+0x78>
 80053de:	230c      	movs	r3, #12
 80053e0:	6003      	str	r3, [r0, #0]
 80053e2:	e7d6      	b.n	8005392 <_free_r+0x26>
 80053e4:	6825      	ldr	r5, [r4, #0]
 80053e6:	1961      	adds	r1, r4, r5
 80053e8:	428b      	cmp	r3, r1
 80053ea:	bf04      	itt	eq
 80053ec:	6819      	ldreq	r1, [r3, #0]
 80053ee:	685b      	ldreq	r3, [r3, #4]
 80053f0:	6063      	str	r3, [r4, #4]
 80053f2:	bf04      	itt	eq
 80053f4:	1949      	addeq	r1, r1, r5
 80053f6:	6021      	streq	r1, [r4, #0]
 80053f8:	6054      	str	r4, [r2, #4]
 80053fa:	e7ca      	b.n	8005392 <_free_r+0x26>
 80053fc:	b003      	add	sp, #12
 80053fe:	bd30      	pop	{r4, r5, pc}
 8005400:	200002b0 	.word	0x200002b0

08005404 <_Balloc>:
 8005404:	b570      	push	{r4, r5, r6, lr}
 8005406:	69c6      	ldr	r6, [r0, #28]
 8005408:	4604      	mov	r4, r0
 800540a:	460d      	mov	r5, r1
 800540c:	b976      	cbnz	r6, 800542c <_Balloc+0x28>
 800540e:	2010      	movs	r0, #16
 8005410:	f7fe fa58 	bl	80038c4 <malloc>
 8005414:	4602      	mov	r2, r0
 8005416:	61e0      	str	r0, [r4, #28]
 8005418:	b920      	cbnz	r0, 8005424 <_Balloc+0x20>
 800541a:	4b18      	ldr	r3, [pc, #96]	; (800547c <_Balloc+0x78>)
 800541c:	4818      	ldr	r0, [pc, #96]	; (8005480 <_Balloc+0x7c>)
 800541e:	216b      	movs	r1, #107	; 0x6b
 8005420:	f000 fd9a 	bl	8005f58 <__assert_func>
 8005424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005428:	6006      	str	r6, [r0, #0]
 800542a:	60c6      	str	r6, [r0, #12]
 800542c:	69e6      	ldr	r6, [r4, #28]
 800542e:	68f3      	ldr	r3, [r6, #12]
 8005430:	b183      	cbz	r3, 8005454 <_Balloc+0x50>
 8005432:	69e3      	ldr	r3, [r4, #28]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800543a:	b9b8      	cbnz	r0, 800546c <_Balloc+0x68>
 800543c:	2101      	movs	r1, #1
 800543e:	fa01 f605 	lsl.w	r6, r1, r5
 8005442:	1d72      	adds	r2, r6, #5
 8005444:	0092      	lsls	r2, r2, #2
 8005446:	4620      	mov	r0, r4
 8005448:	f000 fda4 	bl	8005f94 <_calloc_r>
 800544c:	b160      	cbz	r0, 8005468 <_Balloc+0x64>
 800544e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005452:	e00e      	b.n	8005472 <_Balloc+0x6e>
 8005454:	2221      	movs	r2, #33	; 0x21
 8005456:	2104      	movs	r1, #4
 8005458:	4620      	mov	r0, r4
 800545a:	f000 fd9b 	bl	8005f94 <_calloc_r>
 800545e:	69e3      	ldr	r3, [r4, #28]
 8005460:	60f0      	str	r0, [r6, #12]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1e4      	bne.n	8005432 <_Balloc+0x2e>
 8005468:	2000      	movs	r0, #0
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	6802      	ldr	r2, [r0, #0]
 800546e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005472:	2300      	movs	r3, #0
 8005474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005478:	e7f7      	b.n	800546a <_Balloc+0x66>
 800547a:	bf00      	nop
 800547c:	080074f4 	.word	0x080074f4
 8005480:	08007574 	.word	0x08007574

08005484 <_Bfree>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	69c6      	ldr	r6, [r0, #28]
 8005488:	4605      	mov	r5, r0
 800548a:	460c      	mov	r4, r1
 800548c:	b976      	cbnz	r6, 80054ac <_Bfree+0x28>
 800548e:	2010      	movs	r0, #16
 8005490:	f7fe fa18 	bl	80038c4 <malloc>
 8005494:	4602      	mov	r2, r0
 8005496:	61e8      	str	r0, [r5, #28]
 8005498:	b920      	cbnz	r0, 80054a4 <_Bfree+0x20>
 800549a:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <_Bfree+0x3c>)
 800549c:	4809      	ldr	r0, [pc, #36]	; (80054c4 <_Bfree+0x40>)
 800549e:	218f      	movs	r1, #143	; 0x8f
 80054a0:	f000 fd5a 	bl	8005f58 <__assert_func>
 80054a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054a8:	6006      	str	r6, [r0, #0]
 80054aa:	60c6      	str	r6, [r0, #12]
 80054ac:	b13c      	cbz	r4, 80054be <_Bfree+0x3a>
 80054ae:	69eb      	ldr	r3, [r5, #28]
 80054b0:	6862      	ldr	r2, [r4, #4]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054b8:	6021      	str	r1, [r4, #0]
 80054ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054be:	bd70      	pop	{r4, r5, r6, pc}
 80054c0:	080074f4 	.word	0x080074f4
 80054c4:	08007574 	.word	0x08007574

080054c8 <__multadd>:
 80054c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054cc:	690d      	ldr	r5, [r1, #16]
 80054ce:	4607      	mov	r7, r0
 80054d0:	460c      	mov	r4, r1
 80054d2:	461e      	mov	r6, r3
 80054d4:	f101 0c14 	add.w	ip, r1, #20
 80054d8:	2000      	movs	r0, #0
 80054da:	f8dc 3000 	ldr.w	r3, [ip]
 80054de:	b299      	uxth	r1, r3
 80054e0:	fb02 6101 	mla	r1, r2, r1, r6
 80054e4:	0c1e      	lsrs	r6, r3, #16
 80054e6:	0c0b      	lsrs	r3, r1, #16
 80054e8:	fb02 3306 	mla	r3, r2, r6, r3
 80054ec:	b289      	uxth	r1, r1
 80054ee:	3001      	adds	r0, #1
 80054f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054f4:	4285      	cmp	r5, r0
 80054f6:	f84c 1b04 	str.w	r1, [ip], #4
 80054fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054fe:	dcec      	bgt.n	80054da <__multadd+0x12>
 8005500:	b30e      	cbz	r6, 8005546 <__multadd+0x7e>
 8005502:	68a3      	ldr	r3, [r4, #8]
 8005504:	42ab      	cmp	r3, r5
 8005506:	dc19      	bgt.n	800553c <__multadd+0x74>
 8005508:	6861      	ldr	r1, [r4, #4]
 800550a:	4638      	mov	r0, r7
 800550c:	3101      	adds	r1, #1
 800550e:	f7ff ff79 	bl	8005404 <_Balloc>
 8005512:	4680      	mov	r8, r0
 8005514:	b928      	cbnz	r0, 8005522 <__multadd+0x5a>
 8005516:	4602      	mov	r2, r0
 8005518:	4b0c      	ldr	r3, [pc, #48]	; (800554c <__multadd+0x84>)
 800551a:	480d      	ldr	r0, [pc, #52]	; (8005550 <__multadd+0x88>)
 800551c:	21ba      	movs	r1, #186	; 0xba
 800551e:	f000 fd1b 	bl	8005f58 <__assert_func>
 8005522:	6922      	ldr	r2, [r4, #16]
 8005524:	3202      	adds	r2, #2
 8005526:	f104 010c 	add.w	r1, r4, #12
 800552a:	0092      	lsls	r2, r2, #2
 800552c:	300c      	adds	r0, #12
 800552e:	f000 fd05 	bl	8005f3c <memcpy>
 8005532:	4621      	mov	r1, r4
 8005534:	4638      	mov	r0, r7
 8005536:	f7ff ffa5 	bl	8005484 <_Bfree>
 800553a:	4644      	mov	r4, r8
 800553c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005540:	3501      	adds	r5, #1
 8005542:	615e      	str	r6, [r3, #20]
 8005544:	6125      	str	r5, [r4, #16]
 8005546:	4620      	mov	r0, r4
 8005548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800554c:	08007563 	.word	0x08007563
 8005550:	08007574 	.word	0x08007574

08005554 <__hi0bits>:
 8005554:	0c03      	lsrs	r3, r0, #16
 8005556:	041b      	lsls	r3, r3, #16
 8005558:	b9d3      	cbnz	r3, 8005590 <__hi0bits+0x3c>
 800555a:	0400      	lsls	r0, r0, #16
 800555c:	2310      	movs	r3, #16
 800555e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005562:	bf04      	itt	eq
 8005564:	0200      	lsleq	r0, r0, #8
 8005566:	3308      	addeq	r3, #8
 8005568:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800556c:	bf04      	itt	eq
 800556e:	0100      	lsleq	r0, r0, #4
 8005570:	3304      	addeq	r3, #4
 8005572:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005576:	bf04      	itt	eq
 8005578:	0080      	lsleq	r0, r0, #2
 800557a:	3302      	addeq	r3, #2
 800557c:	2800      	cmp	r0, #0
 800557e:	db05      	blt.n	800558c <__hi0bits+0x38>
 8005580:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005584:	f103 0301 	add.w	r3, r3, #1
 8005588:	bf08      	it	eq
 800558a:	2320      	moveq	r3, #32
 800558c:	4618      	mov	r0, r3
 800558e:	4770      	bx	lr
 8005590:	2300      	movs	r3, #0
 8005592:	e7e4      	b.n	800555e <__hi0bits+0xa>

08005594 <__lo0bits>:
 8005594:	6803      	ldr	r3, [r0, #0]
 8005596:	f013 0207 	ands.w	r2, r3, #7
 800559a:	d00c      	beq.n	80055b6 <__lo0bits+0x22>
 800559c:	07d9      	lsls	r1, r3, #31
 800559e:	d422      	bmi.n	80055e6 <__lo0bits+0x52>
 80055a0:	079a      	lsls	r2, r3, #30
 80055a2:	bf49      	itett	mi
 80055a4:	085b      	lsrmi	r3, r3, #1
 80055a6:	089b      	lsrpl	r3, r3, #2
 80055a8:	6003      	strmi	r3, [r0, #0]
 80055aa:	2201      	movmi	r2, #1
 80055ac:	bf5c      	itt	pl
 80055ae:	6003      	strpl	r3, [r0, #0]
 80055b0:	2202      	movpl	r2, #2
 80055b2:	4610      	mov	r0, r2
 80055b4:	4770      	bx	lr
 80055b6:	b299      	uxth	r1, r3
 80055b8:	b909      	cbnz	r1, 80055be <__lo0bits+0x2a>
 80055ba:	0c1b      	lsrs	r3, r3, #16
 80055bc:	2210      	movs	r2, #16
 80055be:	b2d9      	uxtb	r1, r3
 80055c0:	b909      	cbnz	r1, 80055c6 <__lo0bits+0x32>
 80055c2:	3208      	adds	r2, #8
 80055c4:	0a1b      	lsrs	r3, r3, #8
 80055c6:	0719      	lsls	r1, r3, #28
 80055c8:	bf04      	itt	eq
 80055ca:	091b      	lsreq	r3, r3, #4
 80055cc:	3204      	addeq	r2, #4
 80055ce:	0799      	lsls	r1, r3, #30
 80055d0:	bf04      	itt	eq
 80055d2:	089b      	lsreq	r3, r3, #2
 80055d4:	3202      	addeq	r2, #2
 80055d6:	07d9      	lsls	r1, r3, #31
 80055d8:	d403      	bmi.n	80055e2 <__lo0bits+0x4e>
 80055da:	085b      	lsrs	r3, r3, #1
 80055dc:	f102 0201 	add.w	r2, r2, #1
 80055e0:	d003      	beq.n	80055ea <__lo0bits+0x56>
 80055e2:	6003      	str	r3, [r0, #0]
 80055e4:	e7e5      	b.n	80055b2 <__lo0bits+0x1e>
 80055e6:	2200      	movs	r2, #0
 80055e8:	e7e3      	b.n	80055b2 <__lo0bits+0x1e>
 80055ea:	2220      	movs	r2, #32
 80055ec:	e7e1      	b.n	80055b2 <__lo0bits+0x1e>
	...

080055f0 <__i2b>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	460c      	mov	r4, r1
 80055f4:	2101      	movs	r1, #1
 80055f6:	f7ff ff05 	bl	8005404 <_Balloc>
 80055fa:	4602      	mov	r2, r0
 80055fc:	b928      	cbnz	r0, 800560a <__i2b+0x1a>
 80055fe:	4b05      	ldr	r3, [pc, #20]	; (8005614 <__i2b+0x24>)
 8005600:	4805      	ldr	r0, [pc, #20]	; (8005618 <__i2b+0x28>)
 8005602:	f240 1145 	movw	r1, #325	; 0x145
 8005606:	f000 fca7 	bl	8005f58 <__assert_func>
 800560a:	2301      	movs	r3, #1
 800560c:	6144      	str	r4, [r0, #20]
 800560e:	6103      	str	r3, [r0, #16]
 8005610:	bd10      	pop	{r4, pc}
 8005612:	bf00      	nop
 8005614:	08007563 	.word	0x08007563
 8005618:	08007574 	.word	0x08007574

0800561c <__multiply>:
 800561c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005620:	4691      	mov	r9, r2
 8005622:	690a      	ldr	r2, [r1, #16]
 8005624:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005628:	429a      	cmp	r2, r3
 800562a:	bfb8      	it	lt
 800562c:	460b      	movlt	r3, r1
 800562e:	460c      	mov	r4, r1
 8005630:	bfbc      	itt	lt
 8005632:	464c      	movlt	r4, r9
 8005634:	4699      	movlt	r9, r3
 8005636:	6927      	ldr	r7, [r4, #16]
 8005638:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	6861      	ldr	r1, [r4, #4]
 8005640:	eb07 060a 	add.w	r6, r7, sl
 8005644:	42b3      	cmp	r3, r6
 8005646:	b085      	sub	sp, #20
 8005648:	bfb8      	it	lt
 800564a:	3101      	addlt	r1, #1
 800564c:	f7ff feda 	bl	8005404 <_Balloc>
 8005650:	b930      	cbnz	r0, 8005660 <__multiply+0x44>
 8005652:	4602      	mov	r2, r0
 8005654:	4b44      	ldr	r3, [pc, #272]	; (8005768 <__multiply+0x14c>)
 8005656:	4845      	ldr	r0, [pc, #276]	; (800576c <__multiply+0x150>)
 8005658:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800565c:	f000 fc7c 	bl	8005f58 <__assert_func>
 8005660:	f100 0514 	add.w	r5, r0, #20
 8005664:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005668:	462b      	mov	r3, r5
 800566a:	2200      	movs	r2, #0
 800566c:	4543      	cmp	r3, r8
 800566e:	d321      	bcc.n	80056b4 <__multiply+0x98>
 8005670:	f104 0314 	add.w	r3, r4, #20
 8005674:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005678:	f109 0314 	add.w	r3, r9, #20
 800567c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005680:	9202      	str	r2, [sp, #8]
 8005682:	1b3a      	subs	r2, r7, r4
 8005684:	3a15      	subs	r2, #21
 8005686:	f022 0203 	bic.w	r2, r2, #3
 800568a:	3204      	adds	r2, #4
 800568c:	f104 0115 	add.w	r1, r4, #21
 8005690:	428f      	cmp	r7, r1
 8005692:	bf38      	it	cc
 8005694:	2204      	movcc	r2, #4
 8005696:	9201      	str	r2, [sp, #4]
 8005698:	9a02      	ldr	r2, [sp, #8]
 800569a:	9303      	str	r3, [sp, #12]
 800569c:	429a      	cmp	r2, r3
 800569e:	d80c      	bhi.n	80056ba <__multiply+0x9e>
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	dd03      	ble.n	80056ac <__multiply+0x90>
 80056a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d05b      	beq.n	8005764 <__multiply+0x148>
 80056ac:	6106      	str	r6, [r0, #16]
 80056ae:	b005      	add	sp, #20
 80056b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b4:	f843 2b04 	str.w	r2, [r3], #4
 80056b8:	e7d8      	b.n	800566c <__multiply+0x50>
 80056ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80056be:	f1ba 0f00 	cmp.w	sl, #0
 80056c2:	d024      	beq.n	800570e <__multiply+0xf2>
 80056c4:	f104 0e14 	add.w	lr, r4, #20
 80056c8:	46a9      	mov	r9, r5
 80056ca:	f04f 0c00 	mov.w	ip, #0
 80056ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80056d2:	f8d9 1000 	ldr.w	r1, [r9]
 80056d6:	fa1f fb82 	uxth.w	fp, r2
 80056da:	b289      	uxth	r1, r1
 80056dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80056e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80056e4:	f8d9 2000 	ldr.w	r2, [r9]
 80056e8:	4461      	add	r1, ip
 80056ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80056ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80056f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80056f6:	b289      	uxth	r1, r1
 80056f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80056fc:	4577      	cmp	r7, lr
 80056fe:	f849 1b04 	str.w	r1, [r9], #4
 8005702:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005706:	d8e2      	bhi.n	80056ce <__multiply+0xb2>
 8005708:	9a01      	ldr	r2, [sp, #4]
 800570a:	f845 c002 	str.w	ip, [r5, r2]
 800570e:	9a03      	ldr	r2, [sp, #12]
 8005710:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005714:	3304      	adds	r3, #4
 8005716:	f1b9 0f00 	cmp.w	r9, #0
 800571a:	d021      	beq.n	8005760 <__multiply+0x144>
 800571c:	6829      	ldr	r1, [r5, #0]
 800571e:	f104 0c14 	add.w	ip, r4, #20
 8005722:	46ae      	mov	lr, r5
 8005724:	f04f 0a00 	mov.w	sl, #0
 8005728:	f8bc b000 	ldrh.w	fp, [ip]
 800572c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005730:	fb09 220b 	mla	r2, r9, fp, r2
 8005734:	4452      	add	r2, sl
 8005736:	b289      	uxth	r1, r1
 8005738:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800573c:	f84e 1b04 	str.w	r1, [lr], #4
 8005740:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005744:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005748:	f8be 1000 	ldrh.w	r1, [lr]
 800574c:	fb09 110a 	mla	r1, r9, sl, r1
 8005750:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005754:	4567      	cmp	r7, ip
 8005756:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800575a:	d8e5      	bhi.n	8005728 <__multiply+0x10c>
 800575c:	9a01      	ldr	r2, [sp, #4]
 800575e:	50a9      	str	r1, [r5, r2]
 8005760:	3504      	adds	r5, #4
 8005762:	e799      	b.n	8005698 <__multiply+0x7c>
 8005764:	3e01      	subs	r6, #1
 8005766:	e79b      	b.n	80056a0 <__multiply+0x84>
 8005768:	08007563 	.word	0x08007563
 800576c:	08007574 	.word	0x08007574

08005770 <__pow5mult>:
 8005770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005774:	4615      	mov	r5, r2
 8005776:	f012 0203 	ands.w	r2, r2, #3
 800577a:	4606      	mov	r6, r0
 800577c:	460f      	mov	r7, r1
 800577e:	d007      	beq.n	8005790 <__pow5mult+0x20>
 8005780:	4c25      	ldr	r4, [pc, #148]	; (8005818 <__pow5mult+0xa8>)
 8005782:	3a01      	subs	r2, #1
 8005784:	2300      	movs	r3, #0
 8005786:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800578a:	f7ff fe9d 	bl	80054c8 <__multadd>
 800578e:	4607      	mov	r7, r0
 8005790:	10ad      	asrs	r5, r5, #2
 8005792:	d03d      	beq.n	8005810 <__pow5mult+0xa0>
 8005794:	69f4      	ldr	r4, [r6, #28]
 8005796:	b97c      	cbnz	r4, 80057b8 <__pow5mult+0x48>
 8005798:	2010      	movs	r0, #16
 800579a:	f7fe f893 	bl	80038c4 <malloc>
 800579e:	4602      	mov	r2, r0
 80057a0:	61f0      	str	r0, [r6, #28]
 80057a2:	b928      	cbnz	r0, 80057b0 <__pow5mult+0x40>
 80057a4:	4b1d      	ldr	r3, [pc, #116]	; (800581c <__pow5mult+0xac>)
 80057a6:	481e      	ldr	r0, [pc, #120]	; (8005820 <__pow5mult+0xb0>)
 80057a8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80057ac:	f000 fbd4 	bl	8005f58 <__assert_func>
 80057b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057b4:	6004      	str	r4, [r0, #0]
 80057b6:	60c4      	str	r4, [r0, #12]
 80057b8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80057bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80057c0:	b94c      	cbnz	r4, 80057d6 <__pow5mult+0x66>
 80057c2:	f240 2171 	movw	r1, #625	; 0x271
 80057c6:	4630      	mov	r0, r6
 80057c8:	f7ff ff12 	bl	80055f0 <__i2b>
 80057cc:	2300      	movs	r3, #0
 80057ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80057d2:	4604      	mov	r4, r0
 80057d4:	6003      	str	r3, [r0, #0]
 80057d6:	f04f 0900 	mov.w	r9, #0
 80057da:	07eb      	lsls	r3, r5, #31
 80057dc:	d50a      	bpl.n	80057f4 <__pow5mult+0x84>
 80057de:	4639      	mov	r1, r7
 80057e0:	4622      	mov	r2, r4
 80057e2:	4630      	mov	r0, r6
 80057e4:	f7ff ff1a 	bl	800561c <__multiply>
 80057e8:	4639      	mov	r1, r7
 80057ea:	4680      	mov	r8, r0
 80057ec:	4630      	mov	r0, r6
 80057ee:	f7ff fe49 	bl	8005484 <_Bfree>
 80057f2:	4647      	mov	r7, r8
 80057f4:	106d      	asrs	r5, r5, #1
 80057f6:	d00b      	beq.n	8005810 <__pow5mult+0xa0>
 80057f8:	6820      	ldr	r0, [r4, #0]
 80057fa:	b938      	cbnz	r0, 800580c <__pow5mult+0x9c>
 80057fc:	4622      	mov	r2, r4
 80057fe:	4621      	mov	r1, r4
 8005800:	4630      	mov	r0, r6
 8005802:	f7ff ff0b 	bl	800561c <__multiply>
 8005806:	6020      	str	r0, [r4, #0]
 8005808:	f8c0 9000 	str.w	r9, [r0]
 800580c:	4604      	mov	r4, r0
 800580e:	e7e4      	b.n	80057da <__pow5mult+0x6a>
 8005810:	4638      	mov	r0, r7
 8005812:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005816:	bf00      	nop
 8005818:	080076c0 	.word	0x080076c0
 800581c:	080074f4 	.word	0x080074f4
 8005820:	08007574 	.word	0x08007574

08005824 <__lshift>:
 8005824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005828:	460c      	mov	r4, r1
 800582a:	6849      	ldr	r1, [r1, #4]
 800582c:	6923      	ldr	r3, [r4, #16]
 800582e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005832:	68a3      	ldr	r3, [r4, #8]
 8005834:	4607      	mov	r7, r0
 8005836:	4691      	mov	r9, r2
 8005838:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800583c:	f108 0601 	add.w	r6, r8, #1
 8005840:	42b3      	cmp	r3, r6
 8005842:	db0b      	blt.n	800585c <__lshift+0x38>
 8005844:	4638      	mov	r0, r7
 8005846:	f7ff fddd 	bl	8005404 <_Balloc>
 800584a:	4605      	mov	r5, r0
 800584c:	b948      	cbnz	r0, 8005862 <__lshift+0x3e>
 800584e:	4602      	mov	r2, r0
 8005850:	4b28      	ldr	r3, [pc, #160]	; (80058f4 <__lshift+0xd0>)
 8005852:	4829      	ldr	r0, [pc, #164]	; (80058f8 <__lshift+0xd4>)
 8005854:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005858:	f000 fb7e 	bl	8005f58 <__assert_func>
 800585c:	3101      	adds	r1, #1
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	e7ee      	b.n	8005840 <__lshift+0x1c>
 8005862:	2300      	movs	r3, #0
 8005864:	f100 0114 	add.w	r1, r0, #20
 8005868:	f100 0210 	add.w	r2, r0, #16
 800586c:	4618      	mov	r0, r3
 800586e:	4553      	cmp	r3, sl
 8005870:	db33      	blt.n	80058da <__lshift+0xb6>
 8005872:	6920      	ldr	r0, [r4, #16]
 8005874:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005878:	f104 0314 	add.w	r3, r4, #20
 800587c:	f019 091f 	ands.w	r9, r9, #31
 8005880:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005884:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005888:	d02b      	beq.n	80058e2 <__lshift+0xbe>
 800588a:	f1c9 0e20 	rsb	lr, r9, #32
 800588e:	468a      	mov	sl, r1
 8005890:	2200      	movs	r2, #0
 8005892:	6818      	ldr	r0, [r3, #0]
 8005894:	fa00 f009 	lsl.w	r0, r0, r9
 8005898:	4310      	orrs	r0, r2
 800589a:	f84a 0b04 	str.w	r0, [sl], #4
 800589e:	f853 2b04 	ldr.w	r2, [r3], #4
 80058a2:	459c      	cmp	ip, r3
 80058a4:	fa22 f20e 	lsr.w	r2, r2, lr
 80058a8:	d8f3      	bhi.n	8005892 <__lshift+0x6e>
 80058aa:	ebac 0304 	sub.w	r3, ip, r4
 80058ae:	3b15      	subs	r3, #21
 80058b0:	f023 0303 	bic.w	r3, r3, #3
 80058b4:	3304      	adds	r3, #4
 80058b6:	f104 0015 	add.w	r0, r4, #21
 80058ba:	4584      	cmp	ip, r0
 80058bc:	bf38      	it	cc
 80058be:	2304      	movcc	r3, #4
 80058c0:	50ca      	str	r2, [r1, r3]
 80058c2:	b10a      	cbz	r2, 80058c8 <__lshift+0xa4>
 80058c4:	f108 0602 	add.w	r6, r8, #2
 80058c8:	3e01      	subs	r6, #1
 80058ca:	4638      	mov	r0, r7
 80058cc:	612e      	str	r6, [r5, #16]
 80058ce:	4621      	mov	r1, r4
 80058d0:	f7ff fdd8 	bl	8005484 <_Bfree>
 80058d4:	4628      	mov	r0, r5
 80058d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058da:	f842 0f04 	str.w	r0, [r2, #4]!
 80058de:	3301      	adds	r3, #1
 80058e0:	e7c5      	b.n	800586e <__lshift+0x4a>
 80058e2:	3904      	subs	r1, #4
 80058e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e8:	f841 2f04 	str.w	r2, [r1, #4]!
 80058ec:	459c      	cmp	ip, r3
 80058ee:	d8f9      	bhi.n	80058e4 <__lshift+0xc0>
 80058f0:	e7ea      	b.n	80058c8 <__lshift+0xa4>
 80058f2:	bf00      	nop
 80058f4:	08007563 	.word	0x08007563
 80058f8:	08007574 	.word	0x08007574

080058fc <__mcmp>:
 80058fc:	b530      	push	{r4, r5, lr}
 80058fe:	6902      	ldr	r2, [r0, #16]
 8005900:	690c      	ldr	r4, [r1, #16]
 8005902:	1b12      	subs	r2, r2, r4
 8005904:	d10e      	bne.n	8005924 <__mcmp+0x28>
 8005906:	f100 0314 	add.w	r3, r0, #20
 800590a:	3114      	adds	r1, #20
 800590c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005910:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005914:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005918:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800591c:	42a5      	cmp	r5, r4
 800591e:	d003      	beq.n	8005928 <__mcmp+0x2c>
 8005920:	d305      	bcc.n	800592e <__mcmp+0x32>
 8005922:	2201      	movs	r2, #1
 8005924:	4610      	mov	r0, r2
 8005926:	bd30      	pop	{r4, r5, pc}
 8005928:	4283      	cmp	r3, r0
 800592a:	d3f3      	bcc.n	8005914 <__mcmp+0x18>
 800592c:	e7fa      	b.n	8005924 <__mcmp+0x28>
 800592e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005932:	e7f7      	b.n	8005924 <__mcmp+0x28>

08005934 <__mdiff>:
 8005934:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005938:	460c      	mov	r4, r1
 800593a:	4606      	mov	r6, r0
 800593c:	4611      	mov	r1, r2
 800593e:	4620      	mov	r0, r4
 8005940:	4690      	mov	r8, r2
 8005942:	f7ff ffdb 	bl	80058fc <__mcmp>
 8005946:	1e05      	subs	r5, r0, #0
 8005948:	d110      	bne.n	800596c <__mdiff+0x38>
 800594a:	4629      	mov	r1, r5
 800594c:	4630      	mov	r0, r6
 800594e:	f7ff fd59 	bl	8005404 <_Balloc>
 8005952:	b930      	cbnz	r0, 8005962 <__mdiff+0x2e>
 8005954:	4b3a      	ldr	r3, [pc, #232]	; (8005a40 <__mdiff+0x10c>)
 8005956:	4602      	mov	r2, r0
 8005958:	f240 2137 	movw	r1, #567	; 0x237
 800595c:	4839      	ldr	r0, [pc, #228]	; (8005a44 <__mdiff+0x110>)
 800595e:	f000 fafb 	bl	8005f58 <__assert_func>
 8005962:	2301      	movs	r3, #1
 8005964:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005968:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596c:	bfa4      	itt	ge
 800596e:	4643      	movge	r3, r8
 8005970:	46a0      	movge	r8, r4
 8005972:	4630      	mov	r0, r6
 8005974:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005978:	bfa6      	itte	ge
 800597a:	461c      	movge	r4, r3
 800597c:	2500      	movge	r5, #0
 800597e:	2501      	movlt	r5, #1
 8005980:	f7ff fd40 	bl	8005404 <_Balloc>
 8005984:	b920      	cbnz	r0, 8005990 <__mdiff+0x5c>
 8005986:	4b2e      	ldr	r3, [pc, #184]	; (8005a40 <__mdiff+0x10c>)
 8005988:	4602      	mov	r2, r0
 800598a:	f240 2145 	movw	r1, #581	; 0x245
 800598e:	e7e5      	b.n	800595c <__mdiff+0x28>
 8005990:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005994:	6926      	ldr	r6, [r4, #16]
 8005996:	60c5      	str	r5, [r0, #12]
 8005998:	f104 0914 	add.w	r9, r4, #20
 800599c:	f108 0514 	add.w	r5, r8, #20
 80059a0:	f100 0e14 	add.w	lr, r0, #20
 80059a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80059a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80059ac:	f108 0210 	add.w	r2, r8, #16
 80059b0:	46f2      	mov	sl, lr
 80059b2:	2100      	movs	r1, #0
 80059b4:	f859 3b04 	ldr.w	r3, [r9], #4
 80059b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80059bc:	fa11 f88b 	uxtah	r8, r1, fp
 80059c0:	b299      	uxth	r1, r3
 80059c2:	0c1b      	lsrs	r3, r3, #16
 80059c4:	eba8 0801 	sub.w	r8, r8, r1
 80059c8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80059cc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80059d0:	fa1f f888 	uxth.w	r8, r8
 80059d4:	1419      	asrs	r1, r3, #16
 80059d6:	454e      	cmp	r6, r9
 80059d8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80059dc:	f84a 3b04 	str.w	r3, [sl], #4
 80059e0:	d8e8      	bhi.n	80059b4 <__mdiff+0x80>
 80059e2:	1b33      	subs	r3, r6, r4
 80059e4:	3b15      	subs	r3, #21
 80059e6:	f023 0303 	bic.w	r3, r3, #3
 80059ea:	3304      	adds	r3, #4
 80059ec:	3415      	adds	r4, #21
 80059ee:	42a6      	cmp	r6, r4
 80059f0:	bf38      	it	cc
 80059f2:	2304      	movcc	r3, #4
 80059f4:	441d      	add	r5, r3
 80059f6:	4473      	add	r3, lr
 80059f8:	469e      	mov	lr, r3
 80059fa:	462e      	mov	r6, r5
 80059fc:	4566      	cmp	r6, ip
 80059fe:	d30e      	bcc.n	8005a1e <__mdiff+0xea>
 8005a00:	f10c 0203 	add.w	r2, ip, #3
 8005a04:	1b52      	subs	r2, r2, r5
 8005a06:	f022 0203 	bic.w	r2, r2, #3
 8005a0a:	3d03      	subs	r5, #3
 8005a0c:	45ac      	cmp	ip, r5
 8005a0e:	bf38      	it	cc
 8005a10:	2200      	movcc	r2, #0
 8005a12:	4413      	add	r3, r2
 8005a14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005a18:	b17a      	cbz	r2, 8005a3a <__mdiff+0x106>
 8005a1a:	6107      	str	r7, [r0, #16]
 8005a1c:	e7a4      	b.n	8005968 <__mdiff+0x34>
 8005a1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005a22:	fa11 f288 	uxtah	r2, r1, r8
 8005a26:	1414      	asrs	r4, r2, #16
 8005a28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005a32:	f84e 2b04 	str.w	r2, [lr], #4
 8005a36:	1421      	asrs	r1, r4, #16
 8005a38:	e7e0      	b.n	80059fc <__mdiff+0xc8>
 8005a3a:	3f01      	subs	r7, #1
 8005a3c:	e7ea      	b.n	8005a14 <__mdiff+0xe0>
 8005a3e:	bf00      	nop
 8005a40:	08007563 	.word	0x08007563
 8005a44:	08007574 	.word	0x08007574

08005a48 <__d2b>:
 8005a48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a4c:	460f      	mov	r7, r1
 8005a4e:	2101      	movs	r1, #1
 8005a50:	ec59 8b10 	vmov	r8, r9, d0
 8005a54:	4616      	mov	r6, r2
 8005a56:	f7ff fcd5 	bl	8005404 <_Balloc>
 8005a5a:	4604      	mov	r4, r0
 8005a5c:	b930      	cbnz	r0, 8005a6c <__d2b+0x24>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	4b24      	ldr	r3, [pc, #144]	; (8005af4 <__d2b+0xac>)
 8005a62:	4825      	ldr	r0, [pc, #148]	; (8005af8 <__d2b+0xb0>)
 8005a64:	f240 310f 	movw	r1, #783	; 0x30f
 8005a68:	f000 fa76 	bl	8005f58 <__assert_func>
 8005a6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005a70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a74:	bb2d      	cbnz	r5, 8005ac2 <__d2b+0x7a>
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	f1b8 0300 	subs.w	r3, r8, #0
 8005a7c:	d026      	beq.n	8005acc <__d2b+0x84>
 8005a7e:	4668      	mov	r0, sp
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	f7ff fd87 	bl	8005594 <__lo0bits>
 8005a86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005a8a:	b1e8      	cbz	r0, 8005ac8 <__d2b+0x80>
 8005a8c:	f1c0 0320 	rsb	r3, r0, #32
 8005a90:	fa02 f303 	lsl.w	r3, r2, r3
 8005a94:	430b      	orrs	r3, r1
 8005a96:	40c2      	lsrs	r2, r0
 8005a98:	6163      	str	r3, [r4, #20]
 8005a9a:	9201      	str	r2, [sp, #4]
 8005a9c:	9b01      	ldr	r3, [sp, #4]
 8005a9e:	61a3      	str	r3, [r4, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bf14      	ite	ne
 8005aa4:	2202      	movne	r2, #2
 8005aa6:	2201      	moveq	r2, #1
 8005aa8:	6122      	str	r2, [r4, #16]
 8005aaa:	b1bd      	cbz	r5, 8005adc <__d2b+0x94>
 8005aac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005ab0:	4405      	add	r5, r0
 8005ab2:	603d      	str	r5, [r7, #0]
 8005ab4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005ab8:	6030      	str	r0, [r6, #0]
 8005aba:	4620      	mov	r0, r4
 8005abc:	b003      	add	sp, #12
 8005abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ac6:	e7d6      	b.n	8005a76 <__d2b+0x2e>
 8005ac8:	6161      	str	r1, [r4, #20]
 8005aca:	e7e7      	b.n	8005a9c <__d2b+0x54>
 8005acc:	a801      	add	r0, sp, #4
 8005ace:	f7ff fd61 	bl	8005594 <__lo0bits>
 8005ad2:	9b01      	ldr	r3, [sp, #4]
 8005ad4:	6163      	str	r3, [r4, #20]
 8005ad6:	3020      	adds	r0, #32
 8005ad8:	2201      	movs	r2, #1
 8005ada:	e7e5      	b.n	8005aa8 <__d2b+0x60>
 8005adc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ae0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ae4:	6038      	str	r0, [r7, #0]
 8005ae6:	6918      	ldr	r0, [r3, #16]
 8005ae8:	f7ff fd34 	bl	8005554 <__hi0bits>
 8005aec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005af0:	e7e2      	b.n	8005ab8 <__d2b+0x70>
 8005af2:	bf00      	nop
 8005af4:	08007563 	.word	0x08007563
 8005af8:	08007574 	.word	0x08007574

08005afc <__ssputs_r>:
 8005afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	688e      	ldr	r6, [r1, #8]
 8005b02:	461f      	mov	r7, r3
 8005b04:	42be      	cmp	r6, r7
 8005b06:	680b      	ldr	r3, [r1, #0]
 8005b08:	4682      	mov	sl, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	4690      	mov	r8, r2
 8005b0e:	d82c      	bhi.n	8005b6a <__ssputs_r+0x6e>
 8005b10:	898a      	ldrh	r2, [r1, #12]
 8005b12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b16:	d026      	beq.n	8005b66 <__ssputs_r+0x6a>
 8005b18:	6965      	ldr	r5, [r4, #20]
 8005b1a:	6909      	ldr	r1, [r1, #16]
 8005b1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b20:	eba3 0901 	sub.w	r9, r3, r1
 8005b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b28:	1c7b      	adds	r3, r7, #1
 8005b2a:	444b      	add	r3, r9
 8005b2c:	106d      	asrs	r5, r5, #1
 8005b2e:	429d      	cmp	r5, r3
 8005b30:	bf38      	it	cc
 8005b32:	461d      	movcc	r5, r3
 8005b34:	0553      	lsls	r3, r2, #21
 8005b36:	d527      	bpl.n	8005b88 <__ssputs_r+0x8c>
 8005b38:	4629      	mov	r1, r5
 8005b3a:	f7fd fef3 	bl	8003924 <_malloc_r>
 8005b3e:	4606      	mov	r6, r0
 8005b40:	b360      	cbz	r0, 8005b9c <__ssputs_r+0xa0>
 8005b42:	6921      	ldr	r1, [r4, #16]
 8005b44:	464a      	mov	r2, r9
 8005b46:	f000 f9f9 	bl	8005f3c <memcpy>
 8005b4a:	89a3      	ldrh	r3, [r4, #12]
 8005b4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	6126      	str	r6, [r4, #16]
 8005b58:	6165      	str	r5, [r4, #20]
 8005b5a:	444e      	add	r6, r9
 8005b5c:	eba5 0509 	sub.w	r5, r5, r9
 8005b60:	6026      	str	r6, [r4, #0]
 8005b62:	60a5      	str	r5, [r4, #8]
 8005b64:	463e      	mov	r6, r7
 8005b66:	42be      	cmp	r6, r7
 8005b68:	d900      	bls.n	8005b6c <__ssputs_r+0x70>
 8005b6a:	463e      	mov	r6, r7
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	4632      	mov	r2, r6
 8005b70:	4641      	mov	r1, r8
 8005b72:	f000 f9c9 	bl	8005f08 <memmove>
 8005b76:	68a3      	ldr	r3, [r4, #8]
 8005b78:	1b9b      	subs	r3, r3, r6
 8005b7a:	60a3      	str	r3, [r4, #8]
 8005b7c:	6823      	ldr	r3, [r4, #0]
 8005b7e:	4433      	add	r3, r6
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	2000      	movs	r0, #0
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	462a      	mov	r2, r5
 8005b8a:	f000 fa2b 	bl	8005fe4 <_realloc_r>
 8005b8e:	4606      	mov	r6, r0
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d1e0      	bne.n	8005b56 <__ssputs_r+0x5a>
 8005b94:	6921      	ldr	r1, [r4, #16]
 8005b96:	4650      	mov	r0, sl
 8005b98:	f7ff fbe8 	bl	800536c <_free_r>
 8005b9c:	230c      	movs	r3, #12
 8005b9e:	f8ca 3000 	str.w	r3, [sl]
 8005ba2:	89a3      	ldrh	r3, [r4, #12]
 8005ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ba8:	81a3      	strh	r3, [r4, #12]
 8005baa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bae:	e7e9      	b.n	8005b84 <__ssputs_r+0x88>

08005bb0 <_svfiprintf_r>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	4698      	mov	r8, r3
 8005bb6:	898b      	ldrh	r3, [r1, #12]
 8005bb8:	061b      	lsls	r3, r3, #24
 8005bba:	b09d      	sub	sp, #116	; 0x74
 8005bbc:	4607      	mov	r7, r0
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	4614      	mov	r4, r2
 8005bc2:	d50e      	bpl.n	8005be2 <_svfiprintf_r+0x32>
 8005bc4:	690b      	ldr	r3, [r1, #16]
 8005bc6:	b963      	cbnz	r3, 8005be2 <_svfiprintf_r+0x32>
 8005bc8:	2140      	movs	r1, #64	; 0x40
 8005bca:	f7fd feab 	bl	8003924 <_malloc_r>
 8005bce:	6028      	str	r0, [r5, #0]
 8005bd0:	6128      	str	r0, [r5, #16]
 8005bd2:	b920      	cbnz	r0, 8005bde <_svfiprintf_r+0x2e>
 8005bd4:	230c      	movs	r3, #12
 8005bd6:	603b      	str	r3, [r7, #0]
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bdc:	e0d0      	b.n	8005d80 <_svfiprintf_r+0x1d0>
 8005bde:	2340      	movs	r3, #64	; 0x40
 8005be0:	616b      	str	r3, [r5, #20]
 8005be2:	2300      	movs	r3, #0
 8005be4:	9309      	str	r3, [sp, #36]	; 0x24
 8005be6:	2320      	movs	r3, #32
 8005be8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bec:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bf0:	2330      	movs	r3, #48	; 0x30
 8005bf2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d98 <_svfiprintf_r+0x1e8>
 8005bf6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bfa:	f04f 0901 	mov.w	r9, #1
 8005bfe:	4623      	mov	r3, r4
 8005c00:	469a      	mov	sl, r3
 8005c02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c06:	b10a      	cbz	r2, 8005c0c <_svfiprintf_r+0x5c>
 8005c08:	2a25      	cmp	r2, #37	; 0x25
 8005c0a:	d1f9      	bne.n	8005c00 <_svfiprintf_r+0x50>
 8005c0c:	ebba 0b04 	subs.w	fp, sl, r4
 8005c10:	d00b      	beq.n	8005c2a <_svfiprintf_r+0x7a>
 8005c12:	465b      	mov	r3, fp
 8005c14:	4622      	mov	r2, r4
 8005c16:	4629      	mov	r1, r5
 8005c18:	4638      	mov	r0, r7
 8005c1a:	f7ff ff6f 	bl	8005afc <__ssputs_r>
 8005c1e:	3001      	adds	r0, #1
 8005c20:	f000 80a9 	beq.w	8005d76 <_svfiprintf_r+0x1c6>
 8005c24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c26:	445a      	add	r2, fp
 8005c28:	9209      	str	r2, [sp, #36]	; 0x24
 8005c2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 80a1 	beq.w	8005d76 <_svfiprintf_r+0x1c6>
 8005c34:	2300      	movs	r3, #0
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c3e:	f10a 0a01 	add.w	sl, sl, #1
 8005c42:	9304      	str	r3, [sp, #16]
 8005c44:	9307      	str	r3, [sp, #28]
 8005c46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c4c:	4654      	mov	r4, sl
 8005c4e:	2205      	movs	r2, #5
 8005c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c54:	4850      	ldr	r0, [pc, #320]	; (8005d98 <_svfiprintf_r+0x1e8>)
 8005c56:	f7fa fabb 	bl	80001d0 <memchr>
 8005c5a:	9a04      	ldr	r2, [sp, #16]
 8005c5c:	b9d8      	cbnz	r0, 8005c96 <_svfiprintf_r+0xe6>
 8005c5e:	06d0      	lsls	r0, r2, #27
 8005c60:	bf44      	itt	mi
 8005c62:	2320      	movmi	r3, #32
 8005c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c68:	0711      	lsls	r1, r2, #28
 8005c6a:	bf44      	itt	mi
 8005c6c:	232b      	movmi	r3, #43	; 0x2b
 8005c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c72:	f89a 3000 	ldrb.w	r3, [sl]
 8005c76:	2b2a      	cmp	r3, #42	; 0x2a
 8005c78:	d015      	beq.n	8005ca6 <_svfiprintf_r+0xf6>
 8005c7a:	9a07      	ldr	r2, [sp, #28]
 8005c7c:	4654      	mov	r4, sl
 8005c7e:	2000      	movs	r0, #0
 8005c80:	f04f 0c0a 	mov.w	ip, #10
 8005c84:	4621      	mov	r1, r4
 8005c86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c8a:	3b30      	subs	r3, #48	; 0x30
 8005c8c:	2b09      	cmp	r3, #9
 8005c8e:	d94d      	bls.n	8005d2c <_svfiprintf_r+0x17c>
 8005c90:	b1b0      	cbz	r0, 8005cc0 <_svfiprintf_r+0x110>
 8005c92:	9207      	str	r2, [sp, #28]
 8005c94:	e014      	b.n	8005cc0 <_svfiprintf_r+0x110>
 8005c96:	eba0 0308 	sub.w	r3, r0, r8
 8005c9a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	9304      	str	r3, [sp, #16]
 8005ca2:	46a2      	mov	sl, r4
 8005ca4:	e7d2      	b.n	8005c4c <_svfiprintf_r+0x9c>
 8005ca6:	9b03      	ldr	r3, [sp, #12]
 8005ca8:	1d19      	adds	r1, r3, #4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	9103      	str	r1, [sp, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	bfbb      	ittet	lt
 8005cb2:	425b      	neglt	r3, r3
 8005cb4:	f042 0202 	orrlt.w	r2, r2, #2
 8005cb8:	9307      	strge	r3, [sp, #28]
 8005cba:	9307      	strlt	r3, [sp, #28]
 8005cbc:	bfb8      	it	lt
 8005cbe:	9204      	strlt	r2, [sp, #16]
 8005cc0:	7823      	ldrb	r3, [r4, #0]
 8005cc2:	2b2e      	cmp	r3, #46	; 0x2e
 8005cc4:	d10c      	bne.n	8005ce0 <_svfiprintf_r+0x130>
 8005cc6:	7863      	ldrb	r3, [r4, #1]
 8005cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cca:	d134      	bne.n	8005d36 <_svfiprintf_r+0x186>
 8005ccc:	9b03      	ldr	r3, [sp, #12]
 8005cce:	1d1a      	adds	r2, r3, #4
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	9203      	str	r2, [sp, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	bfb8      	it	lt
 8005cd8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005cdc:	3402      	adds	r4, #2
 8005cde:	9305      	str	r3, [sp, #20]
 8005ce0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005da8 <_svfiprintf_r+0x1f8>
 8005ce4:	7821      	ldrb	r1, [r4, #0]
 8005ce6:	2203      	movs	r2, #3
 8005ce8:	4650      	mov	r0, sl
 8005cea:	f7fa fa71 	bl	80001d0 <memchr>
 8005cee:	b138      	cbz	r0, 8005d00 <_svfiprintf_r+0x150>
 8005cf0:	9b04      	ldr	r3, [sp, #16]
 8005cf2:	eba0 000a 	sub.w	r0, r0, sl
 8005cf6:	2240      	movs	r2, #64	; 0x40
 8005cf8:	4082      	lsls	r2, r0
 8005cfa:	4313      	orrs	r3, r2
 8005cfc:	3401      	adds	r4, #1
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d04:	4825      	ldr	r0, [pc, #148]	; (8005d9c <_svfiprintf_r+0x1ec>)
 8005d06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d0a:	2206      	movs	r2, #6
 8005d0c:	f7fa fa60 	bl	80001d0 <memchr>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d038      	beq.n	8005d86 <_svfiprintf_r+0x1d6>
 8005d14:	4b22      	ldr	r3, [pc, #136]	; (8005da0 <_svfiprintf_r+0x1f0>)
 8005d16:	bb1b      	cbnz	r3, 8005d60 <_svfiprintf_r+0x1b0>
 8005d18:	9b03      	ldr	r3, [sp, #12]
 8005d1a:	3307      	adds	r3, #7
 8005d1c:	f023 0307 	bic.w	r3, r3, #7
 8005d20:	3308      	adds	r3, #8
 8005d22:	9303      	str	r3, [sp, #12]
 8005d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d26:	4433      	add	r3, r6
 8005d28:	9309      	str	r3, [sp, #36]	; 0x24
 8005d2a:	e768      	b.n	8005bfe <_svfiprintf_r+0x4e>
 8005d2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d30:	460c      	mov	r4, r1
 8005d32:	2001      	movs	r0, #1
 8005d34:	e7a6      	b.n	8005c84 <_svfiprintf_r+0xd4>
 8005d36:	2300      	movs	r3, #0
 8005d38:	3401      	adds	r4, #1
 8005d3a:	9305      	str	r3, [sp, #20]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	f04f 0c0a 	mov.w	ip, #10
 8005d42:	4620      	mov	r0, r4
 8005d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d48:	3a30      	subs	r2, #48	; 0x30
 8005d4a:	2a09      	cmp	r2, #9
 8005d4c:	d903      	bls.n	8005d56 <_svfiprintf_r+0x1a6>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0c6      	beq.n	8005ce0 <_svfiprintf_r+0x130>
 8005d52:	9105      	str	r1, [sp, #20]
 8005d54:	e7c4      	b.n	8005ce0 <_svfiprintf_r+0x130>
 8005d56:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d5a:	4604      	mov	r4, r0
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e7f0      	b.n	8005d42 <_svfiprintf_r+0x192>
 8005d60:	ab03      	add	r3, sp, #12
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	462a      	mov	r2, r5
 8005d66:	4b0f      	ldr	r3, [pc, #60]	; (8005da4 <_svfiprintf_r+0x1f4>)
 8005d68:	a904      	add	r1, sp, #16
 8005d6a:	4638      	mov	r0, r7
 8005d6c:	f7fd ff06 	bl	8003b7c <_printf_float>
 8005d70:	1c42      	adds	r2, r0, #1
 8005d72:	4606      	mov	r6, r0
 8005d74:	d1d6      	bne.n	8005d24 <_svfiprintf_r+0x174>
 8005d76:	89ab      	ldrh	r3, [r5, #12]
 8005d78:	065b      	lsls	r3, r3, #25
 8005d7a:	f53f af2d 	bmi.w	8005bd8 <_svfiprintf_r+0x28>
 8005d7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d80:	b01d      	add	sp, #116	; 0x74
 8005d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d86:	ab03      	add	r3, sp, #12
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	462a      	mov	r2, r5
 8005d8c:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <_svfiprintf_r+0x1f4>)
 8005d8e:	a904      	add	r1, sp, #16
 8005d90:	4638      	mov	r0, r7
 8005d92:	f7fe f997 	bl	80040c4 <_printf_i>
 8005d96:	e7eb      	b.n	8005d70 <_svfiprintf_r+0x1c0>
 8005d98:	080076cc 	.word	0x080076cc
 8005d9c:	080076d6 	.word	0x080076d6
 8005da0:	08003b7d 	.word	0x08003b7d
 8005da4:	08005afd 	.word	0x08005afd
 8005da8:	080076d2 	.word	0x080076d2

08005dac <__sflush_r>:
 8005dac:	898a      	ldrh	r2, [r1, #12]
 8005dae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db2:	4605      	mov	r5, r0
 8005db4:	0710      	lsls	r0, r2, #28
 8005db6:	460c      	mov	r4, r1
 8005db8:	d458      	bmi.n	8005e6c <__sflush_r+0xc0>
 8005dba:	684b      	ldr	r3, [r1, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dc05      	bgt.n	8005dcc <__sflush_r+0x20>
 8005dc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	dc02      	bgt.n	8005dcc <__sflush_r+0x20>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dce:	2e00      	cmp	r6, #0
 8005dd0:	d0f9      	beq.n	8005dc6 <__sflush_r+0x1a>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005dd8:	682f      	ldr	r7, [r5, #0]
 8005dda:	6a21      	ldr	r1, [r4, #32]
 8005ddc:	602b      	str	r3, [r5, #0]
 8005dde:	d032      	beq.n	8005e46 <__sflush_r+0x9a>
 8005de0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005de2:	89a3      	ldrh	r3, [r4, #12]
 8005de4:	075a      	lsls	r2, r3, #29
 8005de6:	d505      	bpl.n	8005df4 <__sflush_r+0x48>
 8005de8:	6863      	ldr	r3, [r4, #4]
 8005dea:	1ac0      	subs	r0, r0, r3
 8005dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005dee:	b10b      	cbz	r3, 8005df4 <__sflush_r+0x48>
 8005df0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005df2:	1ac0      	subs	r0, r0, r3
 8005df4:	2300      	movs	r3, #0
 8005df6:	4602      	mov	r2, r0
 8005df8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005dfa:	6a21      	ldr	r1, [r4, #32]
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b0      	blx	r6
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	89a3      	ldrh	r3, [r4, #12]
 8005e04:	d106      	bne.n	8005e14 <__sflush_r+0x68>
 8005e06:	6829      	ldr	r1, [r5, #0]
 8005e08:	291d      	cmp	r1, #29
 8005e0a:	d82b      	bhi.n	8005e64 <__sflush_r+0xb8>
 8005e0c:	4a29      	ldr	r2, [pc, #164]	; (8005eb4 <__sflush_r+0x108>)
 8005e0e:	410a      	asrs	r2, r1
 8005e10:	07d6      	lsls	r6, r2, #31
 8005e12:	d427      	bmi.n	8005e64 <__sflush_r+0xb8>
 8005e14:	2200      	movs	r2, #0
 8005e16:	6062      	str	r2, [r4, #4]
 8005e18:	04d9      	lsls	r1, r3, #19
 8005e1a:	6922      	ldr	r2, [r4, #16]
 8005e1c:	6022      	str	r2, [r4, #0]
 8005e1e:	d504      	bpl.n	8005e2a <__sflush_r+0x7e>
 8005e20:	1c42      	adds	r2, r0, #1
 8005e22:	d101      	bne.n	8005e28 <__sflush_r+0x7c>
 8005e24:	682b      	ldr	r3, [r5, #0]
 8005e26:	b903      	cbnz	r3, 8005e2a <__sflush_r+0x7e>
 8005e28:	6560      	str	r0, [r4, #84]	; 0x54
 8005e2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e2c:	602f      	str	r7, [r5, #0]
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	d0c9      	beq.n	8005dc6 <__sflush_r+0x1a>
 8005e32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e36:	4299      	cmp	r1, r3
 8005e38:	d002      	beq.n	8005e40 <__sflush_r+0x94>
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f7ff fa96 	bl	800536c <_free_r>
 8005e40:	2000      	movs	r0, #0
 8005e42:	6360      	str	r0, [r4, #52]	; 0x34
 8005e44:	e7c0      	b.n	8005dc8 <__sflush_r+0x1c>
 8005e46:	2301      	movs	r3, #1
 8005e48:	4628      	mov	r0, r5
 8005e4a:	47b0      	blx	r6
 8005e4c:	1c41      	adds	r1, r0, #1
 8005e4e:	d1c8      	bne.n	8005de2 <__sflush_r+0x36>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d0c5      	beq.n	8005de2 <__sflush_r+0x36>
 8005e56:	2b1d      	cmp	r3, #29
 8005e58:	d001      	beq.n	8005e5e <__sflush_r+0xb2>
 8005e5a:	2b16      	cmp	r3, #22
 8005e5c:	d101      	bne.n	8005e62 <__sflush_r+0xb6>
 8005e5e:	602f      	str	r7, [r5, #0]
 8005e60:	e7b1      	b.n	8005dc6 <__sflush_r+0x1a>
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e68:	81a3      	strh	r3, [r4, #12]
 8005e6a:	e7ad      	b.n	8005dc8 <__sflush_r+0x1c>
 8005e6c:	690f      	ldr	r7, [r1, #16]
 8005e6e:	2f00      	cmp	r7, #0
 8005e70:	d0a9      	beq.n	8005dc6 <__sflush_r+0x1a>
 8005e72:	0793      	lsls	r3, r2, #30
 8005e74:	680e      	ldr	r6, [r1, #0]
 8005e76:	bf08      	it	eq
 8005e78:	694b      	ldreq	r3, [r1, #20]
 8005e7a:	600f      	str	r7, [r1, #0]
 8005e7c:	bf18      	it	ne
 8005e7e:	2300      	movne	r3, #0
 8005e80:	eba6 0807 	sub.w	r8, r6, r7
 8005e84:	608b      	str	r3, [r1, #8]
 8005e86:	f1b8 0f00 	cmp.w	r8, #0
 8005e8a:	dd9c      	ble.n	8005dc6 <__sflush_r+0x1a>
 8005e8c:	6a21      	ldr	r1, [r4, #32]
 8005e8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e90:	4643      	mov	r3, r8
 8005e92:	463a      	mov	r2, r7
 8005e94:	4628      	mov	r0, r5
 8005e96:	47b0      	blx	r6
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	dc06      	bgt.n	8005eaa <__sflush_r+0xfe>
 8005e9c:	89a3      	ldrh	r3, [r4, #12]
 8005e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ea2:	81a3      	strh	r3, [r4, #12]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ea8:	e78e      	b.n	8005dc8 <__sflush_r+0x1c>
 8005eaa:	4407      	add	r7, r0
 8005eac:	eba8 0800 	sub.w	r8, r8, r0
 8005eb0:	e7e9      	b.n	8005e86 <__sflush_r+0xda>
 8005eb2:	bf00      	nop
 8005eb4:	dfbffffe 	.word	0xdfbffffe

08005eb8 <_fflush_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	690b      	ldr	r3, [r1, #16]
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	b913      	cbnz	r3, 8005ec8 <_fflush_r+0x10>
 8005ec2:	2500      	movs	r5, #0
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	b118      	cbz	r0, 8005ed2 <_fflush_r+0x1a>
 8005eca:	6a03      	ldr	r3, [r0, #32]
 8005ecc:	b90b      	cbnz	r3, 8005ed2 <_fflush_r+0x1a>
 8005ece:	f7fe faa7 	bl	8004420 <__sinit>
 8005ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0f3      	beq.n	8005ec2 <_fflush_r+0xa>
 8005eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005edc:	07d0      	lsls	r0, r2, #31
 8005ede:	d404      	bmi.n	8005eea <_fflush_r+0x32>
 8005ee0:	0599      	lsls	r1, r3, #22
 8005ee2:	d402      	bmi.n	8005eea <_fflush_r+0x32>
 8005ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ee6:	f7fe fbc2 	bl	800466e <__retarget_lock_acquire_recursive>
 8005eea:	4628      	mov	r0, r5
 8005eec:	4621      	mov	r1, r4
 8005eee:	f7ff ff5d 	bl	8005dac <__sflush_r>
 8005ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ef4:	07da      	lsls	r2, r3, #31
 8005ef6:	4605      	mov	r5, r0
 8005ef8:	d4e4      	bmi.n	8005ec4 <_fflush_r+0xc>
 8005efa:	89a3      	ldrh	r3, [r4, #12]
 8005efc:	059b      	lsls	r3, r3, #22
 8005efe:	d4e1      	bmi.n	8005ec4 <_fflush_r+0xc>
 8005f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f02:	f7fe fbb5 	bl	8004670 <__retarget_lock_release_recursive>
 8005f06:	e7dd      	b.n	8005ec4 <_fflush_r+0xc>

08005f08 <memmove>:
 8005f08:	4288      	cmp	r0, r1
 8005f0a:	b510      	push	{r4, lr}
 8005f0c:	eb01 0402 	add.w	r4, r1, r2
 8005f10:	d902      	bls.n	8005f18 <memmove+0x10>
 8005f12:	4284      	cmp	r4, r0
 8005f14:	4623      	mov	r3, r4
 8005f16:	d807      	bhi.n	8005f28 <memmove+0x20>
 8005f18:	1e43      	subs	r3, r0, #1
 8005f1a:	42a1      	cmp	r1, r4
 8005f1c:	d008      	beq.n	8005f30 <memmove+0x28>
 8005f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f26:	e7f8      	b.n	8005f1a <memmove+0x12>
 8005f28:	4402      	add	r2, r0
 8005f2a:	4601      	mov	r1, r0
 8005f2c:	428a      	cmp	r2, r1
 8005f2e:	d100      	bne.n	8005f32 <memmove+0x2a>
 8005f30:	bd10      	pop	{r4, pc}
 8005f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f3a:	e7f7      	b.n	8005f2c <memmove+0x24>

08005f3c <memcpy>:
 8005f3c:	440a      	add	r2, r1
 8005f3e:	4291      	cmp	r1, r2
 8005f40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005f44:	d100      	bne.n	8005f48 <memcpy+0xc>
 8005f46:	4770      	bx	lr
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f52:	4291      	cmp	r1, r2
 8005f54:	d1f9      	bne.n	8005f4a <memcpy+0xe>
 8005f56:	bd10      	pop	{r4, pc}

08005f58 <__assert_func>:
 8005f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <__assert_func+0x2c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4605      	mov	r5, r0
 8005f64:	68d8      	ldr	r0, [r3, #12]
 8005f66:	b14c      	cbz	r4, 8005f7c <__assert_func+0x24>
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <__assert_func+0x30>)
 8005f6a:	9100      	str	r1, [sp, #0]
 8005f6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f70:	4906      	ldr	r1, [pc, #24]	; (8005f8c <__assert_func+0x34>)
 8005f72:	462b      	mov	r3, r5
 8005f74:	f000 f872 	bl	800605c <fiprintf>
 8005f78:	f000 f882 	bl	8006080 <abort>
 8005f7c:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <__assert_func+0x38>)
 8005f7e:	461c      	mov	r4, r3
 8005f80:	e7f3      	b.n	8005f6a <__assert_func+0x12>
 8005f82:	bf00      	nop
 8005f84:	20000060 	.word	0x20000060
 8005f88:	080076e7 	.word	0x080076e7
 8005f8c:	080076f4 	.word	0x080076f4
 8005f90:	08007722 	.word	0x08007722

08005f94 <_calloc_r>:
 8005f94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f96:	fba1 2402 	umull	r2, r4, r1, r2
 8005f9a:	b94c      	cbnz	r4, 8005fb0 <_calloc_r+0x1c>
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	9201      	str	r2, [sp, #4]
 8005fa0:	f7fd fcc0 	bl	8003924 <_malloc_r>
 8005fa4:	9a01      	ldr	r2, [sp, #4]
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	b930      	cbnz	r0, 8005fb8 <_calloc_r+0x24>
 8005faa:	4628      	mov	r0, r5
 8005fac:	b003      	add	sp, #12
 8005fae:	bd30      	pop	{r4, r5, pc}
 8005fb0:	220c      	movs	r2, #12
 8005fb2:	6002      	str	r2, [r0, #0]
 8005fb4:	2500      	movs	r5, #0
 8005fb6:	e7f8      	b.n	8005faa <_calloc_r+0x16>
 8005fb8:	4621      	mov	r1, r4
 8005fba:	f7fe faca 	bl	8004552 <memset>
 8005fbe:	e7f4      	b.n	8005faa <_calloc_r+0x16>

08005fc0 <__ascii_mbtowc>:
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	b901      	cbnz	r1, 8005fc6 <__ascii_mbtowc+0x6>
 8005fc4:	a901      	add	r1, sp, #4
 8005fc6:	b142      	cbz	r2, 8005fda <__ascii_mbtowc+0x1a>
 8005fc8:	b14b      	cbz	r3, 8005fde <__ascii_mbtowc+0x1e>
 8005fca:	7813      	ldrb	r3, [r2, #0]
 8005fcc:	600b      	str	r3, [r1, #0]
 8005fce:	7812      	ldrb	r2, [r2, #0]
 8005fd0:	1e10      	subs	r0, r2, #0
 8005fd2:	bf18      	it	ne
 8005fd4:	2001      	movne	r0, #1
 8005fd6:	b002      	add	sp, #8
 8005fd8:	4770      	bx	lr
 8005fda:	4610      	mov	r0, r2
 8005fdc:	e7fb      	b.n	8005fd6 <__ascii_mbtowc+0x16>
 8005fde:	f06f 0001 	mvn.w	r0, #1
 8005fe2:	e7f8      	b.n	8005fd6 <__ascii_mbtowc+0x16>

08005fe4 <_realloc_r>:
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe8:	4680      	mov	r8, r0
 8005fea:	4614      	mov	r4, r2
 8005fec:	460e      	mov	r6, r1
 8005fee:	b921      	cbnz	r1, 8005ffa <_realloc_r+0x16>
 8005ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ff4:	4611      	mov	r1, r2
 8005ff6:	f7fd bc95 	b.w	8003924 <_malloc_r>
 8005ffa:	b92a      	cbnz	r2, 8006008 <_realloc_r+0x24>
 8005ffc:	f7ff f9b6 	bl	800536c <_free_r>
 8006000:	4625      	mov	r5, r4
 8006002:	4628      	mov	r0, r5
 8006004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006008:	f000 f841 	bl	800608e <_malloc_usable_size_r>
 800600c:	4284      	cmp	r4, r0
 800600e:	4607      	mov	r7, r0
 8006010:	d802      	bhi.n	8006018 <_realloc_r+0x34>
 8006012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006016:	d812      	bhi.n	800603e <_realloc_r+0x5a>
 8006018:	4621      	mov	r1, r4
 800601a:	4640      	mov	r0, r8
 800601c:	f7fd fc82 	bl	8003924 <_malloc_r>
 8006020:	4605      	mov	r5, r0
 8006022:	2800      	cmp	r0, #0
 8006024:	d0ed      	beq.n	8006002 <_realloc_r+0x1e>
 8006026:	42bc      	cmp	r4, r7
 8006028:	4622      	mov	r2, r4
 800602a:	4631      	mov	r1, r6
 800602c:	bf28      	it	cs
 800602e:	463a      	movcs	r2, r7
 8006030:	f7ff ff84 	bl	8005f3c <memcpy>
 8006034:	4631      	mov	r1, r6
 8006036:	4640      	mov	r0, r8
 8006038:	f7ff f998 	bl	800536c <_free_r>
 800603c:	e7e1      	b.n	8006002 <_realloc_r+0x1e>
 800603e:	4635      	mov	r5, r6
 8006040:	e7df      	b.n	8006002 <_realloc_r+0x1e>

08006042 <__ascii_wctomb>:
 8006042:	b149      	cbz	r1, 8006058 <__ascii_wctomb+0x16>
 8006044:	2aff      	cmp	r2, #255	; 0xff
 8006046:	bf85      	ittet	hi
 8006048:	238a      	movhi	r3, #138	; 0x8a
 800604a:	6003      	strhi	r3, [r0, #0]
 800604c:	700a      	strbls	r2, [r1, #0]
 800604e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006052:	bf98      	it	ls
 8006054:	2001      	movls	r0, #1
 8006056:	4770      	bx	lr
 8006058:	4608      	mov	r0, r1
 800605a:	4770      	bx	lr

0800605c <fiprintf>:
 800605c:	b40e      	push	{r1, r2, r3}
 800605e:	b503      	push	{r0, r1, lr}
 8006060:	4601      	mov	r1, r0
 8006062:	ab03      	add	r3, sp, #12
 8006064:	4805      	ldr	r0, [pc, #20]	; (800607c <fiprintf+0x20>)
 8006066:	f853 2b04 	ldr.w	r2, [r3], #4
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	9301      	str	r3, [sp, #4]
 800606e:	f000 f83f 	bl	80060f0 <_vfiprintf_r>
 8006072:	b002      	add	sp, #8
 8006074:	f85d eb04 	ldr.w	lr, [sp], #4
 8006078:	b003      	add	sp, #12
 800607a:	4770      	bx	lr
 800607c:	20000060 	.word	0x20000060

08006080 <abort>:
 8006080:	b508      	push	{r3, lr}
 8006082:	2006      	movs	r0, #6
 8006084:	f000 fa0c 	bl	80064a0 <raise>
 8006088:	2001      	movs	r0, #1
 800608a:	f7fc f925 	bl	80022d8 <_exit>

0800608e <_malloc_usable_size_r>:
 800608e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006092:	1f18      	subs	r0, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	bfbc      	itt	lt
 8006098:	580b      	ldrlt	r3, [r1, r0]
 800609a:	18c0      	addlt	r0, r0, r3
 800609c:	4770      	bx	lr

0800609e <__sfputc_r>:
 800609e:	6893      	ldr	r3, [r2, #8]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	b410      	push	{r4}
 80060a6:	6093      	str	r3, [r2, #8]
 80060a8:	da08      	bge.n	80060bc <__sfputc_r+0x1e>
 80060aa:	6994      	ldr	r4, [r2, #24]
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	db01      	blt.n	80060b4 <__sfputc_r+0x16>
 80060b0:	290a      	cmp	r1, #10
 80060b2:	d103      	bne.n	80060bc <__sfputc_r+0x1e>
 80060b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b8:	f000 b934 	b.w	8006324 <__swbuf_r>
 80060bc:	6813      	ldr	r3, [r2, #0]
 80060be:	1c58      	adds	r0, r3, #1
 80060c0:	6010      	str	r0, [r2, #0]
 80060c2:	7019      	strb	r1, [r3, #0]
 80060c4:	4608      	mov	r0, r1
 80060c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <__sfputs_r>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	4606      	mov	r6, r0
 80060d0:	460f      	mov	r7, r1
 80060d2:	4614      	mov	r4, r2
 80060d4:	18d5      	adds	r5, r2, r3
 80060d6:	42ac      	cmp	r4, r5
 80060d8:	d101      	bne.n	80060de <__sfputs_r+0x12>
 80060da:	2000      	movs	r0, #0
 80060dc:	e007      	b.n	80060ee <__sfputs_r+0x22>
 80060de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060e2:	463a      	mov	r2, r7
 80060e4:	4630      	mov	r0, r6
 80060e6:	f7ff ffda 	bl	800609e <__sfputc_r>
 80060ea:	1c43      	adds	r3, r0, #1
 80060ec:	d1f3      	bne.n	80060d6 <__sfputs_r+0xa>
 80060ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080060f0 <_vfiprintf_r>:
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	460d      	mov	r5, r1
 80060f6:	b09d      	sub	sp, #116	; 0x74
 80060f8:	4614      	mov	r4, r2
 80060fa:	4698      	mov	r8, r3
 80060fc:	4606      	mov	r6, r0
 80060fe:	b118      	cbz	r0, 8006108 <_vfiprintf_r+0x18>
 8006100:	6a03      	ldr	r3, [r0, #32]
 8006102:	b90b      	cbnz	r3, 8006108 <_vfiprintf_r+0x18>
 8006104:	f7fe f98c 	bl	8004420 <__sinit>
 8006108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800610a:	07d9      	lsls	r1, r3, #31
 800610c:	d405      	bmi.n	800611a <_vfiprintf_r+0x2a>
 800610e:	89ab      	ldrh	r3, [r5, #12]
 8006110:	059a      	lsls	r2, r3, #22
 8006112:	d402      	bmi.n	800611a <_vfiprintf_r+0x2a>
 8006114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006116:	f7fe faaa 	bl	800466e <__retarget_lock_acquire_recursive>
 800611a:	89ab      	ldrh	r3, [r5, #12]
 800611c:	071b      	lsls	r3, r3, #28
 800611e:	d501      	bpl.n	8006124 <_vfiprintf_r+0x34>
 8006120:	692b      	ldr	r3, [r5, #16]
 8006122:	b99b      	cbnz	r3, 800614c <_vfiprintf_r+0x5c>
 8006124:	4629      	mov	r1, r5
 8006126:	4630      	mov	r0, r6
 8006128:	f000 f93a 	bl	80063a0 <__swsetup_r>
 800612c:	b170      	cbz	r0, 800614c <_vfiprintf_r+0x5c>
 800612e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006130:	07dc      	lsls	r4, r3, #31
 8006132:	d504      	bpl.n	800613e <_vfiprintf_r+0x4e>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006138:	b01d      	add	sp, #116	; 0x74
 800613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	0598      	lsls	r0, r3, #22
 8006142:	d4f7      	bmi.n	8006134 <_vfiprintf_r+0x44>
 8006144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006146:	f7fe fa93 	bl	8004670 <__retarget_lock_release_recursive>
 800614a:	e7f3      	b.n	8006134 <_vfiprintf_r+0x44>
 800614c:	2300      	movs	r3, #0
 800614e:	9309      	str	r3, [sp, #36]	; 0x24
 8006150:	2320      	movs	r3, #32
 8006152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006156:	f8cd 800c 	str.w	r8, [sp, #12]
 800615a:	2330      	movs	r3, #48	; 0x30
 800615c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006310 <_vfiprintf_r+0x220>
 8006160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006164:	f04f 0901 	mov.w	r9, #1
 8006168:	4623      	mov	r3, r4
 800616a:	469a      	mov	sl, r3
 800616c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006170:	b10a      	cbz	r2, 8006176 <_vfiprintf_r+0x86>
 8006172:	2a25      	cmp	r2, #37	; 0x25
 8006174:	d1f9      	bne.n	800616a <_vfiprintf_r+0x7a>
 8006176:	ebba 0b04 	subs.w	fp, sl, r4
 800617a:	d00b      	beq.n	8006194 <_vfiprintf_r+0xa4>
 800617c:	465b      	mov	r3, fp
 800617e:	4622      	mov	r2, r4
 8006180:	4629      	mov	r1, r5
 8006182:	4630      	mov	r0, r6
 8006184:	f7ff ffa2 	bl	80060cc <__sfputs_r>
 8006188:	3001      	adds	r0, #1
 800618a:	f000 80a9 	beq.w	80062e0 <_vfiprintf_r+0x1f0>
 800618e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006190:	445a      	add	r2, fp
 8006192:	9209      	str	r2, [sp, #36]	; 0x24
 8006194:	f89a 3000 	ldrb.w	r3, [sl]
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80a1 	beq.w	80062e0 <_vfiprintf_r+0x1f0>
 800619e:	2300      	movs	r3, #0
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80061a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061a8:	f10a 0a01 	add.w	sl, sl, #1
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	9307      	str	r3, [sp, #28]
 80061b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061b4:	931a      	str	r3, [sp, #104]	; 0x68
 80061b6:	4654      	mov	r4, sl
 80061b8:	2205      	movs	r2, #5
 80061ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061be:	4854      	ldr	r0, [pc, #336]	; (8006310 <_vfiprintf_r+0x220>)
 80061c0:	f7fa f806 	bl	80001d0 <memchr>
 80061c4:	9a04      	ldr	r2, [sp, #16]
 80061c6:	b9d8      	cbnz	r0, 8006200 <_vfiprintf_r+0x110>
 80061c8:	06d1      	lsls	r1, r2, #27
 80061ca:	bf44      	itt	mi
 80061cc:	2320      	movmi	r3, #32
 80061ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d2:	0713      	lsls	r3, r2, #28
 80061d4:	bf44      	itt	mi
 80061d6:	232b      	movmi	r3, #43	; 0x2b
 80061d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061dc:	f89a 3000 	ldrb.w	r3, [sl]
 80061e0:	2b2a      	cmp	r3, #42	; 0x2a
 80061e2:	d015      	beq.n	8006210 <_vfiprintf_r+0x120>
 80061e4:	9a07      	ldr	r2, [sp, #28]
 80061e6:	4654      	mov	r4, sl
 80061e8:	2000      	movs	r0, #0
 80061ea:	f04f 0c0a 	mov.w	ip, #10
 80061ee:	4621      	mov	r1, r4
 80061f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f4:	3b30      	subs	r3, #48	; 0x30
 80061f6:	2b09      	cmp	r3, #9
 80061f8:	d94d      	bls.n	8006296 <_vfiprintf_r+0x1a6>
 80061fa:	b1b0      	cbz	r0, 800622a <_vfiprintf_r+0x13a>
 80061fc:	9207      	str	r2, [sp, #28]
 80061fe:	e014      	b.n	800622a <_vfiprintf_r+0x13a>
 8006200:	eba0 0308 	sub.w	r3, r0, r8
 8006204:	fa09 f303 	lsl.w	r3, r9, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	46a2      	mov	sl, r4
 800620e:	e7d2      	b.n	80061b6 <_vfiprintf_r+0xc6>
 8006210:	9b03      	ldr	r3, [sp, #12]
 8006212:	1d19      	adds	r1, r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	9103      	str	r1, [sp, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	bfbb      	ittet	lt
 800621c:	425b      	neglt	r3, r3
 800621e:	f042 0202 	orrlt.w	r2, r2, #2
 8006222:	9307      	strge	r3, [sp, #28]
 8006224:	9307      	strlt	r3, [sp, #28]
 8006226:	bfb8      	it	lt
 8006228:	9204      	strlt	r2, [sp, #16]
 800622a:	7823      	ldrb	r3, [r4, #0]
 800622c:	2b2e      	cmp	r3, #46	; 0x2e
 800622e:	d10c      	bne.n	800624a <_vfiprintf_r+0x15a>
 8006230:	7863      	ldrb	r3, [r4, #1]
 8006232:	2b2a      	cmp	r3, #42	; 0x2a
 8006234:	d134      	bne.n	80062a0 <_vfiprintf_r+0x1b0>
 8006236:	9b03      	ldr	r3, [sp, #12]
 8006238:	1d1a      	adds	r2, r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	9203      	str	r2, [sp, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	bfb8      	it	lt
 8006242:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006246:	3402      	adds	r4, #2
 8006248:	9305      	str	r3, [sp, #20]
 800624a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006320 <_vfiprintf_r+0x230>
 800624e:	7821      	ldrb	r1, [r4, #0]
 8006250:	2203      	movs	r2, #3
 8006252:	4650      	mov	r0, sl
 8006254:	f7f9 ffbc 	bl	80001d0 <memchr>
 8006258:	b138      	cbz	r0, 800626a <_vfiprintf_r+0x17a>
 800625a:	9b04      	ldr	r3, [sp, #16]
 800625c:	eba0 000a 	sub.w	r0, r0, sl
 8006260:	2240      	movs	r2, #64	; 0x40
 8006262:	4082      	lsls	r2, r0
 8006264:	4313      	orrs	r3, r2
 8006266:	3401      	adds	r4, #1
 8006268:	9304      	str	r3, [sp, #16]
 800626a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626e:	4829      	ldr	r0, [pc, #164]	; (8006314 <_vfiprintf_r+0x224>)
 8006270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006274:	2206      	movs	r2, #6
 8006276:	f7f9 ffab 	bl	80001d0 <memchr>
 800627a:	2800      	cmp	r0, #0
 800627c:	d03f      	beq.n	80062fe <_vfiprintf_r+0x20e>
 800627e:	4b26      	ldr	r3, [pc, #152]	; (8006318 <_vfiprintf_r+0x228>)
 8006280:	bb1b      	cbnz	r3, 80062ca <_vfiprintf_r+0x1da>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	3307      	adds	r3, #7
 8006286:	f023 0307 	bic.w	r3, r3, #7
 800628a:	3308      	adds	r3, #8
 800628c:	9303      	str	r3, [sp, #12]
 800628e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006290:	443b      	add	r3, r7
 8006292:	9309      	str	r3, [sp, #36]	; 0x24
 8006294:	e768      	b.n	8006168 <_vfiprintf_r+0x78>
 8006296:	fb0c 3202 	mla	r2, ip, r2, r3
 800629a:	460c      	mov	r4, r1
 800629c:	2001      	movs	r0, #1
 800629e:	e7a6      	b.n	80061ee <_vfiprintf_r+0xfe>
 80062a0:	2300      	movs	r3, #0
 80062a2:	3401      	adds	r4, #1
 80062a4:	9305      	str	r3, [sp, #20]
 80062a6:	4619      	mov	r1, r3
 80062a8:	f04f 0c0a 	mov.w	ip, #10
 80062ac:	4620      	mov	r0, r4
 80062ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062b2:	3a30      	subs	r2, #48	; 0x30
 80062b4:	2a09      	cmp	r2, #9
 80062b6:	d903      	bls.n	80062c0 <_vfiprintf_r+0x1d0>
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0c6      	beq.n	800624a <_vfiprintf_r+0x15a>
 80062bc:	9105      	str	r1, [sp, #20]
 80062be:	e7c4      	b.n	800624a <_vfiprintf_r+0x15a>
 80062c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80062c4:	4604      	mov	r4, r0
 80062c6:	2301      	movs	r3, #1
 80062c8:	e7f0      	b.n	80062ac <_vfiprintf_r+0x1bc>
 80062ca:	ab03      	add	r3, sp, #12
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	462a      	mov	r2, r5
 80062d0:	4b12      	ldr	r3, [pc, #72]	; (800631c <_vfiprintf_r+0x22c>)
 80062d2:	a904      	add	r1, sp, #16
 80062d4:	4630      	mov	r0, r6
 80062d6:	f7fd fc51 	bl	8003b7c <_printf_float>
 80062da:	4607      	mov	r7, r0
 80062dc:	1c78      	adds	r0, r7, #1
 80062de:	d1d6      	bne.n	800628e <_vfiprintf_r+0x19e>
 80062e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e2:	07d9      	lsls	r1, r3, #31
 80062e4:	d405      	bmi.n	80062f2 <_vfiprintf_r+0x202>
 80062e6:	89ab      	ldrh	r3, [r5, #12]
 80062e8:	059a      	lsls	r2, r3, #22
 80062ea:	d402      	bmi.n	80062f2 <_vfiprintf_r+0x202>
 80062ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ee:	f7fe f9bf 	bl	8004670 <__retarget_lock_release_recursive>
 80062f2:	89ab      	ldrh	r3, [r5, #12]
 80062f4:	065b      	lsls	r3, r3, #25
 80062f6:	f53f af1d 	bmi.w	8006134 <_vfiprintf_r+0x44>
 80062fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062fc:	e71c      	b.n	8006138 <_vfiprintf_r+0x48>
 80062fe:	ab03      	add	r3, sp, #12
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	462a      	mov	r2, r5
 8006304:	4b05      	ldr	r3, [pc, #20]	; (800631c <_vfiprintf_r+0x22c>)
 8006306:	a904      	add	r1, sp, #16
 8006308:	4630      	mov	r0, r6
 800630a:	f7fd fedb 	bl	80040c4 <_printf_i>
 800630e:	e7e4      	b.n	80062da <_vfiprintf_r+0x1ea>
 8006310:	080076cc 	.word	0x080076cc
 8006314:	080076d6 	.word	0x080076d6
 8006318:	08003b7d 	.word	0x08003b7d
 800631c:	080060cd 	.word	0x080060cd
 8006320:	080076d2 	.word	0x080076d2

08006324 <__swbuf_r>:
 8006324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006326:	460e      	mov	r6, r1
 8006328:	4614      	mov	r4, r2
 800632a:	4605      	mov	r5, r0
 800632c:	b118      	cbz	r0, 8006336 <__swbuf_r+0x12>
 800632e:	6a03      	ldr	r3, [r0, #32]
 8006330:	b90b      	cbnz	r3, 8006336 <__swbuf_r+0x12>
 8006332:	f7fe f875 	bl	8004420 <__sinit>
 8006336:	69a3      	ldr	r3, [r4, #24]
 8006338:	60a3      	str	r3, [r4, #8]
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	071a      	lsls	r2, r3, #28
 800633e:	d525      	bpl.n	800638c <__swbuf_r+0x68>
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	b31b      	cbz	r3, 800638c <__swbuf_r+0x68>
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	6922      	ldr	r2, [r4, #16]
 8006348:	1a98      	subs	r0, r3, r2
 800634a:	6963      	ldr	r3, [r4, #20]
 800634c:	b2f6      	uxtb	r6, r6
 800634e:	4283      	cmp	r3, r0
 8006350:	4637      	mov	r7, r6
 8006352:	dc04      	bgt.n	800635e <__swbuf_r+0x3a>
 8006354:	4621      	mov	r1, r4
 8006356:	4628      	mov	r0, r5
 8006358:	f7ff fdae 	bl	8005eb8 <_fflush_r>
 800635c:	b9e0      	cbnz	r0, 8006398 <__swbuf_r+0x74>
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	3b01      	subs	r3, #1
 8006362:	60a3      	str	r3, [r4, #8]
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	1c5a      	adds	r2, r3, #1
 8006368:	6022      	str	r2, [r4, #0]
 800636a:	701e      	strb	r6, [r3, #0]
 800636c:	6962      	ldr	r2, [r4, #20]
 800636e:	1c43      	adds	r3, r0, #1
 8006370:	429a      	cmp	r2, r3
 8006372:	d004      	beq.n	800637e <__swbuf_r+0x5a>
 8006374:	89a3      	ldrh	r3, [r4, #12]
 8006376:	07db      	lsls	r3, r3, #31
 8006378:	d506      	bpl.n	8006388 <__swbuf_r+0x64>
 800637a:	2e0a      	cmp	r6, #10
 800637c:	d104      	bne.n	8006388 <__swbuf_r+0x64>
 800637e:	4621      	mov	r1, r4
 8006380:	4628      	mov	r0, r5
 8006382:	f7ff fd99 	bl	8005eb8 <_fflush_r>
 8006386:	b938      	cbnz	r0, 8006398 <__swbuf_r+0x74>
 8006388:	4638      	mov	r0, r7
 800638a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800638c:	4621      	mov	r1, r4
 800638e:	4628      	mov	r0, r5
 8006390:	f000 f806 	bl	80063a0 <__swsetup_r>
 8006394:	2800      	cmp	r0, #0
 8006396:	d0d5      	beq.n	8006344 <__swbuf_r+0x20>
 8006398:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800639c:	e7f4      	b.n	8006388 <__swbuf_r+0x64>
	...

080063a0 <__swsetup_r>:
 80063a0:	b538      	push	{r3, r4, r5, lr}
 80063a2:	4b2a      	ldr	r3, [pc, #168]	; (800644c <__swsetup_r+0xac>)
 80063a4:	4605      	mov	r5, r0
 80063a6:	6818      	ldr	r0, [r3, #0]
 80063a8:	460c      	mov	r4, r1
 80063aa:	b118      	cbz	r0, 80063b4 <__swsetup_r+0x14>
 80063ac:	6a03      	ldr	r3, [r0, #32]
 80063ae:	b90b      	cbnz	r3, 80063b4 <__swsetup_r+0x14>
 80063b0:	f7fe f836 	bl	8004420 <__sinit>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063ba:	0718      	lsls	r0, r3, #28
 80063bc:	d422      	bmi.n	8006404 <__swsetup_r+0x64>
 80063be:	06d9      	lsls	r1, r3, #27
 80063c0:	d407      	bmi.n	80063d2 <__swsetup_r+0x32>
 80063c2:	2309      	movs	r3, #9
 80063c4:	602b      	str	r3, [r5, #0]
 80063c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80063ca:	81a3      	strh	r3, [r4, #12]
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063d0:	e034      	b.n	800643c <__swsetup_r+0x9c>
 80063d2:	0758      	lsls	r0, r3, #29
 80063d4:	d512      	bpl.n	80063fc <__swsetup_r+0x5c>
 80063d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063d8:	b141      	cbz	r1, 80063ec <__swsetup_r+0x4c>
 80063da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063de:	4299      	cmp	r1, r3
 80063e0:	d002      	beq.n	80063e8 <__swsetup_r+0x48>
 80063e2:	4628      	mov	r0, r5
 80063e4:	f7fe ffc2 	bl	800536c <_free_r>
 80063e8:	2300      	movs	r3, #0
 80063ea:	6363      	str	r3, [r4, #52]	; 0x34
 80063ec:	89a3      	ldrh	r3, [r4, #12]
 80063ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	2300      	movs	r3, #0
 80063f6:	6063      	str	r3, [r4, #4]
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	6023      	str	r3, [r4, #0]
 80063fc:	89a3      	ldrh	r3, [r4, #12]
 80063fe:	f043 0308 	orr.w	r3, r3, #8
 8006402:	81a3      	strh	r3, [r4, #12]
 8006404:	6923      	ldr	r3, [r4, #16]
 8006406:	b94b      	cbnz	r3, 800641c <__swsetup_r+0x7c>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800640e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006412:	d003      	beq.n	800641c <__swsetup_r+0x7c>
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 f884 	bl	8006524 <__smakebuf_r>
 800641c:	89a0      	ldrh	r0, [r4, #12]
 800641e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006422:	f010 0301 	ands.w	r3, r0, #1
 8006426:	d00a      	beq.n	800643e <__swsetup_r+0x9e>
 8006428:	2300      	movs	r3, #0
 800642a:	60a3      	str	r3, [r4, #8]
 800642c:	6963      	ldr	r3, [r4, #20]
 800642e:	425b      	negs	r3, r3
 8006430:	61a3      	str	r3, [r4, #24]
 8006432:	6923      	ldr	r3, [r4, #16]
 8006434:	b943      	cbnz	r3, 8006448 <__swsetup_r+0xa8>
 8006436:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800643a:	d1c4      	bne.n	80063c6 <__swsetup_r+0x26>
 800643c:	bd38      	pop	{r3, r4, r5, pc}
 800643e:	0781      	lsls	r1, r0, #30
 8006440:	bf58      	it	pl
 8006442:	6963      	ldrpl	r3, [r4, #20]
 8006444:	60a3      	str	r3, [r4, #8]
 8006446:	e7f4      	b.n	8006432 <__swsetup_r+0x92>
 8006448:	2000      	movs	r0, #0
 800644a:	e7f7      	b.n	800643c <__swsetup_r+0x9c>
 800644c:	20000060 	.word	0x20000060

08006450 <_raise_r>:
 8006450:	291f      	cmp	r1, #31
 8006452:	b538      	push	{r3, r4, r5, lr}
 8006454:	4604      	mov	r4, r0
 8006456:	460d      	mov	r5, r1
 8006458:	d904      	bls.n	8006464 <_raise_r+0x14>
 800645a:	2316      	movs	r3, #22
 800645c:	6003      	str	r3, [r0, #0]
 800645e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006466:	b112      	cbz	r2, 800646e <_raise_r+0x1e>
 8006468:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800646c:	b94b      	cbnz	r3, 8006482 <_raise_r+0x32>
 800646e:	4620      	mov	r0, r4
 8006470:	f000 f830 	bl	80064d4 <_getpid_r>
 8006474:	462a      	mov	r2, r5
 8006476:	4601      	mov	r1, r0
 8006478:	4620      	mov	r0, r4
 800647a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800647e:	f000 b817 	b.w	80064b0 <_kill_r>
 8006482:	2b01      	cmp	r3, #1
 8006484:	d00a      	beq.n	800649c <_raise_r+0x4c>
 8006486:	1c59      	adds	r1, r3, #1
 8006488:	d103      	bne.n	8006492 <_raise_r+0x42>
 800648a:	2316      	movs	r3, #22
 800648c:	6003      	str	r3, [r0, #0]
 800648e:	2001      	movs	r0, #1
 8006490:	e7e7      	b.n	8006462 <_raise_r+0x12>
 8006492:	2400      	movs	r4, #0
 8006494:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006498:	4628      	mov	r0, r5
 800649a:	4798      	blx	r3
 800649c:	2000      	movs	r0, #0
 800649e:	e7e0      	b.n	8006462 <_raise_r+0x12>

080064a0 <raise>:
 80064a0:	4b02      	ldr	r3, [pc, #8]	; (80064ac <raise+0xc>)
 80064a2:	4601      	mov	r1, r0
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	f7ff bfd3 	b.w	8006450 <_raise_r>
 80064aa:	bf00      	nop
 80064ac:	20000060 	.word	0x20000060

080064b0 <_kill_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	; (80064d0 <_kill_r+0x20>)
 80064b4:	2300      	movs	r3, #0
 80064b6:	4604      	mov	r4, r0
 80064b8:	4608      	mov	r0, r1
 80064ba:	4611      	mov	r1, r2
 80064bc:	602b      	str	r3, [r5, #0]
 80064be:	f7fb fefb 	bl	80022b8 <_kill>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d102      	bne.n	80064cc <_kill_r+0x1c>
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	b103      	cbz	r3, 80064cc <_kill_r+0x1c>
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	bd38      	pop	{r3, r4, r5, pc}
 80064ce:	bf00      	nop
 80064d0:	200003f4 	.word	0x200003f4

080064d4 <_getpid_r>:
 80064d4:	f7fb bee8 	b.w	80022a8 <_getpid>

080064d8 <__swhatbuf_r>:
 80064d8:	b570      	push	{r4, r5, r6, lr}
 80064da:	460c      	mov	r4, r1
 80064dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e0:	2900      	cmp	r1, #0
 80064e2:	b096      	sub	sp, #88	; 0x58
 80064e4:	4615      	mov	r5, r2
 80064e6:	461e      	mov	r6, r3
 80064e8:	da0d      	bge.n	8006506 <__swhatbuf_r+0x2e>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80064f0:	f04f 0100 	mov.w	r1, #0
 80064f4:	bf0c      	ite	eq
 80064f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80064fa:	2340      	movne	r3, #64	; 0x40
 80064fc:	2000      	movs	r0, #0
 80064fe:	6031      	str	r1, [r6, #0]
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	b016      	add	sp, #88	; 0x58
 8006504:	bd70      	pop	{r4, r5, r6, pc}
 8006506:	466a      	mov	r2, sp
 8006508:	f000 f848 	bl	800659c <_fstat_r>
 800650c:	2800      	cmp	r0, #0
 800650e:	dbec      	blt.n	80064ea <__swhatbuf_r+0x12>
 8006510:	9901      	ldr	r1, [sp, #4]
 8006512:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006516:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800651a:	4259      	negs	r1, r3
 800651c:	4159      	adcs	r1, r3
 800651e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006522:	e7eb      	b.n	80064fc <__swhatbuf_r+0x24>

08006524 <__smakebuf_r>:
 8006524:	898b      	ldrh	r3, [r1, #12]
 8006526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006528:	079d      	lsls	r5, r3, #30
 800652a:	4606      	mov	r6, r0
 800652c:	460c      	mov	r4, r1
 800652e:	d507      	bpl.n	8006540 <__smakebuf_r+0x1c>
 8006530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006534:	6023      	str	r3, [r4, #0]
 8006536:	6123      	str	r3, [r4, #16]
 8006538:	2301      	movs	r3, #1
 800653a:	6163      	str	r3, [r4, #20]
 800653c:	b002      	add	sp, #8
 800653e:	bd70      	pop	{r4, r5, r6, pc}
 8006540:	ab01      	add	r3, sp, #4
 8006542:	466a      	mov	r2, sp
 8006544:	f7ff ffc8 	bl	80064d8 <__swhatbuf_r>
 8006548:	9900      	ldr	r1, [sp, #0]
 800654a:	4605      	mov	r5, r0
 800654c:	4630      	mov	r0, r6
 800654e:	f7fd f9e9 	bl	8003924 <_malloc_r>
 8006552:	b948      	cbnz	r0, 8006568 <__smakebuf_r+0x44>
 8006554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006558:	059a      	lsls	r2, r3, #22
 800655a:	d4ef      	bmi.n	800653c <__smakebuf_r+0x18>
 800655c:	f023 0303 	bic.w	r3, r3, #3
 8006560:	f043 0302 	orr.w	r3, r3, #2
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	e7e3      	b.n	8006530 <__smakebuf_r+0xc>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	6020      	str	r0, [r4, #0]
 800656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006570:	81a3      	strh	r3, [r4, #12]
 8006572:	9b00      	ldr	r3, [sp, #0]
 8006574:	6163      	str	r3, [r4, #20]
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	6120      	str	r0, [r4, #16]
 800657a:	b15b      	cbz	r3, 8006594 <__smakebuf_r+0x70>
 800657c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006580:	4630      	mov	r0, r6
 8006582:	f000 f81d 	bl	80065c0 <_isatty_r>
 8006586:	b128      	cbz	r0, 8006594 <__smakebuf_r+0x70>
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f023 0303 	bic.w	r3, r3, #3
 800658e:	f043 0301 	orr.w	r3, r3, #1
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	431d      	orrs	r5, r3
 8006598:	81a5      	strh	r5, [r4, #12]
 800659a:	e7cf      	b.n	800653c <__smakebuf_r+0x18>

0800659c <_fstat_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d07      	ldr	r5, [pc, #28]	; (80065bc <_fstat_r+0x20>)
 80065a0:	2300      	movs	r3, #0
 80065a2:	4604      	mov	r4, r0
 80065a4:	4608      	mov	r0, r1
 80065a6:	4611      	mov	r1, r2
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	f7fb fee4 	bl	8002376 <_fstat>
 80065ae:	1c43      	adds	r3, r0, #1
 80065b0:	d102      	bne.n	80065b8 <_fstat_r+0x1c>
 80065b2:	682b      	ldr	r3, [r5, #0]
 80065b4:	b103      	cbz	r3, 80065b8 <_fstat_r+0x1c>
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	bd38      	pop	{r3, r4, r5, pc}
 80065ba:	bf00      	nop
 80065bc:	200003f4 	.word	0x200003f4

080065c0 <_isatty_r>:
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	4d06      	ldr	r5, [pc, #24]	; (80065dc <_isatty_r+0x1c>)
 80065c4:	2300      	movs	r3, #0
 80065c6:	4604      	mov	r4, r0
 80065c8:	4608      	mov	r0, r1
 80065ca:	602b      	str	r3, [r5, #0]
 80065cc:	f7fb fee3 	bl	8002396 <_isatty>
 80065d0:	1c43      	adds	r3, r0, #1
 80065d2:	d102      	bne.n	80065da <_isatty_r+0x1a>
 80065d4:	682b      	ldr	r3, [r5, #0]
 80065d6:	b103      	cbz	r3, 80065da <_isatty_r+0x1a>
 80065d8:	6023      	str	r3, [r4, #0]
 80065da:	bd38      	pop	{r3, r4, r5, pc}
 80065dc:	200003f4 	.word	0x200003f4

080065e0 <pow>:
 80065e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e2:	ed2d 8b02 	vpush	{d8}
 80065e6:	eeb0 8a40 	vmov.f32	s16, s0
 80065ea:	eef0 8a60 	vmov.f32	s17, s1
 80065ee:	ec55 4b11 	vmov	r4, r5, d1
 80065f2:	f000 f871 	bl	80066d8 <__ieee754_pow>
 80065f6:	4622      	mov	r2, r4
 80065f8:	462b      	mov	r3, r5
 80065fa:	4620      	mov	r0, r4
 80065fc:	4629      	mov	r1, r5
 80065fe:	ec57 6b10 	vmov	r6, r7, d0
 8006602:	f7fa fa93 	bl	8000b2c <__aeabi_dcmpun>
 8006606:	2800      	cmp	r0, #0
 8006608:	d13b      	bne.n	8006682 <pow+0xa2>
 800660a:	ec51 0b18 	vmov	r0, r1, d8
 800660e:	2200      	movs	r2, #0
 8006610:	2300      	movs	r3, #0
 8006612:	f7fa fa59 	bl	8000ac8 <__aeabi_dcmpeq>
 8006616:	b1b8      	cbz	r0, 8006648 <pow+0x68>
 8006618:	2200      	movs	r2, #0
 800661a:	2300      	movs	r3, #0
 800661c:	4620      	mov	r0, r4
 800661e:	4629      	mov	r1, r5
 8006620:	f7fa fa52 	bl	8000ac8 <__aeabi_dcmpeq>
 8006624:	2800      	cmp	r0, #0
 8006626:	d146      	bne.n	80066b6 <pow+0xd6>
 8006628:	ec45 4b10 	vmov	d0, r4, r5
 800662c:	f000 f848 	bl	80066c0 <finite>
 8006630:	b338      	cbz	r0, 8006682 <pow+0xa2>
 8006632:	2200      	movs	r2, #0
 8006634:	2300      	movs	r3, #0
 8006636:	4620      	mov	r0, r4
 8006638:	4629      	mov	r1, r5
 800663a:	f7fa fa4f 	bl	8000adc <__aeabi_dcmplt>
 800663e:	b300      	cbz	r0, 8006682 <pow+0xa2>
 8006640:	f7fd ffea 	bl	8004618 <__errno>
 8006644:	2322      	movs	r3, #34	; 0x22
 8006646:	e01b      	b.n	8006680 <pow+0xa0>
 8006648:	ec47 6b10 	vmov	d0, r6, r7
 800664c:	f000 f838 	bl	80066c0 <finite>
 8006650:	b9e0      	cbnz	r0, 800668c <pow+0xac>
 8006652:	eeb0 0a48 	vmov.f32	s0, s16
 8006656:	eef0 0a68 	vmov.f32	s1, s17
 800665a:	f000 f831 	bl	80066c0 <finite>
 800665e:	b1a8      	cbz	r0, 800668c <pow+0xac>
 8006660:	ec45 4b10 	vmov	d0, r4, r5
 8006664:	f000 f82c 	bl	80066c0 <finite>
 8006668:	b180      	cbz	r0, 800668c <pow+0xac>
 800666a:	4632      	mov	r2, r6
 800666c:	463b      	mov	r3, r7
 800666e:	4630      	mov	r0, r6
 8006670:	4639      	mov	r1, r7
 8006672:	f7fa fa5b 	bl	8000b2c <__aeabi_dcmpun>
 8006676:	2800      	cmp	r0, #0
 8006678:	d0e2      	beq.n	8006640 <pow+0x60>
 800667a:	f7fd ffcd 	bl	8004618 <__errno>
 800667e:	2321      	movs	r3, #33	; 0x21
 8006680:	6003      	str	r3, [r0, #0]
 8006682:	ecbd 8b02 	vpop	{d8}
 8006686:	ec47 6b10 	vmov	d0, r6, r7
 800668a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800668c:	2200      	movs	r2, #0
 800668e:	2300      	movs	r3, #0
 8006690:	4630      	mov	r0, r6
 8006692:	4639      	mov	r1, r7
 8006694:	f7fa fa18 	bl	8000ac8 <__aeabi_dcmpeq>
 8006698:	2800      	cmp	r0, #0
 800669a:	d0f2      	beq.n	8006682 <pow+0xa2>
 800669c:	eeb0 0a48 	vmov.f32	s0, s16
 80066a0:	eef0 0a68 	vmov.f32	s1, s17
 80066a4:	f000 f80c 	bl	80066c0 <finite>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d0ea      	beq.n	8006682 <pow+0xa2>
 80066ac:	ec45 4b10 	vmov	d0, r4, r5
 80066b0:	f000 f806 	bl	80066c0 <finite>
 80066b4:	e7c3      	b.n	800663e <pow+0x5e>
 80066b6:	4f01      	ldr	r7, [pc, #4]	; (80066bc <pow+0xdc>)
 80066b8:	2600      	movs	r6, #0
 80066ba:	e7e2      	b.n	8006682 <pow+0xa2>
 80066bc:	3ff00000 	.word	0x3ff00000

080066c0 <finite>:
 80066c0:	b082      	sub	sp, #8
 80066c2:	ed8d 0b00 	vstr	d0, [sp]
 80066c6:	9801      	ldr	r0, [sp, #4]
 80066c8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80066cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80066d0:	0fc0      	lsrs	r0, r0, #31
 80066d2:	b002      	add	sp, #8
 80066d4:	4770      	bx	lr
	...

080066d8 <__ieee754_pow>:
 80066d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066dc:	ed2d 8b06 	vpush	{d8-d10}
 80066e0:	b089      	sub	sp, #36	; 0x24
 80066e2:	ed8d 1b00 	vstr	d1, [sp]
 80066e6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80066ea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80066ee:	ea58 0102 	orrs.w	r1, r8, r2
 80066f2:	ec57 6b10 	vmov	r6, r7, d0
 80066f6:	d115      	bne.n	8006724 <__ieee754_pow+0x4c>
 80066f8:	19b3      	adds	r3, r6, r6
 80066fa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80066fe:	4152      	adcs	r2, r2
 8006700:	4299      	cmp	r1, r3
 8006702:	4b89      	ldr	r3, [pc, #548]	; (8006928 <__ieee754_pow+0x250>)
 8006704:	4193      	sbcs	r3, r2
 8006706:	f080 84d1 	bcs.w	80070ac <__ieee754_pow+0x9d4>
 800670a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800670e:	4630      	mov	r0, r6
 8006710:	4639      	mov	r1, r7
 8006712:	f7f9 fdbb 	bl	800028c <__adddf3>
 8006716:	ec41 0b10 	vmov	d0, r0, r1
 800671a:	b009      	add	sp, #36	; 0x24
 800671c:	ecbd 8b06 	vpop	{d8-d10}
 8006720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006724:	4b81      	ldr	r3, [pc, #516]	; (800692c <__ieee754_pow+0x254>)
 8006726:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800672a:	429c      	cmp	r4, r3
 800672c:	ee10 aa10 	vmov	sl, s0
 8006730:	463d      	mov	r5, r7
 8006732:	dc06      	bgt.n	8006742 <__ieee754_pow+0x6a>
 8006734:	d101      	bne.n	800673a <__ieee754_pow+0x62>
 8006736:	2e00      	cmp	r6, #0
 8006738:	d1e7      	bne.n	800670a <__ieee754_pow+0x32>
 800673a:	4598      	cmp	r8, r3
 800673c:	dc01      	bgt.n	8006742 <__ieee754_pow+0x6a>
 800673e:	d10f      	bne.n	8006760 <__ieee754_pow+0x88>
 8006740:	b172      	cbz	r2, 8006760 <__ieee754_pow+0x88>
 8006742:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006746:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800674a:	ea55 050a 	orrs.w	r5, r5, sl
 800674e:	d1dc      	bne.n	800670a <__ieee754_pow+0x32>
 8006750:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006754:	18db      	adds	r3, r3, r3
 8006756:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800675a:	4152      	adcs	r2, r2
 800675c:	429d      	cmp	r5, r3
 800675e:	e7d0      	b.n	8006702 <__ieee754_pow+0x2a>
 8006760:	2d00      	cmp	r5, #0
 8006762:	da3b      	bge.n	80067dc <__ieee754_pow+0x104>
 8006764:	4b72      	ldr	r3, [pc, #456]	; (8006930 <__ieee754_pow+0x258>)
 8006766:	4598      	cmp	r8, r3
 8006768:	dc51      	bgt.n	800680e <__ieee754_pow+0x136>
 800676a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800676e:	4598      	cmp	r8, r3
 8006770:	f340 84ab 	ble.w	80070ca <__ieee754_pow+0x9f2>
 8006774:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006778:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800677c:	2b14      	cmp	r3, #20
 800677e:	dd0f      	ble.n	80067a0 <__ieee754_pow+0xc8>
 8006780:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006784:	fa22 f103 	lsr.w	r1, r2, r3
 8006788:	fa01 f303 	lsl.w	r3, r1, r3
 800678c:	4293      	cmp	r3, r2
 800678e:	f040 849c 	bne.w	80070ca <__ieee754_pow+0x9f2>
 8006792:	f001 0101 	and.w	r1, r1, #1
 8006796:	f1c1 0302 	rsb	r3, r1, #2
 800679a:	9304      	str	r3, [sp, #16]
 800679c:	b182      	cbz	r2, 80067c0 <__ieee754_pow+0xe8>
 800679e:	e05f      	b.n	8006860 <__ieee754_pow+0x188>
 80067a0:	2a00      	cmp	r2, #0
 80067a2:	d15b      	bne.n	800685c <__ieee754_pow+0x184>
 80067a4:	f1c3 0314 	rsb	r3, r3, #20
 80067a8:	fa48 f103 	asr.w	r1, r8, r3
 80067ac:	fa01 f303 	lsl.w	r3, r1, r3
 80067b0:	4543      	cmp	r3, r8
 80067b2:	f040 8487 	bne.w	80070c4 <__ieee754_pow+0x9ec>
 80067b6:	f001 0101 	and.w	r1, r1, #1
 80067ba:	f1c1 0302 	rsb	r3, r1, #2
 80067be:	9304      	str	r3, [sp, #16]
 80067c0:	4b5c      	ldr	r3, [pc, #368]	; (8006934 <__ieee754_pow+0x25c>)
 80067c2:	4598      	cmp	r8, r3
 80067c4:	d132      	bne.n	800682c <__ieee754_pow+0x154>
 80067c6:	f1b9 0f00 	cmp.w	r9, #0
 80067ca:	f280 8477 	bge.w	80070bc <__ieee754_pow+0x9e4>
 80067ce:	4959      	ldr	r1, [pc, #356]	; (8006934 <__ieee754_pow+0x25c>)
 80067d0:	4632      	mov	r2, r6
 80067d2:	463b      	mov	r3, r7
 80067d4:	2000      	movs	r0, #0
 80067d6:	f7fa f839 	bl	800084c <__aeabi_ddiv>
 80067da:	e79c      	b.n	8006716 <__ieee754_pow+0x3e>
 80067dc:	2300      	movs	r3, #0
 80067de:	9304      	str	r3, [sp, #16]
 80067e0:	2a00      	cmp	r2, #0
 80067e2:	d13d      	bne.n	8006860 <__ieee754_pow+0x188>
 80067e4:	4b51      	ldr	r3, [pc, #324]	; (800692c <__ieee754_pow+0x254>)
 80067e6:	4598      	cmp	r8, r3
 80067e8:	d1ea      	bne.n	80067c0 <__ieee754_pow+0xe8>
 80067ea:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80067ee:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80067f2:	ea53 030a 	orrs.w	r3, r3, sl
 80067f6:	f000 8459 	beq.w	80070ac <__ieee754_pow+0x9d4>
 80067fa:	4b4f      	ldr	r3, [pc, #316]	; (8006938 <__ieee754_pow+0x260>)
 80067fc:	429c      	cmp	r4, r3
 80067fe:	dd08      	ble.n	8006812 <__ieee754_pow+0x13a>
 8006800:	f1b9 0f00 	cmp.w	r9, #0
 8006804:	f2c0 8456 	blt.w	80070b4 <__ieee754_pow+0x9dc>
 8006808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800680c:	e783      	b.n	8006716 <__ieee754_pow+0x3e>
 800680e:	2302      	movs	r3, #2
 8006810:	e7e5      	b.n	80067de <__ieee754_pow+0x106>
 8006812:	f1b9 0f00 	cmp.w	r9, #0
 8006816:	f04f 0000 	mov.w	r0, #0
 800681a:	f04f 0100 	mov.w	r1, #0
 800681e:	f6bf af7a 	bge.w	8006716 <__ieee754_pow+0x3e>
 8006822:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006826:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800682a:	e774      	b.n	8006716 <__ieee754_pow+0x3e>
 800682c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006830:	d106      	bne.n	8006840 <__ieee754_pow+0x168>
 8006832:	4632      	mov	r2, r6
 8006834:	463b      	mov	r3, r7
 8006836:	4630      	mov	r0, r6
 8006838:	4639      	mov	r1, r7
 800683a:	f7f9 fedd 	bl	80005f8 <__aeabi_dmul>
 800683e:	e76a      	b.n	8006716 <__ieee754_pow+0x3e>
 8006840:	4b3e      	ldr	r3, [pc, #248]	; (800693c <__ieee754_pow+0x264>)
 8006842:	4599      	cmp	r9, r3
 8006844:	d10c      	bne.n	8006860 <__ieee754_pow+0x188>
 8006846:	2d00      	cmp	r5, #0
 8006848:	db0a      	blt.n	8006860 <__ieee754_pow+0x188>
 800684a:	ec47 6b10 	vmov	d0, r6, r7
 800684e:	b009      	add	sp, #36	; 0x24
 8006850:	ecbd 8b06 	vpop	{d8-d10}
 8006854:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	f000 bd20 	b.w	800729c <__ieee754_sqrt>
 800685c:	2300      	movs	r3, #0
 800685e:	9304      	str	r3, [sp, #16]
 8006860:	ec47 6b10 	vmov	d0, r6, r7
 8006864:	f000 fc62 	bl	800712c <fabs>
 8006868:	ec51 0b10 	vmov	r0, r1, d0
 800686c:	f1ba 0f00 	cmp.w	sl, #0
 8006870:	d129      	bne.n	80068c6 <__ieee754_pow+0x1ee>
 8006872:	b124      	cbz	r4, 800687e <__ieee754_pow+0x1a6>
 8006874:	4b2f      	ldr	r3, [pc, #188]	; (8006934 <__ieee754_pow+0x25c>)
 8006876:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800687a:	429a      	cmp	r2, r3
 800687c:	d123      	bne.n	80068c6 <__ieee754_pow+0x1ee>
 800687e:	f1b9 0f00 	cmp.w	r9, #0
 8006882:	da05      	bge.n	8006890 <__ieee754_pow+0x1b8>
 8006884:	4602      	mov	r2, r0
 8006886:	460b      	mov	r3, r1
 8006888:	2000      	movs	r0, #0
 800688a:	492a      	ldr	r1, [pc, #168]	; (8006934 <__ieee754_pow+0x25c>)
 800688c:	f7f9 ffde 	bl	800084c <__aeabi_ddiv>
 8006890:	2d00      	cmp	r5, #0
 8006892:	f6bf af40 	bge.w	8006716 <__ieee754_pow+0x3e>
 8006896:	9b04      	ldr	r3, [sp, #16]
 8006898:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800689c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80068a0:	431c      	orrs	r4, r3
 80068a2:	d108      	bne.n	80068b6 <__ieee754_pow+0x1de>
 80068a4:	4602      	mov	r2, r0
 80068a6:	460b      	mov	r3, r1
 80068a8:	4610      	mov	r0, r2
 80068aa:	4619      	mov	r1, r3
 80068ac:	f7f9 fcec 	bl	8000288 <__aeabi_dsub>
 80068b0:	4602      	mov	r2, r0
 80068b2:	460b      	mov	r3, r1
 80068b4:	e78f      	b.n	80067d6 <__ieee754_pow+0xfe>
 80068b6:	9b04      	ldr	r3, [sp, #16]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	f47f af2c 	bne.w	8006716 <__ieee754_pow+0x3e>
 80068be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80068c2:	4619      	mov	r1, r3
 80068c4:	e727      	b.n	8006716 <__ieee754_pow+0x3e>
 80068c6:	0feb      	lsrs	r3, r5, #31
 80068c8:	3b01      	subs	r3, #1
 80068ca:	9306      	str	r3, [sp, #24]
 80068cc:	9a06      	ldr	r2, [sp, #24]
 80068ce:	9b04      	ldr	r3, [sp, #16]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	d102      	bne.n	80068da <__ieee754_pow+0x202>
 80068d4:	4632      	mov	r2, r6
 80068d6:	463b      	mov	r3, r7
 80068d8:	e7e6      	b.n	80068a8 <__ieee754_pow+0x1d0>
 80068da:	4b19      	ldr	r3, [pc, #100]	; (8006940 <__ieee754_pow+0x268>)
 80068dc:	4598      	cmp	r8, r3
 80068de:	f340 80fb 	ble.w	8006ad8 <__ieee754_pow+0x400>
 80068e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80068e6:	4598      	cmp	r8, r3
 80068e8:	4b13      	ldr	r3, [pc, #76]	; (8006938 <__ieee754_pow+0x260>)
 80068ea:	dd0c      	ble.n	8006906 <__ieee754_pow+0x22e>
 80068ec:	429c      	cmp	r4, r3
 80068ee:	dc0f      	bgt.n	8006910 <__ieee754_pow+0x238>
 80068f0:	f1b9 0f00 	cmp.w	r9, #0
 80068f4:	da0f      	bge.n	8006916 <__ieee754_pow+0x23e>
 80068f6:	2000      	movs	r0, #0
 80068f8:	b009      	add	sp, #36	; 0x24
 80068fa:	ecbd 8b06 	vpop	{d8-d10}
 80068fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006902:	f000 bcc2 	b.w	800728a <__math_oflow>
 8006906:	429c      	cmp	r4, r3
 8006908:	dbf2      	blt.n	80068f0 <__ieee754_pow+0x218>
 800690a:	4b0a      	ldr	r3, [pc, #40]	; (8006934 <__ieee754_pow+0x25c>)
 800690c:	429c      	cmp	r4, r3
 800690e:	dd19      	ble.n	8006944 <__ieee754_pow+0x26c>
 8006910:	f1b9 0f00 	cmp.w	r9, #0
 8006914:	dcef      	bgt.n	80068f6 <__ieee754_pow+0x21e>
 8006916:	2000      	movs	r0, #0
 8006918:	b009      	add	sp, #36	; 0x24
 800691a:	ecbd 8b06 	vpop	{d8-d10}
 800691e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006922:	f000 bca9 	b.w	8007278 <__math_uflow>
 8006926:	bf00      	nop
 8006928:	fff00000 	.word	0xfff00000
 800692c:	7ff00000 	.word	0x7ff00000
 8006930:	433fffff 	.word	0x433fffff
 8006934:	3ff00000 	.word	0x3ff00000
 8006938:	3fefffff 	.word	0x3fefffff
 800693c:	3fe00000 	.word	0x3fe00000
 8006940:	41e00000 	.word	0x41e00000
 8006944:	4b60      	ldr	r3, [pc, #384]	; (8006ac8 <__ieee754_pow+0x3f0>)
 8006946:	2200      	movs	r2, #0
 8006948:	f7f9 fc9e 	bl	8000288 <__aeabi_dsub>
 800694c:	a354      	add	r3, pc, #336	; (adr r3, 8006aa0 <__ieee754_pow+0x3c8>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	4604      	mov	r4, r0
 8006954:	460d      	mov	r5, r1
 8006956:	f7f9 fe4f 	bl	80005f8 <__aeabi_dmul>
 800695a:	a353      	add	r3, pc, #332	; (adr r3, 8006aa8 <__ieee754_pow+0x3d0>)
 800695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006960:	4606      	mov	r6, r0
 8006962:	460f      	mov	r7, r1
 8006964:	4620      	mov	r0, r4
 8006966:	4629      	mov	r1, r5
 8006968:	f7f9 fe46 	bl	80005f8 <__aeabi_dmul>
 800696c:	4b57      	ldr	r3, [pc, #348]	; (8006acc <__ieee754_pow+0x3f4>)
 800696e:	4682      	mov	sl, r0
 8006970:	468b      	mov	fp, r1
 8006972:	2200      	movs	r2, #0
 8006974:	4620      	mov	r0, r4
 8006976:	4629      	mov	r1, r5
 8006978:	f7f9 fe3e 	bl	80005f8 <__aeabi_dmul>
 800697c:	4602      	mov	r2, r0
 800697e:	460b      	mov	r3, r1
 8006980:	a14b      	add	r1, pc, #300	; (adr r1, 8006ab0 <__ieee754_pow+0x3d8>)
 8006982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006986:	f7f9 fc7f 	bl	8000288 <__aeabi_dsub>
 800698a:	4622      	mov	r2, r4
 800698c:	462b      	mov	r3, r5
 800698e:	f7f9 fe33 	bl	80005f8 <__aeabi_dmul>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	2000      	movs	r0, #0
 8006998:	494d      	ldr	r1, [pc, #308]	; (8006ad0 <__ieee754_pow+0x3f8>)
 800699a:	f7f9 fc75 	bl	8000288 <__aeabi_dsub>
 800699e:	4622      	mov	r2, r4
 80069a0:	4680      	mov	r8, r0
 80069a2:	4689      	mov	r9, r1
 80069a4:	462b      	mov	r3, r5
 80069a6:	4620      	mov	r0, r4
 80069a8:	4629      	mov	r1, r5
 80069aa:	f7f9 fe25 	bl	80005f8 <__aeabi_dmul>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4640      	mov	r0, r8
 80069b4:	4649      	mov	r1, r9
 80069b6:	f7f9 fe1f 	bl	80005f8 <__aeabi_dmul>
 80069ba:	a33f      	add	r3, pc, #252	; (adr r3, 8006ab8 <__ieee754_pow+0x3e0>)
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f7f9 fe1a 	bl	80005f8 <__aeabi_dmul>
 80069c4:	4602      	mov	r2, r0
 80069c6:	460b      	mov	r3, r1
 80069c8:	4650      	mov	r0, sl
 80069ca:	4659      	mov	r1, fp
 80069cc:	f7f9 fc5c 	bl	8000288 <__aeabi_dsub>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4680      	mov	r8, r0
 80069d6:	4689      	mov	r9, r1
 80069d8:	4630      	mov	r0, r6
 80069da:	4639      	mov	r1, r7
 80069dc:	f7f9 fc56 	bl	800028c <__adddf3>
 80069e0:	2000      	movs	r0, #0
 80069e2:	4632      	mov	r2, r6
 80069e4:	463b      	mov	r3, r7
 80069e6:	4604      	mov	r4, r0
 80069e8:	460d      	mov	r5, r1
 80069ea:	f7f9 fc4d 	bl	8000288 <__aeabi_dsub>
 80069ee:	4602      	mov	r2, r0
 80069f0:	460b      	mov	r3, r1
 80069f2:	4640      	mov	r0, r8
 80069f4:	4649      	mov	r1, r9
 80069f6:	f7f9 fc47 	bl	8000288 <__aeabi_dsub>
 80069fa:	9b04      	ldr	r3, [sp, #16]
 80069fc:	9a06      	ldr	r2, [sp, #24]
 80069fe:	3b01      	subs	r3, #1
 8006a00:	4313      	orrs	r3, r2
 8006a02:	4682      	mov	sl, r0
 8006a04:	468b      	mov	fp, r1
 8006a06:	f040 81e7 	bne.w	8006dd8 <__ieee754_pow+0x700>
 8006a0a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006ac0 <__ieee754_pow+0x3e8>
 8006a0e:	eeb0 8a47 	vmov.f32	s16, s14
 8006a12:	eef0 8a67 	vmov.f32	s17, s15
 8006a16:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006a1a:	2600      	movs	r6, #0
 8006a1c:	4632      	mov	r2, r6
 8006a1e:	463b      	mov	r3, r7
 8006a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a24:	f7f9 fc30 	bl	8000288 <__aeabi_dsub>
 8006a28:	4622      	mov	r2, r4
 8006a2a:	462b      	mov	r3, r5
 8006a2c:	f7f9 fde4 	bl	80005f8 <__aeabi_dmul>
 8006a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006a34:	4680      	mov	r8, r0
 8006a36:	4689      	mov	r9, r1
 8006a38:	4650      	mov	r0, sl
 8006a3a:	4659      	mov	r1, fp
 8006a3c:	f7f9 fddc 	bl	80005f8 <__aeabi_dmul>
 8006a40:	4602      	mov	r2, r0
 8006a42:	460b      	mov	r3, r1
 8006a44:	4640      	mov	r0, r8
 8006a46:	4649      	mov	r1, r9
 8006a48:	f7f9 fc20 	bl	800028c <__adddf3>
 8006a4c:	4632      	mov	r2, r6
 8006a4e:	463b      	mov	r3, r7
 8006a50:	4680      	mov	r8, r0
 8006a52:	4689      	mov	r9, r1
 8006a54:	4620      	mov	r0, r4
 8006a56:	4629      	mov	r1, r5
 8006a58:	f7f9 fdce 	bl	80005f8 <__aeabi_dmul>
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4604      	mov	r4, r0
 8006a60:	460d      	mov	r5, r1
 8006a62:	4602      	mov	r2, r0
 8006a64:	4649      	mov	r1, r9
 8006a66:	4640      	mov	r0, r8
 8006a68:	f7f9 fc10 	bl	800028c <__adddf3>
 8006a6c:	4b19      	ldr	r3, [pc, #100]	; (8006ad4 <__ieee754_pow+0x3fc>)
 8006a6e:	4299      	cmp	r1, r3
 8006a70:	ec45 4b19 	vmov	d9, r4, r5
 8006a74:	4606      	mov	r6, r0
 8006a76:	460f      	mov	r7, r1
 8006a78:	468b      	mov	fp, r1
 8006a7a:	f340 82f0 	ble.w	800705e <__ieee754_pow+0x986>
 8006a7e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006a82:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006a86:	4303      	orrs	r3, r0
 8006a88:	f000 81e4 	beq.w	8006e54 <__ieee754_pow+0x77c>
 8006a8c:	ec51 0b18 	vmov	r0, r1, d8
 8006a90:	2200      	movs	r2, #0
 8006a92:	2300      	movs	r3, #0
 8006a94:	f7fa f822 	bl	8000adc <__aeabi_dcmplt>
 8006a98:	3800      	subs	r0, #0
 8006a9a:	bf18      	it	ne
 8006a9c:	2001      	movne	r0, #1
 8006a9e:	e72b      	b.n	80068f8 <__ieee754_pow+0x220>
 8006aa0:	60000000 	.word	0x60000000
 8006aa4:	3ff71547 	.word	0x3ff71547
 8006aa8:	f85ddf44 	.word	0xf85ddf44
 8006aac:	3e54ae0b 	.word	0x3e54ae0b
 8006ab0:	55555555 	.word	0x55555555
 8006ab4:	3fd55555 	.word	0x3fd55555
 8006ab8:	652b82fe 	.word	0x652b82fe
 8006abc:	3ff71547 	.word	0x3ff71547
 8006ac0:	00000000 	.word	0x00000000
 8006ac4:	bff00000 	.word	0xbff00000
 8006ac8:	3ff00000 	.word	0x3ff00000
 8006acc:	3fd00000 	.word	0x3fd00000
 8006ad0:	3fe00000 	.word	0x3fe00000
 8006ad4:	408fffff 	.word	0x408fffff
 8006ad8:	4bd5      	ldr	r3, [pc, #852]	; (8006e30 <__ieee754_pow+0x758>)
 8006ada:	402b      	ands	r3, r5
 8006adc:	2200      	movs	r2, #0
 8006ade:	b92b      	cbnz	r3, 8006aec <__ieee754_pow+0x414>
 8006ae0:	4bd4      	ldr	r3, [pc, #848]	; (8006e34 <__ieee754_pow+0x75c>)
 8006ae2:	f7f9 fd89 	bl	80005f8 <__aeabi_dmul>
 8006ae6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006aea:	460c      	mov	r4, r1
 8006aec:	1523      	asrs	r3, r4, #20
 8006aee:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006af2:	4413      	add	r3, r2
 8006af4:	9305      	str	r3, [sp, #20]
 8006af6:	4bd0      	ldr	r3, [pc, #832]	; (8006e38 <__ieee754_pow+0x760>)
 8006af8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006afc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006b00:	429c      	cmp	r4, r3
 8006b02:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006b06:	dd08      	ble.n	8006b1a <__ieee754_pow+0x442>
 8006b08:	4bcc      	ldr	r3, [pc, #816]	; (8006e3c <__ieee754_pow+0x764>)
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	f340 8162 	ble.w	8006dd4 <__ieee754_pow+0x6fc>
 8006b10:	9b05      	ldr	r3, [sp, #20]
 8006b12:	3301      	adds	r3, #1
 8006b14:	9305      	str	r3, [sp, #20]
 8006b16:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006b1a:	2400      	movs	r4, #0
 8006b1c:	00e3      	lsls	r3, r4, #3
 8006b1e:	9307      	str	r3, [sp, #28]
 8006b20:	4bc7      	ldr	r3, [pc, #796]	; (8006e40 <__ieee754_pow+0x768>)
 8006b22:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b26:	ed93 7b00 	vldr	d7, [r3]
 8006b2a:	4629      	mov	r1, r5
 8006b2c:	ec53 2b17 	vmov	r2, r3, d7
 8006b30:	eeb0 9a47 	vmov.f32	s18, s14
 8006b34:	eef0 9a67 	vmov.f32	s19, s15
 8006b38:	4682      	mov	sl, r0
 8006b3a:	f7f9 fba5 	bl	8000288 <__aeabi_dsub>
 8006b3e:	4652      	mov	r2, sl
 8006b40:	4606      	mov	r6, r0
 8006b42:	460f      	mov	r7, r1
 8006b44:	462b      	mov	r3, r5
 8006b46:	ec51 0b19 	vmov	r0, r1, d9
 8006b4a:	f7f9 fb9f 	bl	800028c <__adddf3>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	2000      	movs	r0, #0
 8006b54:	49bb      	ldr	r1, [pc, #748]	; (8006e44 <__ieee754_pow+0x76c>)
 8006b56:	f7f9 fe79 	bl	800084c <__aeabi_ddiv>
 8006b5a:	ec41 0b1a 	vmov	d10, r0, r1
 8006b5e:	4602      	mov	r2, r0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7f9 fd47 	bl	80005f8 <__aeabi_dmul>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b70:	9302      	str	r3, [sp, #8]
 8006b72:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006b76:	46ab      	mov	fp, r5
 8006b78:	106d      	asrs	r5, r5, #1
 8006b7a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006b7e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006b82:	ec41 0b18 	vmov	d8, r0, r1
 8006b86:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	4640      	mov	r0, r8
 8006b8e:	4649      	mov	r1, r9
 8006b90:	4614      	mov	r4, r2
 8006b92:	461d      	mov	r5, r3
 8006b94:	f7f9 fd30 	bl	80005f8 <__aeabi_dmul>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4630      	mov	r0, r6
 8006b9e:	4639      	mov	r1, r7
 8006ba0:	f7f9 fb72 	bl	8000288 <__aeabi_dsub>
 8006ba4:	ec53 2b19 	vmov	r2, r3, d9
 8006ba8:	4606      	mov	r6, r0
 8006baa:	460f      	mov	r7, r1
 8006bac:	4620      	mov	r0, r4
 8006bae:	4629      	mov	r1, r5
 8006bb0:	f7f9 fb6a 	bl	8000288 <__aeabi_dsub>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	4650      	mov	r0, sl
 8006bba:	4659      	mov	r1, fp
 8006bbc:	f7f9 fb64 	bl	8000288 <__aeabi_dsub>
 8006bc0:	4642      	mov	r2, r8
 8006bc2:	464b      	mov	r3, r9
 8006bc4:	f7f9 fd18 	bl	80005f8 <__aeabi_dmul>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4630      	mov	r0, r6
 8006bce:	4639      	mov	r1, r7
 8006bd0:	f7f9 fb5a 	bl	8000288 <__aeabi_dsub>
 8006bd4:	ec53 2b1a 	vmov	r2, r3, d10
 8006bd8:	f7f9 fd0e 	bl	80005f8 <__aeabi_dmul>
 8006bdc:	ec53 2b18 	vmov	r2, r3, d8
 8006be0:	ec41 0b19 	vmov	d9, r0, r1
 8006be4:	ec51 0b18 	vmov	r0, r1, d8
 8006be8:	f7f9 fd06 	bl	80005f8 <__aeabi_dmul>
 8006bec:	a37c      	add	r3, pc, #496	; (adr r3, 8006de0 <__ieee754_pow+0x708>)
 8006bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	f7f9 fcff 	bl	80005f8 <__aeabi_dmul>
 8006bfa:	a37b      	add	r3, pc, #492	; (adr r3, 8006de8 <__ieee754_pow+0x710>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fb44 	bl	800028c <__adddf3>
 8006c04:	4622      	mov	r2, r4
 8006c06:	462b      	mov	r3, r5
 8006c08:	f7f9 fcf6 	bl	80005f8 <__aeabi_dmul>
 8006c0c:	a378      	add	r3, pc, #480	; (adr r3, 8006df0 <__ieee754_pow+0x718>)
 8006c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c12:	f7f9 fb3b 	bl	800028c <__adddf3>
 8006c16:	4622      	mov	r2, r4
 8006c18:	462b      	mov	r3, r5
 8006c1a:	f7f9 fced 	bl	80005f8 <__aeabi_dmul>
 8006c1e:	a376      	add	r3, pc, #472	; (adr r3, 8006df8 <__ieee754_pow+0x720>)
 8006c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c24:	f7f9 fb32 	bl	800028c <__adddf3>
 8006c28:	4622      	mov	r2, r4
 8006c2a:	462b      	mov	r3, r5
 8006c2c:	f7f9 fce4 	bl	80005f8 <__aeabi_dmul>
 8006c30:	a373      	add	r3, pc, #460	; (adr r3, 8006e00 <__ieee754_pow+0x728>)
 8006c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c36:	f7f9 fb29 	bl	800028c <__adddf3>
 8006c3a:	4622      	mov	r2, r4
 8006c3c:	462b      	mov	r3, r5
 8006c3e:	f7f9 fcdb 	bl	80005f8 <__aeabi_dmul>
 8006c42:	a371      	add	r3, pc, #452	; (adr r3, 8006e08 <__ieee754_pow+0x730>)
 8006c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c48:	f7f9 fb20 	bl	800028c <__adddf3>
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	4606      	mov	r6, r0
 8006c50:	460f      	mov	r7, r1
 8006c52:	462b      	mov	r3, r5
 8006c54:	4620      	mov	r0, r4
 8006c56:	4629      	mov	r1, r5
 8006c58:	f7f9 fcce 	bl	80005f8 <__aeabi_dmul>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	460b      	mov	r3, r1
 8006c60:	4630      	mov	r0, r6
 8006c62:	4639      	mov	r1, r7
 8006c64:	f7f9 fcc8 	bl	80005f8 <__aeabi_dmul>
 8006c68:	4642      	mov	r2, r8
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	460d      	mov	r5, r1
 8006c6e:	464b      	mov	r3, r9
 8006c70:	ec51 0b18 	vmov	r0, r1, d8
 8006c74:	f7f9 fb0a 	bl	800028c <__adddf3>
 8006c78:	ec53 2b19 	vmov	r2, r3, d9
 8006c7c:	f7f9 fcbc 	bl	80005f8 <__aeabi_dmul>
 8006c80:	4622      	mov	r2, r4
 8006c82:	462b      	mov	r3, r5
 8006c84:	f7f9 fb02 	bl	800028c <__adddf3>
 8006c88:	4642      	mov	r2, r8
 8006c8a:	4682      	mov	sl, r0
 8006c8c:	468b      	mov	fp, r1
 8006c8e:	464b      	mov	r3, r9
 8006c90:	4640      	mov	r0, r8
 8006c92:	4649      	mov	r1, r9
 8006c94:	f7f9 fcb0 	bl	80005f8 <__aeabi_dmul>
 8006c98:	4b6b      	ldr	r3, [pc, #428]	; (8006e48 <__ieee754_pow+0x770>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	460f      	mov	r7, r1
 8006ca0:	f7f9 faf4 	bl	800028c <__adddf3>
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	465b      	mov	r3, fp
 8006ca8:	f7f9 faf0 	bl	800028c <__adddf3>
 8006cac:	2000      	movs	r0, #0
 8006cae:	4604      	mov	r4, r0
 8006cb0:	460d      	mov	r5, r1
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4649      	mov	r1, r9
 8006cba:	f7f9 fc9d 	bl	80005f8 <__aeabi_dmul>
 8006cbe:	4b62      	ldr	r3, [pc, #392]	; (8006e48 <__ieee754_pow+0x770>)
 8006cc0:	4680      	mov	r8, r0
 8006cc2:	4689      	mov	r9, r1
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	4620      	mov	r0, r4
 8006cc8:	4629      	mov	r1, r5
 8006cca:	f7f9 fadd 	bl	8000288 <__aeabi_dsub>
 8006cce:	4632      	mov	r2, r6
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	f7f9 fad9 	bl	8000288 <__aeabi_dsub>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4650      	mov	r0, sl
 8006cdc:	4659      	mov	r1, fp
 8006cde:	f7f9 fad3 	bl	8000288 <__aeabi_dsub>
 8006ce2:	ec53 2b18 	vmov	r2, r3, d8
 8006ce6:	f7f9 fc87 	bl	80005f8 <__aeabi_dmul>
 8006cea:	4622      	mov	r2, r4
 8006cec:	4606      	mov	r6, r0
 8006cee:	460f      	mov	r7, r1
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	ec51 0b19 	vmov	r0, r1, d9
 8006cf6:	f7f9 fc7f 	bl	80005f8 <__aeabi_dmul>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4630      	mov	r0, r6
 8006d00:	4639      	mov	r1, r7
 8006d02:	f7f9 fac3 	bl	800028c <__adddf3>
 8006d06:	4606      	mov	r6, r0
 8006d08:	460f      	mov	r7, r1
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4640      	mov	r0, r8
 8006d10:	4649      	mov	r1, r9
 8006d12:	f7f9 fabb 	bl	800028c <__adddf3>
 8006d16:	a33e      	add	r3, pc, #248	; (adr r3, 8006e10 <__ieee754_pow+0x738>)
 8006d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	4604      	mov	r4, r0
 8006d20:	460d      	mov	r5, r1
 8006d22:	f7f9 fc69 	bl	80005f8 <__aeabi_dmul>
 8006d26:	4642      	mov	r2, r8
 8006d28:	ec41 0b18 	vmov	d8, r0, r1
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 faa9 	bl	8000288 <__aeabi_dsub>
 8006d36:	4602      	mov	r2, r0
 8006d38:	460b      	mov	r3, r1
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7f9 faa3 	bl	8000288 <__aeabi_dsub>
 8006d42:	a335      	add	r3, pc, #212	; (adr r3, 8006e18 <__ieee754_pow+0x740>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f7f9 fc56 	bl	80005f8 <__aeabi_dmul>
 8006d4c:	a334      	add	r3, pc, #208	; (adr r3, 8006e20 <__ieee754_pow+0x748>)
 8006d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d52:	4606      	mov	r6, r0
 8006d54:	460f      	mov	r7, r1
 8006d56:	4620      	mov	r0, r4
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f7f9 fc4d 	bl	80005f8 <__aeabi_dmul>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4630      	mov	r0, r6
 8006d64:	4639      	mov	r1, r7
 8006d66:	f7f9 fa91 	bl	800028c <__adddf3>
 8006d6a:	9a07      	ldr	r2, [sp, #28]
 8006d6c:	4b37      	ldr	r3, [pc, #220]	; (8006e4c <__ieee754_pow+0x774>)
 8006d6e:	4413      	add	r3, r2
 8006d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d74:	f7f9 fa8a 	bl	800028c <__adddf3>
 8006d78:	4682      	mov	sl, r0
 8006d7a:	9805      	ldr	r0, [sp, #20]
 8006d7c:	468b      	mov	fp, r1
 8006d7e:	f7f9 fbd1 	bl	8000524 <__aeabi_i2d>
 8006d82:	9a07      	ldr	r2, [sp, #28]
 8006d84:	4b32      	ldr	r3, [pc, #200]	; (8006e50 <__ieee754_pow+0x778>)
 8006d86:	4413      	add	r3, r2
 8006d88:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d8c:	4606      	mov	r6, r0
 8006d8e:	460f      	mov	r7, r1
 8006d90:	4652      	mov	r2, sl
 8006d92:	465b      	mov	r3, fp
 8006d94:	ec51 0b18 	vmov	r0, r1, d8
 8006d98:	f7f9 fa78 	bl	800028c <__adddf3>
 8006d9c:	4642      	mov	r2, r8
 8006d9e:	464b      	mov	r3, r9
 8006da0:	f7f9 fa74 	bl	800028c <__adddf3>
 8006da4:	4632      	mov	r2, r6
 8006da6:	463b      	mov	r3, r7
 8006da8:	f7f9 fa70 	bl	800028c <__adddf3>
 8006dac:	2000      	movs	r0, #0
 8006dae:	4632      	mov	r2, r6
 8006db0:	463b      	mov	r3, r7
 8006db2:	4604      	mov	r4, r0
 8006db4:	460d      	mov	r5, r1
 8006db6:	f7f9 fa67 	bl	8000288 <__aeabi_dsub>
 8006dba:	4642      	mov	r2, r8
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	f7f9 fa63 	bl	8000288 <__aeabi_dsub>
 8006dc2:	ec53 2b18 	vmov	r2, r3, d8
 8006dc6:	f7f9 fa5f 	bl	8000288 <__aeabi_dsub>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	4650      	mov	r0, sl
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	e610      	b.n	80069f6 <__ieee754_pow+0x31e>
 8006dd4:	2401      	movs	r4, #1
 8006dd6:	e6a1      	b.n	8006b1c <__ieee754_pow+0x444>
 8006dd8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006e28 <__ieee754_pow+0x750>
 8006ddc:	e617      	b.n	8006a0e <__ieee754_pow+0x336>
 8006dde:	bf00      	nop
 8006de0:	4a454eef 	.word	0x4a454eef
 8006de4:	3fca7e28 	.word	0x3fca7e28
 8006de8:	93c9db65 	.word	0x93c9db65
 8006dec:	3fcd864a 	.word	0x3fcd864a
 8006df0:	a91d4101 	.word	0xa91d4101
 8006df4:	3fd17460 	.word	0x3fd17460
 8006df8:	518f264d 	.word	0x518f264d
 8006dfc:	3fd55555 	.word	0x3fd55555
 8006e00:	db6fabff 	.word	0xdb6fabff
 8006e04:	3fdb6db6 	.word	0x3fdb6db6
 8006e08:	33333303 	.word	0x33333303
 8006e0c:	3fe33333 	.word	0x3fe33333
 8006e10:	e0000000 	.word	0xe0000000
 8006e14:	3feec709 	.word	0x3feec709
 8006e18:	dc3a03fd 	.word	0xdc3a03fd
 8006e1c:	3feec709 	.word	0x3feec709
 8006e20:	145b01f5 	.word	0x145b01f5
 8006e24:	be3e2fe0 	.word	0xbe3e2fe0
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	3ff00000 	.word	0x3ff00000
 8006e30:	7ff00000 	.word	0x7ff00000
 8006e34:	43400000 	.word	0x43400000
 8006e38:	0003988e 	.word	0x0003988e
 8006e3c:	000bb679 	.word	0x000bb679
 8006e40:	08007828 	.word	0x08007828
 8006e44:	3ff00000 	.word	0x3ff00000
 8006e48:	40080000 	.word	0x40080000
 8006e4c:	08007848 	.word	0x08007848
 8006e50:	08007838 	.word	0x08007838
 8006e54:	a3b3      	add	r3, pc, #716	; (adr r3, 8007124 <__ieee754_pow+0xa4c>)
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	4649      	mov	r1, r9
 8006e5e:	f7f9 fa15 	bl	800028c <__adddf3>
 8006e62:	4622      	mov	r2, r4
 8006e64:	ec41 0b1a 	vmov	d10, r0, r1
 8006e68:	462b      	mov	r3, r5
 8006e6a:	4630      	mov	r0, r6
 8006e6c:	4639      	mov	r1, r7
 8006e6e:	f7f9 fa0b 	bl	8000288 <__aeabi_dsub>
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	ec51 0b1a 	vmov	r0, r1, d10
 8006e7a:	f7f9 fe4d 	bl	8000b18 <__aeabi_dcmpgt>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	f47f ae04 	bne.w	8006a8c <__ieee754_pow+0x3b4>
 8006e84:	4aa2      	ldr	r2, [pc, #648]	; (8007110 <__ieee754_pow+0xa38>)
 8006e86:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	f340 8107 	ble.w	800709e <__ieee754_pow+0x9c6>
 8006e90:	151b      	asrs	r3, r3, #20
 8006e92:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006e96:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006e9a:	fa4a fa03 	asr.w	sl, sl, r3
 8006e9e:	44da      	add	sl, fp
 8006ea0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006ea4:	489b      	ldr	r0, [pc, #620]	; (8007114 <__ieee754_pow+0xa3c>)
 8006ea6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006eaa:	4108      	asrs	r0, r1
 8006eac:	ea00 030a 	and.w	r3, r0, sl
 8006eb0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006eb4:	f1c1 0114 	rsb	r1, r1, #20
 8006eb8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006ebc:	fa4a fa01 	asr.w	sl, sl, r1
 8006ec0:	f1bb 0f00 	cmp.w	fp, #0
 8006ec4:	f04f 0200 	mov.w	r2, #0
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4629      	mov	r1, r5
 8006ecc:	bfb8      	it	lt
 8006ece:	f1ca 0a00 	rsblt	sl, sl, #0
 8006ed2:	f7f9 f9d9 	bl	8000288 <__aeabi_dsub>
 8006ed6:	ec41 0b19 	vmov	d9, r0, r1
 8006eda:	4642      	mov	r2, r8
 8006edc:	464b      	mov	r3, r9
 8006ede:	ec51 0b19 	vmov	r0, r1, d9
 8006ee2:	f7f9 f9d3 	bl	800028c <__adddf3>
 8006ee6:	a37a      	add	r3, pc, #488	; (adr r3, 80070d0 <__ieee754_pow+0x9f8>)
 8006ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eec:	2000      	movs	r0, #0
 8006eee:	4604      	mov	r4, r0
 8006ef0:	460d      	mov	r5, r1
 8006ef2:	f7f9 fb81 	bl	80005f8 <__aeabi_dmul>
 8006ef6:	ec53 2b19 	vmov	r2, r3, d9
 8006efa:	4606      	mov	r6, r0
 8006efc:	460f      	mov	r7, r1
 8006efe:	4620      	mov	r0, r4
 8006f00:	4629      	mov	r1, r5
 8006f02:	f7f9 f9c1 	bl	8000288 <__aeabi_dsub>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	f7f9 f9bb 	bl	8000288 <__aeabi_dsub>
 8006f12:	a371      	add	r3, pc, #452	; (adr r3, 80070d8 <__ieee754_pow+0xa00>)
 8006f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f18:	f7f9 fb6e 	bl	80005f8 <__aeabi_dmul>
 8006f1c:	a370      	add	r3, pc, #448	; (adr r3, 80070e0 <__ieee754_pow+0xa08>)
 8006f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f22:	4680      	mov	r8, r0
 8006f24:	4689      	mov	r9, r1
 8006f26:	4620      	mov	r0, r4
 8006f28:	4629      	mov	r1, r5
 8006f2a:	f7f9 fb65 	bl	80005f8 <__aeabi_dmul>
 8006f2e:	4602      	mov	r2, r0
 8006f30:	460b      	mov	r3, r1
 8006f32:	4640      	mov	r0, r8
 8006f34:	4649      	mov	r1, r9
 8006f36:	f7f9 f9a9 	bl	800028c <__adddf3>
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4630      	mov	r0, r6
 8006f44:	4639      	mov	r1, r7
 8006f46:	f7f9 f9a1 	bl	800028c <__adddf3>
 8006f4a:	4632      	mov	r2, r6
 8006f4c:	463b      	mov	r3, r7
 8006f4e:	4680      	mov	r8, r0
 8006f50:	4689      	mov	r9, r1
 8006f52:	f7f9 f999 	bl	8000288 <__aeabi_dsub>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	f7f9 f993 	bl	8000288 <__aeabi_dsub>
 8006f62:	4642      	mov	r2, r8
 8006f64:	4606      	mov	r6, r0
 8006f66:	460f      	mov	r7, r1
 8006f68:	464b      	mov	r3, r9
 8006f6a:	4640      	mov	r0, r8
 8006f6c:	4649      	mov	r1, r9
 8006f6e:	f7f9 fb43 	bl	80005f8 <__aeabi_dmul>
 8006f72:	a35d      	add	r3, pc, #372	; (adr r3, 80070e8 <__ieee754_pow+0xa10>)
 8006f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f78:	4604      	mov	r4, r0
 8006f7a:	460d      	mov	r5, r1
 8006f7c:	f7f9 fb3c 	bl	80005f8 <__aeabi_dmul>
 8006f80:	a35b      	add	r3, pc, #364	; (adr r3, 80070f0 <__ieee754_pow+0xa18>)
 8006f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f86:	f7f9 f97f 	bl	8000288 <__aeabi_dsub>
 8006f8a:	4622      	mov	r2, r4
 8006f8c:	462b      	mov	r3, r5
 8006f8e:	f7f9 fb33 	bl	80005f8 <__aeabi_dmul>
 8006f92:	a359      	add	r3, pc, #356	; (adr r3, 80070f8 <__ieee754_pow+0xa20>)
 8006f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f98:	f7f9 f978 	bl	800028c <__adddf3>
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	462b      	mov	r3, r5
 8006fa0:	f7f9 fb2a 	bl	80005f8 <__aeabi_dmul>
 8006fa4:	a356      	add	r3, pc, #344	; (adr r3, 8007100 <__ieee754_pow+0xa28>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f7f9 f96d 	bl	8000288 <__aeabi_dsub>
 8006fae:	4622      	mov	r2, r4
 8006fb0:	462b      	mov	r3, r5
 8006fb2:	f7f9 fb21 	bl	80005f8 <__aeabi_dmul>
 8006fb6:	a354      	add	r3, pc, #336	; (adr r3, 8007108 <__ieee754_pow+0xa30>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 f966 	bl	800028c <__adddf3>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	f7f9 fb18 	bl	80005f8 <__aeabi_dmul>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	f7f9 f95a 	bl	8000288 <__aeabi_dsub>
 8006fd4:	4604      	mov	r4, r0
 8006fd6:	460d      	mov	r5, r1
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4649      	mov	r1, r9
 8006fe0:	f7f9 fb0a 	bl	80005f8 <__aeabi_dmul>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	ec41 0b19 	vmov	d9, r0, r1
 8006fea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7f9 f949 	bl	8000288 <__aeabi_dsub>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	ec51 0b19 	vmov	r0, r1, d9
 8006ffe:	f7f9 fc25 	bl	800084c <__aeabi_ddiv>
 8007002:	4632      	mov	r2, r6
 8007004:	4604      	mov	r4, r0
 8007006:	460d      	mov	r5, r1
 8007008:	463b      	mov	r3, r7
 800700a:	4640      	mov	r0, r8
 800700c:	4649      	mov	r1, r9
 800700e:	f7f9 faf3 	bl	80005f8 <__aeabi_dmul>
 8007012:	4632      	mov	r2, r6
 8007014:	463b      	mov	r3, r7
 8007016:	f7f9 f939 	bl	800028c <__adddf3>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4620      	mov	r0, r4
 8007020:	4629      	mov	r1, r5
 8007022:	f7f9 f931 	bl	8000288 <__aeabi_dsub>
 8007026:	4642      	mov	r2, r8
 8007028:	464b      	mov	r3, r9
 800702a:	f7f9 f92d 	bl	8000288 <__aeabi_dsub>
 800702e:	460b      	mov	r3, r1
 8007030:	4602      	mov	r2, r0
 8007032:	4939      	ldr	r1, [pc, #228]	; (8007118 <__ieee754_pow+0xa40>)
 8007034:	2000      	movs	r0, #0
 8007036:	f7f9 f927 	bl	8000288 <__aeabi_dsub>
 800703a:	ec41 0b10 	vmov	d0, r0, r1
 800703e:	ee10 3a90 	vmov	r3, s1
 8007042:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800704a:	da2b      	bge.n	80070a4 <__ieee754_pow+0x9cc>
 800704c:	4650      	mov	r0, sl
 800704e:	f000 f877 	bl	8007140 <scalbn>
 8007052:	ec51 0b10 	vmov	r0, r1, d0
 8007056:	ec53 2b18 	vmov	r2, r3, d8
 800705a:	f7ff bbee 	b.w	800683a <__ieee754_pow+0x162>
 800705e:	4b2f      	ldr	r3, [pc, #188]	; (800711c <__ieee754_pow+0xa44>)
 8007060:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007064:	429e      	cmp	r6, r3
 8007066:	f77f af0d 	ble.w	8006e84 <__ieee754_pow+0x7ac>
 800706a:	4b2d      	ldr	r3, [pc, #180]	; (8007120 <__ieee754_pow+0xa48>)
 800706c:	440b      	add	r3, r1
 800706e:	4303      	orrs	r3, r0
 8007070:	d009      	beq.n	8007086 <__ieee754_pow+0x9ae>
 8007072:	ec51 0b18 	vmov	r0, r1, d8
 8007076:	2200      	movs	r2, #0
 8007078:	2300      	movs	r3, #0
 800707a:	f7f9 fd2f 	bl	8000adc <__aeabi_dcmplt>
 800707e:	3800      	subs	r0, #0
 8007080:	bf18      	it	ne
 8007082:	2001      	movne	r0, #1
 8007084:	e448      	b.n	8006918 <__ieee754_pow+0x240>
 8007086:	4622      	mov	r2, r4
 8007088:	462b      	mov	r3, r5
 800708a:	f7f9 f8fd 	bl	8000288 <__aeabi_dsub>
 800708e:	4642      	mov	r2, r8
 8007090:	464b      	mov	r3, r9
 8007092:	f7f9 fd37 	bl	8000b04 <__aeabi_dcmpge>
 8007096:	2800      	cmp	r0, #0
 8007098:	f43f aef4 	beq.w	8006e84 <__ieee754_pow+0x7ac>
 800709c:	e7e9      	b.n	8007072 <__ieee754_pow+0x99a>
 800709e:	f04f 0a00 	mov.w	sl, #0
 80070a2:	e71a      	b.n	8006eda <__ieee754_pow+0x802>
 80070a4:	ec51 0b10 	vmov	r0, r1, d0
 80070a8:	4619      	mov	r1, r3
 80070aa:	e7d4      	b.n	8007056 <__ieee754_pow+0x97e>
 80070ac:	491a      	ldr	r1, [pc, #104]	; (8007118 <__ieee754_pow+0xa40>)
 80070ae:	2000      	movs	r0, #0
 80070b0:	f7ff bb31 	b.w	8006716 <__ieee754_pow+0x3e>
 80070b4:	2000      	movs	r0, #0
 80070b6:	2100      	movs	r1, #0
 80070b8:	f7ff bb2d 	b.w	8006716 <__ieee754_pow+0x3e>
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7ff bb29 	b.w	8006716 <__ieee754_pow+0x3e>
 80070c4:	9204      	str	r2, [sp, #16]
 80070c6:	f7ff bb7b 	b.w	80067c0 <__ieee754_pow+0xe8>
 80070ca:	2300      	movs	r3, #0
 80070cc:	f7ff bb65 	b.w	800679a <__ieee754_pow+0xc2>
 80070d0:	00000000 	.word	0x00000000
 80070d4:	3fe62e43 	.word	0x3fe62e43
 80070d8:	fefa39ef 	.word	0xfefa39ef
 80070dc:	3fe62e42 	.word	0x3fe62e42
 80070e0:	0ca86c39 	.word	0x0ca86c39
 80070e4:	be205c61 	.word	0xbe205c61
 80070e8:	72bea4d0 	.word	0x72bea4d0
 80070ec:	3e663769 	.word	0x3e663769
 80070f0:	c5d26bf1 	.word	0xc5d26bf1
 80070f4:	3ebbbd41 	.word	0x3ebbbd41
 80070f8:	af25de2c 	.word	0xaf25de2c
 80070fc:	3f11566a 	.word	0x3f11566a
 8007100:	16bebd93 	.word	0x16bebd93
 8007104:	3f66c16c 	.word	0x3f66c16c
 8007108:	5555553e 	.word	0x5555553e
 800710c:	3fc55555 	.word	0x3fc55555
 8007110:	3fe00000 	.word	0x3fe00000
 8007114:	fff00000 	.word	0xfff00000
 8007118:	3ff00000 	.word	0x3ff00000
 800711c:	4090cbff 	.word	0x4090cbff
 8007120:	3f6f3400 	.word	0x3f6f3400
 8007124:	652b82fe 	.word	0x652b82fe
 8007128:	3c971547 	.word	0x3c971547

0800712c <fabs>:
 800712c:	ec51 0b10 	vmov	r0, r1, d0
 8007130:	ee10 2a10 	vmov	r2, s0
 8007134:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007138:	ec43 2b10 	vmov	d0, r2, r3
 800713c:	4770      	bx	lr
	...

08007140 <scalbn>:
 8007140:	b570      	push	{r4, r5, r6, lr}
 8007142:	ec55 4b10 	vmov	r4, r5, d0
 8007146:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800714a:	4606      	mov	r6, r0
 800714c:	462b      	mov	r3, r5
 800714e:	b999      	cbnz	r1, 8007178 <scalbn+0x38>
 8007150:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007154:	4323      	orrs	r3, r4
 8007156:	d03f      	beq.n	80071d8 <scalbn+0x98>
 8007158:	4b35      	ldr	r3, [pc, #212]	; (8007230 <scalbn+0xf0>)
 800715a:	4629      	mov	r1, r5
 800715c:	ee10 0a10 	vmov	r0, s0
 8007160:	2200      	movs	r2, #0
 8007162:	f7f9 fa49 	bl	80005f8 <__aeabi_dmul>
 8007166:	4b33      	ldr	r3, [pc, #204]	; (8007234 <scalbn+0xf4>)
 8007168:	429e      	cmp	r6, r3
 800716a:	4604      	mov	r4, r0
 800716c:	460d      	mov	r5, r1
 800716e:	da10      	bge.n	8007192 <scalbn+0x52>
 8007170:	a327      	add	r3, pc, #156	; (adr r3, 8007210 <scalbn+0xd0>)
 8007172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007176:	e01f      	b.n	80071b8 <scalbn+0x78>
 8007178:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800717c:	4291      	cmp	r1, r2
 800717e:	d10c      	bne.n	800719a <scalbn+0x5a>
 8007180:	ee10 2a10 	vmov	r2, s0
 8007184:	4620      	mov	r0, r4
 8007186:	4629      	mov	r1, r5
 8007188:	f7f9 f880 	bl	800028c <__adddf3>
 800718c:	4604      	mov	r4, r0
 800718e:	460d      	mov	r5, r1
 8007190:	e022      	b.n	80071d8 <scalbn+0x98>
 8007192:	460b      	mov	r3, r1
 8007194:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007198:	3936      	subs	r1, #54	; 0x36
 800719a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800719e:	4296      	cmp	r6, r2
 80071a0:	dd0d      	ble.n	80071be <scalbn+0x7e>
 80071a2:	2d00      	cmp	r5, #0
 80071a4:	a11c      	add	r1, pc, #112	; (adr r1, 8007218 <scalbn+0xd8>)
 80071a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071aa:	da02      	bge.n	80071b2 <scalbn+0x72>
 80071ac:	a11c      	add	r1, pc, #112	; (adr r1, 8007220 <scalbn+0xe0>)
 80071ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071b2:	a319      	add	r3, pc, #100	; (adr r3, 8007218 <scalbn+0xd8>)
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	f7f9 fa1e 	bl	80005f8 <__aeabi_dmul>
 80071bc:	e7e6      	b.n	800718c <scalbn+0x4c>
 80071be:	1872      	adds	r2, r6, r1
 80071c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80071c4:	428a      	cmp	r2, r1
 80071c6:	dcec      	bgt.n	80071a2 <scalbn+0x62>
 80071c8:	2a00      	cmp	r2, #0
 80071ca:	dd08      	ble.n	80071de <scalbn+0x9e>
 80071cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80071d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80071d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80071d8:	ec45 4b10 	vmov	d0, r4, r5
 80071dc:	bd70      	pop	{r4, r5, r6, pc}
 80071de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80071e2:	da08      	bge.n	80071f6 <scalbn+0xb6>
 80071e4:	2d00      	cmp	r5, #0
 80071e6:	a10a      	add	r1, pc, #40	; (adr r1, 8007210 <scalbn+0xd0>)
 80071e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ec:	dac0      	bge.n	8007170 <scalbn+0x30>
 80071ee:	a10e      	add	r1, pc, #56	; (adr r1, 8007228 <scalbn+0xe8>)
 80071f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071f4:	e7bc      	b.n	8007170 <scalbn+0x30>
 80071f6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80071fa:	3236      	adds	r2, #54	; 0x36
 80071fc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007200:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007204:	4620      	mov	r0, r4
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <scalbn+0xf8>)
 8007208:	2200      	movs	r2, #0
 800720a:	e7d5      	b.n	80071b8 <scalbn+0x78>
 800720c:	f3af 8000 	nop.w
 8007210:	c2f8f359 	.word	0xc2f8f359
 8007214:	01a56e1f 	.word	0x01a56e1f
 8007218:	8800759c 	.word	0x8800759c
 800721c:	7e37e43c 	.word	0x7e37e43c
 8007220:	8800759c 	.word	0x8800759c
 8007224:	fe37e43c 	.word	0xfe37e43c
 8007228:	c2f8f359 	.word	0xc2f8f359
 800722c:	81a56e1f 	.word	0x81a56e1f
 8007230:	43500000 	.word	0x43500000
 8007234:	ffff3cb0 	.word	0xffff3cb0
 8007238:	3c900000 	.word	0x3c900000

0800723c <with_errno>:
 800723c:	b570      	push	{r4, r5, r6, lr}
 800723e:	4604      	mov	r4, r0
 8007240:	460d      	mov	r5, r1
 8007242:	4616      	mov	r6, r2
 8007244:	f7fd f9e8 	bl	8004618 <__errno>
 8007248:	4629      	mov	r1, r5
 800724a:	6006      	str	r6, [r0, #0]
 800724c:	4620      	mov	r0, r4
 800724e:	bd70      	pop	{r4, r5, r6, pc}

08007250 <xflow>:
 8007250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007252:	4614      	mov	r4, r2
 8007254:	461d      	mov	r5, r3
 8007256:	b108      	cbz	r0, 800725c <xflow+0xc>
 8007258:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800725c:	e9cd 2300 	strd	r2, r3, [sp]
 8007260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	f7f9 f9c6 	bl	80005f8 <__aeabi_dmul>
 800726c:	2222      	movs	r2, #34	; 0x22
 800726e:	b003      	add	sp, #12
 8007270:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007274:	f7ff bfe2 	b.w	800723c <with_errno>

08007278 <__math_uflow>:
 8007278:	b508      	push	{r3, lr}
 800727a:	2200      	movs	r2, #0
 800727c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007280:	f7ff ffe6 	bl	8007250 <xflow>
 8007284:	ec41 0b10 	vmov	d0, r0, r1
 8007288:	bd08      	pop	{r3, pc}

0800728a <__math_oflow>:
 800728a:	b508      	push	{r3, lr}
 800728c:	2200      	movs	r2, #0
 800728e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007292:	f7ff ffdd 	bl	8007250 <xflow>
 8007296:	ec41 0b10 	vmov	d0, r0, r1
 800729a:	bd08      	pop	{r3, pc}

0800729c <__ieee754_sqrt>:
 800729c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a0:	ec55 4b10 	vmov	r4, r5, d0
 80072a4:	4e67      	ldr	r6, [pc, #412]	; (8007444 <__ieee754_sqrt+0x1a8>)
 80072a6:	43ae      	bics	r6, r5
 80072a8:	ee10 0a10 	vmov	r0, s0
 80072ac:	ee10 2a10 	vmov	r2, s0
 80072b0:	4629      	mov	r1, r5
 80072b2:	462b      	mov	r3, r5
 80072b4:	d10d      	bne.n	80072d2 <__ieee754_sqrt+0x36>
 80072b6:	f7f9 f99f 	bl	80005f8 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4620      	mov	r0, r4
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7f8 ffe3 	bl	800028c <__adddf3>
 80072c6:	4604      	mov	r4, r0
 80072c8:	460d      	mov	r5, r1
 80072ca:	ec45 4b10 	vmov	d0, r4, r5
 80072ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d2:	2d00      	cmp	r5, #0
 80072d4:	dc0b      	bgt.n	80072ee <__ieee754_sqrt+0x52>
 80072d6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80072da:	4326      	orrs	r6, r4
 80072dc:	d0f5      	beq.n	80072ca <__ieee754_sqrt+0x2e>
 80072de:	b135      	cbz	r5, 80072ee <__ieee754_sqrt+0x52>
 80072e0:	f7f8 ffd2 	bl	8000288 <__aeabi_dsub>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	f7f9 fab0 	bl	800084c <__aeabi_ddiv>
 80072ec:	e7eb      	b.n	80072c6 <__ieee754_sqrt+0x2a>
 80072ee:	1509      	asrs	r1, r1, #20
 80072f0:	f000 808d 	beq.w	800740e <__ieee754_sqrt+0x172>
 80072f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072f8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80072fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007300:	07c9      	lsls	r1, r1, #31
 8007302:	bf5c      	itt	pl
 8007304:	005b      	lslpl	r3, r3, #1
 8007306:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800730a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800730e:	bf58      	it	pl
 8007310:	0052      	lslpl	r2, r2, #1
 8007312:	2500      	movs	r5, #0
 8007314:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007318:	1076      	asrs	r6, r6, #1
 800731a:	0052      	lsls	r2, r2, #1
 800731c:	f04f 0e16 	mov.w	lr, #22
 8007320:	46ac      	mov	ip, r5
 8007322:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007326:	eb0c 0001 	add.w	r0, ip, r1
 800732a:	4298      	cmp	r0, r3
 800732c:	bfde      	ittt	le
 800732e:	1a1b      	suble	r3, r3, r0
 8007330:	eb00 0c01 	addle.w	ip, r0, r1
 8007334:	186d      	addle	r5, r5, r1
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	f1be 0e01 	subs.w	lr, lr, #1
 800733c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007340:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007344:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007348:	d1ed      	bne.n	8007326 <__ieee754_sqrt+0x8a>
 800734a:	4674      	mov	r4, lr
 800734c:	2720      	movs	r7, #32
 800734e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007352:	4563      	cmp	r3, ip
 8007354:	eb01 000e 	add.w	r0, r1, lr
 8007358:	dc02      	bgt.n	8007360 <__ieee754_sqrt+0xc4>
 800735a:	d113      	bne.n	8007384 <__ieee754_sqrt+0xe8>
 800735c:	4290      	cmp	r0, r2
 800735e:	d811      	bhi.n	8007384 <__ieee754_sqrt+0xe8>
 8007360:	2800      	cmp	r0, #0
 8007362:	eb00 0e01 	add.w	lr, r0, r1
 8007366:	da57      	bge.n	8007418 <__ieee754_sqrt+0x17c>
 8007368:	f1be 0f00 	cmp.w	lr, #0
 800736c:	db54      	blt.n	8007418 <__ieee754_sqrt+0x17c>
 800736e:	f10c 0801 	add.w	r8, ip, #1
 8007372:	eba3 030c 	sub.w	r3, r3, ip
 8007376:	4290      	cmp	r0, r2
 8007378:	bf88      	it	hi
 800737a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800737e:	1a12      	subs	r2, r2, r0
 8007380:	440c      	add	r4, r1
 8007382:	46c4      	mov	ip, r8
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	3f01      	subs	r7, #1
 8007388:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800738c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007390:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007394:	d1dd      	bne.n	8007352 <__ieee754_sqrt+0xb6>
 8007396:	4313      	orrs	r3, r2
 8007398:	d01b      	beq.n	80073d2 <__ieee754_sqrt+0x136>
 800739a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007448 <__ieee754_sqrt+0x1ac>
 800739e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800744c <__ieee754_sqrt+0x1b0>
 80073a2:	e9da 0100 	ldrd	r0, r1, [sl]
 80073a6:	e9db 2300 	ldrd	r2, r3, [fp]
 80073aa:	f7f8 ff6d 	bl	8000288 <__aeabi_dsub>
 80073ae:	e9da 8900 	ldrd	r8, r9, [sl]
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	4640      	mov	r0, r8
 80073b8:	4649      	mov	r1, r9
 80073ba:	f7f9 fb99 	bl	8000af0 <__aeabi_dcmple>
 80073be:	b140      	cbz	r0, 80073d2 <__ieee754_sqrt+0x136>
 80073c0:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80073c4:	e9da 0100 	ldrd	r0, r1, [sl]
 80073c8:	e9db 2300 	ldrd	r2, r3, [fp]
 80073cc:	d126      	bne.n	800741c <__ieee754_sqrt+0x180>
 80073ce:	3501      	adds	r5, #1
 80073d0:	463c      	mov	r4, r7
 80073d2:	106a      	asrs	r2, r5, #1
 80073d4:	0863      	lsrs	r3, r4, #1
 80073d6:	07e9      	lsls	r1, r5, #31
 80073d8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80073dc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80073e0:	bf48      	it	mi
 80073e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80073e6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80073ea:	461c      	mov	r4, r3
 80073ec:	e76d      	b.n	80072ca <__ieee754_sqrt+0x2e>
 80073ee:	0ad3      	lsrs	r3, r2, #11
 80073f0:	3815      	subs	r0, #21
 80073f2:	0552      	lsls	r2, r2, #21
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0fa      	beq.n	80073ee <__ieee754_sqrt+0x152>
 80073f8:	02dc      	lsls	r4, r3, #11
 80073fa:	d50a      	bpl.n	8007412 <__ieee754_sqrt+0x176>
 80073fc:	f1c1 0420 	rsb	r4, r1, #32
 8007400:	fa22 f404 	lsr.w	r4, r2, r4
 8007404:	1e4d      	subs	r5, r1, #1
 8007406:	408a      	lsls	r2, r1
 8007408:	4323      	orrs	r3, r4
 800740a:	1b41      	subs	r1, r0, r5
 800740c:	e772      	b.n	80072f4 <__ieee754_sqrt+0x58>
 800740e:	4608      	mov	r0, r1
 8007410:	e7f0      	b.n	80073f4 <__ieee754_sqrt+0x158>
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	3101      	adds	r1, #1
 8007416:	e7ef      	b.n	80073f8 <__ieee754_sqrt+0x15c>
 8007418:	46e0      	mov	r8, ip
 800741a:	e7aa      	b.n	8007372 <__ieee754_sqrt+0xd6>
 800741c:	f7f8 ff36 	bl	800028c <__adddf3>
 8007420:	e9da 8900 	ldrd	r8, r9, [sl]
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4640      	mov	r0, r8
 800742a:	4649      	mov	r1, r9
 800742c:	f7f9 fb56 	bl	8000adc <__aeabi_dcmplt>
 8007430:	b120      	cbz	r0, 800743c <__ieee754_sqrt+0x1a0>
 8007432:	1ca0      	adds	r0, r4, #2
 8007434:	bf08      	it	eq
 8007436:	3501      	addeq	r5, #1
 8007438:	3402      	adds	r4, #2
 800743a:	e7ca      	b.n	80073d2 <__ieee754_sqrt+0x136>
 800743c:	3401      	adds	r4, #1
 800743e:	f024 0401 	bic.w	r4, r4, #1
 8007442:	e7c6      	b.n	80073d2 <__ieee754_sqrt+0x136>
 8007444:	7ff00000 	.word	0x7ff00000
 8007448:	200001d0 	.word	0x200001d0
 800744c:	200001d8 	.word	0x200001d8

08007450 <_init>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	bf00      	nop
 8007454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007456:	bc08      	pop	{r3}
 8007458:	469e      	mov	lr, r3
 800745a:	4770      	bx	lr

0800745c <_fini>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr
