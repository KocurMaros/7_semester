
kokot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08006f60  08006f60  00016f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007350  08007350  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007350  08007350  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007350  08007350  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007358  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000194  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000374  20000374  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006959  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c1b  00000000  00000000  00026bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008c0  00000000  00000000  000287c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000064d  00000000  00000000  00029088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017a57  00000000  00000000  000296d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00007467  00000000  00000000  0004112c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000778b4  00000000  00000000  00048593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003690  00000000  00000000  000bfe48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  000c34d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f48 	.word	0x08006f48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08006f48 	.word	0x08006f48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <hts221_read_bytes>:
static uint8_t slaveAddress = HTS221_I2C_ADDRESS;

void hts221_write_bytes(uint8_t reg_address, uint8_t *data,uint8_t len){
	masterWriteMultiByte(data,len, slaveAddress, reg_address);
}
void hts221_read_bytes(uint8_t reg_address, uint8_t *data,uint8_t len){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	masterReadMultiByte(data,len, slaveAddress, reg_address);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <hts221_read_bytes+0x28>)
 8000c5a:	781a      	ldrb	r2, [r3, #0]
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	79b9      	ldrb	r1, [r7, #6]
 8000c60:	6838      	ldr	r0, [r7, #0]
 8000c62:	f000 fee9 	bl	8001a38 <masterReadMultiByte>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000

08000c74 <hts221_init>:

uint8_t hts221_init(){
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
	uint8_t ID;
	hts221_read_bytes(HTS221_REG_WHO_AM_I, &ID, 1);
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4619      	mov	r1, r3
 8000c80:	200f      	movs	r0, #15
 8000c82:	f7ff ffe1 	bl	8000c48 <hts221_read_bytes>
	if(ID != HTS221_WHO_AM_I_VALUE){
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	2bbc      	cmp	r3, #188	; 0xbc
 8000c8a:	d001      	beq.n	8000c90 <hts221_init+0x1c>
		return 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	e088      	b.n	8000da2 <hts221_init+0x12e>
	}

	uint8_t data[2];
	hts221_read_bytes(HTS221_REG_H0_rH_x2, &data, 1);
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2201      	movs	r2, #1
 8000c94:	4619      	mov	r1, r3
 8000c96:	2030      	movs	r0, #48	; 0x30
 8000c98:	f7ff ffd6 	bl	8000c48 <hts221_read_bytes>
	hy0 = data[0]/2;
 8000c9c:	793b      	ldrb	r3, [r7, #4]
 8000c9e:	085b      	lsrs	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	ee07 3a90 	vmov	s15, r3
 8000ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000caa:	4b40      	ldr	r3, [pc, #256]	; (8000dac <hts221_init+0x138>)
 8000cac:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_rH_x2, &data, 1);
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	2031      	movs	r0, #49	; 0x31
 8000cb8:	f7ff ffc6 	bl	8000c48 <hts221_read_bytes>
	hy1 = data[0]/2;
 8000cbc:	793b      	ldrb	r3, [r7, #4]
 8000cbe:	085b      	lsrs	r3, r3, #1
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	ee07 3a90 	vmov	s15, r3
 8000cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cca:	4b39      	ldr	r3, [pc, #228]	; (8000db0 <hts221_init+0x13c>)
 8000ccc:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_H0_T0_OUT_L, &data, 2);
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2202      	movs	r2, #2
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	2036      	movs	r0, #54	; 0x36
 8000cd8:	f7ff ffb6 	bl	8000c48 <hts221_read_bytes>
	hx0 = data[0] | data[1] << 8;
 8000cdc:	793b      	ldrb	r3, [r7, #4]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	797b      	ldrb	r3, [r7, #5]
 8000ce2:	021b      	lsls	r3, r3, #8
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <hts221_init+0x140>)
 8000cf0:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_T0_OUT_L, &data, 2);
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	203a      	movs	r0, #58	; 0x3a
 8000cfc:	f7ff ffa4 	bl	8000c48 <hts221_read_bytes>
	hx1 = data[0] | data[1] << 8;
 8000d00:	793b      	ldrb	r3, [r7, #4]
 8000d02:	461a      	mov	r2, r3
 8000d04:	797b      	ldrb	r3, [r7, #5]
 8000d06:	021b      	lsls	r3, r3, #8
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	ee07 3a90 	vmov	s15, r3
 8000d0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <hts221_init+0x144>)
 8000d14:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_degC_x8, &data, 1);
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2032      	movs	r0, #50	; 0x32
 8000d20:	f7ff ff92 	bl	8000c48 <hts221_read_bytes>
	ty0 = data[0]/8;
 8000d24:	793b      	ldrb	r3, [r7, #4]
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	ee07 3a90 	vmov	s15, r3
 8000d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <hts221_init+0x148>)
 8000d34:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_degC_x8, &data, 1);
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	2033      	movs	r0, #51	; 0x33
 8000d40:	f7ff ff82 	bl	8000c48 <hts221_read_bytes>
	ty1 = data[0]/8;
 8000d44:	793b      	ldrb	r3, [r7, #4]
 8000d46:	08db      	lsrs	r3, r3, #3
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	ee07 3a90 	vmov	s15, r3
 8000d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d52:	4b1b      	ldr	r3, [pc, #108]	; (8000dc0 <hts221_init+0x14c>)
 8000d54:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_OUT_L, &data, 2);
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	203c      	movs	r0, #60	; 0x3c
 8000d60:	f7ff ff72 	bl	8000c48 <hts221_read_bytes>
	tx0 = data[0] | data[1] << 8;
 8000d64:	793b      	ldrb	r3, [r7, #4]
 8000d66:	461a      	mov	r2, r3
 8000d68:	797b      	ldrb	r3, [r7, #5]
 8000d6a:	021b      	lsls	r3, r3, #8
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	ee07 3a90 	vmov	s15, r3
 8000d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <hts221_init+0x150>)
 8000d78:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_OUT_L, &data, 2);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4619      	mov	r1, r3
 8000d82:	203e      	movs	r0, #62	; 0x3e
 8000d84:	f7ff ff60 	bl	8000c48 <hts221_read_bytes>
	tx1 = data[0] | data[1] << 8;
 8000d88:	793b      	ldrb	r3, [r7, #4]
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	797b      	ldrb	r3, [r7, #5]
 8000d8e:	021b      	lsls	r3, r3, #8
 8000d90:	4313      	orrs	r3, r2
 8000d92:	ee07 3a90 	vmov	s15, r3
 8000d96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <hts221_init+0x154>)
 8000d9c:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8000da0:	2301      	movs	r3, #1
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000214 	.word	0x20000214
 8000db0:	20000218 	.word	0x20000218
 8000db4:	2000020c 	.word	0x2000020c
 8000db8:	20000210 	.word	0x20000210
 8000dbc:	20000204 	.word	0x20000204
 8000dc0:	20000208 	.word	0x20000208
 8000dc4:	200001fc 	.word	0x200001fc
 8000dc8:	20000200 	.word	0x20000200

08000dcc <hts221_get_temperature>:
float hts221_get_temperature(){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_TEMP_OUT_L, &data, 2);
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	202a      	movs	r0, #42	; 0x2a
 8000dda:	f7ff ff35 	bl	8000c48 <hts221_read_bytes>
	x = data[1] | data[0]<<8;
 8000dde:	797b      	ldrb	r3, [r7, #5]
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	793b      	ldrb	r3, [r7, #4]
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	4313      	orrs	r3, r2
 8000dea:	b21b      	sxth	r3, r3
 8000dec:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, tx0, tx1, ty0, ty1);
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <hts221_get_temperature+0x60>)
 8000df0:	edd3 7a00 	vldr	s15, [r3]
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <hts221_get_temperature+0x64>)
 8000df6:	ed93 7a00 	vldr	s14, [r3]
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <hts221_get_temperature+0x68>)
 8000dfc:	edd3 6a00 	vldr	s13, [r3]
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <hts221_get_temperature+0x6c>)
 8000e02:	ed93 6a00 	vldr	s12, [r3]
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	eef0 1a46 	vmov.f32	s3, s12
 8000e0c:	eeb0 1a66 	vmov.f32	s2, s13
 8000e10:	eef0 0a47 	vmov.f32	s1, s14
 8000e14:	eeb0 0a67 	vmov.f32	s0, s15
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f847 	bl	8000eac <linear_interpolation>
 8000e1e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e22:	eeb0 0a67 	vmov.f32	s0, s15
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200001fc 	.word	0x200001fc
 8000e30:	20000200 	.word	0x20000200
 8000e34:	20000204 	.word	0x20000204
 8000e38:	20000208 	.word	0x20000208

08000e3c <hts221_get_humidity>:

float hts221_get_humidity(){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_HUMIDITY_OUT_L, &data, 2);
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2202      	movs	r2, #2
 8000e46:	4619      	mov	r1, r3
 8000e48:	2028      	movs	r0, #40	; 0x28
 8000e4a:	f7ff fefd 	bl	8000c48 <hts221_read_bytes>
	x = data[1] | data[0]<<8;
 8000e4e:	797b      	ldrb	r3, [r7, #5]
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	793b      	ldrb	r3, [r7, #4]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	b21b      	sxth	r3, r3
 8000e5c:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, hx0, hx1, hy0, hy1);
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <hts221_get_humidity+0x60>)
 8000e60:	edd3 7a00 	vldr	s15, [r3]
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <hts221_get_humidity+0x64>)
 8000e66:	ed93 7a00 	vldr	s14, [r3]
 8000e6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ea4 <hts221_get_humidity+0x68>)
 8000e6c:	edd3 6a00 	vldr	s13, [r3]
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <hts221_get_humidity+0x6c>)
 8000e72:	ed93 6a00 	vldr	s12, [r3]
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	eef0 1a46 	vmov.f32	s3, s12
 8000e7c:	eeb0 1a66 	vmov.f32	s2, s13
 8000e80:	eef0 0a47 	vmov.f32	s1, s14
 8000e84:	eeb0 0a67 	vmov.f32	s0, s15
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f000 f80f 	bl	8000eac <linear_interpolation>
 8000e8e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e92:	eeb0 0a67 	vmov.f32	s0, s15
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000020c 	.word	0x2000020c
 8000ea0:	20000210 	.word	0x20000210
 8000ea4:	20000214 	.word	0x20000214
 8000ea8:	20000218 	.word	0x20000218

08000eac <linear_interpolation>:
float linear_interpolation(uint16_t x,float x0,float x1,float y0,float y1){
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8000eb8:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ebc:	ed87 1a02 	vstr	s2, [r7, #8]
 8000ec0:	edc7 1a01 	vstr	s3, [r7, #4]
 8000ec4:	82fb      	strh	r3, [r7, #22]
	return (y0 + (((float)x-x0)*(y1-y0))/(x1-x0));
 8000ec6:	8afb      	ldrh	r3, [r7, #22]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ed0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ed4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ed8:	edd7 6a01 	vldr	s13, [r7, #4]
 8000edc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ee0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000ee4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000ee8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000eec:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000ef8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f00:	eeb0 0a67 	vmov.f32	s0, s15
 8000f04:	371c      	adds	r7, #28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <lps22hb_write_bytes>:
 */
#include "lps22hb.h"

static uint8_t slaveAddress = LPS22HB_I2C_ADDRESS_0;

void lps22hb_write_bytes(uint8_t *data, uint8_t reg_address, uint8_t len){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	70bb      	strb	r3, [r7, #2]
    masterWriteMultiByte(data, len, slaveAddress, reg_address);
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <lps22hb_write_bytes+0x28>)
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	78fb      	ldrb	r3, [r7, #3]
 8000f26:	78b9      	ldrb	r1, [r7, #2]
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f000 fdeb 	bl	8001b04 <masterWriteMultiByte>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000001 	.word	0x20000001

08000f3c <lps22hb_read_bytes>:
void lps22hb_read_bytes(uint8_t *data, uint8_t reg_address, uint8_t len){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	70bb      	strb	r3, [r7, #2]
    masterReadMultiByte(data, len, slaveAddress, reg_address);
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <lps22hb_read_bytes+0x28>)
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	78b9      	ldrb	r1, [r7, #2]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fd6f 	bl	8001a38 <masterReadMultiByte>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000001 	.word	0x20000001

08000f68 <lps22hb_init>:

uint8_t lps22hb_init(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
    uint8_t ID;
    lps22hb_read_bytes(&ID,LPS22HB_REG_WHO_AM_I_ADDR,1);
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	2201      	movs	r2, #1
 8000f72:	210f      	movs	r1, #15
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ffe1 	bl	8000f3c <lps22hb_read_bytes>
    if(ID != LPS22HB_WHO_AM_I_VALUE){
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2bb1      	cmp	r3, #177	; 0xb1
 8000f7e:	d00d      	beq.n	8000f9c <lps22hb_init+0x34>
        slaveAddress = LPS22HB_I2C_ADDRESS_1;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <lps22hb_init+0x50>)
 8000f82:	22b8      	movs	r2, #184	; 0xb8
 8000f84:	701a      	strb	r2, [r3, #0]
        lps22hb_read_bytes(&ID,LPS22HB_REG_WHO_AM_I_ADDR,1);
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	2201      	movs	r2, #1
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ffd5 	bl	8000f3c <lps22hb_read_bytes>
        if(ID != LPS22HB_WHO_AM_I_VALUE)
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	2bb1      	cmp	r3, #177	; 0xb1
 8000f96:	d001      	beq.n	8000f9c <lps22hb_init+0x34>
            return 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e008      	b.n	8000fae <lps22hb_init+0x46>
    }
    uint8_t ctrl1 = 0b00110000;
 8000f9c:	2330      	movs	r3, #48	; 0x30
 8000f9e:	71bb      	strb	r3, [r7, #6]
    lps22hb_write_bytes(&ctrl1,LPS22HB_REG_CTRL_REG1,1);
 8000fa0:	1dbb      	adds	r3, r7, #6
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffb2 	bl	8000f10 <lps22hb_write_bytes>
    return 1;
 8000fac:	2301      	movs	r3, #1
}   
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000001 	.word	0x20000001

08000fbc <lps22hb_get_pressure>:

float lps22hb_get_pressure(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
    uint8_t data[3];
    lps22hb_read_bytes(&data,LPS22HB_REG_PRESS_OUT_XL,3);
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2203      	movs	r2, #3
 8000fc6:	2128      	movs	r1, #40	; 0x28
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffb7 	bl	8000f3c <lps22hb_read_bytes>
    return ((data[0] | data[1] << 8 | data[2] << 16)/4096.0); 
 8000fce:	793b      	ldrb	r3, [r7, #4]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	797b      	ldrb	r3, [r7, #5]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	79bb      	ldrb	r3, [r7, #6]
 8000fda:	041b      	lsls	r3, r3, #16
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff faa0 	bl	8000524 <__aeabi_i2d>
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <lps22hb_get_pressure+0x50>)
 8000fea:	f7ff fc2f 	bl	800084c <__aeabi_ddiv>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fdd7 	bl	8000ba8 <__aeabi_d2f>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	ee07 3a90 	vmov	s15, r3
} 
 8001000:	eeb0 0a67 	vmov.f32	s0, s15
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40b00000 	.word	0x40b00000

08001010 <lps22hb_calculate_altitude>:
float lps22hb_calculate_altitude(float pressure){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	ed87 0a01 	vstr	s0, [r7, #4]
    return 44330 * (1 - pow(pressure/1013.25, 1/5.255));
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fa94 	bl	8000548 <__aeabi_f2d>
 8001020:	a31c      	add	r3, pc, #112	; (adr r3, 8001094 <lps22hb_calculate_altitude+0x84>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff fc11 	bl	800084c <__aeabi_ddiv>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	ec43 2b17 	vmov	d7, r2, r3
 8001032:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001080 <lps22hb_calculate_altitude+0x70>
 8001036:	eeb0 0a47 	vmov.f32	s0, s14
 800103a:	eef0 0a67 	vmov.f32	s1, s15
 800103e:	f005 f84b 	bl	80060d8 <pow>
 8001042:	ec53 2b10 	vmov	r2, r3, d0
 8001046:	f04f 0000 	mov.w	r0, #0
 800104a:	4911      	ldr	r1, [pc, #68]	; (8001090 <lps22hb_calculate_altitude+0x80>)
 800104c:	f7ff f91c 	bl	8000288 <__aeabi_dsub>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	a30b      	add	r3, pc, #44	; (adr r3, 8001088 <lps22hb_calculate_altitude+0x78>)
 800105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105e:	f7ff facb 	bl	80005f8 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd9d 	bl	8000ba8 <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	ee07 3a90 	vmov	s15, r3
}
 8001074:	eeb0 0a67 	vmov.f32	s0, s15
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	ccd9456c 	.word	0xccd9456c
 8001084:	3fc85b95 	.word	0x3fc85b95
 8001088:	00000000 	.word	0x00000000
 800108c:	40e5a540 	.word	0x40e5a540
 8001090:	3ff00000 	.word	0x3ff00000
 8001094:	00000000 	.word	0x00000000
 8001098:	408faa00 	.word	0x408faa00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	; (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011ba:	695a      	ldr	r2, [r3, #20]
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80011c6:	695a      	ldr	r2, [r3, #20]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4013      	ands	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	40021000 	.word	0x40021000

080011e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f7ff ffe3 	bl	80011b0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80011ea:	f7ff ff57 	bl	800109c <__NVIC_GetPriorityGrouping>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2200      	movs	r2, #0
 80011f2:	2100      	movs	r1, #0
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff ffa7 	bl	8001148 <NVIC_EncodePriority>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	200c      	movs	r0, #12
 8001200:	f7ff ff78 	bl	80010f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001204:	200c      	movs	r0, #12
 8001206:	f7ff ff57 	bl	80010b8 <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800120a:	f7ff ff47 	bl	800109c <__NVIC_GetPriorityGrouping>
 800120e:	4603      	mov	r3, r0
 8001210:	2200      	movs	r2, #0
 8001212:	2100      	movs	r1, #0
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff97 	bl	8001148 <NVIC_EncodePriority>
 800121a:	4603      	mov	r3, r0
 800121c:	4619      	mov	r1, r3
 800121e:	200d      	movs	r0, #13
 8001220:	f7ff ff68 	bl	80010f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001224:	200d      	movs	r0, #13
 8001226:	f7ff ff47 	bl	80010b8 <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800122a:	f7ff ff37 	bl	800109c <__NVIC_GetPriorityGrouping>
 800122e:	4603      	mov	r3, r0
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff87 	bl	8001148 <NVIC_EncodePriority>
 800123a:	4603      	mov	r3, r0
 800123c:	4619      	mov	r1, r3
 800123e:	2010      	movs	r0, #16
 8001240:	f7ff ff58 	bl	80010f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001244:	2010      	movs	r0, #16
 8001246:	f7ff ff37 	bl	80010b8 <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800124a:	f7ff ff27 	bl	800109c <__NVIC_GetPriorityGrouping>
 800124e:	4603      	mov	r3, r0
 8001250:	2200      	movs	r2, #0
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff77 	bl	8001148 <NVIC_EncodePriority>
 800125a:	4603      	mov	r3, r0
 800125c:	4619      	mov	r1, r3
 800125e:	2011      	movs	r0, #17
 8001260:	f7ff ff48 	bl	80010f4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001264:	2011      	movs	r0, #17
 8001266:	f7ff ff27 	bl	80010b8 <__NVIC_EnableIRQ>

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
	...

08001270 <LL_AHB1_GRP1_EnableClock>:
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800127a:	695a      	ldr	r2, [r3, #20]
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4313      	orrs	r3, r2
 8001282:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001286:	695a      	ldr	r2, [r3, #20]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4013      	ands	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	bf00      	nop
 8001292:	3714      	adds	r7, #20
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40021000 	.word	0x40021000

080012a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80012a4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80012a8:	f7ff ffe2 	bl	8001270 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80012ac:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80012b0:	f7ff ffde 	bl	8001270 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80012b4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80012b8:	f7ff ffda 	bl	8001270 <LL_AHB1_GRP1_EnableClock>

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <__NVIC_GetPriorityGrouping>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c4:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <__NVIC_GetPriorityGrouping+0x18>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	f003 0307 	and.w	r3, r3, #7
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_EnableIRQ>:
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	db0b      	blt.n	8001306 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	f003 021f 	and.w	r2, r3, #31
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <__NVIC_EnableIRQ+0x38>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	2001      	movs	r0, #1
 80012fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001306:	bf00      	nop
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <LL_DMA_SetDataTransferDirection+0x48>)
 80013e6:	5cd3      	ldrb	r3, [r2, r3]
 80013e8:	461a      	mov	r2, r3
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4413      	add	r3, r2
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013f4:	f023 0310 	bic.w	r3, r3, #16
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	3a01      	subs	r2, #1
 80013fc:	4907      	ldr	r1, [pc, #28]	; (800141c <LL_DMA_SetDataTransferDirection+0x48>)
 80013fe:	5c8a      	ldrb	r2, [r1, r2]
 8001400:	4611      	mov	r1, r2
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	440a      	add	r2, r1
 8001406:	4611      	mov	r1, r2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4313      	orrs	r3, r2
 800140c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800140e:	bf00      	nop
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	08006f7c 	.word	0x08006f7c

08001420 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	3b01      	subs	r3, #1
 8001430:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <LL_DMA_SetMode+0x44>)
 8001432:	5cd3      	ldrb	r3, [r2, r3]
 8001434:	461a      	mov	r2, r3
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	4413      	add	r3, r2
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f023 0220 	bic.w	r2, r3, #32
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3b01      	subs	r3, #1
 8001444:	4907      	ldr	r1, [pc, #28]	; (8001464 <LL_DMA_SetMode+0x44>)
 8001446:	5ccb      	ldrb	r3, [r1, r3]
 8001448:	4619      	mov	r1, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	440b      	add	r3, r1
 800144e:	4619      	mov	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
             Mode);
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	08006f7c 	.word	0x08006f7c

08001468 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	3b01      	subs	r3, #1
 8001478:	4a0c      	ldr	r2, [pc, #48]	; (80014ac <LL_DMA_SetPeriphIncMode+0x44>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	461a      	mov	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	4413      	add	r3, r2
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	3b01      	subs	r3, #1
 800148c:	4907      	ldr	r1, [pc, #28]	; (80014ac <LL_DMA_SetPeriphIncMode+0x44>)
 800148e:	5ccb      	ldrb	r3, [r1, r3]
 8001490:	4619      	mov	r1, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	440b      	add	r3, r1
 8001496:	4619      	mov	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	08006f7c 	.word	0x08006f7c

080014b0 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	3b01      	subs	r3, #1
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <LL_DMA_SetMemoryIncMode+0x44>)
 80014c2:	5cd3      	ldrb	r3, [r2, r3]
 80014c4:	461a      	mov	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	4907      	ldr	r1, [pc, #28]	; (80014f4 <LL_DMA_SetMemoryIncMode+0x44>)
 80014d6:	5ccb      	ldrb	r3, [r1, r3]
 80014d8:	4619      	mov	r1, r3
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	440b      	add	r3, r1
 80014de:	4619      	mov	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80014e6:	bf00      	nop
 80014e8:	3714      	adds	r7, #20
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	08006f7c 	.word	0x08006f7c

080014f8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3b01      	subs	r3, #1
 8001508:	4a0c      	ldr	r2, [pc, #48]	; (800153c <LL_DMA_SetPeriphSize+0x44>)
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	461a      	mov	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4413      	add	r3, r2
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	3b01      	subs	r3, #1
 800151c:	4907      	ldr	r1, [pc, #28]	; (800153c <LL_DMA_SetPeriphSize+0x44>)
 800151e:	5ccb      	ldrb	r3, [r1, r3]
 8001520:	4619      	mov	r1, r3
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	440b      	add	r3, r1
 8001526:	4619      	mov	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	08006f7c 	.word	0x08006f7c

08001540 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	3b01      	subs	r3, #1
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <LL_DMA_SetMemorySize+0x44>)
 8001552:	5cd3      	ldrb	r3, [r2, r3]
 8001554:	461a      	mov	r2, r3
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	4413      	add	r3, r2
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3b01      	subs	r3, #1
 8001564:	4907      	ldr	r1, [pc, #28]	; (8001584 <LL_DMA_SetMemorySize+0x44>)
 8001566:	5ccb      	ldrb	r3, [r1, r3]
 8001568:	4619      	mov	r1, r3
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	440b      	add	r3, r1
 800156e:	4619      	mov	r1, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	08006f7c 	.word	0x08006f7c

08001588 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	3b01      	subs	r3, #1
 8001598:	4a0c      	ldr	r2, [pc, #48]	; (80015cc <LL_DMA_SetChannelPriorityLevel+0x44>)
 800159a:	5cd3      	ldrb	r3, [r2, r3]
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	4907      	ldr	r1, [pc, #28]	; (80015cc <LL_DMA_SetChannelPriorityLevel+0x44>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	4619      	mov	r1, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	440b      	add	r3, r1
 80015b6:	4619      	mov	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
             Priority);
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
 80015ca:	bf00      	nop
 80015cc:	08006f7c 	.word	0x08006f7c

080015d0 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f043 0201 	orr.w	r2, r3, #1
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	601a      	str	r2, [r3, #0]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr

080015f0 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	601a      	str	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001644:	f023 0306 	bic.w	r3, r3, #6
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	430a      	orrs	r2, r1
 800164e:	431a      	orrs	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	60da      	str	r2, [r3, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	60da      	str	r2, [r3, #12]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f043 0204 	orr.w	r2, r3, #4
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 0204 	bic.w	r2, r3, #4
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	601a      	str	r2, [r3, #0]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d101      	bne.n	80016d8 <LL_I2C_IsActiveFlag_TXIS+0x18>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	f003 0304 	and.w	r3, r3, #4
 80016f6:	2b04      	cmp	r3, #4
 80016f8:	d101      	bne.n	80016fe <LL_I2C_IsActiveFlag_RXNE+0x18>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0320 	and.w	r3, r3, #32
 800171c:	2b20      	cmp	r3, #32
 800171e:	d101      	bne.n	8001724 <LL_I2C_IsActiveFlag_STOP+0x18>
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <LL_I2C_IsActiveFlag_STOP+0x1a>
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr

08001732 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8001732:	b480      	push	{r7}
 8001734:	b083      	sub	sp, #12
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f043 0210 	orr.w	r2, r3, #16
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	61da      	str	r2, [r3, #28]
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f043 0220 	orr.w	r2, r3, #32
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	61da      	str	r2, [r3, #28]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	605a      	str	r2, [r3, #4]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
	...

08001794 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
 80017a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	0d5b      	lsrs	r3, r3, #21
 80017aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <LL_I2C_HandleTransfer+0x48>)
 80017b0:	430b      	orrs	r3, r1
 80017b2:	43db      	mvns	r3, r3
 80017b4:	401a      	ands	r2, r3
 80017b6:	68b9      	ldr	r1, [r7, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4319      	orrs	r1, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	4319      	orrs	r1, r3
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4319      	orrs	r1, r3
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	431a      	orrs	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	03ff7bff 	.word	0x03ff7bff

080017e0 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ec:	b2db      	uxtb	r3, r3
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	460b      	mov	r3, r1
 8001804:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <LL_AHB1_GRP1_EnableClock>:
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001822:	695a      	ldr	r2, [r3, #20]
 8001824:	4907      	ldr	r1, [pc, #28]	; (8001844 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800182e:	695a      	ldr	r2, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4013      	ands	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	40021000 	.word	0x40021000

08001848 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001852:	69da      	ldr	r2, [r3, #28]
 8001854:	4907      	ldr	r1, [pc, #28]	; (8001874 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4313      	orrs	r3, r2
 800185a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <LL_APB1_GRP1_EnableClock+0x2c>)
 800185e:	69da      	ldr	r2, [r3, #28]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4013      	ands	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000

08001878 <LL_SYSCFG_SetRemapDMA_I2C>:
  *         @arg @ref LL_SYSCFG_I2C1TX_RMP_DMA1_CH2
  *         @arg @ref LL_SYSCFG_I2C1TX_RMP_DMA1_CH4
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_I2C(uint32_t Remap)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (Remap >> 16U), (Remap & 0x0000FFFF));
 8001880:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <LL_SYSCFG_SetRemapDMA_I2C+0x2c>)
 8001882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0c1b      	lsrs	r3, r3, #16
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	b29b      	uxth	r3, r3
 8001890:	4904      	ldr	r1, [pc, #16]	; (80018a4 <LL_SYSCFG_SetRemapDMA_I2C+0x2c>)
 8001892:	4313      	orrs	r3, r2
 8001894:	650b      	str	r3, [r1, #80]	; 0x50
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40010000 	.word	0x40010000

080018a8 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b08e      	sub	sp, #56	; 0x38
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
 80018bc:	611a      	str	r2, [r3, #16]
 80018be:	615a      	str	r2, [r3, #20]
 80018c0:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80018d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80018d6:	f7ff ff9f 	bl	8001818 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80018da:	23c0      	movs	r3, #192	; 0xc0
 80018dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80018de:	2302      	movs	r3, #2
 80018e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80018e6:	2301      	movs	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80018ee:	2304      	movs	r3, #4
 80018f0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	4619      	mov	r1, r3
 80018f6:	484a      	ldr	r0, [pc, #296]	; (8001a20 <MX_I2C1_Init+0x178>)
 80018f8:	f001 f956 	bl	8002ba8 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80018fc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001900:	f7ff ffa2 	bl	8001848 <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001904:	2200      	movs	r2, #0
 8001906:	2103      	movs	r1, #3
 8001908:	4846      	ldr	r0, [pc, #280]	; (8001a24 <MX_I2C1_Init+0x17c>)
 800190a:	f7ff fd63 	bl	80013d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 800190e:	2200      	movs	r2, #0
 8001910:	2103      	movs	r1, #3
 8001912:	4844      	ldr	r0, [pc, #272]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001914:	f7ff fe38 	bl	8001588 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8001918:	2200      	movs	r2, #0
 800191a:	2103      	movs	r1, #3
 800191c:	4841      	ldr	r0, [pc, #260]	; (8001a24 <MX_I2C1_Init+0x17c>)
 800191e:	f7ff fd7f 	bl	8001420 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8001922:	2200      	movs	r2, #0
 8001924:	2103      	movs	r1, #3
 8001926:	483f      	ldr	r0, [pc, #252]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001928:	f7ff fd9e 	bl	8001468 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800192c:	2280      	movs	r2, #128	; 0x80
 800192e:	2103      	movs	r1, #3
 8001930:	483c      	ldr	r0, [pc, #240]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001932:	f7ff fdbd 	bl	80014b0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8001936:	2200      	movs	r2, #0
 8001938:	2103      	movs	r1, #3
 800193a:	483a      	ldr	r0, [pc, #232]	; (8001a24 <MX_I2C1_Init+0x17c>)
 800193c:	f7ff fddc 	bl	80014f8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8001940:	2200      	movs	r2, #0
 8001942:	2103      	movs	r1, #3
 8001944:	4837      	ldr	r0, [pc, #220]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001946:	f7ff fdfb 	bl	8001540 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_I2C(LL_SYSCFG_I2C1RX_RMP_DMA1_CH3);
 800194a:	4837      	ldr	r0, [pc, #220]	; (8001a28 <MX_I2C1_Init+0x180>)
 800194c:	f7ff ff94 	bl	8001878 <LL_SYSCFG_SetRemapDMA_I2C>

  /* I2C1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001950:	2210      	movs	r2, #16
 8001952:	2102      	movs	r1, #2
 8001954:	4833      	ldr	r0, [pc, #204]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001956:	f7ff fd3d 	bl	80013d4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800195a:	2200      	movs	r2, #0
 800195c:	2102      	movs	r1, #2
 800195e:	4831      	ldr	r0, [pc, #196]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001960:	f7ff fe12 	bl	8001588 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001964:	2200      	movs	r2, #0
 8001966:	2102      	movs	r1, #2
 8001968:	482e      	ldr	r0, [pc, #184]	; (8001a24 <MX_I2C1_Init+0x17c>)
 800196a:	f7ff fd59 	bl	8001420 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800196e:	2200      	movs	r2, #0
 8001970:	2102      	movs	r1, #2
 8001972:	482c      	ldr	r0, [pc, #176]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001974:	f7ff fd78 	bl	8001468 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8001978:	2280      	movs	r2, #128	; 0x80
 800197a:	2102      	movs	r1, #2
 800197c:	4829      	ldr	r0, [pc, #164]	; (8001a24 <MX_I2C1_Init+0x17c>)
 800197e:	f7ff fd97 	bl	80014b0 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001982:	2200      	movs	r2, #0
 8001984:	2102      	movs	r1, #2
 8001986:	4827      	ldr	r0, [pc, #156]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001988:	f7ff fdb6 	bl	80014f8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 800198c:	2200      	movs	r2, #0
 800198e:	2102      	movs	r1, #2
 8001990:	4824      	ldr	r0, [pc, #144]	; (8001a24 <MX_I2C1_Init+0x17c>)
 8001992:	f7ff fdd5 	bl	8001540 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_I2C(LL_SYSCFG_I2C1TX_RMP_DMA1_CH2);
 8001996:	4825      	ldr	r0, [pc, #148]	; (8001a2c <MX_I2C1_Init+0x184>)
 8001998:	f7ff ff6e 	bl	8001878 <LL_SYSCFG_SetRemapDMA_I2C>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800199c:	f7ff fc90 	bl	80012c0 <__NVIC_GetPriorityGrouping>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2200      	movs	r2, #0
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff fce0 	bl	800136c <NVIC_EncodePriority>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4619      	mov	r1, r3
 80019b0:	201f      	movs	r0, #31
 80019b2:	f7ff fcb1 	bl	8001318 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 80019b6:	201f      	movs	r0, #31
 80019b8:	f7ff fc90 	bl	80012dc <__NVIC_EnableIRQ>

  /* USER CODE BEGIN I2C1_Init 1 */
  GPIOB->ODR |= (0b11 << 6);
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_I2C1_Init+0x178>)
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	4a17      	ldr	r2, [pc, #92]	; (8001a20 <MX_I2C1_Init+0x178>)
 80019c2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80019c6:	6153      	str	r3, [r2, #20]

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 80019c8:	4819      	ldr	r0, [pc, #100]	; (8001a30 <MX_I2C1_Init+0x188>)
 80019ca:	f7ff fed2 	bl	8001772 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80019ce:	4818      	ldr	r0, [pc, #96]	; (8001a30 <MX_I2C1_Init+0x188>)
 80019d0:	f7ff fe46 	bl	8001660 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80019d4:	4816      	ldr	r0, [pc, #88]	; (8001a30 <MX_I2C1_Init+0x188>)
 80019d6:	f7ff fe1b 	bl	8001610 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80019da:	4815      	ldr	r0, [pc, #84]	; (8001a30 <MX_I2C1_Init+0x188>)
 80019dc:	f7ff fe08 	bl	80015f0 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80019e4:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <MX_I2C1_Init+0x18c>)
 80019e6:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	480b      	ldr	r0, [pc, #44]	; (8001a30 <MX_I2C1_Init+0x188>)
 8001a04:	f001 f9e3 	bl	8002dce <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4808      	ldr	r0, [pc, #32]	; (8001a30 <MX_I2C1_Init+0x188>)
 8001a0e:	f7ff fe0f 	bl	8001630 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 8001a12:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_I2C1_Init+0x188>)
 8001a14:	f7ff fddc 	bl	80015d0 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 8001a18:	bf00      	nop
 8001a1a:	3738      	adds	r7, #56	; 0x38
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	48000400 	.word	0x48000400
 8001a24:	40020000 	.word	0x40020000
 8001a28:	00300010 	.word	0x00300010
 8001a2c:	00c00040 	.word	0x00c00040
 8001a30:	40005400 	.word	0x40005400
 8001a34:	2000090e 	.word	0x2000090e

08001a38 <masterReadMultiByte>:

/* USER CODE BEGIN 1 */
void masterReadMultiByte(uint8_t *data,uint8_t len, uint8_t slaveAddress, uint8_t registerAddress){
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af02      	add	r7, sp, #8
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4603      	mov	r3, r0
 8001a48:	70fb      	strb	r3, [r7, #3]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	70bb      	strb	r3, [r7, #2]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	707b      	strb	r3, [r7, #1]
		aReceiveBuffer_read = data;
 8001a52:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <masterReadMultiByte+0xb8>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6013      	str	r3, [r2, #0]

		LL_I2C_EnableIT_RX(I2C1);
 8001a58:	4826      	ldr	r0, [pc, #152]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001a5a:	f7ff fe11 	bl	8001680 <LL_I2C_EnableIT_RX>

		LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001a5e:	78b9      	ldrb	r1, [r7, #2]
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <masterReadMultiByte+0xc0>)
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4821      	ldr	r0, [pc, #132]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001a70:	f7ff fe90 	bl	8001794 <LL_I2C_HandleTransfer>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a74:	e00a      	b.n	8001a8c <masterReadMultiByte+0x54>
		{
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001a76:	481f      	ldr	r0, [pc, #124]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001a78:	f7ff fe22 	bl	80016c0 <LL_I2C_IsActiveFlag_TXIS>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <masterReadMultiByte+0x54>
			{
				LL_I2C_TransmitData8(I2C1, registerAddress);
 8001a82:	787b      	ldrb	r3, [r7, #1]
 8001a84:	4619      	mov	r1, r3
 8001a86:	481b      	ldr	r0, [pc, #108]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001a88:	f7ff feb7 	bl	80017fa <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001a8c:	4819      	ldr	r0, [pc, #100]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001a8e:	f7ff fe3d 	bl	800170c <LL_I2C_IsActiveFlag_STOP>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ee      	beq.n	8001a76 <masterReadMultiByte+0x3e>
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 8001a98:	4816      	ldr	r0, [pc, #88]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001a9a:	f7ff fe5a 	bl	8001752 <LL_I2C_ClearFlag_STOP>
		while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001a9e:	bf00      	nop
 8001aa0:	4814      	ldr	r0, [pc, #80]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001aa2:	f7ff fe33 	bl	800170c <LL_I2C_IsActiveFlag_STOP>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f9      	bne.n	8001aa0 <masterReadMultiByte+0x68>

		LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, len, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001aac:	78b9      	ldrb	r1, [r7, #2]
 8001aae:	78fb      	ldrb	r3, [r7, #3]
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <masterReadMultiByte+0xc4>)
 8001ab2:	9201      	str	r2, [sp, #4]
 8001ab4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ab8:	9200      	str	r2, [sp, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	480d      	ldr	r0, [pc, #52]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001abe:	f7ff fe69 	bl	8001794 <LL_I2C_HandleTransfer>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001ac2:	bf00      	nop
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001ac6:	f7ff fe21 	bl	800170c <LL_I2C_IsActiveFlag_STOP>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f9      	beq.n	8001ac4 <masterReadMultiByte+0x8c>

		//End of transfer
		LL_I2C_ClearFlag_STOP(I2C1);
 8001ad0:	4808      	ldr	r0, [pc, #32]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001ad2:	f7ff fe3e 	bl	8001752 <LL_I2C_ClearFlag_STOP>
		LL_I2C_DisableIT_RX(I2C1);
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001ad8:	f7ff fde2 	bl	80016a0 <LL_I2C_DisableIT_RX>

		LL_I2C_ClearFlag_NACK(I2C1);
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <masterReadMultiByte+0xbc>)
 8001ade:	f7ff fe28 	bl	8001732 <LL_I2C_ClearFlag_NACK>
		ubReceiveIndex = 0;
 8001ae2:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <masterReadMultiByte+0xc8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	701a      	strb	r2, [r3, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	2000021c 	.word	0x2000021c
 8001af4:	40005400 	.word	0x40005400
 8001af8:	80002000 	.word	0x80002000
 8001afc:	80002400 	.word	0x80002400
 8001b00:	20000220 	.word	0x20000220

08001b04 <masterWriteMultiByte>:
void masterWriteMultiByte(uint8_t *data,uint8_t len, uint8_t slaveAddress, uint8_t registerAddress){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	4603      	mov	r3, r0
 8001b14:	70fb      	strb	r3, [r7, #3]
 8001b16:	460b      	mov	r3, r1
 8001b18:	70bb      	strb	r3, [r7, #2]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	707b      	strb	r3, [r7, #1]
	LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001b1e:	78b9      	ldrb	r1, [r7, #2]
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <masterWriteMultiByte+0x88>)
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	4818      	ldr	r0, [pc, #96]	; (8001b90 <masterWriteMultiByte+0x8c>)
 8001b30:	f7ff fe30 	bl	8001794 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, registerAddress);
 8001b34:	787b      	ldrb	r3, [r7, #1]
 8001b36:	4619      	mov	r1, r3
 8001b38:	4815      	ldr	r0, [pc, #84]	; (8001b90 <masterWriteMultiByte+0x8c>)
 8001b3a:	f7ff fe5e 	bl	80017fa <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b3e:	e017      	b.n	8001b70 <masterWriteMultiByte+0x6c>
	{
		for (size_t i = 0; i < len;i++) {
 8001b40:	2300      	movs	r3, #0
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	e010      	b.n	8001b68 <masterWriteMultiByte+0x64>
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001b46:	4812      	ldr	r0, [pc, #72]	; (8001b90 <masterWriteMultiByte+0x8c>)
 8001b48:	f7ff fdba 	bl	80016c0 <LL_I2C_IsActiveFlag_TXIS>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d007      	beq.n	8001b62 <masterWriteMultiByte+0x5e>
			{
				LL_I2C_TransmitData8(I2C1, data[i]);
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	480c      	ldr	r0, [pc, #48]	; (8001b90 <masterWriteMultiByte+0x8c>)
 8001b5e:	f7ff fe4c 	bl	80017fa <LL_I2C_TransmitData8>
		for (size_t i = 0; i < len;i++) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	3301      	adds	r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d3ea      	bcc.n	8001b46 <masterWriteMultiByte+0x42>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001b70:	4807      	ldr	r0, [pc, #28]	; (8001b90 <masterWriteMultiByte+0x8c>)
 8001b72:	f7ff fdcb 	bl	800170c <LL_I2C_IsActiveFlag_STOP>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0e1      	beq.n	8001b40 <masterWriteMultiByte+0x3c>
			}
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <masterWriteMultiByte+0x8c>)
 8001b7e:	f7ff fde8 	bl	8001752 <LL_I2C_ClearFlag_STOP>
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	80002000 	.word	0x80002000
 8001b90:	40005400 	.word	0x40005400

08001b94 <I2C_IRQHandler>:

void I2C_IRQHandler(){
 8001b94:	b598      	push	{r3, r4, r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001b98:	4810      	ldr	r0, [pc, #64]	; (8001bdc <I2C_IRQHandler+0x48>)
 8001b9a:	f7ff fda4 	bl	80016e6 <LL_I2C_IsActiveFlag_RXNE>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d019      	beq.n	8001bd8 <I2C_IRQHandler+0x44>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <I2C_IRQHandler+0x4c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b0e      	ldr	r3, [pc, #56]	; (8001be4 <I2C_IRQHandler+0x50>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	1c59      	adds	r1, r3, #1
 8001bb0:	b2c8      	uxtb	r0, r1
 8001bb2:	490c      	ldr	r1, [pc, #48]	; (8001be4 <I2C_IRQHandler+0x50>)
 8001bb4:	7008      	strb	r0, [r1, #0]
 8001bb6:	18d4      	adds	r4, r2, r3
 8001bb8:	4808      	ldr	r0, [pc, #32]	; (8001bdc <I2C_IRQHandler+0x48>)
 8001bba:	f7ff fe11 	bl	80017e0 <LL_I2C_ReceiveData8>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001bc2:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <I2C_IRQHandler+0x50>)
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b13      	cmp	r3, #19
 8001bca:	d903      	bls.n	8001bd4 <I2C_IRQHandler+0x40>
 8001bcc:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <I2C_IRQHandler+0x50>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
	}
}
 8001bd2:	e001      	b.n	8001bd8 <I2C_IRQHandler+0x44>
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	; (8001be4 <I2C_IRQHandler+0x50>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	bd98      	pop	{r3, r4, r7, pc}
 8001bdc:	40005400 	.word	0x40005400
 8001be0:	2000021c 	.word	0x2000021c
 8001be4:	20000220 	.word	0x20000220

08001be8 <__NVIC_SetPriorityGrouping>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf8:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c1a:	4a04      	ldr	r2, [pc, #16]	; (8001c2c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	60d3      	str	r3, [r2, #12]
}
 8001c20:	bf00      	nop
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <LL_RCC_HSI_Enable+0x1c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <LL_RCC_HSI_Enable+0x1c>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000

08001c50 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <LL_RCC_HSI_IsReady+0x20>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	bf0c      	ite	eq
 8001c60:	2301      	moveq	r3, #1
 8001c62:	2300      	movne	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	40021000 	.word	0x40021000

08001c74 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	600b      	str	r3, [r1, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <LL_RCC_SetSysClkSource+0x24>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f023 0203 	bic.w	r2, r3, #3
 8001cb0:	4904      	ldr	r1, [pc, #16]	; (8001cc4 <LL_RCC_SetSysClkSource+0x24>)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <LL_RCC_GetSysClkSource+0x18>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <LL_RCC_SetAHBPrescaler+0x24>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf4:	4904      	ldr	r1, [pc, #16]	; (8001d08 <LL_RCC_SetAHBPrescaler+0x24>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	40021000 	.word	0x40021000

08001d0c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1c:	4904      	ldr	r1, [pc, #16]	; (8001d30 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000

08001d34 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d44:	4904      	ldr	r1, [pc, #16]	; (8001d58 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	604b      	str	r3, [r1, #4]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40021000 	.word	0x40021000

08001d5c <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001d64:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <LL_RCC_SetI2CClockSource+0x2c>)
 8001d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	0e1b      	lsrs	r3, r3, #24
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	401a      	ands	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d76:	4904      	ldr	r1, [pc, #16]	; (8001d88 <LL_RCC_SetI2CClockSource+0x2c>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000

08001d8c <LL_APB1_GRP1_EnableClock>:
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d94:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	4907      	ldr	r1, [pc, #28]	; (8001db8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001da2:	69da      	ldr	r2, [r3, #28]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4013      	ands	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001daa:	68fb      	ldr	r3, [r7, #12]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40021000 	.word	0x40021000

08001dbc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dc6:	699a      	ldr	r2, [r3, #24]
 8001dc8:	4907      	ldr	r1, [pc, #28]	; (8001de8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001dd0:	4b05      	ldr	r3, [pc, #20]	; (8001de8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	40021000 	.word	0x40021000

08001dec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <LL_FLASH_SetLatency+0x24>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f023 0207 	bic.w	r2, r3, #7
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <LL_FLASH_SetLatency+0x24>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40022000 	.word	0x40022000

08001e14 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <LL_FLASH_GetLatency+0x18>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000

08001e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e34:	b08e      	sub	sp, #56	; 0x38
 8001e36:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001e38:	2001      	movs	r0, #1
 8001e3a:	f7ff ffbf 	bl	8001dbc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001e3e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001e42:	f7ff ffa3 	bl	8001d8c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e46:	2003      	movs	r0, #3
 8001e48:	f7ff fece 	bl	8001be8 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e4c:	f000 f868 	bl	8001f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e50:	f7ff fa26 	bl	80012a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e54:	f7ff f9c4 	bl	80011e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001e58:	f000 fcac 	bl	80027b4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e5c:	f7ff fd24 	bl	80018a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t hts_work = hts221_init();
 8001e60:	f7fe ff08 	bl	8000c74 <hts221_init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	73fb      	strb	r3, [r7, #15]
  uint8_t lps_work = lps22hb_init(); 
 8001e68:	f7ff f87e 	bl	8000f68 <lps22hb_init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	73bb      	strb	r3, [r7, #14]
  uint8_t *buffer;
  int len;
  while (1)
  {

	  if(hts_work){
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <main+0x58>
		  temp = hts221_get_temperature();
 8001e76:	f7fe ffa9 	bl	8000dcc <hts221_get_temperature>
 8001e7a:	ed87 0a07 	vstr	s0, [r7, #28]
		  hum = hts221_get_humidity();
 8001e7e:	f7fe ffdd 	bl	8000e3c <hts221_get_humidity>
 8001e82:	ed87 0a06 	vstr	s0, [r7, #24]
 8001e86:	e005      	b.n	8001e94 <main+0x64>
	  }else{
		  temp = 0;
 8001e88:	f04f 0300 	mov.w	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
		  hum = 0;
 8001e8e:	f04f 0300 	mov.w	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
	  }
    if(lps_work){
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <main+0x80>
      press = lps22hb_get_pressure();
 8001e9a:	f7ff f88f 	bl	8000fbc <lps22hb_get_pressure>
 8001e9e:	ed87 0a05 	vstr	s0, [r7, #20]
      alt = lps22hb_calculate_altitude(press);
 8001ea2:	ed97 0a05 	vldr	s0, [r7, #20]
 8001ea6:	f7ff f8b3 	bl	8001010 <lps22hb_calculate_altitude>
 8001eaa:	ed87 0a04 	vstr	s0, [r7, #16]
 8001eae:	e005      	b.n	8001ebc <main+0x8c>
    }else{
      press = 0;
 8001eb0:	f04f 0300 	mov.w	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
      alt = 0;
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]
    }
	  buffer = malloc(32*sizeof(uint8_t));
 8001ebc:	2020      	movs	r0, #32
 8001ebe:	f001 fa7d 	bl	80033bc <malloc>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	60bb      	str	r3, [r7, #8]
	  len = sprintf(buffer, "%2.1f,%2.0f,%4.2f,%3.2f\n",temp,hum,press,alt);
 8001ec6:	69f8      	ldr	r0, [r7, #28]
 8001ec8:	f7fe fb3e 	bl	8000548 <__aeabi_f2d>
 8001ecc:	4682      	mov	sl, r0
 8001ece:	468b      	mov	fp, r1
 8001ed0:	69b8      	ldr	r0, [r7, #24]
 8001ed2:	f7fe fb39 	bl	8000548 <__aeabi_f2d>
 8001ed6:	4604      	mov	r4, r0
 8001ed8:	460d      	mov	r5, r1
 8001eda:	6978      	ldr	r0, [r7, #20]
 8001edc:	f7fe fb34 	bl	8000548 <__aeabi_f2d>
 8001ee0:	4680      	mov	r8, r0
 8001ee2:	4689      	mov	r9, r1
 8001ee4:	6938      	ldr	r0, [r7, #16]
 8001ee6:	f7fe fb2f 	bl	8000548 <__aeabi_f2d>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ef2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ef6:	e9cd 4500 	strd	r4, r5, [sp]
 8001efa:	4652      	mov	r2, sl
 8001efc:	465b      	mov	r3, fp
 8001efe:	4907      	ldr	r1, [pc, #28]	; (8001f1c <main+0xec>)
 8001f00:	68b8      	ldr	r0, [r7, #8]
 8001f02:	f002 f83f 	bl	8003f84 <siprintf>
 8001f06:	6078      	str	r0, [r7, #4]
	  USART2_PutBuffer(buffer, len);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	68b8      	ldr	r0, [r7, #8]
 8001f10:	f000 fcfc 	bl	800290c <USART2_PutBuffer>
	  free(buffer);
 8001f14:	68b8      	ldr	r0, [r7, #8]
 8001f16:	f001 fa59 	bl	80033cc <free>
	  if(hts_work){
 8001f1a:	e7a9      	b.n	8001e70 <main+0x40>
 8001f1c:	08006f60 	.word	0x08006f60

08001f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7ff ff61 	bl	8001dec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001f2a:	bf00      	nop
 8001f2c:	f7ff ff72 	bl	8001e14 <LL_FLASH_GetLatency>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1fa      	bne.n	8001f2c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001f36:	f7ff fe7b 	bl	8001c30 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001f3a:	bf00      	nop
 8001f3c:	f7ff fe88 	bl	8001c50 <LL_RCC_HSI_IsReady>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d1fa      	bne.n	8001f3c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001f46:	2010      	movs	r0, #16
 8001f48:	f7ff fe94 	bl	8001c74 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff fec9 	bl	8001ce4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff feda 	bl	8001d0c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff feeb 	bl	8001d34 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff fe9e 	bl	8001ca0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001f64:	bf00      	nop
 8001f66:	f7ff feaf 	bl	8001cc8 <LL_RCC_GetSysClkSource>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1fa      	bne.n	8001f66 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <SystemClock_Config+0x68>)
 8001f72:	f001 fa05 	bl	8003380 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <SystemClock_Config+0x68>)
 8001f78:	f001 fa10 	bl	800339c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001f7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f80:	f7ff feec 	bl	8001d5c <LL_RCC_SetI2CClockSource>
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	007a1200 	.word	0x007a1200

08001f8c <LL_DMA_DisableChannel>:
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LL_DMA_DisableChannel+0x3c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	3a01      	subs	r2, #1
 8001faa:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <LL_DMA_DisableChannel+0x3c>)
 8001fac:	5c8a      	ldrb	r2, [r1, r2]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	440a      	add	r2, r1
 8001fb4:	f023 0301 	bic.w	r3, r3, #1
 8001fb8:	6013      	str	r3, [r2, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	08006f84 	.word	0x08006f84

08001fcc <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002002:	605a      	str	r2, [r3, #4]
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002020:	2b40      	cmp	r3, #64	; 0x40
 8002022:	d101      	bne.n	8002028 <LL_USART_IsActiveFlag_TC+0x18>
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <LL_USART_IsActiveFlag_TC+0x1a>
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800203a:	e7fe      	b.n	800203a <NMI_Handler+0x4>

0800203c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002040:	e7fe      	b.n	8002040 <HardFault_Handler+0x4>

08002042 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002042:	b480      	push	{r7}
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002046:	e7fe      	b.n	8002046 <MemManage_Handler+0x4>

08002048 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800204c:	e7fe      	b.n	800204c <BusFault_Handler+0x4>

0800204e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002052:	e7fe      	b.n	8002052 <UsageFault_Handler+0x4>

08002054 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr

08002062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr

0800207e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207e:	b480      	push	{r7}
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80020bc:	480a      	ldr	r0, [pc, #40]	; (80020e8 <DMA1_Channel7_IRQHandler+0x30>)
 80020be:	f7ff ff85 	bl	8001fcc <LL_DMA_IsActiveFlag_TC7>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10d      	bne.n	80020e4 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80020c8:	4807      	ldr	r0, [pc, #28]	; (80020e8 <DMA1_Channel7_IRQHandler+0x30>)
 80020ca:	f7ff ff93 	bl	8001ff4 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80020ce:	bf00      	nop
 80020d0:	4806      	ldr	r0, [pc, #24]	; (80020ec <DMA1_Channel7_IRQHandler+0x34>)
 80020d2:	f7ff ff9d 	bl	8002010 <LL_USART_IsActiveFlag_TC>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0f9      	beq.n	80020d0 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80020dc:	2107      	movs	r1, #7
 80020de:	4802      	ldr	r0, [pc, #8]	; (80020e8 <DMA1_Channel7_IRQHandler+0x30>)
 80020e0:	f7ff ff54 	bl	8001f8c <LL_DMA_DisableChannel>
	}
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40020000 	.word	0x40020000
 80020ec:	40004400 	.word	0x40004400

080020f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C_IRQHandler();
 80020f4:	f7ff fd4e 	bl	8001b94 <I2C_IRQHandler>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}

080020fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0
  return 1;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr

0800211a <_kill>:

int _kill(int pid, int sig)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
 8002122:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002124:	f001 fff4 	bl	8004110 <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	2216      	movs	r2, #22
 800212c:	601a      	str	r2, [r3, #0]
  return -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_exit>:

void _exit (int status)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002142:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff ffe7 	bl	800211a <_kill>
  while (1) {}    /* Make sure we hang here */
 800214c:	e7fe      	b.n	800214c <_exit+0x12>

0800214e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af00      	add	r7, sp, #0
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e00a      	b.n	8002176 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002160:	f3af 8000 	nop.w
 8002164:	4601      	mov	r1, r0
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	60ba      	str	r2, [r7, #8]
 800216c:	b2ca      	uxtb	r2, r1
 800216e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	3301      	adds	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	dbf0      	blt.n	8002160 <_read+0x12>
  }

  return len;
 800217e:	687b      	ldr	r3, [r7, #4]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e009      	b.n	80021ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	60ba      	str	r2, [r7, #8]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	3301      	adds	r3, #1
 80021ac:	617b      	str	r3, [r7, #20]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	dbf1      	blt.n	800219a <_write+0x12>
  }
  return len;
 80021b6:	687b      	ldr	r3, [r7, #4]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <_close>:

int _close(int file)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e8:	605a      	str	r2, [r3, #4]
  return 0;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_isatty>:

int _isatty(int file)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002200:	2301      	movs	r3, #1
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800220e:	b480      	push	{r7}
 8002210:	b085      	sub	sp, #20
 8002212:	af00      	add	r7, sp, #0
 8002214:	60f8      	str	r0, [r7, #12]
 8002216:	60b9      	str	r1, [r7, #8]
 8002218:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002230:	4a14      	ldr	r2, [pc, #80]	; (8002284 <_sbrk+0x5c>)
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <_sbrk+0x60>)
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <_sbrk+0x64>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002244:	4b11      	ldr	r3, [pc, #68]	; (800228c <_sbrk+0x64>)
 8002246:	4a12      	ldr	r2, [pc, #72]	; (8002290 <_sbrk+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <_sbrk+0x64>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4413      	add	r3, r2
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	429a      	cmp	r2, r3
 8002256:	d207      	bcs.n	8002268 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002258:	f001 ff5a 	bl	8004110 <__errno>
 800225c:	4603      	mov	r3, r0
 800225e:	220c      	movs	r2, #12
 8002260:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002266:	e009      	b.n	800227c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002268:	4b08      	ldr	r3, [pc, #32]	; (800228c <_sbrk+0x64>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800226e:	4b07      	ldr	r3, [pc, #28]	; (800228c <_sbrk+0x64>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <_sbrk+0x64>)
 8002278:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227a:	68fb      	ldr	r3, [r7, #12]
}
 800227c:	4618      	mov	r0, r3
 800227e:	3718      	adds	r7, #24
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20003000 	.word	0x20003000
 8002288:	00000400 	.word	0x00000400
 800228c:	20000224 	.word	0x20000224
 8002290:	20000378 	.word	0x20000378

08002294 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <SystemInit+0x20>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	4a05      	ldr	r2, [pc, #20]	; (80022b4 <SystemInit+0x20>)
 80022a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_GetPriorityGrouping>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022bc:	4b04      	ldr	r3, [pc, #16]	; (80022d0 <__NVIC_GetPriorityGrouping+0x18>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	0a1b      	lsrs	r3, r3, #8
 80022c2:	f003 0307 	and.w	r3, r3, #7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00

080022d4 <__NVIC_EnableIRQ>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	db0b      	blt.n	80022fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4907      	ldr	r1, [pc, #28]	; (800230c <__NVIC_EnableIRQ+0x38>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	095b      	lsrs	r3, r3, #5
 80022f4:	2001      	movs	r0, #1
 80022f6:	fa00 f202 	lsl.w	r2, r0, r2
 80022fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	; (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	; (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	; 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <LL_DMA_EnableChannel>:
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	3b01      	subs	r3, #1
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LL_DMA_EnableChannel+0x3c>)
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	461a      	mov	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	3a01      	subs	r2, #1
 80023ea:	4907      	ldr	r1, [pc, #28]	; (8002408 <LL_DMA_EnableChannel+0x3c>)
 80023ec:	5c8a      	ldrb	r2, [r1, r2]
 80023ee:	4611      	mov	r1, r2
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	440a      	add	r2, r1
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6013      	str	r3, [r2, #0]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	08006fa4 	.word	0x08006fa4

0800240c <LL_DMA_SetDataTransferDirection>:
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	3b01      	subs	r3, #1
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <LL_DMA_SetDataTransferDirection+0x48>)
 800241e:	5cd3      	ldrb	r3, [r2, r3]
 8002420:	461a      	mov	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4413      	add	r3, r2
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800242c:	f023 0310 	bic.w	r3, r3, #16
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	3a01      	subs	r2, #1
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <LL_DMA_SetDataTransferDirection+0x48>)
 8002436:	5c8a      	ldrb	r2, [r1, r2]
 8002438:	4611      	mov	r1, r2
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	440a      	add	r2, r1
 800243e:	4611      	mov	r1, r2
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	08006fa4 	.word	0x08006fa4

08002458 <LL_DMA_SetMode>:
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	3b01      	subs	r3, #1
 8002468:	4a0c      	ldr	r2, [pc, #48]	; (800249c <LL_DMA_SetMode+0x44>)
 800246a:	5cd3      	ldrb	r3, [r2, r3]
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f023 0220 	bic.w	r2, r3, #32
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	3b01      	subs	r3, #1
 800247c:	4907      	ldr	r1, [pc, #28]	; (800249c <LL_DMA_SetMode+0x44>)
 800247e:	5ccb      	ldrb	r3, [r1, r3]
 8002480:	4619      	mov	r1, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	440b      	add	r3, r1
 8002486:	4619      	mov	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	08006fa4 	.word	0x08006fa4

080024a0 <LL_DMA_SetPeriphIncMode>:
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	4a0c      	ldr	r2, [pc, #48]	; (80024e4 <LL_DMA_SetPeriphIncMode+0x44>)
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	4413      	add	r3, r2
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	4907      	ldr	r1, [pc, #28]	; (80024e4 <LL_DMA_SetPeriphIncMode+0x44>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	4619      	mov	r1, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	440b      	add	r3, r1
 80024ce:	4619      	mov	r1, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]
}
 80024d6:	bf00      	nop
 80024d8:	3714      	adds	r7, #20
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	08006fa4 	.word	0x08006fa4

080024e8 <LL_DMA_SetMemoryIncMode>:
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	4a0c      	ldr	r2, [pc, #48]	; (800252c <LL_DMA_SetMemoryIncMode+0x44>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	461a      	mov	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	3b01      	subs	r3, #1
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <LL_DMA_SetMemoryIncMode+0x44>)
 800250e:	5ccb      	ldrb	r3, [r1, r3]
 8002510:	4619      	mov	r1, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	440b      	add	r3, r1
 8002516:	4619      	mov	r1, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
}
 800251e:	bf00      	nop
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	08006fa4 	.word	0x08006fa4

08002530 <LL_DMA_SetPeriphSize>:
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	3b01      	subs	r3, #1
 8002540:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <LL_DMA_SetPeriphSize+0x44>)
 8002542:	5cd3      	ldrb	r3, [r2, r3]
 8002544:	461a      	mov	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	4413      	add	r3, r2
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	3b01      	subs	r3, #1
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <LL_DMA_SetPeriphSize+0x44>)
 8002556:	5ccb      	ldrb	r3, [r1, r3]
 8002558:	4619      	mov	r1, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	440b      	add	r3, r1
 800255e:	4619      	mov	r1, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	08006fa4 	.word	0x08006fa4

08002578 <LL_DMA_SetMemorySize>:
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	3b01      	subs	r3, #1
 8002588:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <LL_DMA_SetMemorySize+0x44>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	461a      	mov	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	3b01      	subs	r3, #1
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <LL_DMA_SetMemorySize+0x44>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	4619      	mov	r1, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	440b      	add	r3, r1
 80025a6:	4619      	mov	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]
}
 80025ae:	bf00      	nop
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	08006fa4 	.word	0x08006fa4

080025c0 <LL_DMA_SetChannelPriorityLevel>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	4a0c      	ldr	r2, [pc, #48]	; (8002604 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	461a      	mov	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4413      	add	r3, r2
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	4907      	ldr	r1, [pc, #28]	; (8002604 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	4619      	mov	r1, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	440b      	add	r3, r1
 80025ee:	4619      	mov	r1, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
}
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	08006fa4 	.word	0x08006fa4

08002608 <LL_DMA_SetDataLength>:
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3b01      	subs	r3, #1
 8002618:	4a0c      	ldr	r2, [pc, #48]	; (800264c <LL_DMA_SetDataLength+0x44>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	461a      	mov	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4413      	add	r3, r2
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	0c1b      	lsrs	r3, r3, #16
 8002626:	041b      	lsls	r3, r3, #16
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	3a01      	subs	r2, #1
 800262c:	4907      	ldr	r1, [pc, #28]	; (800264c <LL_DMA_SetDataLength+0x44>)
 800262e:	5c8a      	ldrb	r2, [r1, r2]
 8002630:	4611      	mov	r1, r2
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	440a      	add	r2, r1
 8002636:	4611      	mov	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
}
 800263e:	bf00      	nop
 8002640:	3714      	adds	r7, #20
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	08006fa4 	.word	0x08006fa4

08002650 <LL_DMA_SetMemoryAddress>:
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	3b01      	subs	r3, #1
 8002660:	4a06      	ldr	r2, [pc, #24]	; (800267c <LL_DMA_SetMemoryAddress+0x2c>)
 8002662:	5cd3      	ldrb	r3, [r2, r3]
 8002664:	461a      	mov	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	4413      	add	r3, r2
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	60d3      	str	r3, [r2, #12]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr
 800267c:	08006fa4 	.word	0x08006fa4

08002680 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3b01      	subs	r3, #1
 800268e:	4a0b      	ldr	r2, [pc, #44]	; (80026bc <LL_DMA_EnableIT_TC+0x3c>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	3a01      	subs	r2, #1
 800269e:	4907      	ldr	r1, [pc, #28]	; (80026bc <LL_DMA_EnableIT_TC+0x3c>)
 80026a0:	5c8a      	ldrb	r2, [r1, r2]
 80026a2:	4611      	mov	r1, r2
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	440a      	add	r2, r1
 80026a8:	f043 0302 	orr.w	r3, r3, #2
 80026ac:	6013      	str	r3, [r2, #0]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	08006fa4 	.word	0x08006fa4

080026c0 <LL_AHB1_GRP1_EnableClock>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	4907      	ldr	r1, [pc, #28]	; (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <LL_AHB1_GRP1_EnableClock+0x2c>)
 80026d6:	695a      	ldr	r2, [r3, #20]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026de:	68fb      	ldr	r3, [r7, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40021000 	.word	0x40021000

080026f0 <LL_APB1_GRP1_EnableClock>:
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	4907      	ldr	r1, [pc, #28]	; (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002706:	69da      	ldr	r2, [r3, #28]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800270e:	68fb      	ldr	r3, [r7, #12]
}
 8002710:	bf00      	nop
 8002712:	3714      	adds	r7, #20
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	40021000 	.word	0x40021000

08002720 <LL_USART_Enable>:
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <LL_USART_ConfigAsyncMode>:
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	609a      	str	r2, [r3, #8]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	3308      	adds	r3, #8
 8002778:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	60bb      	str	r3, [r7, #8]
   return(result);
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3308      	adds	r3, #8
 800278e:	69fa      	ldr	r2, [r7, #28]
 8002790:	61ba      	str	r2, [r7, #24]
 8002792:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002794:	6979      	ldr	r1, [r7, #20]
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	e841 2300 	strex	r3, r2, [r1]
 800279c:	613b      	str	r3, [r7, #16]
   return(result);
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1e7      	bne.n	8002774 <LL_USART_DisableIT_CTS+0x8>
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3724      	adds	r7, #36	; 0x24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
	...

080027b4 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 80027ba:	f107 031c 	add.w	r3, r7, #28
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	609a      	str	r2, [r3, #8]
 80027c6:	60da      	str	r2, [r3, #12]
 80027c8:	611a      	str	r2, [r3, #16]
 80027ca:	615a      	str	r2, [r3, #20]
 80027cc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
 80027dc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80027de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027e2:	f7ff ff85 	bl	80026f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80027e6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027ea:	f7ff ff69 	bl	80026c0 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80027ee:	f248 0304 	movw	r3, #32772	; 0x8004
 80027f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80027f4:	2302      	movs	r3, #2
 80027f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80027f8:	2303      	movs	r3, #3
 80027fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002804:	2307      	movs	r3, #7
 8002806:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	1d3b      	adds	r3, r7, #4
 800280a:	4619      	mov	r1, r3
 800280c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002810:	f000 f9ca 	bl	8002ba8 <LL_GPIO_Init>

  /* USART2 DMA Init */

  /* USART2_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002814:	2200      	movs	r2, #0
 8002816:	2106      	movs	r1, #6
 8002818:	483a      	ldr	r0, [pc, #232]	; (8002904 <MX_USART2_UART_Init+0x150>)
 800281a:	f7ff fdf7 	bl	800240c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_LOW);
 800281e:	2200      	movs	r2, #0
 8002820:	2106      	movs	r1, #6
 8002822:	4838      	ldr	r0, [pc, #224]	; (8002904 <MX_USART2_UART_Init+0x150>)
 8002824:	f7ff fecc 	bl	80025c0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002828:	2200      	movs	r2, #0
 800282a:	2106      	movs	r1, #6
 800282c:	4835      	ldr	r0, [pc, #212]	; (8002904 <MX_USART2_UART_Init+0x150>)
 800282e:	f7ff fe13 	bl	8002458 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002832:	2200      	movs	r2, #0
 8002834:	2106      	movs	r1, #6
 8002836:	4833      	ldr	r0, [pc, #204]	; (8002904 <MX_USART2_UART_Init+0x150>)
 8002838:	f7ff fe32 	bl	80024a0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800283c:	2280      	movs	r2, #128	; 0x80
 800283e:	2106      	movs	r1, #6
 8002840:	4830      	ldr	r0, [pc, #192]	; (8002904 <MX_USART2_UART_Init+0x150>)
 8002842:	f7ff fe51 	bl	80024e8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002846:	2200      	movs	r2, #0
 8002848:	2106      	movs	r1, #6
 800284a:	482e      	ldr	r0, [pc, #184]	; (8002904 <MX_USART2_UART_Init+0x150>)
 800284c:	f7ff fe70 	bl	8002530 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8002850:	2200      	movs	r2, #0
 8002852:	2106      	movs	r1, #6
 8002854:	482b      	ldr	r0, [pc, #172]	; (8002904 <MX_USART2_UART_Init+0x150>)
 8002856:	f7ff fe8f 	bl	8002578 <LL_DMA_SetMemorySize>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800285a:	2210      	movs	r2, #16
 800285c:	2107      	movs	r1, #7
 800285e:	4829      	ldr	r0, [pc, #164]	; (8002904 <MX_USART2_UART_Init+0x150>)
 8002860:	f7ff fdd4 	bl	800240c <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_LOW);
 8002864:	2200      	movs	r2, #0
 8002866:	2107      	movs	r1, #7
 8002868:	4826      	ldr	r0, [pc, #152]	; (8002904 <MX_USART2_UART_Init+0x150>)
 800286a:	f7ff fea9 	bl	80025c0 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 800286e:	2200      	movs	r2, #0
 8002870:	2107      	movs	r1, #7
 8002872:	4824      	ldr	r0, [pc, #144]	; (8002904 <MX_USART2_UART_Init+0x150>)
 8002874:	f7ff fdf0 	bl	8002458 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002878:	2200      	movs	r2, #0
 800287a:	2107      	movs	r1, #7
 800287c:	4821      	ldr	r0, [pc, #132]	; (8002904 <MX_USART2_UART_Init+0x150>)
 800287e:	f7ff fe0f 	bl	80024a0 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 8002882:	2280      	movs	r2, #128	; 0x80
 8002884:	2107      	movs	r1, #7
 8002886:	481f      	ldr	r0, [pc, #124]	; (8002904 <MX_USART2_UART_Init+0x150>)
 8002888:	f7ff fe2e 	bl	80024e8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 800288c:	2200      	movs	r2, #0
 800288e:	2107      	movs	r1, #7
 8002890:	481c      	ldr	r0, [pc, #112]	; (8002904 <MX_USART2_UART_Init+0x150>)
 8002892:	f7ff fe4d 	bl	8002530 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002896:	2200      	movs	r2, #0
 8002898:	2107      	movs	r1, #7
 800289a:	481a      	ldr	r0, [pc, #104]	; (8002904 <MX_USART2_UART_Init+0x150>)
 800289c:	f7ff fe6c 	bl	8002578 <LL_DMA_SetMemorySize>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80028a0:	f7ff fd0a 	bl	80022b8 <__NVIC_GetPriorityGrouping>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2200      	movs	r2, #0
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff fd5a 	bl	8002364 <NVIC_EncodePriority>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4619      	mov	r1, r3
 80028b4:	2026      	movs	r0, #38	; 0x26
 80028b6:	f7ff fd2b 	bl	8002310 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 80028ba:	2026      	movs	r0, #38	; 0x26
 80028bc:	f7ff fd0a 	bl	80022d4 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80028c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80028c4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80028c6:	2300      	movs	r3, #0
 80028c8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80028ca:	2300      	movs	r3, #0
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80028d2:	230c      	movs	r3, #12
 80028d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80028d6:	2300      	movs	r3, #0
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80028da:	2300      	movs	r3, #0
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80028de:	f107 031c 	add.w	r3, r7, #28
 80028e2:	4619      	mov	r1, r3
 80028e4:	4808      	ldr	r0, [pc, #32]	; (8002908 <MX_USART2_UART_Init+0x154>)
 80028e6:	f000 fcc5 	bl	8003274 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80028ea:	4807      	ldr	r0, [pc, #28]	; (8002908 <MX_USART2_UART_Init+0x154>)
 80028ec:	f7ff ff3e 	bl	800276c <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80028f0:	4805      	ldr	r0, [pc, #20]	; (8002908 <MX_USART2_UART_Init+0x154>)
 80028f2:	f7ff ff25 	bl	8002740 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80028f6:	4804      	ldr	r0, [pc, #16]	; (8002908 <MX_USART2_UART_Init+0x154>)
 80028f8:	f7ff ff12 	bl	8002720 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028fc:	bf00      	nop
 80028fe:	3738      	adds	r7, #56	; 0x38
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40020000 	.word	0x40020000
 8002908:	40004400 	.word	0x40004400

0800290c <USART2_PutBuffer>:

/* USER CODE BEGIN 1 */
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	460b      	mov	r3, r1
 8002916:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	461a      	mov	r2, r3
 800291c:	2107      	movs	r1, #7
 800291e:	480a      	ldr	r0, [pc, #40]	; (8002948 <USART2_PutBuffer+0x3c>)
 8002920:	f7ff fe96 	bl	8002650 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	461a      	mov	r2, r3
 8002928:	2107      	movs	r1, #7
 800292a:	4807      	ldr	r0, [pc, #28]	; (8002948 <USART2_PutBuffer+0x3c>)
 800292c:	f7ff fe6c 	bl	8002608 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 8002930:	2107      	movs	r1, #7
 8002932:	4805      	ldr	r0, [pc, #20]	; (8002948 <USART2_PutBuffer+0x3c>)
 8002934:	f7ff fea4 	bl	8002680 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 8002938:	2107      	movs	r1, #7
 800293a:	4803      	ldr	r0, [pc, #12]	; (8002948 <USART2_PutBuffer+0x3c>)
 800293c:	f7ff fd46 	bl	80023cc <LL_DMA_EnableChannel>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	40020000 	.word	0x40020000

0800294c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800294c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002984 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002950:	f7ff fca0 	bl	8002294 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <LoopForever+0x6>)
  ldr r1, =_edata
 8002956:	490d      	ldr	r1, [pc, #52]	; (800298c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <LoopForever+0xe>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800296c:	4c0a      	ldr	r4, [pc, #40]	; (8002998 <LoopForever+0x16>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800297a:	f001 fbcf 	bl	800411c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800297e:	f7ff fa57 	bl	8001e30 <main>

08002982 <LoopForever>:

LoopForever:
    b LoopForever
 8002982:	e7fe      	b.n	8002982 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002984:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002990:	08007358 	.word	0x08007358
  ldr r2, =_sbss
 8002994:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002998:	20000374 	.word	0x20000374

0800299c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC1_2_IRQHandler>

0800299e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800299e:	b480      	push	{r7}
 80029a0:	b089      	sub	sp, #36	; 0x24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	613b      	str	r3, [r7, #16]
  return result;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	fab3 f383 	clz	r3, r3
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	2103      	movs	r1, #3
 80029c6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ca:	43db      	mvns	r3, r3
 80029cc:	401a      	ands	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	61bb      	str	r3, [r7, #24]
  return result;
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	431a      	orrs	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	601a      	str	r2, [r3, #0]
}
 80029f0:	bf00      	nop
 80029f2:	3724      	adds	r7, #36	; 0x24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	401a      	ands	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	605a      	str	r2, [r3, #4]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	613b      	str	r3, [r7, #16]
  return result;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	2103      	movs	r1, #3
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	401a      	ands	r2, r3
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	fa93 f3a3 	rbit	r3, r3
 8002a66:	61bb      	str	r3, [r7, #24]
  return result;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	fab3 f383 	clz	r3, r3
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	431a      	orrs	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002a7e:	bf00      	nop
 8002a80:	3724      	adds	r7, #36	; 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b089      	sub	sp, #36	; 0x24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	fa93 f3a3 	rbit	r3, r3
 8002aa4:	613b      	str	r3, [r7, #16]
  return result;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	fab3 f383 	clz	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2103      	movs	r1, #3
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	401a      	ands	r2, r3
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	61bb      	str	r3, [r7, #24]
  return result;
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	60da      	str	r2, [r3, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3724      	adds	r7, #36	; 0x24
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b089      	sub	sp, #36	; 0x24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1a      	ldr	r2, [r3, #32]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa93 f3a3 	rbit	r3, r3
 8002b02:	613b      	str	r3, [r7, #16]
  return result;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	fab3 f383 	clz	r3, r3
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	210f      	movs	r1, #15
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	401a      	ands	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	fa93 f3a3 	rbit	r3, r3
 8002b22:	61bb      	str	r3, [r7, #24]
  return result;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	fab3 f383 	clz	r3, r3
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002b3a:	bf00      	nop
 8002b3c:	3724      	adds	r7, #36	; 0x24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b089      	sub	sp, #36	; 0x24
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa93 f3a3 	rbit	r3, r3
 8002b62:	613b      	str	r3, [r7, #16]
  return result;
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	fab3 f383 	clz	r3, r3
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	210f      	movs	r1, #15
 8002b70:	fa01 f303 	lsl.w	r3, r1, r3
 8002b74:	43db      	mvns	r3, r3
 8002b76:	401a      	ands	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	0a1b      	lsrs	r3, r3, #8
 8002b7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	61bb      	str	r3, [r7, #24]
  return result;
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	fab3 f383 	clz	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	fa01 f303 	lsl.w	r3, r1, r3
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002b9c:	bf00      	nop
 8002b9e:	3724      	adds	r7, #36	; 0x24
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa93 f3a3 	rbit	r3, r3
 8002bbe:	613b      	str	r3, [r7, #16]
  return result;
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002bca:	e051      	b.n	8002c70 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d043      	beq.n	8002c6a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d003      	beq.n	8002bf2 <LL_GPIO_Init+0x4a>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d10e      	bne.n	8002c10 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	69b9      	ldr	r1, [r7, #24]
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ff16 	bl	8002a2c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	6819      	ldr	r1, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fef6 	bl	80029fc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	461a      	mov	r2, r3
 8002c16:	69b9      	ldr	r1, [r7, #24]
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff ff36 	bl	8002a8a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d11a      	bne.n	8002c5c <LL_GPIO_Init+0xb4>
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	60bb      	str	r3, [r7, #8]
  return result;
 8002c32:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b07      	cmp	r3, #7
 8002c3c:	d807      	bhi.n	8002c4e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	461a      	mov	r2, r3
 8002c44:	69b9      	ldr	r1, [r7, #24]
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ff4e 	bl	8002ae8 <LL_GPIO_SetAFPin_0_7>
 8002c4c:	e006      	b.n	8002c5c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	461a      	mov	r2, r3
 8002c54:	69b9      	ldr	r1, [r7, #24]
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ff75 	bl	8002b46 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	461a      	mov	r2, r3
 8002c62:	69b9      	ldr	r1, [r7, #24]
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff fe9a 	bl	800299e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1a6      	bne.n	8002bcc <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <LL_I2C_Enable>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	601a      	str	r2, [r3, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_I2C_Disable>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 0201 	bic.w	r2, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	601a      	str	r2, [r3, #0]
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_I2C_ConfigFilters>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	0219      	lsls	r1, r3, #8
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	601a      	str	r2, [r3, #0]
}
 8002cea:	bf00      	nop
 8002cec:	3714      	adds	r7, #20
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_I2C_SetOwnAddress1>:
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d0a:	f023 0307 	bic.w	r3, r3, #7
 8002d0e:	68b9      	ldr	r1, [r7, #8]
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	431a      	orrs	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	609a      	str	r2, [r3, #8]
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_I2C_EnableOwnAddress1>:
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	609a      	str	r2, [r3, #8]
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <LL_I2C_DisableOwnAddress1>:
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_I2C_SetTiming>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	611a      	str	r2, [r3, #16]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr

08002d82 <LL_I2C_SetMode>:
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	601a      	str	r2, [r3, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <LL_I2C_AcknowledgeNextData>:
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	605a      	str	r2, [r3, #4]
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f7ff ff65 	bl	8002ca8 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6899      	ldr	r1, [r3, #8]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	461a      	mov	r2, r3
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7ff ff6d 	bl	8002cc8 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4619      	mov	r1, r3
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ffb6 	bl	8002d66 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7ff ff44 	bl	8002c88 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7ff ffa0 	bl	8002d46 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6919      	ldr	r1, [r3, #16]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff70 	bl	8002cf6 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f7ff ff81 	bl	8002d26 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4619      	mov	r1, r3
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f7ff ffa9 	bl	8002d82 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	695b      	ldr	r3, [r3, #20]
 8002e34:	4619      	mov	r1, r3
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff ffb6 	bl	8002da8 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
	...

08002e48 <LL_RCC_HSI_IsReady>:
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002e4c:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <LL_RCC_HSI_IsReady+0x20>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	40021000 	.word	0x40021000

08002e6c <LL_RCC_LSE_IsReady>:
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <LL_RCC_LSE_IsReady+0x20>)
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	bf0c      	ite	eq
 8002e7c:	2301      	moveq	r3, #1
 8002e7e:	2300      	movne	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	40021000 	.word	0x40021000

08002e90 <LL_RCC_GetSysClkSource>:
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <LL_RCC_GetSysClkSource+0x18>)
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 030c 	and.w	r3, r3, #12
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000

08002eac <LL_RCC_GetAHBPrescaler>:
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	; (8002ec4 <LL_RCC_GetAHBPrescaler+0x18>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	40021000 	.word	0x40021000

08002ec8 <LL_RCC_GetAPB1Prescaler>:
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ecc:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <LL_RCC_GetAPB2Prescaler>:
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <LL_RCC_GetAPB2Prescaler+0x18>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40021000 	.word	0x40021000

08002f00 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8002f08:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <LL_RCC_GetUSARTClockSource+0x28>)
 8002f0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0c:	2103      	movs	r1, #3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	401a      	ands	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	4313      	orrs	r3, r2
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	40021000 	.word	0x40021000

08002f2c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8002f30:	4b04      	ldr	r3, [pc, #16]	; (8002f44 <LL_RCC_PLL_GetMainSource+0x18>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
 8002f42:	bf00      	nop
 8002f44:	40021000 	.word	0x40021000

08002f48 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8002f4c:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000

08002f64 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <LL_RCC_PLL_GetPrediv+0x18>)
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	f003 030f 	and.w	r3, r3, #15
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000

08002f80 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002f88:	f000 f862 	bl	8003050 <RCC_GetSystemClockFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 f880 	bl	800309c <RCC_GetHCLKClockFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 f88e 	bl	80030c8 <RCC_GetPCLK1ClockFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f89a 	bl	80030f0 <RCC_GetPCLK2ClockFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60da      	str	r2, [r3, #12]
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d130      	bne.n	8003040 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff8e 	bl	8002f00 <LL_RCC_GetUSARTClockSource>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d00a      	beq.n	8003000 <LL_RCC_GetUSARTClockFreq+0x34>
 8002fea:	2b03      	cmp	r3, #3
 8002fec:	d819      	bhi.n	8003022 <LL_RCC_GetUSARTClockFreq+0x56>
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d002      	beq.n	8002ff8 <LL_RCC_GetUSARTClockFreq+0x2c>
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d00c      	beq.n	8003010 <LL_RCC_GetUSARTClockFreq+0x44>
 8002ff6:	e014      	b.n	8003022 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002ff8:	f000 f82a 	bl	8003050 <RCC_GetSystemClockFreq>
 8002ffc:	60f8      	str	r0, [r7, #12]
        break;
 8002ffe:	e01f      	b.n	8003040 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8003000:	f7ff ff22 	bl	8002e48 <LL_RCC_HSI_IsReady>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d017      	beq.n	800303a <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 800300a:	4b10      	ldr	r3, [pc, #64]	; (800304c <LL_RCC_GetUSARTClockFreq+0x80>)
 800300c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800300e:	e014      	b.n	800303a <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8003010:	f7ff ff2c 	bl	8002e6c <LL_RCC_LSE_IsReady>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d011      	beq.n	800303e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 800301a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003020:	e00d      	b.n	800303e <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003022:	f000 f815 	bl	8003050 <RCC_GetSystemClockFreq>
 8003026:	4603      	mov	r3, r0
 8003028:	4618      	mov	r0, r3
 800302a:	f000 f837 	bl	800309c <RCC_GetHCLKClockFreq>
 800302e:	4603      	mov	r3, r0
 8003030:	4618      	mov	r0, r3
 8003032:	f000 f849 	bl	80030c8 <RCC_GetPCLK1ClockFreq>
 8003036:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8003038:	e002      	b.n	8003040 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800303a:	bf00      	nop
 800303c:	e000      	b.n	8003040 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800303e:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003040:	68fb      	ldr	r3, [r7, #12]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	007a1200 	.word	0x007a1200

08003050 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800305a:	f7ff ff19 	bl	8002e90 <LL_RCC_GetSysClkSource>
 800305e:	4603      	mov	r3, r0
 8003060:	2b08      	cmp	r3, #8
 8003062:	d00c      	beq.n	800307e <RCC_GetSystemClockFreq+0x2e>
 8003064:	2b08      	cmp	r3, #8
 8003066:	d80e      	bhi.n	8003086 <RCC_GetSystemClockFreq+0x36>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <RCC_GetSystemClockFreq+0x22>
 800306c:	2b04      	cmp	r3, #4
 800306e:	d003      	beq.n	8003078 <RCC_GetSystemClockFreq+0x28>
 8003070:	e009      	b.n	8003086 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003072:	4b09      	ldr	r3, [pc, #36]	; (8003098 <RCC_GetSystemClockFreq+0x48>)
 8003074:	607b      	str	r3, [r7, #4]
      break;
 8003076:	e009      	b.n	800308c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003078:	4b07      	ldr	r3, [pc, #28]	; (8003098 <RCC_GetSystemClockFreq+0x48>)
 800307a:	607b      	str	r3, [r7, #4]
      break;
 800307c:	e006      	b.n	800308c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800307e:	f000 f84b 	bl	8003118 <RCC_PLL_GetFreqDomain_SYS>
 8003082:	6078      	str	r0, [r7, #4]
      break;
 8003084:	e002      	b.n	800308c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003086:	4b04      	ldr	r3, [pc, #16]	; (8003098 <RCC_GetSystemClockFreq+0x48>)
 8003088:	607b      	str	r3, [r7, #4]
      break;
 800308a:	bf00      	nop
  }

  return frequency;
 800308c:	687b      	ldr	r3, [r7, #4]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	007a1200 	.word	0x007a1200

0800309c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80030a4:	f7ff ff02 	bl	8002eac <LL_RCC_GetAHBPrescaler>
 80030a8:	4603      	mov	r3, r0
 80030aa:	091b      	lsrs	r3, r3, #4
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	4a04      	ldr	r2, [pc, #16]	; (80030c4 <RCC_GetHCLKClockFreq+0x28>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	461a      	mov	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	40d3      	lsrs	r3, r2
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	08006f8c 	.word	0x08006f8c

080030c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80030d0:	f7ff fefa 	bl	8002ec8 <LL_RCC_GetAPB1Prescaler>
 80030d4:	4603      	mov	r3, r0
 80030d6:	0a1b      	lsrs	r3, r3, #8
 80030d8:	4a04      	ldr	r2, [pc, #16]	; (80030ec <RCC_GetPCLK1ClockFreq+0x24>)
 80030da:	5cd3      	ldrb	r3, [r2, r3]
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	40d3      	lsrs	r3, r2
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	08006f9c 	.word	0x08006f9c

080030f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80030f8:	f7ff fef4 	bl	8002ee4 <LL_RCC_GetAPB2Prescaler>
 80030fc:	4603      	mov	r3, r0
 80030fe:	0adb      	lsrs	r3, r3, #11
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <RCC_GetPCLK2ClockFreq+0x24>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	461a      	mov	r2, r3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	40d3      	lsrs	r3, r2
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	08006f9c 	.word	0x08006f9c

08003118 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
 8003122:	2300      	movs	r3, #0
 8003124:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003126:	f7ff ff01 	bl	8002f2c <LL_RCC_PLL_GetMainSource>
 800312a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d004      	beq.n	800313c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003138:	d003      	beq.n	8003142 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800313a:	e005      	b.n	8003148 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800313c:	4b13      	ldr	r3, [pc, #76]	; (800318c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800313e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003140:	e005      	b.n	800314e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003142:	4b13      	ldr	r3, [pc, #76]	; (8003190 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003144:	60fb      	str	r3, [r7, #12]
      break;
 8003146:	e002      	b.n	800314e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003148:	4b10      	ldr	r3, [pc, #64]	; (800318c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800314a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800314c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800314e:	f7ff ff09 	bl	8002f64 <LL_RCC_PLL_GetPrediv>
 8003152:	4603      	mov	r3, r0
 8003154:	3301      	adds	r3, #1
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	fbb2 f4f3 	udiv	r4, r2, r3
 800315c:	f7ff fef4 	bl	8002f48 <LL_RCC_PLL_GetMultiplicator>
 8003160:	4603      	mov	r3, r0
 8003162:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003166:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800316a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	fa92 f2a2 	rbit	r2, r2
 8003172:	603a      	str	r2, [r7, #0]
  return result;
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	fab2 f282 	clz	r2, r2
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	40d3      	lsrs	r3, r2
 800317e:	3302      	adds	r3, #2
 8003180:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bd90      	pop	{r4, r7, pc}
 800318c:	003d0900 	.word	0x003d0900
 8003190:	007a1200 	.word	0x007a1200

08003194 <LL_USART_IsEnabled>:
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <LL_USART_IsEnabled+0x18>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <LL_USART_IsEnabled+0x1a>
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <LL_USART_SetStopBitsLength>:
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
 80031c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	605a      	str	r2, [r3, #4]
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <LL_USART_SetHWFlowCtrl>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_USART_SetBaudRate>:
{
 8003206:	b480      	push	{r7}
 8003208:	b087      	sub	sp, #28
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800321a:	d11a      	bne.n	8003252 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	005a      	lsls	r2, r3, #1
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	441a      	add	r2, r3
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	b29b      	uxth	r3, r3
 800322e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	085b      	lsrs	r3, r3, #1
 800323e:	b29b      	uxth	r3, r3
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	60da      	str	r2, [r3, #12]
}
 8003250:	e00a      	b.n	8003268 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	085a      	lsrs	r2, r3, #1
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	441a      	add	r2, r3
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	b29b      	uxth	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	60da      	str	r2, [r3, #12]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ff84 	bl	8003194 <LL_USART_IsEnabled>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d14e      	bne.n	8003330 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	4b29      	ldr	r3, [pc, #164]	; (800333c <LL_USART_Init+0xc8>)
 8003298:	4013      	ands	r3, r2
 800329a:	683a      	ldr	r2, [r7, #0]
 800329c:	6851      	ldr	r1, [r2, #4]
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	68d2      	ldr	r2, [r2, #12]
 80032a2:	4311      	orrs	r1, r2
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	6912      	ldr	r2, [r2, #16]
 80032a8:	4311      	orrs	r1, r2
 80032aa:	683a      	ldr	r2, [r7, #0]
 80032ac:	6992      	ldr	r2, [r2, #24]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	4619      	mov	r1, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff7c 	bl	80031ba <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f7ff ff89 	bl	80031e0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a1b      	ldr	r2, [pc, #108]	; (8003340 <LL_USART_Init+0xcc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d104      	bne.n	80032e0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80032d6:	2000      	movs	r0, #0
 80032d8:	f7ff fe78 	bl	8002fcc <LL_RCC_GetUSARTClockFreq>
 80032dc:	61b8      	str	r0, [r7, #24]
 80032de:	e016      	b.n	800330e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a18      	ldr	r2, [pc, #96]	; (8003344 <LL_USART_Init+0xd0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d107      	bne.n	80032f8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80032e8:	f107 0308 	add.w	r3, r7, #8
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fe47 	bl	8002f80 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	e00a      	b.n	800330e <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a13      	ldr	r2, [pc, #76]	; (8003348 <LL_USART_Init+0xd4>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d106      	bne.n	800330e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003300:	f107 0308 	add.w	r3, r7, #8
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff fe3b 	bl	8002f80 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00d      	beq.n	8003330 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d009      	beq.n	8003330 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800331c:	2300      	movs	r3, #0
 800331e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003328:	69b9      	ldr	r1, [r7, #24]
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7ff ff6b 	bl	8003206 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003330:	7ffb      	ldrb	r3, [r7, #31]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	efff69f3 	.word	0xefff69f3
 8003340:	40013800 	.word	0x40013800
 8003344:	40004400 	.word	0x40004400
 8003348:	40004800 	.word	0x40004800

0800334c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	4a07      	ldr	r2, [pc, #28]	; (800337c <LL_InitTick+0x30>)
 8003360:	3b01      	subs	r3, #1
 8003362:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <LL_InitTick+0x30>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800336a:	4b04      	ldr	r3, [pc, #16]	; (800337c <LL_InitTick+0x30>)
 800336c:	2205      	movs	r2, #5
 800336e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	e000e010 	.word	0xe000e010

08003380 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003388:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff ffdd 	bl	800334c <LL_InitTick>
}
 8003392:	bf00      	nop
 8003394:	3708      	adds	r7, #8
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80033a4:	4a04      	ldr	r2, [pc, #16]	; (80033b8 <LL_SetSystemCoreClock+0x1c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6013      	str	r3, [r2, #0]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000004 	.word	0x20000004

080033bc <malloc>:
 80033bc:	4b02      	ldr	r3, [pc, #8]	; (80033c8 <malloc+0xc>)
 80033be:	4601      	mov	r1, r0
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	f000 b82b 	b.w	800341c <_malloc_r>
 80033c6:	bf00      	nop
 80033c8:	20000060 	.word	0x20000060

080033cc <free>:
 80033cc:	4b02      	ldr	r3, [pc, #8]	; (80033d8 <free+0xc>)
 80033ce:	4601      	mov	r1, r0
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	f001 bd47 	b.w	8004e64 <_free_r>
 80033d6:	bf00      	nop
 80033d8:	20000060 	.word	0x20000060

080033dc <sbrk_aligned>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	4e0e      	ldr	r6, [pc, #56]	; (8003418 <sbrk_aligned+0x3c>)
 80033e0:	460c      	mov	r4, r1
 80033e2:	6831      	ldr	r1, [r6, #0]
 80033e4:	4605      	mov	r5, r0
 80033e6:	b911      	cbnz	r1, 80033ee <sbrk_aligned+0x12>
 80033e8:	f000 fe70 	bl	80040cc <_sbrk_r>
 80033ec:	6030      	str	r0, [r6, #0]
 80033ee:	4621      	mov	r1, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	f000 fe6b 	bl	80040cc <_sbrk_r>
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	d00a      	beq.n	8003410 <sbrk_aligned+0x34>
 80033fa:	1cc4      	adds	r4, r0, #3
 80033fc:	f024 0403 	bic.w	r4, r4, #3
 8003400:	42a0      	cmp	r0, r4
 8003402:	d007      	beq.n	8003414 <sbrk_aligned+0x38>
 8003404:	1a21      	subs	r1, r4, r0
 8003406:	4628      	mov	r0, r5
 8003408:	f000 fe60 	bl	80040cc <_sbrk_r>
 800340c:	3001      	adds	r0, #1
 800340e:	d101      	bne.n	8003414 <sbrk_aligned+0x38>
 8003410:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003414:	4620      	mov	r0, r4
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	2000022c 	.word	0x2000022c

0800341c <_malloc_r>:
 800341c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003420:	1ccd      	adds	r5, r1, #3
 8003422:	f025 0503 	bic.w	r5, r5, #3
 8003426:	3508      	adds	r5, #8
 8003428:	2d0c      	cmp	r5, #12
 800342a:	bf38      	it	cc
 800342c:	250c      	movcc	r5, #12
 800342e:	2d00      	cmp	r5, #0
 8003430:	4607      	mov	r7, r0
 8003432:	db01      	blt.n	8003438 <_malloc_r+0x1c>
 8003434:	42a9      	cmp	r1, r5
 8003436:	d905      	bls.n	8003444 <_malloc_r+0x28>
 8003438:	230c      	movs	r3, #12
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	2600      	movs	r6, #0
 800343e:	4630      	mov	r0, r6
 8003440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003444:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003518 <_malloc_r+0xfc>
 8003448:	f000 f868 	bl	800351c <__malloc_lock>
 800344c:	f8d8 3000 	ldr.w	r3, [r8]
 8003450:	461c      	mov	r4, r3
 8003452:	bb5c      	cbnz	r4, 80034ac <_malloc_r+0x90>
 8003454:	4629      	mov	r1, r5
 8003456:	4638      	mov	r0, r7
 8003458:	f7ff ffc0 	bl	80033dc <sbrk_aligned>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	4604      	mov	r4, r0
 8003460:	d155      	bne.n	800350e <_malloc_r+0xf2>
 8003462:	f8d8 4000 	ldr.w	r4, [r8]
 8003466:	4626      	mov	r6, r4
 8003468:	2e00      	cmp	r6, #0
 800346a:	d145      	bne.n	80034f8 <_malloc_r+0xdc>
 800346c:	2c00      	cmp	r4, #0
 800346e:	d048      	beq.n	8003502 <_malloc_r+0xe6>
 8003470:	6823      	ldr	r3, [r4, #0]
 8003472:	4631      	mov	r1, r6
 8003474:	4638      	mov	r0, r7
 8003476:	eb04 0903 	add.w	r9, r4, r3
 800347a:	f000 fe27 	bl	80040cc <_sbrk_r>
 800347e:	4581      	cmp	r9, r0
 8003480:	d13f      	bne.n	8003502 <_malloc_r+0xe6>
 8003482:	6821      	ldr	r1, [r4, #0]
 8003484:	1a6d      	subs	r5, r5, r1
 8003486:	4629      	mov	r1, r5
 8003488:	4638      	mov	r0, r7
 800348a:	f7ff ffa7 	bl	80033dc <sbrk_aligned>
 800348e:	3001      	adds	r0, #1
 8003490:	d037      	beq.n	8003502 <_malloc_r+0xe6>
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	442b      	add	r3, r5
 8003496:	6023      	str	r3, [r4, #0]
 8003498:	f8d8 3000 	ldr.w	r3, [r8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d038      	beq.n	8003512 <_malloc_r+0xf6>
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	42a2      	cmp	r2, r4
 80034a4:	d12b      	bne.n	80034fe <_malloc_r+0xe2>
 80034a6:	2200      	movs	r2, #0
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	e00f      	b.n	80034cc <_malloc_r+0xb0>
 80034ac:	6822      	ldr	r2, [r4, #0]
 80034ae:	1b52      	subs	r2, r2, r5
 80034b0:	d41f      	bmi.n	80034f2 <_malloc_r+0xd6>
 80034b2:	2a0b      	cmp	r2, #11
 80034b4:	d917      	bls.n	80034e6 <_malloc_r+0xca>
 80034b6:	1961      	adds	r1, r4, r5
 80034b8:	42a3      	cmp	r3, r4
 80034ba:	6025      	str	r5, [r4, #0]
 80034bc:	bf18      	it	ne
 80034be:	6059      	strne	r1, [r3, #4]
 80034c0:	6863      	ldr	r3, [r4, #4]
 80034c2:	bf08      	it	eq
 80034c4:	f8c8 1000 	streq.w	r1, [r8]
 80034c8:	5162      	str	r2, [r4, r5]
 80034ca:	604b      	str	r3, [r1, #4]
 80034cc:	4638      	mov	r0, r7
 80034ce:	f104 060b 	add.w	r6, r4, #11
 80034d2:	f000 f829 	bl	8003528 <__malloc_unlock>
 80034d6:	f026 0607 	bic.w	r6, r6, #7
 80034da:	1d23      	adds	r3, r4, #4
 80034dc:	1af2      	subs	r2, r6, r3
 80034de:	d0ae      	beq.n	800343e <_malloc_r+0x22>
 80034e0:	1b9b      	subs	r3, r3, r6
 80034e2:	50a3      	str	r3, [r4, r2]
 80034e4:	e7ab      	b.n	800343e <_malloc_r+0x22>
 80034e6:	42a3      	cmp	r3, r4
 80034e8:	6862      	ldr	r2, [r4, #4]
 80034ea:	d1dd      	bne.n	80034a8 <_malloc_r+0x8c>
 80034ec:	f8c8 2000 	str.w	r2, [r8]
 80034f0:	e7ec      	b.n	80034cc <_malloc_r+0xb0>
 80034f2:	4623      	mov	r3, r4
 80034f4:	6864      	ldr	r4, [r4, #4]
 80034f6:	e7ac      	b.n	8003452 <_malloc_r+0x36>
 80034f8:	4634      	mov	r4, r6
 80034fa:	6876      	ldr	r6, [r6, #4]
 80034fc:	e7b4      	b.n	8003468 <_malloc_r+0x4c>
 80034fe:	4613      	mov	r3, r2
 8003500:	e7cc      	b.n	800349c <_malloc_r+0x80>
 8003502:	230c      	movs	r3, #12
 8003504:	603b      	str	r3, [r7, #0]
 8003506:	4638      	mov	r0, r7
 8003508:	f000 f80e 	bl	8003528 <__malloc_unlock>
 800350c:	e797      	b.n	800343e <_malloc_r+0x22>
 800350e:	6025      	str	r5, [r4, #0]
 8003510:	e7dc      	b.n	80034cc <_malloc_r+0xb0>
 8003512:	605b      	str	r3, [r3, #4]
 8003514:	deff      	udf	#255	; 0xff
 8003516:	bf00      	nop
 8003518:	20000228 	.word	0x20000228

0800351c <__malloc_lock>:
 800351c:	4801      	ldr	r0, [pc, #4]	; (8003524 <__malloc_lock+0x8>)
 800351e:	f000 be22 	b.w	8004166 <__retarget_lock_acquire_recursive>
 8003522:	bf00      	nop
 8003524:	20000370 	.word	0x20000370

08003528 <__malloc_unlock>:
 8003528:	4801      	ldr	r0, [pc, #4]	; (8003530 <__malloc_unlock+0x8>)
 800352a:	f000 be1d 	b.w	8004168 <__retarget_lock_release_recursive>
 800352e:	bf00      	nop
 8003530:	20000370 	.word	0x20000370

08003534 <__cvt>:
 8003534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	ec55 4b10 	vmov	r4, r5, d0
 800353c:	2d00      	cmp	r5, #0
 800353e:	460e      	mov	r6, r1
 8003540:	4619      	mov	r1, r3
 8003542:	462b      	mov	r3, r5
 8003544:	bfbb      	ittet	lt
 8003546:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800354a:	461d      	movlt	r5, r3
 800354c:	2300      	movge	r3, #0
 800354e:	232d      	movlt	r3, #45	; 0x2d
 8003550:	700b      	strb	r3, [r1, #0]
 8003552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003554:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003558:	4691      	mov	r9, r2
 800355a:	f023 0820 	bic.w	r8, r3, #32
 800355e:	bfbc      	itt	lt
 8003560:	4622      	movlt	r2, r4
 8003562:	4614      	movlt	r4, r2
 8003564:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003568:	d005      	beq.n	8003576 <__cvt+0x42>
 800356a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800356e:	d100      	bne.n	8003572 <__cvt+0x3e>
 8003570:	3601      	adds	r6, #1
 8003572:	2102      	movs	r1, #2
 8003574:	e000      	b.n	8003578 <__cvt+0x44>
 8003576:	2103      	movs	r1, #3
 8003578:	ab03      	add	r3, sp, #12
 800357a:	9301      	str	r3, [sp, #4]
 800357c:	ab02      	add	r3, sp, #8
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	ec45 4b10 	vmov	d0, r4, r5
 8003584:	4653      	mov	r3, sl
 8003586:	4632      	mov	r2, r6
 8003588:	f000 fe7a 	bl	8004280 <_dtoa_r>
 800358c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003590:	4607      	mov	r7, r0
 8003592:	d102      	bne.n	800359a <__cvt+0x66>
 8003594:	f019 0f01 	tst.w	r9, #1
 8003598:	d022      	beq.n	80035e0 <__cvt+0xac>
 800359a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800359e:	eb07 0906 	add.w	r9, r7, r6
 80035a2:	d110      	bne.n	80035c6 <__cvt+0x92>
 80035a4:	783b      	ldrb	r3, [r7, #0]
 80035a6:	2b30      	cmp	r3, #48	; 0x30
 80035a8:	d10a      	bne.n	80035c0 <__cvt+0x8c>
 80035aa:	2200      	movs	r2, #0
 80035ac:	2300      	movs	r3, #0
 80035ae:	4620      	mov	r0, r4
 80035b0:	4629      	mov	r1, r5
 80035b2:	f7fd fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 80035b6:	b918      	cbnz	r0, 80035c0 <__cvt+0x8c>
 80035b8:	f1c6 0601 	rsb	r6, r6, #1
 80035bc:	f8ca 6000 	str.w	r6, [sl]
 80035c0:	f8da 3000 	ldr.w	r3, [sl]
 80035c4:	4499      	add	r9, r3
 80035c6:	2200      	movs	r2, #0
 80035c8:	2300      	movs	r3, #0
 80035ca:	4620      	mov	r0, r4
 80035cc:	4629      	mov	r1, r5
 80035ce:	f7fd fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80035d2:	b108      	cbz	r0, 80035d8 <__cvt+0xa4>
 80035d4:	f8cd 900c 	str.w	r9, [sp, #12]
 80035d8:	2230      	movs	r2, #48	; 0x30
 80035da:	9b03      	ldr	r3, [sp, #12]
 80035dc:	454b      	cmp	r3, r9
 80035de:	d307      	bcc.n	80035f0 <__cvt+0xbc>
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035e4:	1bdb      	subs	r3, r3, r7
 80035e6:	4638      	mov	r0, r7
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	b004      	add	sp, #16
 80035ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f0:	1c59      	adds	r1, r3, #1
 80035f2:	9103      	str	r1, [sp, #12]
 80035f4:	701a      	strb	r2, [r3, #0]
 80035f6:	e7f0      	b.n	80035da <__cvt+0xa6>

080035f8 <__exponent>:
 80035f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035fa:	4603      	mov	r3, r0
 80035fc:	2900      	cmp	r1, #0
 80035fe:	bfb8      	it	lt
 8003600:	4249      	neglt	r1, r1
 8003602:	f803 2b02 	strb.w	r2, [r3], #2
 8003606:	bfb4      	ite	lt
 8003608:	222d      	movlt	r2, #45	; 0x2d
 800360a:	222b      	movge	r2, #43	; 0x2b
 800360c:	2909      	cmp	r1, #9
 800360e:	7042      	strb	r2, [r0, #1]
 8003610:	dd2a      	ble.n	8003668 <__exponent+0x70>
 8003612:	f10d 0207 	add.w	r2, sp, #7
 8003616:	4617      	mov	r7, r2
 8003618:	260a      	movs	r6, #10
 800361a:	4694      	mov	ip, r2
 800361c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003620:	fb06 1415 	mls	r4, r6, r5, r1
 8003624:	3430      	adds	r4, #48	; 0x30
 8003626:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800362a:	460c      	mov	r4, r1
 800362c:	2c63      	cmp	r4, #99	; 0x63
 800362e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003632:	4629      	mov	r1, r5
 8003634:	dcf1      	bgt.n	800361a <__exponent+0x22>
 8003636:	3130      	adds	r1, #48	; 0x30
 8003638:	f1ac 0402 	sub.w	r4, ip, #2
 800363c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003640:	1c41      	adds	r1, r0, #1
 8003642:	4622      	mov	r2, r4
 8003644:	42ba      	cmp	r2, r7
 8003646:	d30a      	bcc.n	800365e <__exponent+0x66>
 8003648:	f10d 0209 	add.w	r2, sp, #9
 800364c:	eba2 020c 	sub.w	r2, r2, ip
 8003650:	42bc      	cmp	r4, r7
 8003652:	bf88      	it	hi
 8003654:	2200      	movhi	r2, #0
 8003656:	4413      	add	r3, r2
 8003658:	1a18      	subs	r0, r3, r0
 800365a:	b003      	add	sp, #12
 800365c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003662:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003666:	e7ed      	b.n	8003644 <__exponent+0x4c>
 8003668:	2330      	movs	r3, #48	; 0x30
 800366a:	3130      	adds	r1, #48	; 0x30
 800366c:	7083      	strb	r3, [r0, #2]
 800366e:	70c1      	strb	r1, [r0, #3]
 8003670:	1d03      	adds	r3, r0, #4
 8003672:	e7f1      	b.n	8003658 <__exponent+0x60>

08003674 <_printf_float>:
 8003674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003678:	ed2d 8b02 	vpush	{d8}
 800367c:	b08d      	sub	sp, #52	; 0x34
 800367e:	460c      	mov	r4, r1
 8003680:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003684:	4616      	mov	r6, r2
 8003686:	461f      	mov	r7, r3
 8003688:	4605      	mov	r5, r0
 800368a:	f000 fce7 	bl	800405c <_localeconv_r>
 800368e:	f8d0 a000 	ldr.w	sl, [r0]
 8003692:	4650      	mov	r0, sl
 8003694:	f7fc fdec 	bl	8000270 <strlen>
 8003698:	2300      	movs	r3, #0
 800369a:	930a      	str	r3, [sp, #40]	; 0x28
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	9305      	str	r3, [sp, #20]
 80036a0:	f8d8 3000 	ldr.w	r3, [r8]
 80036a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80036a8:	3307      	adds	r3, #7
 80036aa:	f023 0307 	bic.w	r3, r3, #7
 80036ae:	f103 0208 	add.w	r2, r3, #8
 80036b2:	f8c8 2000 	str.w	r2, [r8]
 80036b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80036ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80036be:	9307      	str	r3, [sp, #28]
 80036c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80036c4:	ee08 0a10 	vmov	s16, r0
 80036c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80036cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036d0:	4b9e      	ldr	r3, [pc, #632]	; (800394c <_printf_float+0x2d8>)
 80036d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d6:	f7fd fa29 	bl	8000b2c <__aeabi_dcmpun>
 80036da:	bb88      	cbnz	r0, 8003740 <_printf_float+0xcc>
 80036dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036e0:	4b9a      	ldr	r3, [pc, #616]	; (800394c <_printf_float+0x2d8>)
 80036e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036e6:	f7fd fa03 	bl	8000af0 <__aeabi_dcmple>
 80036ea:	bb48      	cbnz	r0, 8003740 <_printf_float+0xcc>
 80036ec:	2200      	movs	r2, #0
 80036ee:	2300      	movs	r3, #0
 80036f0:	4640      	mov	r0, r8
 80036f2:	4649      	mov	r1, r9
 80036f4:	f7fd f9f2 	bl	8000adc <__aeabi_dcmplt>
 80036f8:	b110      	cbz	r0, 8003700 <_printf_float+0x8c>
 80036fa:	232d      	movs	r3, #45	; 0x2d
 80036fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003700:	4a93      	ldr	r2, [pc, #588]	; (8003950 <_printf_float+0x2dc>)
 8003702:	4b94      	ldr	r3, [pc, #592]	; (8003954 <_printf_float+0x2e0>)
 8003704:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003708:	bf94      	ite	ls
 800370a:	4690      	movls	r8, r2
 800370c:	4698      	movhi	r8, r3
 800370e:	2303      	movs	r3, #3
 8003710:	6123      	str	r3, [r4, #16]
 8003712:	9b05      	ldr	r3, [sp, #20]
 8003714:	f023 0304 	bic.w	r3, r3, #4
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	f04f 0900 	mov.w	r9, #0
 800371e:	9700      	str	r7, [sp, #0]
 8003720:	4633      	mov	r3, r6
 8003722:	aa0b      	add	r2, sp, #44	; 0x2c
 8003724:	4621      	mov	r1, r4
 8003726:	4628      	mov	r0, r5
 8003728:	f000 f9da 	bl	8003ae0 <_printf_common>
 800372c:	3001      	adds	r0, #1
 800372e:	f040 8090 	bne.w	8003852 <_printf_float+0x1de>
 8003732:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003736:	b00d      	add	sp, #52	; 0x34
 8003738:	ecbd 8b02 	vpop	{d8}
 800373c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003740:	4642      	mov	r2, r8
 8003742:	464b      	mov	r3, r9
 8003744:	4640      	mov	r0, r8
 8003746:	4649      	mov	r1, r9
 8003748:	f7fd f9f0 	bl	8000b2c <__aeabi_dcmpun>
 800374c:	b140      	cbz	r0, 8003760 <_printf_float+0xec>
 800374e:	464b      	mov	r3, r9
 8003750:	2b00      	cmp	r3, #0
 8003752:	bfbc      	itt	lt
 8003754:	232d      	movlt	r3, #45	; 0x2d
 8003756:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800375a:	4a7f      	ldr	r2, [pc, #508]	; (8003958 <_printf_float+0x2e4>)
 800375c:	4b7f      	ldr	r3, [pc, #508]	; (800395c <_printf_float+0x2e8>)
 800375e:	e7d1      	b.n	8003704 <_printf_float+0x90>
 8003760:	6863      	ldr	r3, [r4, #4]
 8003762:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003766:	9206      	str	r2, [sp, #24]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	d13f      	bne.n	80037ec <_printf_float+0x178>
 800376c:	2306      	movs	r3, #6
 800376e:	6063      	str	r3, [r4, #4]
 8003770:	9b05      	ldr	r3, [sp, #20]
 8003772:	6861      	ldr	r1, [r4, #4]
 8003774:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003778:	2300      	movs	r3, #0
 800377a:	9303      	str	r3, [sp, #12]
 800377c:	ab0a      	add	r3, sp, #40	; 0x28
 800377e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003782:	ab09      	add	r3, sp, #36	; 0x24
 8003784:	ec49 8b10 	vmov	d0, r8, r9
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	6022      	str	r2, [r4, #0]
 800378c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003790:	4628      	mov	r0, r5
 8003792:	f7ff fecf 	bl	8003534 <__cvt>
 8003796:	9b06      	ldr	r3, [sp, #24]
 8003798:	9909      	ldr	r1, [sp, #36]	; 0x24
 800379a:	2b47      	cmp	r3, #71	; 0x47
 800379c:	4680      	mov	r8, r0
 800379e:	d108      	bne.n	80037b2 <_printf_float+0x13e>
 80037a0:	1cc8      	adds	r0, r1, #3
 80037a2:	db02      	blt.n	80037aa <_printf_float+0x136>
 80037a4:	6863      	ldr	r3, [r4, #4]
 80037a6:	4299      	cmp	r1, r3
 80037a8:	dd41      	ble.n	800382e <_printf_float+0x1ba>
 80037aa:	f1ab 0302 	sub.w	r3, fp, #2
 80037ae:	fa5f fb83 	uxtb.w	fp, r3
 80037b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80037b6:	d820      	bhi.n	80037fa <_printf_float+0x186>
 80037b8:	3901      	subs	r1, #1
 80037ba:	465a      	mov	r2, fp
 80037bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80037c0:	9109      	str	r1, [sp, #36]	; 0x24
 80037c2:	f7ff ff19 	bl	80035f8 <__exponent>
 80037c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80037c8:	1813      	adds	r3, r2, r0
 80037ca:	2a01      	cmp	r2, #1
 80037cc:	4681      	mov	r9, r0
 80037ce:	6123      	str	r3, [r4, #16]
 80037d0:	dc02      	bgt.n	80037d8 <_printf_float+0x164>
 80037d2:	6822      	ldr	r2, [r4, #0]
 80037d4:	07d2      	lsls	r2, r2, #31
 80037d6:	d501      	bpl.n	80037dc <_printf_float+0x168>
 80037d8:	3301      	adds	r3, #1
 80037da:	6123      	str	r3, [r4, #16]
 80037dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d09c      	beq.n	800371e <_printf_float+0xaa>
 80037e4:	232d      	movs	r3, #45	; 0x2d
 80037e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037ea:	e798      	b.n	800371e <_printf_float+0xaa>
 80037ec:	9a06      	ldr	r2, [sp, #24]
 80037ee:	2a47      	cmp	r2, #71	; 0x47
 80037f0:	d1be      	bne.n	8003770 <_printf_float+0xfc>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1bc      	bne.n	8003770 <_printf_float+0xfc>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e7b9      	b.n	800376e <_printf_float+0xfa>
 80037fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80037fe:	d118      	bne.n	8003832 <_printf_float+0x1be>
 8003800:	2900      	cmp	r1, #0
 8003802:	6863      	ldr	r3, [r4, #4]
 8003804:	dd0b      	ble.n	800381e <_printf_float+0x1aa>
 8003806:	6121      	str	r1, [r4, #16]
 8003808:	b913      	cbnz	r3, 8003810 <_printf_float+0x19c>
 800380a:	6822      	ldr	r2, [r4, #0]
 800380c:	07d0      	lsls	r0, r2, #31
 800380e:	d502      	bpl.n	8003816 <_printf_float+0x1a2>
 8003810:	3301      	adds	r3, #1
 8003812:	440b      	add	r3, r1
 8003814:	6123      	str	r3, [r4, #16]
 8003816:	65a1      	str	r1, [r4, #88]	; 0x58
 8003818:	f04f 0900 	mov.w	r9, #0
 800381c:	e7de      	b.n	80037dc <_printf_float+0x168>
 800381e:	b913      	cbnz	r3, 8003826 <_printf_float+0x1b2>
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	07d2      	lsls	r2, r2, #31
 8003824:	d501      	bpl.n	800382a <_printf_float+0x1b6>
 8003826:	3302      	adds	r3, #2
 8003828:	e7f4      	b.n	8003814 <_printf_float+0x1a0>
 800382a:	2301      	movs	r3, #1
 800382c:	e7f2      	b.n	8003814 <_printf_float+0x1a0>
 800382e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003834:	4299      	cmp	r1, r3
 8003836:	db05      	blt.n	8003844 <_printf_float+0x1d0>
 8003838:	6823      	ldr	r3, [r4, #0]
 800383a:	6121      	str	r1, [r4, #16]
 800383c:	07d8      	lsls	r0, r3, #31
 800383e:	d5ea      	bpl.n	8003816 <_printf_float+0x1a2>
 8003840:	1c4b      	adds	r3, r1, #1
 8003842:	e7e7      	b.n	8003814 <_printf_float+0x1a0>
 8003844:	2900      	cmp	r1, #0
 8003846:	bfd4      	ite	le
 8003848:	f1c1 0202 	rsble	r2, r1, #2
 800384c:	2201      	movgt	r2, #1
 800384e:	4413      	add	r3, r2
 8003850:	e7e0      	b.n	8003814 <_printf_float+0x1a0>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	055a      	lsls	r2, r3, #21
 8003856:	d407      	bmi.n	8003868 <_printf_float+0x1f4>
 8003858:	6923      	ldr	r3, [r4, #16]
 800385a:	4642      	mov	r2, r8
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	d12c      	bne.n	80038c0 <_printf_float+0x24c>
 8003866:	e764      	b.n	8003732 <_printf_float+0xbe>
 8003868:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800386c:	f240 80e0 	bls.w	8003a30 <_printf_float+0x3bc>
 8003870:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003874:	2200      	movs	r2, #0
 8003876:	2300      	movs	r3, #0
 8003878:	f7fd f926 	bl	8000ac8 <__aeabi_dcmpeq>
 800387c:	2800      	cmp	r0, #0
 800387e:	d034      	beq.n	80038ea <_printf_float+0x276>
 8003880:	4a37      	ldr	r2, [pc, #220]	; (8003960 <_printf_float+0x2ec>)
 8003882:	2301      	movs	r3, #1
 8003884:	4631      	mov	r1, r6
 8003886:	4628      	mov	r0, r5
 8003888:	47b8      	blx	r7
 800388a:	3001      	adds	r0, #1
 800388c:	f43f af51 	beq.w	8003732 <_printf_float+0xbe>
 8003890:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003894:	429a      	cmp	r2, r3
 8003896:	db02      	blt.n	800389e <_printf_float+0x22a>
 8003898:	6823      	ldr	r3, [r4, #0]
 800389a:	07d8      	lsls	r0, r3, #31
 800389c:	d510      	bpl.n	80038c0 <_printf_float+0x24c>
 800389e:	ee18 3a10 	vmov	r3, s16
 80038a2:	4652      	mov	r2, sl
 80038a4:	4631      	mov	r1, r6
 80038a6:	4628      	mov	r0, r5
 80038a8:	47b8      	blx	r7
 80038aa:	3001      	adds	r0, #1
 80038ac:	f43f af41 	beq.w	8003732 <_printf_float+0xbe>
 80038b0:	f04f 0800 	mov.w	r8, #0
 80038b4:	f104 091a 	add.w	r9, r4, #26
 80038b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	4543      	cmp	r3, r8
 80038be:	dc09      	bgt.n	80038d4 <_printf_float+0x260>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	079b      	lsls	r3, r3, #30
 80038c4:	f100 8107 	bmi.w	8003ad6 <_printf_float+0x462>
 80038c8:	68e0      	ldr	r0, [r4, #12]
 80038ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80038cc:	4298      	cmp	r0, r3
 80038ce:	bfb8      	it	lt
 80038d0:	4618      	movlt	r0, r3
 80038d2:	e730      	b.n	8003736 <_printf_float+0xc2>
 80038d4:	2301      	movs	r3, #1
 80038d6:	464a      	mov	r2, r9
 80038d8:	4631      	mov	r1, r6
 80038da:	4628      	mov	r0, r5
 80038dc:	47b8      	blx	r7
 80038de:	3001      	adds	r0, #1
 80038e0:	f43f af27 	beq.w	8003732 <_printf_float+0xbe>
 80038e4:	f108 0801 	add.w	r8, r8, #1
 80038e8:	e7e6      	b.n	80038b8 <_printf_float+0x244>
 80038ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	dc39      	bgt.n	8003964 <_printf_float+0x2f0>
 80038f0:	4a1b      	ldr	r2, [pc, #108]	; (8003960 <_printf_float+0x2ec>)
 80038f2:	2301      	movs	r3, #1
 80038f4:	4631      	mov	r1, r6
 80038f6:	4628      	mov	r0, r5
 80038f8:	47b8      	blx	r7
 80038fa:	3001      	adds	r0, #1
 80038fc:	f43f af19 	beq.w	8003732 <_printf_float+0xbe>
 8003900:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003904:	4313      	orrs	r3, r2
 8003906:	d102      	bne.n	800390e <_printf_float+0x29a>
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	07d9      	lsls	r1, r3, #31
 800390c:	d5d8      	bpl.n	80038c0 <_printf_float+0x24c>
 800390e:	ee18 3a10 	vmov	r3, s16
 8003912:	4652      	mov	r2, sl
 8003914:	4631      	mov	r1, r6
 8003916:	4628      	mov	r0, r5
 8003918:	47b8      	blx	r7
 800391a:	3001      	adds	r0, #1
 800391c:	f43f af09 	beq.w	8003732 <_printf_float+0xbe>
 8003920:	f04f 0900 	mov.w	r9, #0
 8003924:	f104 0a1a 	add.w	sl, r4, #26
 8003928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800392a:	425b      	negs	r3, r3
 800392c:	454b      	cmp	r3, r9
 800392e:	dc01      	bgt.n	8003934 <_printf_float+0x2c0>
 8003930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003932:	e792      	b.n	800385a <_printf_float+0x1e6>
 8003934:	2301      	movs	r3, #1
 8003936:	4652      	mov	r2, sl
 8003938:	4631      	mov	r1, r6
 800393a:	4628      	mov	r0, r5
 800393c:	47b8      	blx	r7
 800393e:	3001      	adds	r0, #1
 8003940:	f43f aef7 	beq.w	8003732 <_printf_float+0xbe>
 8003944:	f109 0901 	add.w	r9, r9, #1
 8003948:	e7ee      	b.n	8003928 <_printf_float+0x2b4>
 800394a:	bf00      	nop
 800394c:	7fefffff 	.word	0x7fefffff
 8003950:	08006fab 	.word	0x08006fab
 8003954:	08006faf 	.word	0x08006faf
 8003958:	08006fb3 	.word	0x08006fb3
 800395c:	08006fb7 	.word	0x08006fb7
 8003960:	08006fbb 	.word	0x08006fbb
 8003964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003968:	429a      	cmp	r2, r3
 800396a:	bfa8      	it	ge
 800396c:	461a      	movge	r2, r3
 800396e:	2a00      	cmp	r2, #0
 8003970:	4691      	mov	r9, r2
 8003972:	dc37      	bgt.n	80039e4 <_printf_float+0x370>
 8003974:	f04f 0b00 	mov.w	fp, #0
 8003978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800397c:	f104 021a 	add.w	r2, r4, #26
 8003980:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003982:	9305      	str	r3, [sp, #20]
 8003984:	eba3 0309 	sub.w	r3, r3, r9
 8003988:	455b      	cmp	r3, fp
 800398a:	dc33      	bgt.n	80039f4 <_printf_float+0x380>
 800398c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003990:	429a      	cmp	r2, r3
 8003992:	db3b      	blt.n	8003a0c <_printf_float+0x398>
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	07da      	lsls	r2, r3, #31
 8003998:	d438      	bmi.n	8003a0c <_printf_float+0x398>
 800399a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800399e:	eba2 0903 	sub.w	r9, r2, r3
 80039a2:	9b05      	ldr	r3, [sp, #20]
 80039a4:	1ad2      	subs	r2, r2, r3
 80039a6:	4591      	cmp	r9, r2
 80039a8:	bfa8      	it	ge
 80039aa:	4691      	movge	r9, r2
 80039ac:	f1b9 0f00 	cmp.w	r9, #0
 80039b0:	dc35      	bgt.n	8003a1e <_printf_float+0x3aa>
 80039b2:	f04f 0800 	mov.w	r8, #0
 80039b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80039ba:	f104 0a1a 	add.w	sl, r4, #26
 80039be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	eba3 0309 	sub.w	r3, r3, r9
 80039c8:	4543      	cmp	r3, r8
 80039ca:	f77f af79 	ble.w	80038c0 <_printf_float+0x24c>
 80039ce:	2301      	movs	r3, #1
 80039d0:	4652      	mov	r2, sl
 80039d2:	4631      	mov	r1, r6
 80039d4:	4628      	mov	r0, r5
 80039d6:	47b8      	blx	r7
 80039d8:	3001      	adds	r0, #1
 80039da:	f43f aeaa 	beq.w	8003732 <_printf_float+0xbe>
 80039de:	f108 0801 	add.w	r8, r8, #1
 80039e2:	e7ec      	b.n	80039be <_printf_float+0x34a>
 80039e4:	4613      	mov	r3, r2
 80039e6:	4631      	mov	r1, r6
 80039e8:	4642      	mov	r2, r8
 80039ea:	4628      	mov	r0, r5
 80039ec:	47b8      	blx	r7
 80039ee:	3001      	adds	r0, #1
 80039f0:	d1c0      	bne.n	8003974 <_printf_float+0x300>
 80039f2:	e69e      	b.n	8003732 <_printf_float+0xbe>
 80039f4:	2301      	movs	r3, #1
 80039f6:	4631      	mov	r1, r6
 80039f8:	4628      	mov	r0, r5
 80039fa:	9205      	str	r2, [sp, #20]
 80039fc:	47b8      	blx	r7
 80039fe:	3001      	adds	r0, #1
 8003a00:	f43f ae97 	beq.w	8003732 <_printf_float+0xbe>
 8003a04:	9a05      	ldr	r2, [sp, #20]
 8003a06:	f10b 0b01 	add.w	fp, fp, #1
 8003a0a:	e7b9      	b.n	8003980 <_printf_float+0x30c>
 8003a0c:	ee18 3a10 	vmov	r3, s16
 8003a10:	4652      	mov	r2, sl
 8003a12:	4631      	mov	r1, r6
 8003a14:	4628      	mov	r0, r5
 8003a16:	47b8      	blx	r7
 8003a18:	3001      	adds	r0, #1
 8003a1a:	d1be      	bne.n	800399a <_printf_float+0x326>
 8003a1c:	e689      	b.n	8003732 <_printf_float+0xbe>
 8003a1e:	9a05      	ldr	r2, [sp, #20]
 8003a20:	464b      	mov	r3, r9
 8003a22:	4442      	add	r2, r8
 8003a24:	4631      	mov	r1, r6
 8003a26:	4628      	mov	r0, r5
 8003a28:	47b8      	blx	r7
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d1c1      	bne.n	80039b2 <_printf_float+0x33e>
 8003a2e:	e680      	b.n	8003732 <_printf_float+0xbe>
 8003a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a32:	2a01      	cmp	r2, #1
 8003a34:	dc01      	bgt.n	8003a3a <_printf_float+0x3c6>
 8003a36:	07db      	lsls	r3, r3, #31
 8003a38:	d53a      	bpl.n	8003ab0 <_printf_float+0x43c>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	4642      	mov	r2, r8
 8003a3e:	4631      	mov	r1, r6
 8003a40:	4628      	mov	r0, r5
 8003a42:	47b8      	blx	r7
 8003a44:	3001      	adds	r0, #1
 8003a46:	f43f ae74 	beq.w	8003732 <_printf_float+0xbe>
 8003a4a:	ee18 3a10 	vmov	r3, s16
 8003a4e:	4652      	mov	r2, sl
 8003a50:	4631      	mov	r1, r6
 8003a52:	4628      	mov	r0, r5
 8003a54:	47b8      	blx	r7
 8003a56:	3001      	adds	r0, #1
 8003a58:	f43f ae6b 	beq.w	8003732 <_printf_float+0xbe>
 8003a5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a60:	2200      	movs	r2, #0
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003a68:	f7fd f82e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a6c:	b9d8      	cbnz	r0, 8003aa6 <_printf_float+0x432>
 8003a6e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003a72:	f108 0201 	add.w	r2, r8, #1
 8003a76:	4631      	mov	r1, r6
 8003a78:	4628      	mov	r0, r5
 8003a7a:	47b8      	blx	r7
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d10e      	bne.n	8003a9e <_printf_float+0x42a>
 8003a80:	e657      	b.n	8003732 <_printf_float+0xbe>
 8003a82:	2301      	movs	r3, #1
 8003a84:	4652      	mov	r2, sl
 8003a86:	4631      	mov	r1, r6
 8003a88:	4628      	mov	r0, r5
 8003a8a:	47b8      	blx	r7
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	f43f ae50 	beq.w	8003732 <_printf_float+0xbe>
 8003a92:	f108 0801 	add.w	r8, r8, #1
 8003a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4543      	cmp	r3, r8
 8003a9c:	dcf1      	bgt.n	8003a82 <_printf_float+0x40e>
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003aa4:	e6da      	b.n	800385c <_printf_float+0x1e8>
 8003aa6:	f04f 0800 	mov.w	r8, #0
 8003aaa:	f104 0a1a 	add.w	sl, r4, #26
 8003aae:	e7f2      	b.n	8003a96 <_printf_float+0x422>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	4642      	mov	r2, r8
 8003ab4:	e7df      	b.n	8003a76 <_printf_float+0x402>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	464a      	mov	r2, r9
 8003aba:	4631      	mov	r1, r6
 8003abc:	4628      	mov	r0, r5
 8003abe:	47b8      	blx	r7
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	f43f ae36 	beq.w	8003732 <_printf_float+0xbe>
 8003ac6:	f108 0801 	add.w	r8, r8, #1
 8003aca:	68e3      	ldr	r3, [r4, #12]
 8003acc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ace:	1a5b      	subs	r3, r3, r1
 8003ad0:	4543      	cmp	r3, r8
 8003ad2:	dcf0      	bgt.n	8003ab6 <_printf_float+0x442>
 8003ad4:	e6f8      	b.n	80038c8 <_printf_float+0x254>
 8003ad6:	f04f 0800 	mov.w	r8, #0
 8003ada:	f104 0919 	add.w	r9, r4, #25
 8003ade:	e7f4      	b.n	8003aca <_printf_float+0x456>

08003ae0 <_printf_common>:
 8003ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae4:	4616      	mov	r6, r2
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	688a      	ldr	r2, [r1, #8]
 8003aea:	690b      	ldr	r3, [r1, #16]
 8003aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003af0:	4293      	cmp	r3, r2
 8003af2:	bfb8      	it	lt
 8003af4:	4613      	movlt	r3, r2
 8003af6:	6033      	str	r3, [r6, #0]
 8003af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003afc:	4607      	mov	r7, r0
 8003afe:	460c      	mov	r4, r1
 8003b00:	b10a      	cbz	r2, 8003b06 <_printf_common+0x26>
 8003b02:	3301      	adds	r3, #1
 8003b04:	6033      	str	r3, [r6, #0]
 8003b06:	6823      	ldr	r3, [r4, #0]
 8003b08:	0699      	lsls	r1, r3, #26
 8003b0a:	bf42      	ittt	mi
 8003b0c:	6833      	ldrmi	r3, [r6, #0]
 8003b0e:	3302      	addmi	r3, #2
 8003b10:	6033      	strmi	r3, [r6, #0]
 8003b12:	6825      	ldr	r5, [r4, #0]
 8003b14:	f015 0506 	ands.w	r5, r5, #6
 8003b18:	d106      	bne.n	8003b28 <_printf_common+0x48>
 8003b1a:	f104 0a19 	add.w	sl, r4, #25
 8003b1e:	68e3      	ldr	r3, [r4, #12]
 8003b20:	6832      	ldr	r2, [r6, #0]
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	42ab      	cmp	r3, r5
 8003b26:	dc26      	bgt.n	8003b76 <_printf_common+0x96>
 8003b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b2c:	1e13      	subs	r3, r2, #0
 8003b2e:	6822      	ldr	r2, [r4, #0]
 8003b30:	bf18      	it	ne
 8003b32:	2301      	movne	r3, #1
 8003b34:	0692      	lsls	r2, r2, #26
 8003b36:	d42b      	bmi.n	8003b90 <_printf_common+0xb0>
 8003b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b3c:	4649      	mov	r1, r9
 8003b3e:	4638      	mov	r0, r7
 8003b40:	47c0      	blx	r8
 8003b42:	3001      	adds	r0, #1
 8003b44:	d01e      	beq.n	8003b84 <_printf_common+0xa4>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	6922      	ldr	r2, [r4, #16]
 8003b4a:	f003 0306 	and.w	r3, r3, #6
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	bf02      	ittt	eq
 8003b52:	68e5      	ldreq	r5, [r4, #12]
 8003b54:	6833      	ldreq	r3, [r6, #0]
 8003b56:	1aed      	subeq	r5, r5, r3
 8003b58:	68a3      	ldr	r3, [r4, #8]
 8003b5a:	bf0c      	ite	eq
 8003b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b60:	2500      	movne	r5, #0
 8003b62:	4293      	cmp	r3, r2
 8003b64:	bfc4      	itt	gt
 8003b66:	1a9b      	subgt	r3, r3, r2
 8003b68:	18ed      	addgt	r5, r5, r3
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	341a      	adds	r4, #26
 8003b6e:	42b5      	cmp	r5, r6
 8003b70:	d11a      	bne.n	8003ba8 <_printf_common+0xc8>
 8003b72:	2000      	movs	r0, #0
 8003b74:	e008      	b.n	8003b88 <_printf_common+0xa8>
 8003b76:	2301      	movs	r3, #1
 8003b78:	4652      	mov	r2, sl
 8003b7a:	4649      	mov	r1, r9
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	47c0      	blx	r8
 8003b80:	3001      	adds	r0, #1
 8003b82:	d103      	bne.n	8003b8c <_printf_common+0xac>
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b8c:	3501      	adds	r5, #1
 8003b8e:	e7c6      	b.n	8003b1e <_printf_common+0x3e>
 8003b90:	18e1      	adds	r1, r4, r3
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	2030      	movs	r0, #48	; 0x30
 8003b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b9a:	4422      	add	r2, r4
 8003b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	e7c7      	b.n	8003b38 <_printf_common+0x58>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	4622      	mov	r2, r4
 8003bac:	4649      	mov	r1, r9
 8003bae:	4638      	mov	r0, r7
 8003bb0:	47c0      	blx	r8
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d0e6      	beq.n	8003b84 <_printf_common+0xa4>
 8003bb6:	3601      	adds	r6, #1
 8003bb8:	e7d9      	b.n	8003b6e <_printf_common+0x8e>
	...

08003bbc <_printf_i>:
 8003bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc0:	7e0f      	ldrb	r7, [r1, #24]
 8003bc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003bc4:	2f78      	cmp	r7, #120	; 0x78
 8003bc6:	4691      	mov	r9, r2
 8003bc8:	4680      	mov	r8, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	469a      	mov	sl, r3
 8003bce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003bd2:	d807      	bhi.n	8003be4 <_printf_i+0x28>
 8003bd4:	2f62      	cmp	r7, #98	; 0x62
 8003bd6:	d80a      	bhi.n	8003bee <_printf_i+0x32>
 8003bd8:	2f00      	cmp	r7, #0
 8003bda:	f000 80d4 	beq.w	8003d86 <_printf_i+0x1ca>
 8003bde:	2f58      	cmp	r7, #88	; 0x58
 8003be0:	f000 80c0 	beq.w	8003d64 <_printf_i+0x1a8>
 8003be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003bec:	e03a      	b.n	8003c64 <_printf_i+0xa8>
 8003bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003bf2:	2b15      	cmp	r3, #21
 8003bf4:	d8f6      	bhi.n	8003be4 <_printf_i+0x28>
 8003bf6:	a101      	add	r1, pc, #4	; (adr r1, 8003bfc <_printf_i+0x40>)
 8003bf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003bfc:	08003c55 	.word	0x08003c55
 8003c00:	08003c69 	.word	0x08003c69
 8003c04:	08003be5 	.word	0x08003be5
 8003c08:	08003be5 	.word	0x08003be5
 8003c0c:	08003be5 	.word	0x08003be5
 8003c10:	08003be5 	.word	0x08003be5
 8003c14:	08003c69 	.word	0x08003c69
 8003c18:	08003be5 	.word	0x08003be5
 8003c1c:	08003be5 	.word	0x08003be5
 8003c20:	08003be5 	.word	0x08003be5
 8003c24:	08003be5 	.word	0x08003be5
 8003c28:	08003d6d 	.word	0x08003d6d
 8003c2c:	08003c95 	.word	0x08003c95
 8003c30:	08003d27 	.word	0x08003d27
 8003c34:	08003be5 	.word	0x08003be5
 8003c38:	08003be5 	.word	0x08003be5
 8003c3c:	08003d8f 	.word	0x08003d8f
 8003c40:	08003be5 	.word	0x08003be5
 8003c44:	08003c95 	.word	0x08003c95
 8003c48:	08003be5 	.word	0x08003be5
 8003c4c:	08003be5 	.word	0x08003be5
 8003c50:	08003d2f 	.word	0x08003d2f
 8003c54:	682b      	ldr	r3, [r5, #0]
 8003c56:	1d1a      	adds	r2, r3, #4
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	602a      	str	r2, [r5, #0]
 8003c5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c64:	2301      	movs	r3, #1
 8003c66:	e09f      	b.n	8003da8 <_printf_i+0x1ec>
 8003c68:	6820      	ldr	r0, [r4, #0]
 8003c6a:	682b      	ldr	r3, [r5, #0]
 8003c6c:	0607      	lsls	r7, r0, #24
 8003c6e:	f103 0104 	add.w	r1, r3, #4
 8003c72:	6029      	str	r1, [r5, #0]
 8003c74:	d501      	bpl.n	8003c7a <_printf_i+0xbe>
 8003c76:	681e      	ldr	r6, [r3, #0]
 8003c78:	e003      	b.n	8003c82 <_printf_i+0xc6>
 8003c7a:	0646      	lsls	r6, r0, #25
 8003c7c:	d5fb      	bpl.n	8003c76 <_printf_i+0xba>
 8003c7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003c82:	2e00      	cmp	r6, #0
 8003c84:	da03      	bge.n	8003c8e <_printf_i+0xd2>
 8003c86:	232d      	movs	r3, #45	; 0x2d
 8003c88:	4276      	negs	r6, r6
 8003c8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c8e:	485a      	ldr	r0, [pc, #360]	; (8003df8 <_printf_i+0x23c>)
 8003c90:	230a      	movs	r3, #10
 8003c92:	e012      	b.n	8003cba <_printf_i+0xfe>
 8003c94:	682b      	ldr	r3, [r5, #0]
 8003c96:	6820      	ldr	r0, [r4, #0]
 8003c98:	1d19      	adds	r1, r3, #4
 8003c9a:	6029      	str	r1, [r5, #0]
 8003c9c:	0605      	lsls	r5, r0, #24
 8003c9e:	d501      	bpl.n	8003ca4 <_printf_i+0xe8>
 8003ca0:	681e      	ldr	r6, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <_printf_i+0xee>
 8003ca4:	0641      	lsls	r1, r0, #25
 8003ca6:	d5fb      	bpl.n	8003ca0 <_printf_i+0xe4>
 8003ca8:	881e      	ldrh	r6, [r3, #0]
 8003caa:	4853      	ldr	r0, [pc, #332]	; (8003df8 <_printf_i+0x23c>)
 8003cac:	2f6f      	cmp	r7, #111	; 0x6f
 8003cae:	bf0c      	ite	eq
 8003cb0:	2308      	moveq	r3, #8
 8003cb2:	230a      	movne	r3, #10
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cba:	6865      	ldr	r5, [r4, #4]
 8003cbc:	60a5      	str	r5, [r4, #8]
 8003cbe:	2d00      	cmp	r5, #0
 8003cc0:	bfa2      	ittt	ge
 8003cc2:	6821      	ldrge	r1, [r4, #0]
 8003cc4:	f021 0104 	bicge.w	r1, r1, #4
 8003cc8:	6021      	strge	r1, [r4, #0]
 8003cca:	b90e      	cbnz	r6, 8003cd0 <_printf_i+0x114>
 8003ccc:	2d00      	cmp	r5, #0
 8003cce:	d04b      	beq.n	8003d68 <_printf_i+0x1ac>
 8003cd0:	4615      	mov	r5, r2
 8003cd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003cd6:	fb03 6711 	mls	r7, r3, r1, r6
 8003cda:	5dc7      	ldrb	r7, [r0, r7]
 8003cdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ce0:	4637      	mov	r7, r6
 8003ce2:	42bb      	cmp	r3, r7
 8003ce4:	460e      	mov	r6, r1
 8003ce6:	d9f4      	bls.n	8003cd2 <_printf_i+0x116>
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d10b      	bne.n	8003d04 <_printf_i+0x148>
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	07de      	lsls	r6, r3, #31
 8003cf0:	d508      	bpl.n	8003d04 <_printf_i+0x148>
 8003cf2:	6923      	ldr	r3, [r4, #16]
 8003cf4:	6861      	ldr	r1, [r4, #4]
 8003cf6:	4299      	cmp	r1, r3
 8003cf8:	bfde      	ittt	le
 8003cfa:	2330      	movle	r3, #48	; 0x30
 8003cfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d04:	1b52      	subs	r2, r2, r5
 8003d06:	6122      	str	r2, [r4, #16]
 8003d08:	f8cd a000 	str.w	sl, [sp]
 8003d0c:	464b      	mov	r3, r9
 8003d0e:	aa03      	add	r2, sp, #12
 8003d10:	4621      	mov	r1, r4
 8003d12:	4640      	mov	r0, r8
 8003d14:	f7ff fee4 	bl	8003ae0 <_printf_common>
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d14a      	bne.n	8003db2 <_printf_i+0x1f6>
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d20:	b004      	add	sp, #16
 8003d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d26:	6823      	ldr	r3, [r4, #0]
 8003d28:	f043 0320 	orr.w	r3, r3, #32
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	4833      	ldr	r0, [pc, #204]	; (8003dfc <_printf_i+0x240>)
 8003d30:	2778      	movs	r7, #120	; 0x78
 8003d32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	6829      	ldr	r1, [r5, #0]
 8003d3a:	061f      	lsls	r7, r3, #24
 8003d3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d40:	d402      	bmi.n	8003d48 <_printf_i+0x18c>
 8003d42:	065f      	lsls	r7, r3, #25
 8003d44:	bf48      	it	mi
 8003d46:	b2b6      	uxthmi	r6, r6
 8003d48:	07df      	lsls	r7, r3, #31
 8003d4a:	bf48      	it	mi
 8003d4c:	f043 0320 	orrmi.w	r3, r3, #32
 8003d50:	6029      	str	r1, [r5, #0]
 8003d52:	bf48      	it	mi
 8003d54:	6023      	strmi	r3, [r4, #0]
 8003d56:	b91e      	cbnz	r6, 8003d60 <_printf_i+0x1a4>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	f023 0320 	bic.w	r3, r3, #32
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	2310      	movs	r3, #16
 8003d62:	e7a7      	b.n	8003cb4 <_printf_i+0xf8>
 8003d64:	4824      	ldr	r0, [pc, #144]	; (8003df8 <_printf_i+0x23c>)
 8003d66:	e7e4      	b.n	8003d32 <_printf_i+0x176>
 8003d68:	4615      	mov	r5, r2
 8003d6a:	e7bd      	b.n	8003ce8 <_printf_i+0x12c>
 8003d6c:	682b      	ldr	r3, [r5, #0]
 8003d6e:	6826      	ldr	r6, [r4, #0]
 8003d70:	6961      	ldr	r1, [r4, #20]
 8003d72:	1d18      	adds	r0, r3, #4
 8003d74:	6028      	str	r0, [r5, #0]
 8003d76:	0635      	lsls	r5, r6, #24
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	d501      	bpl.n	8003d80 <_printf_i+0x1c4>
 8003d7c:	6019      	str	r1, [r3, #0]
 8003d7e:	e002      	b.n	8003d86 <_printf_i+0x1ca>
 8003d80:	0670      	lsls	r0, r6, #25
 8003d82:	d5fb      	bpl.n	8003d7c <_printf_i+0x1c0>
 8003d84:	8019      	strh	r1, [r3, #0]
 8003d86:	2300      	movs	r3, #0
 8003d88:	6123      	str	r3, [r4, #16]
 8003d8a:	4615      	mov	r5, r2
 8003d8c:	e7bc      	b.n	8003d08 <_printf_i+0x14c>
 8003d8e:	682b      	ldr	r3, [r5, #0]
 8003d90:	1d1a      	adds	r2, r3, #4
 8003d92:	602a      	str	r2, [r5, #0]
 8003d94:	681d      	ldr	r5, [r3, #0]
 8003d96:	6862      	ldr	r2, [r4, #4]
 8003d98:	2100      	movs	r1, #0
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f7fc fa18 	bl	80001d0 <memchr>
 8003da0:	b108      	cbz	r0, 8003da6 <_printf_i+0x1ea>
 8003da2:	1b40      	subs	r0, r0, r5
 8003da4:	6060      	str	r0, [r4, #4]
 8003da6:	6863      	ldr	r3, [r4, #4]
 8003da8:	6123      	str	r3, [r4, #16]
 8003daa:	2300      	movs	r3, #0
 8003dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003db0:	e7aa      	b.n	8003d08 <_printf_i+0x14c>
 8003db2:	6923      	ldr	r3, [r4, #16]
 8003db4:	462a      	mov	r2, r5
 8003db6:	4649      	mov	r1, r9
 8003db8:	4640      	mov	r0, r8
 8003dba:	47d0      	blx	sl
 8003dbc:	3001      	adds	r0, #1
 8003dbe:	d0ad      	beq.n	8003d1c <_printf_i+0x160>
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	079b      	lsls	r3, r3, #30
 8003dc4:	d413      	bmi.n	8003dee <_printf_i+0x232>
 8003dc6:	68e0      	ldr	r0, [r4, #12]
 8003dc8:	9b03      	ldr	r3, [sp, #12]
 8003dca:	4298      	cmp	r0, r3
 8003dcc:	bfb8      	it	lt
 8003dce:	4618      	movlt	r0, r3
 8003dd0:	e7a6      	b.n	8003d20 <_printf_i+0x164>
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	4632      	mov	r2, r6
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	4640      	mov	r0, r8
 8003dda:	47d0      	blx	sl
 8003ddc:	3001      	adds	r0, #1
 8003dde:	d09d      	beq.n	8003d1c <_printf_i+0x160>
 8003de0:	3501      	adds	r5, #1
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	9903      	ldr	r1, [sp, #12]
 8003de6:	1a5b      	subs	r3, r3, r1
 8003de8:	42ab      	cmp	r3, r5
 8003dea:	dcf2      	bgt.n	8003dd2 <_printf_i+0x216>
 8003dec:	e7eb      	b.n	8003dc6 <_printf_i+0x20a>
 8003dee:	2500      	movs	r5, #0
 8003df0:	f104 0619 	add.w	r6, r4, #25
 8003df4:	e7f5      	b.n	8003de2 <_printf_i+0x226>
 8003df6:	bf00      	nop
 8003df8:	08006fbd 	.word	0x08006fbd
 8003dfc:	08006fce 	.word	0x08006fce

08003e00 <std>:
 8003e00:	2300      	movs	r3, #0
 8003e02:	b510      	push	{r4, lr}
 8003e04:	4604      	mov	r4, r0
 8003e06:	e9c0 3300 	strd	r3, r3, [r0]
 8003e0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e0e:	6083      	str	r3, [r0, #8]
 8003e10:	8181      	strh	r1, [r0, #12]
 8003e12:	6643      	str	r3, [r0, #100]	; 0x64
 8003e14:	81c2      	strh	r2, [r0, #14]
 8003e16:	6183      	str	r3, [r0, #24]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	305c      	adds	r0, #92	; 0x5c
 8003e1e:	f000 f914 	bl	800404a <memset>
 8003e22:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <std+0x58>)
 8003e24:	6263      	str	r3, [r4, #36]	; 0x24
 8003e26:	4b0d      	ldr	r3, [pc, #52]	; (8003e5c <std+0x5c>)
 8003e28:	62a3      	str	r3, [r4, #40]	; 0x28
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	; (8003e60 <std+0x60>)
 8003e2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003e2e:	4b0d      	ldr	r3, [pc, #52]	; (8003e64 <std+0x64>)
 8003e30:	6323      	str	r3, [r4, #48]	; 0x30
 8003e32:	4b0d      	ldr	r3, [pc, #52]	; (8003e68 <std+0x68>)
 8003e34:	6224      	str	r4, [r4, #32]
 8003e36:	429c      	cmp	r4, r3
 8003e38:	d006      	beq.n	8003e48 <std+0x48>
 8003e3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003e3e:	4294      	cmp	r4, r2
 8003e40:	d002      	beq.n	8003e48 <std+0x48>
 8003e42:	33d0      	adds	r3, #208	; 0xd0
 8003e44:	429c      	cmp	r4, r3
 8003e46:	d105      	bne.n	8003e54 <std+0x54>
 8003e48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e50:	f000 b988 	b.w	8004164 <__retarget_lock_init_recursive>
 8003e54:	bd10      	pop	{r4, pc}
 8003e56:	bf00      	nop
 8003e58:	08003fc5 	.word	0x08003fc5
 8003e5c:	08003fe7 	.word	0x08003fe7
 8003e60:	0800401f 	.word	0x0800401f
 8003e64:	08004043 	.word	0x08004043
 8003e68:	20000230 	.word	0x20000230

08003e6c <stdio_exit_handler>:
 8003e6c:	4a02      	ldr	r2, [pc, #8]	; (8003e78 <stdio_exit_handler+0xc>)
 8003e6e:	4903      	ldr	r1, [pc, #12]	; (8003e7c <stdio_exit_handler+0x10>)
 8003e70:	4803      	ldr	r0, [pc, #12]	; (8003e80 <stdio_exit_handler+0x14>)
 8003e72:	f000 b869 	b.w	8003f48 <_fwalk_sglue>
 8003e76:	bf00      	nop
 8003e78:	20000008 	.word	0x20000008
 8003e7c:	080059b1 	.word	0x080059b1
 8003e80:	20000014 	.word	0x20000014

08003e84 <cleanup_stdio>:
 8003e84:	6841      	ldr	r1, [r0, #4]
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <cleanup_stdio+0x34>)
 8003e88:	4299      	cmp	r1, r3
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	d001      	beq.n	8003e94 <cleanup_stdio+0x10>
 8003e90:	f001 fd8e 	bl	80059b0 <_fflush_r>
 8003e94:	68a1      	ldr	r1, [r4, #8]
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <cleanup_stdio+0x38>)
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d002      	beq.n	8003ea2 <cleanup_stdio+0x1e>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	f001 fd87 	bl	80059b0 <_fflush_r>
 8003ea2:	68e1      	ldr	r1, [r4, #12]
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <cleanup_stdio+0x3c>)
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d004      	beq.n	8003eb4 <cleanup_stdio+0x30>
 8003eaa:	4620      	mov	r0, r4
 8003eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb0:	f001 bd7e 	b.w	80059b0 <_fflush_r>
 8003eb4:	bd10      	pop	{r4, pc}
 8003eb6:	bf00      	nop
 8003eb8:	20000230 	.word	0x20000230
 8003ebc:	20000298 	.word	0x20000298
 8003ec0:	20000300 	.word	0x20000300

08003ec4 <global_stdio_init.part.0>:
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <global_stdio_init.part.0+0x30>)
 8003ec8:	4c0b      	ldr	r4, [pc, #44]	; (8003ef8 <global_stdio_init.part.0+0x34>)
 8003eca:	4a0c      	ldr	r2, [pc, #48]	; (8003efc <global_stdio_init.part.0+0x38>)
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	4620      	mov	r0, r4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2104      	movs	r1, #4
 8003ed4:	f7ff ff94 	bl	8003e00 <std>
 8003ed8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003edc:	2201      	movs	r2, #1
 8003ede:	2109      	movs	r1, #9
 8003ee0:	f7ff ff8e 	bl	8003e00 <std>
 8003ee4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003ee8:	2202      	movs	r2, #2
 8003eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eee:	2112      	movs	r1, #18
 8003ef0:	f7ff bf86 	b.w	8003e00 <std>
 8003ef4:	20000368 	.word	0x20000368
 8003ef8:	20000230 	.word	0x20000230
 8003efc:	08003e6d 	.word	0x08003e6d

08003f00 <__sfp_lock_acquire>:
 8003f00:	4801      	ldr	r0, [pc, #4]	; (8003f08 <__sfp_lock_acquire+0x8>)
 8003f02:	f000 b930 	b.w	8004166 <__retarget_lock_acquire_recursive>
 8003f06:	bf00      	nop
 8003f08:	20000371 	.word	0x20000371

08003f0c <__sfp_lock_release>:
 8003f0c:	4801      	ldr	r0, [pc, #4]	; (8003f14 <__sfp_lock_release+0x8>)
 8003f0e:	f000 b92b 	b.w	8004168 <__retarget_lock_release_recursive>
 8003f12:	bf00      	nop
 8003f14:	20000371 	.word	0x20000371

08003f18 <__sinit>:
 8003f18:	b510      	push	{r4, lr}
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	f7ff fff0 	bl	8003f00 <__sfp_lock_acquire>
 8003f20:	6a23      	ldr	r3, [r4, #32]
 8003f22:	b11b      	cbz	r3, 8003f2c <__sinit+0x14>
 8003f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f28:	f7ff bff0 	b.w	8003f0c <__sfp_lock_release>
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <__sinit+0x28>)
 8003f2e:	6223      	str	r3, [r4, #32]
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <__sinit+0x2c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f5      	bne.n	8003f24 <__sinit+0xc>
 8003f38:	f7ff ffc4 	bl	8003ec4 <global_stdio_init.part.0>
 8003f3c:	e7f2      	b.n	8003f24 <__sinit+0xc>
 8003f3e:	bf00      	nop
 8003f40:	08003e85 	.word	0x08003e85
 8003f44:	20000368 	.word	0x20000368

08003f48 <_fwalk_sglue>:
 8003f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f4c:	4607      	mov	r7, r0
 8003f4e:	4688      	mov	r8, r1
 8003f50:	4614      	mov	r4, r2
 8003f52:	2600      	movs	r6, #0
 8003f54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f58:	f1b9 0901 	subs.w	r9, r9, #1
 8003f5c:	d505      	bpl.n	8003f6a <_fwalk_sglue+0x22>
 8003f5e:	6824      	ldr	r4, [r4, #0]
 8003f60:	2c00      	cmp	r4, #0
 8003f62:	d1f7      	bne.n	8003f54 <_fwalk_sglue+0xc>
 8003f64:	4630      	mov	r0, r6
 8003f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d907      	bls.n	8003f80 <_fwalk_sglue+0x38>
 8003f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f74:	3301      	adds	r3, #1
 8003f76:	d003      	beq.n	8003f80 <_fwalk_sglue+0x38>
 8003f78:	4629      	mov	r1, r5
 8003f7a:	4638      	mov	r0, r7
 8003f7c:	47c0      	blx	r8
 8003f7e:	4306      	orrs	r6, r0
 8003f80:	3568      	adds	r5, #104	; 0x68
 8003f82:	e7e9      	b.n	8003f58 <_fwalk_sglue+0x10>

08003f84 <siprintf>:
 8003f84:	b40e      	push	{r1, r2, r3}
 8003f86:	b500      	push	{lr}
 8003f88:	b09c      	sub	sp, #112	; 0x70
 8003f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f8c:	9002      	str	r0, [sp, #8]
 8003f8e:	9006      	str	r0, [sp, #24]
 8003f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f94:	4809      	ldr	r0, [pc, #36]	; (8003fbc <siprintf+0x38>)
 8003f96:	9107      	str	r1, [sp, #28]
 8003f98:	9104      	str	r1, [sp, #16]
 8003f9a:	4909      	ldr	r1, [pc, #36]	; (8003fc0 <siprintf+0x3c>)
 8003f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa0:	9105      	str	r1, [sp, #20]
 8003fa2:	6800      	ldr	r0, [r0, #0]
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	a902      	add	r1, sp, #8
 8003fa8:	f001 fb7e 	bl	80056a8 <_svfiprintf_r>
 8003fac:	9b02      	ldr	r3, [sp, #8]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	701a      	strb	r2, [r3, #0]
 8003fb2:	b01c      	add	sp, #112	; 0x70
 8003fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fb8:	b003      	add	sp, #12
 8003fba:	4770      	bx	lr
 8003fbc:	20000060 	.word	0x20000060
 8003fc0:	ffff0208 	.word	0xffff0208

08003fc4 <__sread>:
 8003fc4:	b510      	push	{r4, lr}
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fcc:	f000 f86c 	bl	80040a8 <_read_r>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	bfab      	itete	ge
 8003fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8003fd8:	181b      	addge	r3, r3, r0
 8003fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fde:	bfac      	ite	ge
 8003fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fe2:	81a3      	strhlt	r3, [r4, #12]
 8003fe4:	bd10      	pop	{r4, pc}

08003fe6 <__swrite>:
 8003fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fea:	461f      	mov	r7, r3
 8003fec:	898b      	ldrh	r3, [r1, #12]
 8003fee:	05db      	lsls	r3, r3, #23
 8003ff0:	4605      	mov	r5, r0
 8003ff2:	460c      	mov	r4, r1
 8003ff4:	4616      	mov	r6, r2
 8003ff6:	d505      	bpl.n	8004004 <__swrite+0x1e>
 8003ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	2200      	movs	r2, #0
 8004000:	f000 f840 	bl	8004084 <_lseek_r>
 8004004:	89a3      	ldrh	r3, [r4, #12]
 8004006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800400a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800400e:	81a3      	strh	r3, [r4, #12]
 8004010:	4632      	mov	r2, r6
 8004012:	463b      	mov	r3, r7
 8004014:	4628      	mov	r0, r5
 8004016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800401a:	f000 b867 	b.w	80040ec <_write_r>

0800401e <__sseek>:
 800401e:	b510      	push	{r4, lr}
 8004020:	460c      	mov	r4, r1
 8004022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004026:	f000 f82d 	bl	8004084 <_lseek_r>
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	bf15      	itete	ne
 8004030:	6560      	strne	r0, [r4, #84]	; 0x54
 8004032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800403a:	81a3      	strheq	r3, [r4, #12]
 800403c:	bf18      	it	ne
 800403e:	81a3      	strhne	r3, [r4, #12]
 8004040:	bd10      	pop	{r4, pc}

08004042 <__sclose>:
 8004042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004046:	f000 b80d 	b.w	8004064 <_close_r>

0800404a <memset>:
 800404a:	4402      	add	r2, r0
 800404c:	4603      	mov	r3, r0
 800404e:	4293      	cmp	r3, r2
 8004050:	d100      	bne.n	8004054 <memset+0xa>
 8004052:	4770      	bx	lr
 8004054:	f803 1b01 	strb.w	r1, [r3], #1
 8004058:	e7f9      	b.n	800404e <memset+0x4>
	...

0800405c <_localeconv_r>:
 800405c:	4800      	ldr	r0, [pc, #0]	; (8004060 <_localeconv_r+0x4>)
 800405e:	4770      	bx	lr
 8004060:	20000154 	.word	0x20000154

08004064 <_close_r>:
 8004064:	b538      	push	{r3, r4, r5, lr}
 8004066:	4d06      	ldr	r5, [pc, #24]	; (8004080 <_close_r+0x1c>)
 8004068:	2300      	movs	r3, #0
 800406a:	4604      	mov	r4, r0
 800406c:	4608      	mov	r0, r1
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	f7fe f8a6 	bl	80021c0 <_close>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d102      	bne.n	800407e <_close_r+0x1a>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	b103      	cbz	r3, 800407e <_close_r+0x1a>
 800407c:	6023      	str	r3, [r4, #0]
 800407e:	bd38      	pop	{r3, r4, r5, pc}
 8004080:	2000036c 	.word	0x2000036c

08004084 <_lseek_r>:
 8004084:	b538      	push	{r3, r4, r5, lr}
 8004086:	4d07      	ldr	r5, [pc, #28]	; (80040a4 <_lseek_r+0x20>)
 8004088:	4604      	mov	r4, r0
 800408a:	4608      	mov	r0, r1
 800408c:	4611      	mov	r1, r2
 800408e:	2200      	movs	r2, #0
 8004090:	602a      	str	r2, [r5, #0]
 8004092:	461a      	mov	r2, r3
 8004094:	f7fe f8bb 	bl	800220e <_lseek>
 8004098:	1c43      	adds	r3, r0, #1
 800409a:	d102      	bne.n	80040a2 <_lseek_r+0x1e>
 800409c:	682b      	ldr	r3, [r5, #0]
 800409e:	b103      	cbz	r3, 80040a2 <_lseek_r+0x1e>
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	bd38      	pop	{r3, r4, r5, pc}
 80040a4:	2000036c 	.word	0x2000036c

080040a8 <_read_r>:
 80040a8:	b538      	push	{r3, r4, r5, lr}
 80040aa:	4d07      	ldr	r5, [pc, #28]	; (80040c8 <_read_r+0x20>)
 80040ac:	4604      	mov	r4, r0
 80040ae:	4608      	mov	r0, r1
 80040b0:	4611      	mov	r1, r2
 80040b2:	2200      	movs	r2, #0
 80040b4:	602a      	str	r2, [r5, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	f7fe f849 	bl	800214e <_read>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_read_r+0x1e>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_read_r+0x1e>
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	2000036c 	.word	0x2000036c

080040cc <_sbrk_r>:
 80040cc:	b538      	push	{r3, r4, r5, lr}
 80040ce:	4d06      	ldr	r5, [pc, #24]	; (80040e8 <_sbrk_r+0x1c>)
 80040d0:	2300      	movs	r3, #0
 80040d2:	4604      	mov	r4, r0
 80040d4:	4608      	mov	r0, r1
 80040d6:	602b      	str	r3, [r5, #0]
 80040d8:	f7fe f8a6 	bl	8002228 <_sbrk>
 80040dc:	1c43      	adds	r3, r0, #1
 80040de:	d102      	bne.n	80040e6 <_sbrk_r+0x1a>
 80040e0:	682b      	ldr	r3, [r5, #0]
 80040e2:	b103      	cbz	r3, 80040e6 <_sbrk_r+0x1a>
 80040e4:	6023      	str	r3, [r4, #0]
 80040e6:	bd38      	pop	{r3, r4, r5, pc}
 80040e8:	2000036c 	.word	0x2000036c

080040ec <_write_r>:
 80040ec:	b538      	push	{r3, r4, r5, lr}
 80040ee:	4d07      	ldr	r5, [pc, #28]	; (800410c <_write_r+0x20>)
 80040f0:	4604      	mov	r4, r0
 80040f2:	4608      	mov	r0, r1
 80040f4:	4611      	mov	r1, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	602a      	str	r2, [r5, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f7fe f844 	bl	8002188 <_write>
 8004100:	1c43      	adds	r3, r0, #1
 8004102:	d102      	bne.n	800410a <_write_r+0x1e>
 8004104:	682b      	ldr	r3, [r5, #0]
 8004106:	b103      	cbz	r3, 800410a <_write_r+0x1e>
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	bd38      	pop	{r3, r4, r5, pc}
 800410c:	2000036c 	.word	0x2000036c

08004110 <__errno>:
 8004110:	4b01      	ldr	r3, [pc, #4]	; (8004118 <__errno+0x8>)
 8004112:	6818      	ldr	r0, [r3, #0]
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000060 	.word	0x20000060

0800411c <__libc_init_array>:
 800411c:	b570      	push	{r4, r5, r6, lr}
 800411e:	4d0d      	ldr	r5, [pc, #52]	; (8004154 <__libc_init_array+0x38>)
 8004120:	4c0d      	ldr	r4, [pc, #52]	; (8004158 <__libc_init_array+0x3c>)
 8004122:	1b64      	subs	r4, r4, r5
 8004124:	10a4      	asrs	r4, r4, #2
 8004126:	2600      	movs	r6, #0
 8004128:	42a6      	cmp	r6, r4
 800412a:	d109      	bne.n	8004140 <__libc_init_array+0x24>
 800412c:	4d0b      	ldr	r5, [pc, #44]	; (800415c <__libc_init_array+0x40>)
 800412e:	4c0c      	ldr	r4, [pc, #48]	; (8004160 <__libc_init_array+0x44>)
 8004130:	f002 ff0a 	bl	8006f48 <_init>
 8004134:	1b64      	subs	r4, r4, r5
 8004136:	10a4      	asrs	r4, r4, #2
 8004138:	2600      	movs	r6, #0
 800413a:	42a6      	cmp	r6, r4
 800413c:	d105      	bne.n	800414a <__libc_init_array+0x2e>
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	f855 3b04 	ldr.w	r3, [r5], #4
 8004144:	4798      	blx	r3
 8004146:	3601      	adds	r6, #1
 8004148:	e7ee      	b.n	8004128 <__libc_init_array+0xc>
 800414a:	f855 3b04 	ldr.w	r3, [r5], #4
 800414e:	4798      	blx	r3
 8004150:	3601      	adds	r6, #1
 8004152:	e7f2      	b.n	800413a <__libc_init_array+0x1e>
 8004154:	08007350 	.word	0x08007350
 8004158:	08007350 	.word	0x08007350
 800415c:	08007350 	.word	0x08007350
 8004160:	08007354 	.word	0x08007354

08004164 <__retarget_lock_init_recursive>:
 8004164:	4770      	bx	lr

08004166 <__retarget_lock_acquire_recursive>:
 8004166:	4770      	bx	lr

08004168 <__retarget_lock_release_recursive>:
 8004168:	4770      	bx	lr

0800416a <quorem>:
 800416a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416e:	6903      	ldr	r3, [r0, #16]
 8004170:	690c      	ldr	r4, [r1, #16]
 8004172:	42a3      	cmp	r3, r4
 8004174:	4607      	mov	r7, r0
 8004176:	db7e      	blt.n	8004276 <quorem+0x10c>
 8004178:	3c01      	subs	r4, #1
 800417a:	f101 0814 	add.w	r8, r1, #20
 800417e:	f100 0514 	add.w	r5, r0, #20
 8004182:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800418c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004190:	3301      	adds	r3, #1
 8004192:	429a      	cmp	r2, r3
 8004194:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004198:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800419c:	fbb2 f6f3 	udiv	r6, r2, r3
 80041a0:	d331      	bcc.n	8004206 <quorem+0x9c>
 80041a2:	f04f 0e00 	mov.w	lr, #0
 80041a6:	4640      	mov	r0, r8
 80041a8:	46ac      	mov	ip, r5
 80041aa:	46f2      	mov	sl, lr
 80041ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80041b0:	b293      	uxth	r3, r2
 80041b2:	fb06 e303 	mla	r3, r6, r3, lr
 80041b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041ba:	0c1a      	lsrs	r2, r3, #16
 80041bc:	b29b      	uxth	r3, r3
 80041be:	ebaa 0303 	sub.w	r3, sl, r3
 80041c2:	f8dc a000 	ldr.w	sl, [ip]
 80041c6:	fa13 f38a 	uxtah	r3, r3, sl
 80041ca:	fb06 220e 	mla	r2, r6, lr, r2
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	9b00      	ldr	r3, [sp, #0]
 80041d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80041d6:	b292      	uxth	r2, r2
 80041d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80041dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80041e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80041e4:	4581      	cmp	r9, r0
 80041e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80041ea:	f84c 3b04 	str.w	r3, [ip], #4
 80041ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80041f2:	d2db      	bcs.n	80041ac <quorem+0x42>
 80041f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80041f8:	b92b      	cbnz	r3, 8004206 <quorem+0x9c>
 80041fa:	9b01      	ldr	r3, [sp, #4]
 80041fc:	3b04      	subs	r3, #4
 80041fe:	429d      	cmp	r5, r3
 8004200:	461a      	mov	r2, r3
 8004202:	d32c      	bcc.n	800425e <quorem+0xf4>
 8004204:	613c      	str	r4, [r7, #16]
 8004206:	4638      	mov	r0, r7
 8004208:	f001 f8f4 	bl	80053f4 <__mcmp>
 800420c:	2800      	cmp	r0, #0
 800420e:	db22      	blt.n	8004256 <quorem+0xec>
 8004210:	3601      	adds	r6, #1
 8004212:	4629      	mov	r1, r5
 8004214:	2000      	movs	r0, #0
 8004216:	f858 2b04 	ldr.w	r2, [r8], #4
 800421a:	f8d1 c000 	ldr.w	ip, [r1]
 800421e:	b293      	uxth	r3, r2
 8004220:	1ac3      	subs	r3, r0, r3
 8004222:	0c12      	lsrs	r2, r2, #16
 8004224:	fa13 f38c 	uxtah	r3, r3, ip
 8004228:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800422c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004230:	b29b      	uxth	r3, r3
 8004232:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004236:	45c1      	cmp	r9, r8
 8004238:	f841 3b04 	str.w	r3, [r1], #4
 800423c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004240:	d2e9      	bcs.n	8004216 <quorem+0xac>
 8004242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004246:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800424a:	b922      	cbnz	r2, 8004256 <quorem+0xec>
 800424c:	3b04      	subs	r3, #4
 800424e:	429d      	cmp	r5, r3
 8004250:	461a      	mov	r2, r3
 8004252:	d30a      	bcc.n	800426a <quorem+0x100>
 8004254:	613c      	str	r4, [r7, #16]
 8004256:	4630      	mov	r0, r6
 8004258:	b003      	add	sp, #12
 800425a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800425e:	6812      	ldr	r2, [r2, #0]
 8004260:	3b04      	subs	r3, #4
 8004262:	2a00      	cmp	r2, #0
 8004264:	d1ce      	bne.n	8004204 <quorem+0x9a>
 8004266:	3c01      	subs	r4, #1
 8004268:	e7c9      	b.n	80041fe <quorem+0x94>
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	3b04      	subs	r3, #4
 800426e:	2a00      	cmp	r2, #0
 8004270:	d1f0      	bne.n	8004254 <quorem+0xea>
 8004272:	3c01      	subs	r4, #1
 8004274:	e7eb      	b.n	800424e <quorem+0xe4>
 8004276:	2000      	movs	r0, #0
 8004278:	e7ee      	b.n	8004258 <quorem+0xee>
 800427a:	0000      	movs	r0, r0
 800427c:	0000      	movs	r0, r0
	...

08004280 <_dtoa_r>:
 8004280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004284:	ed2d 8b04 	vpush	{d8-d9}
 8004288:	69c5      	ldr	r5, [r0, #28]
 800428a:	b093      	sub	sp, #76	; 0x4c
 800428c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004290:	ec57 6b10 	vmov	r6, r7, d0
 8004294:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004298:	9107      	str	r1, [sp, #28]
 800429a:	4604      	mov	r4, r0
 800429c:	920a      	str	r2, [sp, #40]	; 0x28
 800429e:	930d      	str	r3, [sp, #52]	; 0x34
 80042a0:	b975      	cbnz	r5, 80042c0 <_dtoa_r+0x40>
 80042a2:	2010      	movs	r0, #16
 80042a4:	f7ff f88a 	bl	80033bc <malloc>
 80042a8:	4602      	mov	r2, r0
 80042aa:	61e0      	str	r0, [r4, #28]
 80042ac:	b920      	cbnz	r0, 80042b8 <_dtoa_r+0x38>
 80042ae:	4bae      	ldr	r3, [pc, #696]	; (8004568 <_dtoa_r+0x2e8>)
 80042b0:	21ef      	movs	r1, #239	; 0xef
 80042b2:	48ae      	ldr	r0, [pc, #696]	; (800456c <_dtoa_r+0x2ec>)
 80042b4:	f001 fbcc 	bl	8005a50 <__assert_func>
 80042b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80042bc:	6005      	str	r5, [r0, #0]
 80042be:	60c5      	str	r5, [r0, #12]
 80042c0:	69e3      	ldr	r3, [r4, #28]
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	b151      	cbz	r1, 80042dc <_dtoa_r+0x5c>
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	604a      	str	r2, [r1, #4]
 80042ca:	2301      	movs	r3, #1
 80042cc:	4093      	lsls	r3, r2
 80042ce:	608b      	str	r3, [r1, #8]
 80042d0:	4620      	mov	r0, r4
 80042d2:	f000 fe53 	bl	8004f7c <_Bfree>
 80042d6:	69e3      	ldr	r3, [r4, #28]
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
 80042dc:	1e3b      	subs	r3, r7, #0
 80042de:	bfbb      	ittet	lt
 80042e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80042e4:	9303      	strlt	r3, [sp, #12]
 80042e6:	2300      	movge	r3, #0
 80042e8:	2201      	movlt	r2, #1
 80042ea:	bfac      	ite	ge
 80042ec:	f8c8 3000 	strge.w	r3, [r8]
 80042f0:	f8c8 2000 	strlt.w	r2, [r8]
 80042f4:	4b9e      	ldr	r3, [pc, #632]	; (8004570 <_dtoa_r+0x2f0>)
 80042f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80042fa:	ea33 0308 	bics.w	r3, r3, r8
 80042fe:	d11b      	bne.n	8004338 <_dtoa_r+0xb8>
 8004300:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004302:	f242 730f 	movw	r3, #9999	; 0x270f
 8004306:	6013      	str	r3, [r2, #0]
 8004308:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800430c:	4333      	orrs	r3, r6
 800430e:	f000 8593 	beq.w	8004e38 <_dtoa_r+0xbb8>
 8004312:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004314:	b963      	cbnz	r3, 8004330 <_dtoa_r+0xb0>
 8004316:	4b97      	ldr	r3, [pc, #604]	; (8004574 <_dtoa_r+0x2f4>)
 8004318:	e027      	b.n	800436a <_dtoa_r+0xea>
 800431a:	4b97      	ldr	r3, [pc, #604]	; (8004578 <_dtoa_r+0x2f8>)
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	3308      	adds	r3, #8
 8004320:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	9800      	ldr	r0, [sp, #0]
 8004326:	b013      	add	sp, #76	; 0x4c
 8004328:	ecbd 8b04 	vpop	{d8-d9}
 800432c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004330:	4b90      	ldr	r3, [pc, #576]	; (8004574 <_dtoa_r+0x2f4>)
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	3303      	adds	r3, #3
 8004336:	e7f3      	b.n	8004320 <_dtoa_r+0xa0>
 8004338:	ed9d 7b02 	vldr	d7, [sp, #8]
 800433c:	2200      	movs	r2, #0
 800433e:	ec51 0b17 	vmov	r0, r1, d7
 8004342:	eeb0 8a47 	vmov.f32	s16, s14
 8004346:	eef0 8a67 	vmov.f32	s17, s15
 800434a:	2300      	movs	r3, #0
 800434c:	f7fc fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8004350:	4681      	mov	r9, r0
 8004352:	b160      	cbz	r0, 800436e <_dtoa_r+0xee>
 8004354:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004356:	2301      	movs	r3, #1
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8568 	beq.w	8004e32 <_dtoa_r+0xbb2>
 8004362:	4b86      	ldr	r3, [pc, #536]	; (800457c <_dtoa_r+0x2fc>)
 8004364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004366:	6013      	str	r3, [r2, #0]
 8004368:	3b01      	subs	r3, #1
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	e7da      	b.n	8004324 <_dtoa_r+0xa4>
 800436e:	aa10      	add	r2, sp, #64	; 0x40
 8004370:	a911      	add	r1, sp, #68	; 0x44
 8004372:	4620      	mov	r0, r4
 8004374:	eeb0 0a48 	vmov.f32	s0, s16
 8004378:	eef0 0a68 	vmov.f32	s1, s17
 800437c:	f001 f8e0 	bl	8005540 <__d2b>
 8004380:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004384:	4682      	mov	sl, r0
 8004386:	2d00      	cmp	r5, #0
 8004388:	d07f      	beq.n	800448a <_dtoa_r+0x20a>
 800438a:	ee18 3a90 	vmov	r3, s17
 800438e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004392:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004396:	ec51 0b18 	vmov	r0, r1, d8
 800439a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800439e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80043a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80043a6:	4619      	mov	r1, r3
 80043a8:	2200      	movs	r2, #0
 80043aa:	4b75      	ldr	r3, [pc, #468]	; (8004580 <_dtoa_r+0x300>)
 80043ac:	f7fb ff6c 	bl	8000288 <__aeabi_dsub>
 80043b0:	a367      	add	r3, pc, #412	; (adr r3, 8004550 <_dtoa_r+0x2d0>)
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f7fc f91f 	bl	80005f8 <__aeabi_dmul>
 80043ba:	a367      	add	r3, pc, #412	; (adr r3, 8004558 <_dtoa_r+0x2d8>)
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f7fb ff64 	bl	800028c <__adddf3>
 80043c4:	4606      	mov	r6, r0
 80043c6:	4628      	mov	r0, r5
 80043c8:	460f      	mov	r7, r1
 80043ca:	f7fc f8ab 	bl	8000524 <__aeabi_i2d>
 80043ce:	a364      	add	r3, pc, #400	; (adr r3, 8004560 <_dtoa_r+0x2e0>)
 80043d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d4:	f7fc f910 	bl	80005f8 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4630      	mov	r0, r6
 80043de:	4639      	mov	r1, r7
 80043e0:	f7fb ff54 	bl	800028c <__adddf3>
 80043e4:	4606      	mov	r6, r0
 80043e6:	460f      	mov	r7, r1
 80043e8:	f7fc fbb6 	bl	8000b58 <__aeabi_d2iz>
 80043ec:	2200      	movs	r2, #0
 80043ee:	4683      	mov	fp, r0
 80043f0:	2300      	movs	r3, #0
 80043f2:	4630      	mov	r0, r6
 80043f4:	4639      	mov	r1, r7
 80043f6:	f7fc fb71 	bl	8000adc <__aeabi_dcmplt>
 80043fa:	b148      	cbz	r0, 8004410 <_dtoa_r+0x190>
 80043fc:	4658      	mov	r0, fp
 80043fe:	f7fc f891 	bl	8000524 <__aeabi_i2d>
 8004402:	4632      	mov	r2, r6
 8004404:	463b      	mov	r3, r7
 8004406:	f7fc fb5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800440a:	b908      	cbnz	r0, 8004410 <_dtoa_r+0x190>
 800440c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004410:	f1bb 0f16 	cmp.w	fp, #22
 8004414:	d857      	bhi.n	80044c6 <_dtoa_r+0x246>
 8004416:	4b5b      	ldr	r3, [pc, #364]	; (8004584 <_dtoa_r+0x304>)
 8004418:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	ec51 0b18 	vmov	r0, r1, d8
 8004424:	f7fc fb5a 	bl	8000adc <__aeabi_dcmplt>
 8004428:	2800      	cmp	r0, #0
 800442a:	d04e      	beq.n	80044ca <_dtoa_r+0x24a>
 800442c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004430:	2300      	movs	r3, #0
 8004432:	930c      	str	r3, [sp, #48]	; 0x30
 8004434:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004436:	1b5b      	subs	r3, r3, r5
 8004438:	1e5a      	subs	r2, r3, #1
 800443a:	bf45      	ittet	mi
 800443c:	f1c3 0301 	rsbmi	r3, r3, #1
 8004440:	9305      	strmi	r3, [sp, #20]
 8004442:	2300      	movpl	r3, #0
 8004444:	2300      	movmi	r3, #0
 8004446:	9206      	str	r2, [sp, #24]
 8004448:	bf54      	ite	pl
 800444a:	9305      	strpl	r3, [sp, #20]
 800444c:	9306      	strmi	r3, [sp, #24]
 800444e:	f1bb 0f00 	cmp.w	fp, #0
 8004452:	db3c      	blt.n	80044ce <_dtoa_r+0x24e>
 8004454:	9b06      	ldr	r3, [sp, #24]
 8004456:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800445a:	445b      	add	r3, fp
 800445c:	9306      	str	r3, [sp, #24]
 800445e:	2300      	movs	r3, #0
 8004460:	9308      	str	r3, [sp, #32]
 8004462:	9b07      	ldr	r3, [sp, #28]
 8004464:	2b09      	cmp	r3, #9
 8004466:	d868      	bhi.n	800453a <_dtoa_r+0x2ba>
 8004468:	2b05      	cmp	r3, #5
 800446a:	bfc4      	itt	gt
 800446c:	3b04      	subgt	r3, #4
 800446e:	9307      	strgt	r3, [sp, #28]
 8004470:	9b07      	ldr	r3, [sp, #28]
 8004472:	f1a3 0302 	sub.w	r3, r3, #2
 8004476:	bfcc      	ite	gt
 8004478:	2500      	movgt	r5, #0
 800447a:	2501      	movle	r5, #1
 800447c:	2b03      	cmp	r3, #3
 800447e:	f200 8085 	bhi.w	800458c <_dtoa_r+0x30c>
 8004482:	e8df f003 	tbb	[pc, r3]
 8004486:	3b2e      	.short	0x3b2e
 8004488:	5839      	.short	0x5839
 800448a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800448e:	441d      	add	r5, r3
 8004490:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004494:	2b20      	cmp	r3, #32
 8004496:	bfc1      	itttt	gt
 8004498:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800449c:	fa08 f803 	lslgt.w	r8, r8, r3
 80044a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80044a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80044a8:	bfd6      	itet	le
 80044aa:	f1c3 0320 	rsble	r3, r3, #32
 80044ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80044b2:	fa06 f003 	lslle.w	r0, r6, r3
 80044b6:	f7fc f825 	bl	8000504 <__aeabi_ui2d>
 80044ba:	2201      	movs	r2, #1
 80044bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80044c0:	3d01      	subs	r5, #1
 80044c2:	920e      	str	r2, [sp, #56]	; 0x38
 80044c4:	e76f      	b.n	80043a6 <_dtoa_r+0x126>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e7b3      	b.n	8004432 <_dtoa_r+0x1b2>
 80044ca:	900c      	str	r0, [sp, #48]	; 0x30
 80044cc:	e7b2      	b.n	8004434 <_dtoa_r+0x1b4>
 80044ce:	9b05      	ldr	r3, [sp, #20]
 80044d0:	eba3 030b 	sub.w	r3, r3, fp
 80044d4:	9305      	str	r3, [sp, #20]
 80044d6:	f1cb 0300 	rsb	r3, fp, #0
 80044da:	9308      	str	r3, [sp, #32]
 80044dc:	2300      	movs	r3, #0
 80044de:	930b      	str	r3, [sp, #44]	; 0x2c
 80044e0:	e7bf      	b.n	8004462 <_dtoa_r+0x1e2>
 80044e2:	2300      	movs	r3, #0
 80044e4:	9309      	str	r3, [sp, #36]	; 0x24
 80044e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	dc52      	bgt.n	8004592 <_dtoa_r+0x312>
 80044ec:	2301      	movs	r3, #1
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	9304      	str	r3, [sp, #16]
 80044f2:	461a      	mov	r2, r3
 80044f4:	920a      	str	r2, [sp, #40]	; 0x28
 80044f6:	e00b      	b.n	8004510 <_dtoa_r+0x290>
 80044f8:	2301      	movs	r3, #1
 80044fa:	e7f3      	b.n	80044e4 <_dtoa_r+0x264>
 80044fc:	2300      	movs	r3, #0
 80044fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004502:	445b      	add	r3, fp
 8004504:	9301      	str	r3, [sp, #4]
 8004506:	3301      	adds	r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	9304      	str	r3, [sp, #16]
 800450c:	bfb8      	it	lt
 800450e:	2301      	movlt	r3, #1
 8004510:	69e0      	ldr	r0, [r4, #28]
 8004512:	2100      	movs	r1, #0
 8004514:	2204      	movs	r2, #4
 8004516:	f102 0614 	add.w	r6, r2, #20
 800451a:	429e      	cmp	r6, r3
 800451c:	d93d      	bls.n	800459a <_dtoa_r+0x31a>
 800451e:	6041      	str	r1, [r0, #4]
 8004520:	4620      	mov	r0, r4
 8004522:	f000 fceb 	bl	8004efc <_Balloc>
 8004526:	9000      	str	r0, [sp, #0]
 8004528:	2800      	cmp	r0, #0
 800452a:	d139      	bne.n	80045a0 <_dtoa_r+0x320>
 800452c:	4b16      	ldr	r3, [pc, #88]	; (8004588 <_dtoa_r+0x308>)
 800452e:	4602      	mov	r2, r0
 8004530:	f240 11af 	movw	r1, #431	; 0x1af
 8004534:	e6bd      	b.n	80042b2 <_dtoa_r+0x32>
 8004536:	2301      	movs	r3, #1
 8004538:	e7e1      	b.n	80044fe <_dtoa_r+0x27e>
 800453a:	2501      	movs	r5, #1
 800453c:	2300      	movs	r3, #0
 800453e:	9307      	str	r3, [sp, #28]
 8004540:	9509      	str	r5, [sp, #36]	; 0x24
 8004542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	9304      	str	r3, [sp, #16]
 800454a:	2200      	movs	r2, #0
 800454c:	2312      	movs	r3, #18
 800454e:	e7d1      	b.n	80044f4 <_dtoa_r+0x274>
 8004550:	636f4361 	.word	0x636f4361
 8004554:	3fd287a7 	.word	0x3fd287a7
 8004558:	8b60c8b3 	.word	0x8b60c8b3
 800455c:	3fc68a28 	.word	0x3fc68a28
 8004560:	509f79fb 	.word	0x509f79fb
 8004564:	3fd34413 	.word	0x3fd34413
 8004568:	08006fec 	.word	0x08006fec
 800456c:	08007003 	.word	0x08007003
 8004570:	7ff00000 	.word	0x7ff00000
 8004574:	08006fe8 	.word	0x08006fe8
 8004578:	08006fdf 	.word	0x08006fdf
 800457c:	08006fbc 	.word	0x08006fbc
 8004580:	3ff80000 	.word	0x3ff80000
 8004584:	080070f0 	.word	0x080070f0
 8004588:	0800705b 	.word	0x0800705b
 800458c:	2301      	movs	r3, #1
 800458e:	9309      	str	r3, [sp, #36]	; 0x24
 8004590:	e7d7      	b.n	8004542 <_dtoa_r+0x2c2>
 8004592:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	9304      	str	r3, [sp, #16]
 8004598:	e7ba      	b.n	8004510 <_dtoa_r+0x290>
 800459a:	3101      	adds	r1, #1
 800459c:	0052      	lsls	r2, r2, #1
 800459e:	e7ba      	b.n	8004516 <_dtoa_r+0x296>
 80045a0:	69e3      	ldr	r3, [r4, #28]
 80045a2:	9a00      	ldr	r2, [sp, #0]
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	9b04      	ldr	r3, [sp, #16]
 80045a8:	2b0e      	cmp	r3, #14
 80045aa:	f200 80a8 	bhi.w	80046fe <_dtoa_r+0x47e>
 80045ae:	2d00      	cmp	r5, #0
 80045b0:	f000 80a5 	beq.w	80046fe <_dtoa_r+0x47e>
 80045b4:	f1bb 0f00 	cmp.w	fp, #0
 80045b8:	dd38      	ble.n	800462c <_dtoa_r+0x3ac>
 80045ba:	4bc0      	ldr	r3, [pc, #768]	; (80048bc <_dtoa_r+0x63c>)
 80045bc:	f00b 020f 	and.w	r2, fp, #15
 80045c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80045c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80045c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80045cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80045d0:	d019      	beq.n	8004606 <_dtoa_r+0x386>
 80045d2:	4bbb      	ldr	r3, [pc, #748]	; (80048c0 <_dtoa_r+0x640>)
 80045d4:	ec51 0b18 	vmov	r0, r1, d8
 80045d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80045dc:	f7fc f936 	bl	800084c <__aeabi_ddiv>
 80045e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045e4:	f008 080f 	and.w	r8, r8, #15
 80045e8:	2503      	movs	r5, #3
 80045ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80048c0 <_dtoa_r+0x640>
 80045ee:	f1b8 0f00 	cmp.w	r8, #0
 80045f2:	d10a      	bne.n	800460a <_dtoa_r+0x38a>
 80045f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80045f8:	4632      	mov	r2, r6
 80045fa:	463b      	mov	r3, r7
 80045fc:	f7fc f926 	bl	800084c <__aeabi_ddiv>
 8004600:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004604:	e02b      	b.n	800465e <_dtoa_r+0x3de>
 8004606:	2502      	movs	r5, #2
 8004608:	e7ef      	b.n	80045ea <_dtoa_r+0x36a>
 800460a:	f018 0f01 	tst.w	r8, #1
 800460e:	d008      	beq.n	8004622 <_dtoa_r+0x3a2>
 8004610:	4630      	mov	r0, r6
 8004612:	4639      	mov	r1, r7
 8004614:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004618:	f7fb ffee 	bl	80005f8 <__aeabi_dmul>
 800461c:	3501      	adds	r5, #1
 800461e:	4606      	mov	r6, r0
 8004620:	460f      	mov	r7, r1
 8004622:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004626:	f109 0908 	add.w	r9, r9, #8
 800462a:	e7e0      	b.n	80045ee <_dtoa_r+0x36e>
 800462c:	f000 809f 	beq.w	800476e <_dtoa_r+0x4ee>
 8004630:	f1cb 0600 	rsb	r6, fp, #0
 8004634:	4ba1      	ldr	r3, [pc, #644]	; (80048bc <_dtoa_r+0x63c>)
 8004636:	4fa2      	ldr	r7, [pc, #648]	; (80048c0 <_dtoa_r+0x640>)
 8004638:	f006 020f 	and.w	r2, r6, #15
 800463c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	ec51 0b18 	vmov	r0, r1, d8
 8004648:	f7fb ffd6 	bl	80005f8 <__aeabi_dmul>
 800464c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004650:	1136      	asrs	r6, r6, #4
 8004652:	2300      	movs	r3, #0
 8004654:	2502      	movs	r5, #2
 8004656:	2e00      	cmp	r6, #0
 8004658:	d17e      	bne.n	8004758 <_dtoa_r+0x4d8>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1d0      	bne.n	8004600 <_dtoa_r+0x380>
 800465e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004660:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 8084 	beq.w	8004772 <_dtoa_r+0x4f2>
 800466a:	4b96      	ldr	r3, [pc, #600]	; (80048c4 <_dtoa_r+0x644>)
 800466c:	2200      	movs	r2, #0
 800466e:	4640      	mov	r0, r8
 8004670:	4649      	mov	r1, r9
 8004672:	f7fc fa33 	bl	8000adc <__aeabi_dcmplt>
 8004676:	2800      	cmp	r0, #0
 8004678:	d07b      	beq.n	8004772 <_dtoa_r+0x4f2>
 800467a:	9b04      	ldr	r3, [sp, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d078      	beq.n	8004772 <_dtoa_r+0x4f2>
 8004680:	9b01      	ldr	r3, [sp, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	dd39      	ble.n	80046fa <_dtoa_r+0x47a>
 8004686:	4b90      	ldr	r3, [pc, #576]	; (80048c8 <_dtoa_r+0x648>)
 8004688:	2200      	movs	r2, #0
 800468a:	4640      	mov	r0, r8
 800468c:	4649      	mov	r1, r9
 800468e:	f7fb ffb3 	bl	80005f8 <__aeabi_dmul>
 8004692:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004696:	9e01      	ldr	r6, [sp, #4]
 8004698:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800469c:	3501      	adds	r5, #1
 800469e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80046a2:	4628      	mov	r0, r5
 80046a4:	f7fb ff3e 	bl	8000524 <__aeabi_i2d>
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	f7fb ffa4 	bl	80005f8 <__aeabi_dmul>
 80046b0:	4b86      	ldr	r3, [pc, #536]	; (80048cc <_dtoa_r+0x64c>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	f7fb fdea 	bl	800028c <__adddf3>
 80046b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80046bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80046c0:	9303      	str	r3, [sp, #12]
 80046c2:	2e00      	cmp	r6, #0
 80046c4:	d158      	bne.n	8004778 <_dtoa_r+0x4f8>
 80046c6:	4b82      	ldr	r3, [pc, #520]	; (80048d0 <_dtoa_r+0x650>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	4640      	mov	r0, r8
 80046cc:	4649      	mov	r1, r9
 80046ce:	f7fb fddb 	bl	8000288 <__aeabi_dsub>
 80046d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046d6:	4680      	mov	r8, r0
 80046d8:	4689      	mov	r9, r1
 80046da:	f7fc fa1d 	bl	8000b18 <__aeabi_dcmpgt>
 80046de:	2800      	cmp	r0, #0
 80046e0:	f040 8296 	bne.w	8004c10 <_dtoa_r+0x990>
 80046e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80046e8:	4640      	mov	r0, r8
 80046ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046ee:	4649      	mov	r1, r9
 80046f0:	f7fc f9f4 	bl	8000adc <__aeabi_dcmplt>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	f040 8289 	bne.w	8004c0c <_dtoa_r+0x98c>
 80046fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80046fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004700:	2b00      	cmp	r3, #0
 8004702:	f2c0 814e 	blt.w	80049a2 <_dtoa_r+0x722>
 8004706:	f1bb 0f0e 	cmp.w	fp, #14
 800470a:	f300 814a 	bgt.w	80049a2 <_dtoa_r+0x722>
 800470e:	4b6b      	ldr	r3, [pc, #428]	; (80048bc <_dtoa_r+0x63c>)
 8004710:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004714:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800471a:	2b00      	cmp	r3, #0
 800471c:	f280 80dc 	bge.w	80048d8 <_dtoa_r+0x658>
 8004720:	9b04      	ldr	r3, [sp, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f300 80d8 	bgt.w	80048d8 <_dtoa_r+0x658>
 8004728:	f040 826f 	bne.w	8004c0a <_dtoa_r+0x98a>
 800472c:	4b68      	ldr	r3, [pc, #416]	; (80048d0 <_dtoa_r+0x650>)
 800472e:	2200      	movs	r2, #0
 8004730:	4640      	mov	r0, r8
 8004732:	4649      	mov	r1, r9
 8004734:	f7fb ff60 	bl	80005f8 <__aeabi_dmul>
 8004738:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800473c:	f7fc f9e2 	bl	8000b04 <__aeabi_dcmpge>
 8004740:	9e04      	ldr	r6, [sp, #16]
 8004742:	4637      	mov	r7, r6
 8004744:	2800      	cmp	r0, #0
 8004746:	f040 8245 	bne.w	8004bd4 <_dtoa_r+0x954>
 800474a:	9d00      	ldr	r5, [sp, #0]
 800474c:	2331      	movs	r3, #49	; 0x31
 800474e:	f805 3b01 	strb.w	r3, [r5], #1
 8004752:	f10b 0b01 	add.w	fp, fp, #1
 8004756:	e241      	b.n	8004bdc <_dtoa_r+0x95c>
 8004758:	07f2      	lsls	r2, r6, #31
 800475a:	d505      	bpl.n	8004768 <_dtoa_r+0x4e8>
 800475c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004760:	f7fb ff4a 	bl	80005f8 <__aeabi_dmul>
 8004764:	3501      	adds	r5, #1
 8004766:	2301      	movs	r3, #1
 8004768:	1076      	asrs	r6, r6, #1
 800476a:	3708      	adds	r7, #8
 800476c:	e773      	b.n	8004656 <_dtoa_r+0x3d6>
 800476e:	2502      	movs	r5, #2
 8004770:	e775      	b.n	800465e <_dtoa_r+0x3de>
 8004772:	9e04      	ldr	r6, [sp, #16]
 8004774:	465f      	mov	r7, fp
 8004776:	e792      	b.n	800469e <_dtoa_r+0x41e>
 8004778:	9900      	ldr	r1, [sp, #0]
 800477a:	4b50      	ldr	r3, [pc, #320]	; (80048bc <_dtoa_r+0x63c>)
 800477c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004780:	4431      	add	r1, r6
 8004782:	9102      	str	r1, [sp, #8]
 8004784:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004786:	eeb0 9a47 	vmov.f32	s18, s14
 800478a:	eef0 9a67 	vmov.f32	s19, s15
 800478e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004792:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004796:	2900      	cmp	r1, #0
 8004798:	d044      	beq.n	8004824 <_dtoa_r+0x5a4>
 800479a:	494e      	ldr	r1, [pc, #312]	; (80048d4 <_dtoa_r+0x654>)
 800479c:	2000      	movs	r0, #0
 800479e:	f7fc f855 	bl	800084c <__aeabi_ddiv>
 80047a2:	ec53 2b19 	vmov	r2, r3, d9
 80047a6:	f7fb fd6f 	bl	8000288 <__aeabi_dsub>
 80047aa:	9d00      	ldr	r5, [sp, #0]
 80047ac:	ec41 0b19 	vmov	d9, r0, r1
 80047b0:	4649      	mov	r1, r9
 80047b2:	4640      	mov	r0, r8
 80047b4:	f7fc f9d0 	bl	8000b58 <__aeabi_d2iz>
 80047b8:	4606      	mov	r6, r0
 80047ba:	f7fb feb3 	bl	8000524 <__aeabi_i2d>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4640      	mov	r0, r8
 80047c4:	4649      	mov	r1, r9
 80047c6:	f7fb fd5f 	bl	8000288 <__aeabi_dsub>
 80047ca:	3630      	adds	r6, #48	; 0x30
 80047cc:	f805 6b01 	strb.w	r6, [r5], #1
 80047d0:	ec53 2b19 	vmov	r2, r3, d9
 80047d4:	4680      	mov	r8, r0
 80047d6:	4689      	mov	r9, r1
 80047d8:	f7fc f980 	bl	8000adc <__aeabi_dcmplt>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d164      	bne.n	80048aa <_dtoa_r+0x62a>
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	4937      	ldr	r1, [pc, #220]	; (80048c4 <_dtoa_r+0x644>)
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7fb fd4e 	bl	8000288 <__aeabi_dsub>
 80047ec:	ec53 2b19 	vmov	r2, r3, d9
 80047f0:	f7fc f974 	bl	8000adc <__aeabi_dcmplt>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	f040 80b6 	bne.w	8004966 <_dtoa_r+0x6e6>
 80047fa:	9b02      	ldr	r3, [sp, #8]
 80047fc:	429d      	cmp	r5, r3
 80047fe:	f43f af7c 	beq.w	80046fa <_dtoa_r+0x47a>
 8004802:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <_dtoa_r+0x648>)
 8004804:	ec51 0b19 	vmov	r0, r1, d9
 8004808:	2200      	movs	r2, #0
 800480a:	f7fb fef5 	bl	80005f8 <__aeabi_dmul>
 800480e:	4b2e      	ldr	r3, [pc, #184]	; (80048c8 <_dtoa_r+0x648>)
 8004810:	ec41 0b19 	vmov	d9, r0, r1
 8004814:	2200      	movs	r2, #0
 8004816:	4640      	mov	r0, r8
 8004818:	4649      	mov	r1, r9
 800481a:	f7fb feed 	bl	80005f8 <__aeabi_dmul>
 800481e:	4680      	mov	r8, r0
 8004820:	4689      	mov	r9, r1
 8004822:	e7c5      	b.n	80047b0 <_dtoa_r+0x530>
 8004824:	ec51 0b17 	vmov	r0, r1, d7
 8004828:	f7fb fee6 	bl	80005f8 <__aeabi_dmul>
 800482c:	9b02      	ldr	r3, [sp, #8]
 800482e:	9d00      	ldr	r5, [sp, #0]
 8004830:	930f      	str	r3, [sp, #60]	; 0x3c
 8004832:	ec41 0b19 	vmov	d9, r0, r1
 8004836:	4649      	mov	r1, r9
 8004838:	4640      	mov	r0, r8
 800483a:	f7fc f98d 	bl	8000b58 <__aeabi_d2iz>
 800483e:	4606      	mov	r6, r0
 8004840:	f7fb fe70 	bl	8000524 <__aeabi_i2d>
 8004844:	3630      	adds	r6, #48	; 0x30
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4640      	mov	r0, r8
 800484c:	4649      	mov	r1, r9
 800484e:	f7fb fd1b 	bl	8000288 <__aeabi_dsub>
 8004852:	f805 6b01 	strb.w	r6, [r5], #1
 8004856:	9b02      	ldr	r3, [sp, #8]
 8004858:	429d      	cmp	r5, r3
 800485a:	4680      	mov	r8, r0
 800485c:	4689      	mov	r9, r1
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	d124      	bne.n	80048ae <_dtoa_r+0x62e>
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <_dtoa_r+0x654>)
 8004866:	ec51 0b19 	vmov	r0, r1, d9
 800486a:	f7fb fd0f 	bl	800028c <__adddf3>
 800486e:	4602      	mov	r2, r0
 8004870:	460b      	mov	r3, r1
 8004872:	4640      	mov	r0, r8
 8004874:	4649      	mov	r1, r9
 8004876:	f7fc f94f 	bl	8000b18 <__aeabi_dcmpgt>
 800487a:	2800      	cmp	r0, #0
 800487c:	d173      	bne.n	8004966 <_dtoa_r+0x6e6>
 800487e:	ec53 2b19 	vmov	r2, r3, d9
 8004882:	4914      	ldr	r1, [pc, #80]	; (80048d4 <_dtoa_r+0x654>)
 8004884:	2000      	movs	r0, #0
 8004886:	f7fb fcff 	bl	8000288 <__aeabi_dsub>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	4640      	mov	r0, r8
 8004890:	4649      	mov	r1, r9
 8004892:	f7fc f923 	bl	8000adc <__aeabi_dcmplt>
 8004896:	2800      	cmp	r0, #0
 8004898:	f43f af2f 	beq.w	80046fa <_dtoa_r+0x47a>
 800489c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800489e:	1e6b      	subs	r3, r5, #1
 80048a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80048a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80048a6:	2b30      	cmp	r3, #48	; 0x30
 80048a8:	d0f8      	beq.n	800489c <_dtoa_r+0x61c>
 80048aa:	46bb      	mov	fp, r7
 80048ac:	e04a      	b.n	8004944 <_dtoa_r+0x6c4>
 80048ae:	4b06      	ldr	r3, [pc, #24]	; (80048c8 <_dtoa_r+0x648>)
 80048b0:	f7fb fea2 	bl	80005f8 <__aeabi_dmul>
 80048b4:	4680      	mov	r8, r0
 80048b6:	4689      	mov	r9, r1
 80048b8:	e7bd      	b.n	8004836 <_dtoa_r+0x5b6>
 80048ba:	bf00      	nop
 80048bc:	080070f0 	.word	0x080070f0
 80048c0:	080070c8 	.word	0x080070c8
 80048c4:	3ff00000 	.word	0x3ff00000
 80048c8:	40240000 	.word	0x40240000
 80048cc:	401c0000 	.word	0x401c0000
 80048d0:	40140000 	.word	0x40140000
 80048d4:	3fe00000 	.word	0x3fe00000
 80048d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80048dc:	9d00      	ldr	r5, [sp, #0]
 80048de:	4642      	mov	r2, r8
 80048e0:	464b      	mov	r3, r9
 80048e2:	4630      	mov	r0, r6
 80048e4:	4639      	mov	r1, r7
 80048e6:	f7fb ffb1 	bl	800084c <__aeabi_ddiv>
 80048ea:	f7fc f935 	bl	8000b58 <__aeabi_d2iz>
 80048ee:	9001      	str	r0, [sp, #4]
 80048f0:	f7fb fe18 	bl	8000524 <__aeabi_i2d>
 80048f4:	4642      	mov	r2, r8
 80048f6:	464b      	mov	r3, r9
 80048f8:	f7fb fe7e 	bl	80005f8 <__aeabi_dmul>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4630      	mov	r0, r6
 8004902:	4639      	mov	r1, r7
 8004904:	f7fb fcc0 	bl	8000288 <__aeabi_dsub>
 8004908:	9e01      	ldr	r6, [sp, #4]
 800490a:	9f04      	ldr	r7, [sp, #16]
 800490c:	3630      	adds	r6, #48	; 0x30
 800490e:	f805 6b01 	strb.w	r6, [r5], #1
 8004912:	9e00      	ldr	r6, [sp, #0]
 8004914:	1bae      	subs	r6, r5, r6
 8004916:	42b7      	cmp	r7, r6
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	d134      	bne.n	8004988 <_dtoa_r+0x708>
 800491e:	f7fb fcb5 	bl	800028c <__adddf3>
 8004922:	4642      	mov	r2, r8
 8004924:	464b      	mov	r3, r9
 8004926:	4606      	mov	r6, r0
 8004928:	460f      	mov	r7, r1
 800492a:	f7fc f8f5 	bl	8000b18 <__aeabi_dcmpgt>
 800492e:	b9c8      	cbnz	r0, 8004964 <_dtoa_r+0x6e4>
 8004930:	4642      	mov	r2, r8
 8004932:	464b      	mov	r3, r9
 8004934:	4630      	mov	r0, r6
 8004936:	4639      	mov	r1, r7
 8004938:	f7fc f8c6 	bl	8000ac8 <__aeabi_dcmpeq>
 800493c:	b110      	cbz	r0, 8004944 <_dtoa_r+0x6c4>
 800493e:	9b01      	ldr	r3, [sp, #4]
 8004940:	07db      	lsls	r3, r3, #31
 8004942:	d40f      	bmi.n	8004964 <_dtoa_r+0x6e4>
 8004944:	4651      	mov	r1, sl
 8004946:	4620      	mov	r0, r4
 8004948:	f000 fb18 	bl	8004f7c <_Bfree>
 800494c:	2300      	movs	r3, #0
 800494e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004950:	702b      	strb	r3, [r5, #0]
 8004952:	f10b 0301 	add.w	r3, fp, #1
 8004956:	6013      	str	r3, [r2, #0]
 8004958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800495a:	2b00      	cmp	r3, #0
 800495c:	f43f ace2 	beq.w	8004324 <_dtoa_r+0xa4>
 8004960:	601d      	str	r5, [r3, #0]
 8004962:	e4df      	b.n	8004324 <_dtoa_r+0xa4>
 8004964:	465f      	mov	r7, fp
 8004966:	462b      	mov	r3, r5
 8004968:	461d      	mov	r5, r3
 800496a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800496e:	2a39      	cmp	r2, #57	; 0x39
 8004970:	d106      	bne.n	8004980 <_dtoa_r+0x700>
 8004972:	9a00      	ldr	r2, [sp, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d1f7      	bne.n	8004968 <_dtoa_r+0x6e8>
 8004978:	9900      	ldr	r1, [sp, #0]
 800497a:	2230      	movs	r2, #48	; 0x30
 800497c:	3701      	adds	r7, #1
 800497e:	700a      	strb	r2, [r1, #0]
 8004980:	781a      	ldrb	r2, [r3, #0]
 8004982:	3201      	adds	r2, #1
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	e790      	b.n	80048aa <_dtoa_r+0x62a>
 8004988:	4ba3      	ldr	r3, [pc, #652]	; (8004c18 <_dtoa_r+0x998>)
 800498a:	2200      	movs	r2, #0
 800498c:	f7fb fe34 	bl	80005f8 <__aeabi_dmul>
 8004990:	2200      	movs	r2, #0
 8004992:	2300      	movs	r3, #0
 8004994:	4606      	mov	r6, r0
 8004996:	460f      	mov	r7, r1
 8004998:	f7fc f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800499c:	2800      	cmp	r0, #0
 800499e:	d09e      	beq.n	80048de <_dtoa_r+0x65e>
 80049a0:	e7d0      	b.n	8004944 <_dtoa_r+0x6c4>
 80049a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	f000 80ca 	beq.w	8004b3e <_dtoa_r+0x8be>
 80049aa:	9a07      	ldr	r2, [sp, #28]
 80049ac:	2a01      	cmp	r2, #1
 80049ae:	f300 80ad 	bgt.w	8004b0c <_dtoa_r+0x88c>
 80049b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b4:	2a00      	cmp	r2, #0
 80049b6:	f000 80a5 	beq.w	8004b04 <_dtoa_r+0x884>
 80049ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80049be:	9e08      	ldr	r6, [sp, #32]
 80049c0:	9d05      	ldr	r5, [sp, #20]
 80049c2:	9a05      	ldr	r2, [sp, #20]
 80049c4:	441a      	add	r2, r3
 80049c6:	9205      	str	r2, [sp, #20]
 80049c8:	9a06      	ldr	r2, [sp, #24]
 80049ca:	2101      	movs	r1, #1
 80049cc:	441a      	add	r2, r3
 80049ce:	4620      	mov	r0, r4
 80049d0:	9206      	str	r2, [sp, #24]
 80049d2:	f000 fb89 	bl	80050e8 <__i2b>
 80049d6:	4607      	mov	r7, r0
 80049d8:	b165      	cbz	r5, 80049f4 <_dtoa_r+0x774>
 80049da:	9b06      	ldr	r3, [sp, #24]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dd09      	ble.n	80049f4 <_dtoa_r+0x774>
 80049e0:	42ab      	cmp	r3, r5
 80049e2:	9a05      	ldr	r2, [sp, #20]
 80049e4:	bfa8      	it	ge
 80049e6:	462b      	movge	r3, r5
 80049e8:	1ad2      	subs	r2, r2, r3
 80049ea:	9205      	str	r2, [sp, #20]
 80049ec:	9a06      	ldr	r2, [sp, #24]
 80049ee:	1aed      	subs	r5, r5, r3
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	9306      	str	r3, [sp, #24]
 80049f4:	9b08      	ldr	r3, [sp, #32]
 80049f6:	b1f3      	cbz	r3, 8004a36 <_dtoa_r+0x7b6>
 80049f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 80a3 	beq.w	8004b46 <_dtoa_r+0x8c6>
 8004a00:	2e00      	cmp	r6, #0
 8004a02:	dd10      	ble.n	8004a26 <_dtoa_r+0x7a6>
 8004a04:	4639      	mov	r1, r7
 8004a06:	4632      	mov	r2, r6
 8004a08:	4620      	mov	r0, r4
 8004a0a:	f000 fc2d 	bl	8005268 <__pow5mult>
 8004a0e:	4652      	mov	r2, sl
 8004a10:	4601      	mov	r1, r0
 8004a12:	4607      	mov	r7, r0
 8004a14:	4620      	mov	r0, r4
 8004a16:	f000 fb7d 	bl	8005114 <__multiply>
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	4680      	mov	r8, r0
 8004a1e:	4620      	mov	r0, r4
 8004a20:	f000 faac 	bl	8004f7c <_Bfree>
 8004a24:	46c2      	mov	sl, r8
 8004a26:	9b08      	ldr	r3, [sp, #32]
 8004a28:	1b9a      	subs	r2, r3, r6
 8004a2a:	d004      	beq.n	8004a36 <_dtoa_r+0x7b6>
 8004a2c:	4651      	mov	r1, sl
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f000 fc1a 	bl	8005268 <__pow5mult>
 8004a34:	4682      	mov	sl, r0
 8004a36:	2101      	movs	r1, #1
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f000 fb55 	bl	80050e8 <__i2b>
 8004a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	4606      	mov	r6, r0
 8004a44:	f340 8081 	ble.w	8004b4a <_dtoa_r+0x8ca>
 8004a48:	461a      	mov	r2, r3
 8004a4a:	4601      	mov	r1, r0
 8004a4c:	4620      	mov	r0, r4
 8004a4e:	f000 fc0b 	bl	8005268 <__pow5mult>
 8004a52:	9b07      	ldr	r3, [sp, #28]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	4606      	mov	r6, r0
 8004a58:	dd7a      	ble.n	8004b50 <_dtoa_r+0x8d0>
 8004a5a:	f04f 0800 	mov.w	r8, #0
 8004a5e:	6933      	ldr	r3, [r6, #16]
 8004a60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004a64:	6918      	ldr	r0, [r3, #16]
 8004a66:	f000 faf1 	bl	800504c <__hi0bits>
 8004a6a:	f1c0 0020 	rsb	r0, r0, #32
 8004a6e:	9b06      	ldr	r3, [sp, #24]
 8004a70:	4418      	add	r0, r3
 8004a72:	f010 001f 	ands.w	r0, r0, #31
 8004a76:	f000 8094 	beq.w	8004ba2 <_dtoa_r+0x922>
 8004a7a:	f1c0 0320 	rsb	r3, r0, #32
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	f340 8085 	ble.w	8004b8e <_dtoa_r+0x90e>
 8004a84:	9b05      	ldr	r3, [sp, #20]
 8004a86:	f1c0 001c 	rsb	r0, r0, #28
 8004a8a:	4403      	add	r3, r0
 8004a8c:	9305      	str	r3, [sp, #20]
 8004a8e:	9b06      	ldr	r3, [sp, #24]
 8004a90:	4403      	add	r3, r0
 8004a92:	4405      	add	r5, r0
 8004a94:	9306      	str	r3, [sp, #24]
 8004a96:	9b05      	ldr	r3, [sp, #20]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	dd05      	ble.n	8004aa8 <_dtoa_r+0x828>
 8004a9c:	4651      	mov	r1, sl
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f000 fc3b 	bl	800531c <__lshift>
 8004aa6:	4682      	mov	sl, r0
 8004aa8:	9b06      	ldr	r3, [sp, #24]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	dd05      	ble.n	8004aba <_dtoa_r+0x83a>
 8004aae:	4631      	mov	r1, r6
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	4620      	mov	r0, r4
 8004ab4:	f000 fc32 	bl	800531c <__lshift>
 8004ab8:	4606      	mov	r6, r0
 8004aba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d072      	beq.n	8004ba6 <_dtoa_r+0x926>
 8004ac0:	4631      	mov	r1, r6
 8004ac2:	4650      	mov	r0, sl
 8004ac4:	f000 fc96 	bl	80053f4 <__mcmp>
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	da6c      	bge.n	8004ba6 <_dtoa_r+0x926>
 8004acc:	2300      	movs	r3, #0
 8004ace:	4651      	mov	r1, sl
 8004ad0:	220a      	movs	r2, #10
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f000 fa74 	bl	8004fc0 <__multadd>
 8004ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ada:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004ade:	4682      	mov	sl, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 81b0 	beq.w	8004e46 <_dtoa_r+0xbc6>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	4639      	mov	r1, r7
 8004aea:	220a      	movs	r2, #10
 8004aec:	4620      	mov	r0, r4
 8004aee:	f000 fa67 	bl	8004fc0 <__multadd>
 8004af2:	9b01      	ldr	r3, [sp, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	4607      	mov	r7, r0
 8004af8:	f300 8096 	bgt.w	8004c28 <_dtoa_r+0x9a8>
 8004afc:	9b07      	ldr	r3, [sp, #28]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	dc59      	bgt.n	8004bb6 <_dtoa_r+0x936>
 8004b02:	e091      	b.n	8004c28 <_dtoa_r+0x9a8>
 8004b04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004b06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004b0a:	e758      	b.n	80049be <_dtoa_r+0x73e>
 8004b0c:	9b04      	ldr	r3, [sp, #16]
 8004b0e:	1e5e      	subs	r6, r3, #1
 8004b10:	9b08      	ldr	r3, [sp, #32]
 8004b12:	42b3      	cmp	r3, r6
 8004b14:	bfbf      	itttt	lt
 8004b16:	9b08      	ldrlt	r3, [sp, #32]
 8004b18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004b1a:	9608      	strlt	r6, [sp, #32]
 8004b1c:	1af3      	sublt	r3, r6, r3
 8004b1e:	bfb4      	ite	lt
 8004b20:	18d2      	addlt	r2, r2, r3
 8004b22:	1b9e      	subge	r6, r3, r6
 8004b24:	9b04      	ldr	r3, [sp, #16]
 8004b26:	bfbc      	itt	lt
 8004b28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004b2a:	2600      	movlt	r6, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	bfb7      	itett	lt
 8004b30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004b34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004b38:	1a9d      	sublt	r5, r3, r2
 8004b3a:	2300      	movlt	r3, #0
 8004b3c:	e741      	b.n	80049c2 <_dtoa_r+0x742>
 8004b3e:	9e08      	ldr	r6, [sp, #32]
 8004b40:	9d05      	ldr	r5, [sp, #20]
 8004b42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004b44:	e748      	b.n	80049d8 <_dtoa_r+0x758>
 8004b46:	9a08      	ldr	r2, [sp, #32]
 8004b48:	e770      	b.n	8004a2c <_dtoa_r+0x7ac>
 8004b4a:	9b07      	ldr	r3, [sp, #28]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	dc19      	bgt.n	8004b84 <_dtoa_r+0x904>
 8004b50:	9b02      	ldr	r3, [sp, #8]
 8004b52:	b9bb      	cbnz	r3, 8004b84 <_dtoa_r+0x904>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b5a:	b99b      	cbnz	r3, 8004b84 <_dtoa_r+0x904>
 8004b5c:	9b03      	ldr	r3, [sp, #12]
 8004b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b62:	0d1b      	lsrs	r3, r3, #20
 8004b64:	051b      	lsls	r3, r3, #20
 8004b66:	b183      	cbz	r3, 8004b8a <_dtoa_r+0x90a>
 8004b68:	9b05      	ldr	r3, [sp, #20]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	9305      	str	r3, [sp, #20]
 8004b6e:	9b06      	ldr	r3, [sp, #24]
 8004b70:	3301      	adds	r3, #1
 8004b72:	9306      	str	r3, [sp, #24]
 8004b74:	f04f 0801 	mov.w	r8, #1
 8004b78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f47f af6f 	bne.w	8004a5e <_dtoa_r+0x7de>
 8004b80:	2001      	movs	r0, #1
 8004b82:	e774      	b.n	8004a6e <_dtoa_r+0x7ee>
 8004b84:	f04f 0800 	mov.w	r8, #0
 8004b88:	e7f6      	b.n	8004b78 <_dtoa_r+0x8f8>
 8004b8a:	4698      	mov	r8, r3
 8004b8c:	e7f4      	b.n	8004b78 <_dtoa_r+0x8f8>
 8004b8e:	d082      	beq.n	8004a96 <_dtoa_r+0x816>
 8004b90:	9a05      	ldr	r2, [sp, #20]
 8004b92:	331c      	adds	r3, #28
 8004b94:	441a      	add	r2, r3
 8004b96:	9205      	str	r2, [sp, #20]
 8004b98:	9a06      	ldr	r2, [sp, #24]
 8004b9a:	441a      	add	r2, r3
 8004b9c:	441d      	add	r5, r3
 8004b9e:	9206      	str	r2, [sp, #24]
 8004ba0:	e779      	b.n	8004a96 <_dtoa_r+0x816>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	e7f4      	b.n	8004b90 <_dtoa_r+0x910>
 8004ba6:	9b04      	ldr	r3, [sp, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	dc37      	bgt.n	8004c1c <_dtoa_r+0x99c>
 8004bac:	9b07      	ldr	r3, [sp, #28]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	dd34      	ble.n	8004c1c <_dtoa_r+0x99c>
 8004bb2:	9b04      	ldr	r3, [sp, #16]
 8004bb4:	9301      	str	r3, [sp, #4]
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	b963      	cbnz	r3, 8004bd4 <_dtoa_r+0x954>
 8004bba:	4631      	mov	r1, r6
 8004bbc:	2205      	movs	r2, #5
 8004bbe:	4620      	mov	r0, r4
 8004bc0:	f000 f9fe 	bl	8004fc0 <__multadd>
 8004bc4:	4601      	mov	r1, r0
 8004bc6:	4606      	mov	r6, r0
 8004bc8:	4650      	mov	r0, sl
 8004bca:	f000 fc13 	bl	80053f4 <__mcmp>
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	f73f adbb 	bgt.w	800474a <_dtoa_r+0x4ca>
 8004bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bd6:	9d00      	ldr	r5, [sp, #0]
 8004bd8:	ea6f 0b03 	mvn.w	fp, r3
 8004bdc:	f04f 0800 	mov.w	r8, #0
 8004be0:	4631      	mov	r1, r6
 8004be2:	4620      	mov	r0, r4
 8004be4:	f000 f9ca 	bl	8004f7c <_Bfree>
 8004be8:	2f00      	cmp	r7, #0
 8004bea:	f43f aeab 	beq.w	8004944 <_dtoa_r+0x6c4>
 8004bee:	f1b8 0f00 	cmp.w	r8, #0
 8004bf2:	d005      	beq.n	8004c00 <_dtoa_r+0x980>
 8004bf4:	45b8      	cmp	r8, r7
 8004bf6:	d003      	beq.n	8004c00 <_dtoa_r+0x980>
 8004bf8:	4641      	mov	r1, r8
 8004bfa:	4620      	mov	r0, r4
 8004bfc:	f000 f9be 	bl	8004f7c <_Bfree>
 8004c00:	4639      	mov	r1, r7
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f9ba 	bl	8004f7c <_Bfree>
 8004c08:	e69c      	b.n	8004944 <_dtoa_r+0x6c4>
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	4637      	mov	r7, r6
 8004c0e:	e7e1      	b.n	8004bd4 <_dtoa_r+0x954>
 8004c10:	46bb      	mov	fp, r7
 8004c12:	4637      	mov	r7, r6
 8004c14:	e599      	b.n	800474a <_dtoa_r+0x4ca>
 8004c16:	bf00      	nop
 8004c18:	40240000 	.word	0x40240000
 8004c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f000 80c8 	beq.w	8004db4 <_dtoa_r+0xb34>
 8004c24:	9b04      	ldr	r3, [sp, #16]
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	dd05      	ble.n	8004c38 <_dtoa_r+0x9b8>
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	462a      	mov	r2, r5
 8004c30:	4620      	mov	r0, r4
 8004c32:	f000 fb73 	bl	800531c <__lshift>
 8004c36:	4607      	mov	r7, r0
 8004c38:	f1b8 0f00 	cmp.w	r8, #0
 8004c3c:	d05b      	beq.n	8004cf6 <_dtoa_r+0xa76>
 8004c3e:	6879      	ldr	r1, [r7, #4]
 8004c40:	4620      	mov	r0, r4
 8004c42:	f000 f95b 	bl	8004efc <_Balloc>
 8004c46:	4605      	mov	r5, r0
 8004c48:	b928      	cbnz	r0, 8004c56 <_dtoa_r+0x9d6>
 8004c4a:	4b83      	ldr	r3, [pc, #524]	; (8004e58 <_dtoa_r+0xbd8>)
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004c52:	f7ff bb2e 	b.w	80042b2 <_dtoa_r+0x32>
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	3202      	adds	r2, #2
 8004c5a:	0092      	lsls	r2, r2, #2
 8004c5c:	f107 010c 	add.w	r1, r7, #12
 8004c60:	300c      	adds	r0, #12
 8004c62:	f000 fee7 	bl	8005a34 <memcpy>
 8004c66:	2201      	movs	r2, #1
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 fb56 	bl	800531c <__lshift>
 8004c70:	9b00      	ldr	r3, [sp, #0]
 8004c72:	3301      	adds	r3, #1
 8004c74:	9304      	str	r3, [sp, #16]
 8004c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	9308      	str	r3, [sp, #32]
 8004c7e:	9b02      	ldr	r3, [sp, #8]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	46b8      	mov	r8, r7
 8004c86:	9306      	str	r3, [sp, #24]
 8004c88:	4607      	mov	r7, r0
 8004c8a:	9b04      	ldr	r3, [sp, #16]
 8004c8c:	4631      	mov	r1, r6
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	4650      	mov	r0, sl
 8004c92:	9301      	str	r3, [sp, #4]
 8004c94:	f7ff fa69 	bl	800416a <quorem>
 8004c98:	4641      	mov	r1, r8
 8004c9a:	9002      	str	r0, [sp, #8]
 8004c9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004ca0:	4650      	mov	r0, sl
 8004ca2:	f000 fba7 	bl	80053f4 <__mcmp>
 8004ca6:	463a      	mov	r2, r7
 8004ca8:	9005      	str	r0, [sp, #20]
 8004caa:	4631      	mov	r1, r6
 8004cac:	4620      	mov	r0, r4
 8004cae:	f000 fbbd 	bl	800542c <__mdiff>
 8004cb2:	68c2      	ldr	r2, [r0, #12]
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	bb02      	cbnz	r2, 8004cfa <_dtoa_r+0xa7a>
 8004cb8:	4601      	mov	r1, r0
 8004cba:	4650      	mov	r0, sl
 8004cbc:	f000 fb9a 	bl	80053f4 <__mcmp>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	4629      	mov	r1, r5
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8004cc8:	f000 f958 	bl	8004f7c <_Bfree>
 8004ccc:	9b07      	ldr	r3, [sp, #28]
 8004cce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cd0:	9d04      	ldr	r5, [sp, #16]
 8004cd2:	ea43 0102 	orr.w	r1, r3, r2
 8004cd6:	9b06      	ldr	r3, [sp, #24]
 8004cd8:	4319      	orrs	r1, r3
 8004cda:	d110      	bne.n	8004cfe <_dtoa_r+0xa7e>
 8004cdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004ce0:	d029      	beq.n	8004d36 <_dtoa_r+0xab6>
 8004ce2:	9b05      	ldr	r3, [sp, #20]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	dd02      	ble.n	8004cee <_dtoa_r+0xa6e>
 8004ce8:	9b02      	ldr	r3, [sp, #8]
 8004cea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004cee:	9b01      	ldr	r3, [sp, #4]
 8004cf0:	f883 9000 	strb.w	r9, [r3]
 8004cf4:	e774      	b.n	8004be0 <_dtoa_r+0x960>
 8004cf6:	4638      	mov	r0, r7
 8004cf8:	e7ba      	b.n	8004c70 <_dtoa_r+0x9f0>
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	e7e1      	b.n	8004cc2 <_dtoa_r+0xa42>
 8004cfe:	9b05      	ldr	r3, [sp, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	db04      	blt.n	8004d0e <_dtoa_r+0xa8e>
 8004d04:	9907      	ldr	r1, [sp, #28]
 8004d06:	430b      	orrs	r3, r1
 8004d08:	9906      	ldr	r1, [sp, #24]
 8004d0a:	430b      	orrs	r3, r1
 8004d0c:	d120      	bne.n	8004d50 <_dtoa_r+0xad0>
 8004d0e:	2a00      	cmp	r2, #0
 8004d10:	dded      	ble.n	8004cee <_dtoa_r+0xa6e>
 8004d12:	4651      	mov	r1, sl
 8004d14:	2201      	movs	r2, #1
 8004d16:	4620      	mov	r0, r4
 8004d18:	f000 fb00 	bl	800531c <__lshift>
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	4682      	mov	sl, r0
 8004d20:	f000 fb68 	bl	80053f4 <__mcmp>
 8004d24:	2800      	cmp	r0, #0
 8004d26:	dc03      	bgt.n	8004d30 <_dtoa_r+0xab0>
 8004d28:	d1e1      	bne.n	8004cee <_dtoa_r+0xa6e>
 8004d2a:	f019 0f01 	tst.w	r9, #1
 8004d2e:	d0de      	beq.n	8004cee <_dtoa_r+0xa6e>
 8004d30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d34:	d1d8      	bne.n	8004ce8 <_dtoa_r+0xa68>
 8004d36:	9a01      	ldr	r2, [sp, #4]
 8004d38:	2339      	movs	r3, #57	; 0x39
 8004d3a:	7013      	strb	r3, [r2, #0]
 8004d3c:	462b      	mov	r3, r5
 8004d3e:	461d      	mov	r5, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004d46:	2a39      	cmp	r2, #57	; 0x39
 8004d48:	d06c      	beq.n	8004e24 <_dtoa_r+0xba4>
 8004d4a:	3201      	adds	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e747      	b.n	8004be0 <_dtoa_r+0x960>
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	dd07      	ble.n	8004d64 <_dtoa_r+0xae4>
 8004d54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004d58:	d0ed      	beq.n	8004d36 <_dtoa_r+0xab6>
 8004d5a:	9a01      	ldr	r2, [sp, #4]
 8004d5c:	f109 0301 	add.w	r3, r9, #1
 8004d60:	7013      	strb	r3, [r2, #0]
 8004d62:	e73d      	b.n	8004be0 <_dtoa_r+0x960>
 8004d64:	9b04      	ldr	r3, [sp, #16]
 8004d66:	9a08      	ldr	r2, [sp, #32]
 8004d68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d043      	beq.n	8004df8 <_dtoa_r+0xb78>
 8004d70:	4651      	mov	r1, sl
 8004d72:	2300      	movs	r3, #0
 8004d74:	220a      	movs	r2, #10
 8004d76:	4620      	mov	r0, r4
 8004d78:	f000 f922 	bl	8004fc0 <__multadd>
 8004d7c:	45b8      	cmp	r8, r7
 8004d7e:	4682      	mov	sl, r0
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	f04f 020a 	mov.w	r2, #10
 8004d88:	4641      	mov	r1, r8
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	d107      	bne.n	8004d9e <_dtoa_r+0xb1e>
 8004d8e:	f000 f917 	bl	8004fc0 <__multadd>
 8004d92:	4680      	mov	r8, r0
 8004d94:	4607      	mov	r7, r0
 8004d96:	9b04      	ldr	r3, [sp, #16]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	9304      	str	r3, [sp, #16]
 8004d9c:	e775      	b.n	8004c8a <_dtoa_r+0xa0a>
 8004d9e:	f000 f90f 	bl	8004fc0 <__multadd>
 8004da2:	4639      	mov	r1, r7
 8004da4:	4680      	mov	r8, r0
 8004da6:	2300      	movs	r3, #0
 8004da8:	220a      	movs	r2, #10
 8004daa:	4620      	mov	r0, r4
 8004dac:	f000 f908 	bl	8004fc0 <__multadd>
 8004db0:	4607      	mov	r7, r0
 8004db2:	e7f0      	b.n	8004d96 <_dtoa_r+0xb16>
 8004db4:	9b04      	ldr	r3, [sp, #16]
 8004db6:	9301      	str	r3, [sp, #4]
 8004db8:	9d00      	ldr	r5, [sp, #0]
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4650      	mov	r0, sl
 8004dbe:	f7ff f9d4 	bl	800416a <quorem>
 8004dc2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004dc6:	9b00      	ldr	r3, [sp, #0]
 8004dc8:	f805 9b01 	strb.w	r9, [r5], #1
 8004dcc:	1aea      	subs	r2, r5, r3
 8004dce:	9b01      	ldr	r3, [sp, #4]
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	dd07      	ble.n	8004de4 <_dtoa_r+0xb64>
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	220a      	movs	r2, #10
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 f8f0 	bl	8004fc0 <__multadd>
 8004de0:	4682      	mov	sl, r0
 8004de2:	e7ea      	b.n	8004dba <_dtoa_r+0xb3a>
 8004de4:	9b01      	ldr	r3, [sp, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfc8      	it	gt
 8004dea:	461d      	movgt	r5, r3
 8004dec:	9b00      	ldr	r3, [sp, #0]
 8004dee:	bfd8      	it	le
 8004df0:	2501      	movle	r5, #1
 8004df2:	441d      	add	r5, r3
 8004df4:	f04f 0800 	mov.w	r8, #0
 8004df8:	4651      	mov	r1, sl
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	f000 fa8d 	bl	800531c <__lshift>
 8004e02:	4631      	mov	r1, r6
 8004e04:	4682      	mov	sl, r0
 8004e06:	f000 faf5 	bl	80053f4 <__mcmp>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	dc96      	bgt.n	8004d3c <_dtoa_r+0xabc>
 8004e0e:	d102      	bne.n	8004e16 <_dtoa_r+0xb96>
 8004e10:	f019 0f01 	tst.w	r9, #1
 8004e14:	d192      	bne.n	8004d3c <_dtoa_r+0xabc>
 8004e16:	462b      	mov	r3, r5
 8004e18:	461d      	mov	r5, r3
 8004e1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e1e:	2a30      	cmp	r2, #48	; 0x30
 8004e20:	d0fa      	beq.n	8004e18 <_dtoa_r+0xb98>
 8004e22:	e6dd      	b.n	8004be0 <_dtoa_r+0x960>
 8004e24:	9a00      	ldr	r2, [sp, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d189      	bne.n	8004d3e <_dtoa_r+0xabe>
 8004e2a:	f10b 0b01 	add.w	fp, fp, #1
 8004e2e:	2331      	movs	r3, #49	; 0x31
 8004e30:	e796      	b.n	8004d60 <_dtoa_r+0xae0>
 8004e32:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <_dtoa_r+0xbdc>)
 8004e34:	f7ff ba99 	b.w	800436a <_dtoa_r+0xea>
 8004e38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f47f aa6d 	bne.w	800431a <_dtoa_r+0x9a>
 8004e40:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <_dtoa_r+0xbe0>)
 8004e42:	f7ff ba92 	b.w	800436a <_dtoa_r+0xea>
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	dcb5      	bgt.n	8004db8 <_dtoa_r+0xb38>
 8004e4c:	9b07      	ldr	r3, [sp, #28]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	f73f aeb1 	bgt.w	8004bb6 <_dtoa_r+0x936>
 8004e54:	e7b0      	b.n	8004db8 <_dtoa_r+0xb38>
 8004e56:	bf00      	nop
 8004e58:	0800705b 	.word	0x0800705b
 8004e5c:	08006fbb 	.word	0x08006fbb
 8004e60:	08006fdf 	.word	0x08006fdf

08004e64 <_free_r>:
 8004e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e66:	2900      	cmp	r1, #0
 8004e68:	d044      	beq.n	8004ef4 <_free_r+0x90>
 8004e6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e6e:	9001      	str	r0, [sp, #4]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	f1a1 0404 	sub.w	r4, r1, #4
 8004e76:	bfb8      	it	lt
 8004e78:	18e4      	addlt	r4, r4, r3
 8004e7a:	f7fe fb4f 	bl	800351c <__malloc_lock>
 8004e7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <_free_r+0x94>)
 8004e80:	9801      	ldr	r0, [sp, #4]
 8004e82:	6813      	ldr	r3, [r2, #0]
 8004e84:	b933      	cbnz	r3, 8004e94 <_free_r+0x30>
 8004e86:	6063      	str	r3, [r4, #4]
 8004e88:	6014      	str	r4, [r2, #0]
 8004e8a:	b003      	add	sp, #12
 8004e8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e90:	f7fe bb4a 	b.w	8003528 <__malloc_unlock>
 8004e94:	42a3      	cmp	r3, r4
 8004e96:	d908      	bls.n	8004eaa <_free_r+0x46>
 8004e98:	6825      	ldr	r5, [r4, #0]
 8004e9a:	1961      	adds	r1, r4, r5
 8004e9c:	428b      	cmp	r3, r1
 8004e9e:	bf01      	itttt	eq
 8004ea0:	6819      	ldreq	r1, [r3, #0]
 8004ea2:	685b      	ldreq	r3, [r3, #4]
 8004ea4:	1949      	addeq	r1, r1, r5
 8004ea6:	6021      	streq	r1, [r4, #0]
 8004ea8:	e7ed      	b.n	8004e86 <_free_r+0x22>
 8004eaa:	461a      	mov	r2, r3
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	b10b      	cbz	r3, 8004eb4 <_free_r+0x50>
 8004eb0:	42a3      	cmp	r3, r4
 8004eb2:	d9fa      	bls.n	8004eaa <_free_r+0x46>
 8004eb4:	6811      	ldr	r1, [r2, #0]
 8004eb6:	1855      	adds	r5, r2, r1
 8004eb8:	42a5      	cmp	r5, r4
 8004eba:	d10b      	bne.n	8004ed4 <_free_r+0x70>
 8004ebc:	6824      	ldr	r4, [r4, #0]
 8004ebe:	4421      	add	r1, r4
 8004ec0:	1854      	adds	r4, r2, r1
 8004ec2:	42a3      	cmp	r3, r4
 8004ec4:	6011      	str	r1, [r2, #0]
 8004ec6:	d1e0      	bne.n	8004e8a <_free_r+0x26>
 8004ec8:	681c      	ldr	r4, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	6053      	str	r3, [r2, #4]
 8004ece:	440c      	add	r4, r1
 8004ed0:	6014      	str	r4, [r2, #0]
 8004ed2:	e7da      	b.n	8004e8a <_free_r+0x26>
 8004ed4:	d902      	bls.n	8004edc <_free_r+0x78>
 8004ed6:	230c      	movs	r3, #12
 8004ed8:	6003      	str	r3, [r0, #0]
 8004eda:	e7d6      	b.n	8004e8a <_free_r+0x26>
 8004edc:	6825      	ldr	r5, [r4, #0]
 8004ede:	1961      	adds	r1, r4, r5
 8004ee0:	428b      	cmp	r3, r1
 8004ee2:	bf04      	itt	eq
 8004ee4:	6819      	ldreq	r1, [r3, #0]
 8004ee6:	685b      	ldreq	r3, [r3, #4]
 8004ee8:	6063      	str	r3, [r4, #4]
 8004eea:	bf04      	itt	eq
 8004eec:	1949      	addeq	r1, r1, r5
 8004eee:	6021      	streq	r1, [r4, #0]
 8004ef0:	6054      	str	r4, [r2, #4]
 8004ef2:	e7ca      	b.n	8004e8a <_free_r+0x26>
 8004ef4:	b003      	add	sp, #12
 8004ef6:	bd30      	pop	{r4, r5, pc}
 8004ef8:	20000228 	.word	0x20000228

08004efc <_Balloc>:
 8004efc:	b570      	push	{r4, r5, r6, lr}
 8004efe:	69c6      	ldr	r6, [r0, #28]
 8004f00:	4604      	mov	r4, r0
 8004f02:	460d      	mov	r5, r1
 8004f04:	b976      	cbnz	r6, 8004f24 <_Balloc+0x28>
 8004f06:	2010      	movs	r0, #16
 8004f08:	f7fe fa58 	bl	80033bc <malloc>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	61e0      	str	r0, [r4, #28]
 8004f10:	b920      	cbnz	r0, 8004f1c <_Balloc+0x20>
 8004f12:	4b18      	ldr	r3, [pc, #96]	; (8004f74 <_Balloc+0x78>)
 8004f14:	4818      	ldr	r0, [pc, #96]	; (8004f78 <_Balloc+0x7c>)
 8004f16:	216b      	movs	r1, #107	; 0x6b
 8004f18:	f000 fd9a 	bl	8005a50 <__assert_func>
 8004f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f20:	6006      	str	r6, [r0, #0]
 8004f22:	60c6      	str	r6, [r0, #12]
 8004f24:	69e6      	ldr	r6, [r4, #28]
 8004f26:	68f3      	ldr	r3, [r6, #12]
 8004f28:	b183      	cbz	r3, 8004f4c <_Balloc+0x50>
 8004f2a:	69e3      	ldr	r3, [r4, #28]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f32:	b9b8      	cbnz	r0, 8004f64 <_Balloc+0x68>
 8004f34:	2101      	movs	r1, #1
 8004f36:	fa01 f605 	lsl.w	r6, r1, r5
 8004f3a:	1d72      	adds	r2, r6, #5
 8004f3c:	0092      	lsls	r2, r2, #2
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f000 fda4 	bl	8005a8c <_calloc_r>
 8004f44:	b160      	cbz	r0, 8004f60 <_Balloc+0x64>
 8004f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f4a:	e00e      	b.n	8004f6a <_Balloc+0x6e>
 8004f4c:	2221      	movs	r2, #33	; 0x21
 8004f4e:	2104      	movs	r1, #4
 8004f50:	4620      	mov	r0, r4
 8004f52:	f000 fd9b 	bl	8005a8c <_calloc_r>
 8004f56:	69e3      	ldr	r3, [r4, #28]
 8004f58:	60f0      	str	r0, [r6, #12]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e4      	bne.n	8004f2a <_Balloc+0x2e>
 8004f60:	2000      	movs	r0, #0
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	6802      	ldr	r2, [r0, #0]
 8004f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f70:	e7f7      	b.n	8004f62 <_Balloc+0x66>
 8004f72:	bf00      	nop
 8004f74:	08006fec 	.word	0x08006fec
 8004f78:	0800706c 	.word	0x0800706c

08004f7c <_Bfree>:
 8004f7c:	b570      	push	{r4, r5, r6, lr}
 8004f7e:	69c6      	ldr	r6, [r0, #28]
 8004f80:	4605      	mov	r5, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	b976      	cbnz	r6, 8004fa4 <_Bfree+0x28>
 8004f86:	2010      	movs	r0, #16
 8004f88:	f7fe fa18 	bl	80033bc <malloc>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	61e8      	str	r0, [r5, #28]
 8004f90:	b920      	cbnz	r0, 8004f9c <_Bfree+0x20>
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <_Bfree+0x3c>)
 8004f94:	4809      	ldr	r0, [pc, #36]	; (8004fbc <_Bfree+0x40>)
 8004f96:	218f      	movs	r1, #143	; 0x8f
 8004f98:	f000 fd5a 	bl	8005a50 <__assert_func>
 8004f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004fa0:	6006      	str	r6, [r0, #0]
 8004fa2:	60c6      	str	r6, [r0, #12]
 8004fa4:	b13c      	cbz	r4, 8004fb6 <_Bfree+0x3a>
 8004fa6:	69eb      	ldr	r3, [r5, #28]
 8004fa8:	6862      	ldr	r2, [r4, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fb0:	6021      	str	r1, [r4, #0]
 8004fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004fb6:	bd70      	pop	{r4, r5, r6, pc}
 8004fb8:	08006fec 	.word	0x08006fec
 8004fbc:	0800706c 	.word	0x0800706c

08004fc0 <__multadd>:
 8004fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fc4:	690d      	ldr	r5, [r1, #16]
 8004fc6:	4607      	mov	r7, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	461e      	mov	r6, r3
 8004fcc:	f101 0c14 	add.w	ip, r1, #20
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f8dc 3000 	ldr.w	r3, [ip]
 8004fd6:	b299      	uxth	r1, r3
 8004fd8:	fb02 6101 	mla	r1, r2, r1, r6
 8004fdc:	0c1e      	lsrs	r6, r3, #16
 8004fde:	0c0b      	lsrs	r3, r1, #16
 8004fe0:	fb02 3306 	mla	r3, r2, r6, r3
 8004fe4:	b289      	uxth	r1, r1
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fec:	4285      	cmp	r5, r0
 8004fee:	f84c 1b04 	str.w	r1, [ip], #4
 8004ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ff6:	dcec      	bgt.n	8004fd2 <__multadd+0x12>
 8004ff8:	b30e      	cbz	r6, 800503e <__multadd+0x7e>
 8004ffa:	68a3      	ldr	r3, [r4, #8]
 8004ffc:	42ab      	cmp	r3, r5
 8004ffe:	dc19      	bgt.n	8005034 <__multadd+0x74>
 8005000:	6861      	ldr	r1, [r4, #4]
 8005002:	4638      	mov	r0, r7
 8005004:	3101      	adds	r1, #1
 8005006:	f7ff ff79 	bl	8004efc <_Balloc>
 800500a:	4680      	mov	r8, r0
 800500c:	b928      	cbnz	r0, 800501a <__multadd+0x5a>
 800500e:	4602      	mov	r2, r0
 8005010:	4b0c      	ldr	r3, [pc, #48]	; (8005044 <__multadd+0x84>)
 8005012:	480d      	ldr	r0, [pc, #52]	; (8005048 <__multadd+0x88>)
 8005014:	21ba      	movs	r1, #186	; 0xba
 8005016:	f000 fd1b 	bl	8005a50 <__assert_func>
 800501a:	6922      	ldr	r2, [r4, #16]
 800501c:	3202      	adds	r2, #2
 800501e:	f104 010c 	add.w	r1, r4, #12
 8005022:	0092      	lsls	r2, r2, #2
 8005024:	300c      	adds	r0, #12
 8005026:	f000 fd05 	bl	8005a34 <memcpy>
 800502a:	4621      	mov	r1, r4
 800502c:	4638      	mov	r0, r7
 800502e:	f7ff ffa5 	bl	8004f7c <_Bfree>
 8005032:	4644      	mov	r4, r8
 8005034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005038:	3501      	adds	r5, #1
 800503a:	615e      	str	r6, [r3, #20]
 800503c:	6125      	str	r5, [r4, #16]
 800503e:	4620      	mov	r0, r4
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005044:	0800705b 	.word	0x0800705b
 8005048:	0800706c 	.word	0x0800706c

0800504c <__hi0bits>:
 800504c:	0c03      	lsrs	r3, r0, #16
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	b9d3      	cbnz	r3, 8005088 <__hi0bits+0x3c>
 8005052:	0400      	lsls	r0, r0, #16
 8005054:	2310      	movs	r3, #16
 8005056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800505a:	bf04      	itt	eq
 800505c:	0200      	lsleq	r0, r0, #8
 800505e:	3308      	addeq	r3, #8
 8005060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005064:	bf04      	itt	eq
 8005066:	0100      	lsleq	r0, r0, #4
 8005068:	3304      	addeq	r3, #4
 800506a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800506e:	bf04      	itt	eq
 8005070:	0080      	lsleq	r0, r0, #2
 8005072:	3302      	addeq	r3, #2
 8005074:	2800      	cmp	r0, #0
 8005076:	db05      	blt.n	8005084 <__hi0bits+0x38>
 8005078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800507c:	f103 0301 	add.w	r3, r3, #1
 8005080:	bf08      	it	eq
 8005082:	2320      	moveq	r3, #32
 8005084:	4618      	mov	r0, r3
 8005086:	4770      	bx	lr
 8005088:	2300      	movs	r3, #0
 800508a:	e7e4      	b.n	8005056 <__hi0bits+0xa>

0800508c <__lo0bits>:
 800508c:	6803      	ldr	r3, [r0, #0]
 800508e:	f013 0207 	ands.w	r2, r3, #7
 8005092:	d00c      	beq.n	80050ae <__lo0bits+0x22>
 8005094:	07d9      	lsls	r1, r3, #31
 8005096:	d422      	bmi.n	80050de <__lo0bits+0x52>
 8005098:	079a      	lsls	r2, r3, #30
 800509a:	bf49      	itett	mi
 800509c:	085b      	lsrmi	r3, r3, #1
 800509e:	089b      	lsrpl	r3, r3, #2
 80050a0:	6003      	strmi	r3, [r0, #0]
 80050a2:	2201      	movmi	r2, #1
 80050a4:	bf5c      	itt	pl
 80050a6:	6003      	strpl	r3, [r0, #0]
 80050a8:	2202      	movpl	r2, #2
 80050aa:	4610      	mov	r0, r2
 80050ac:	4770      	bx	lr
 80050ae:	b299      	uxth	r1, r3
 80050b0:	b909      	cbnz	r1, 80050b6 <__lo0bits+0x2a>
 80050b2:	0c1b      	lsrs	r3, r3, #16
 80050b4:	2210      	movs	r2, #16
 80050b6:	b2d9      	uxtb	r1, r3
 80050b8:	b909      	cbnz	r1, 80050be <__lo0bits+0x32>
 80050ba:	3208      	adds	r2, #8
 80050bc:	0a1b      	lsrs	r3, r3, #8
 80050be:	0719      	lsls	r1, r3, #28
 80050c0:	bf04      	itt	eq
 80050c2:	091b      	lsreq	r3, r3, #4
 80050c4:	3204      	addeq	r2, #4
 80050c6:	0799      	lsls	r1, r3, #30
 80050c8:	bf04      	itt	eq
 80050ca:	089b      	lsreq	r3, r3, #2
 80050cc:	3202      	addeq	r2, #2
 80050ce:	07d9      	lsls	r1, r3, #31
 80050d0:	d403      	bmi.n	80050da <__lo0bits+0x4e>
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	f102 0201 	add.w	r2, r2, #1
 80050d8:	d003      	beq.n	80050e2 <__lo0bits+0x56>
 80050da:	6003      	str	r3, [r0, #0]
 80050dc:	e7e5      	b.n	80050aa <__lo0bits+0x1e>
 80050de:	2200      	movs	r2, #0
 80050e0:	e7e3      	b.n	80050aa <__lo0bits+0x1e>
 80050e2:	2220      	movs	r2, #32
 80050e4:	e7e1      	b.n	80050aa <__lo0bits+0x1e>
	...

080050e8 <__i2b>:
 80050e8:	b510      	push	{r4, lr}
 80050ea:	460c      	mov	r4, r1
 80050ec:	2101      	movs	r1, #1
 80050ee:	f7ff ff05 	bl	8004efc <_Balloc>
 80050f2:	4602      	mov	r2, r0
 80050f4:	b928      	cbnz	r0, 8005102 <__i2b+0x1a>
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <__i2b+0x24>)
 80050f8:	4805      	ldr	r0, [pc, #20]	; (8005110 <__i2b+0x28>)
 80050fa:	f240 1145 	movw	r1, #325	; 0x145
 80050fe:	f000 fca7 	bl	8005a50 <__assert_func>
 8005102:	2301      	movs	r3, #1
 8005104:	6144      	str	r4, [r0, #20]
 8005106:	6103      	str	r3, [r0, #16]
 8005108:	bd10      	pop	{r4, pc}
 800510a:	bf00      	nop
 800510c:	0800705b 	.word	0x0800705b
 8005110:	0800706c 	.word	0x0800706c

08005114 <__multiply>:
 8005114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005118:	4691      	mov	r9, r2
 800511a:	690a      	ldr	r2, [r1, #16]
 800511c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005120:	429a      	cmp	r2, r3
 8005122:	bfb8      	it	lt
 8005124:	460b      	movlt	r3, r1
 8005126:	460c      	mov	r4, r1
 8005128:	bfbc      	itt	lt
 800512a:	464c      	movlt	r4, r9
 800512c:	4699      	movlt	r9, r3
 800512e:	6927      	ldr	r7, [r4, #16]
 8005130:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005134:	68a3      	ldr	r3, [r4, #8]
 8005136:	6861      	ldr	r1, [r4, #4]
 8005138:	eb07 060a 	add.w	r6, r7, sl
 800513c:	42b3      	cmp	r3, r6
 800513e:	b085      	sub	sp, #20
 8005140:	bfb8      	it	lt
 8005142:	3101      	addlt	r1, #1
 8005144:	f7ff feda 	bl	8004efc <_Balloc>
 8005148:	b930      	cbnz	r0, 8005158 <__multiply+0x44>
 800514a:	4602      	mov	r2, r0
 800514c:	4b44      	ldr	r3, [pc, #272]	; (8005260 <__multiply+0x14c>)
 800514e:	4845      	ldr	r0, [pc, #276]	; (8005264 <__multiply+0x150>)
 8005150:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005154:	f000 fc7c 	bl	8005a50 <__assert_func>
 8005158:	f100 0514 	add.w	r5, r0, #20
 800515c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005160:	462b      	mov	r3, r5
 8005162:	2200      	movs	r2, #0
 8005164:	4543      	cmp	r3, r8
 8005166:	d321      	bcc.n	80051ac <__multiply+0x98>
 8005168:	f104 0314 	add.w	r3, r4, #20
 800516c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005170:	f109 0314 	add.w	r3, r9, #20
 8005174:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005178:	9202      	str	r2, [sp, #8]
 800517a:	1b3a      	subs	r2, r7, r4
 800517c:	3a15      	subs	r2, #21
 800517e:	f022 0203 	bic.w	r2, r2, #3
 8005182:	3204      	adds	r2, #4
 8005184:	f104 0115 	add.w	r1, r4, #21
 8005188:	428f      	cmp	r7, r1
 800518a:	bf38      	it	cc
 800518c:	2204      	movcc	r2, #4
 800518e:	9201      	str	r2, [sp, #4]
 8005190:	9a02      	ldr	r2, [sp, #8]
 8005192:	9303      	str	r3, [sp, #12]
 8005194:	429a      	cmp	r2, r3
 8005196:	d80c      	bhi.n	80051b2 <__multiply+0x9e>
 8005198:	2e00      	cmp	r6, #0
 800519a:	dd03      	ble.n	80051a4 <__multiply+0x90>
 800519c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d05b      	beq.n	800525c <__multiply+0x148>
 80051a4:	6106      	str	r6, [r0, #16]
 80051a6:	b005      	add	sp, #20
 80051a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ac:	f843 2b04 	str.w	r2, [r3], #4
 80051b0:	e7d8      	b.n	8005164 <__multiply+0x50>
 80051b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80051b6:	f1ba 0f00 	cmp.w	sl, #0
 80051ba:	d024      	beq.n	8005206 <__multiply+0xf2>
 80051bc:	f104 0e14 	add.w	lr, r4, #20
 80051c0:	46a9      	mov	r9, r5
 80051c2:	f04f 0c00 	mov.w	ip, #0
 80051c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80051ca:	f8d9 1000 	ldr.w	r1, [r9]
 80051ce:	fa1f fb82 	uxth.w	fp, r2
 80051d2:	b289      	uxth	r1, r1
 80051d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80051d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80051dc:	f8d9 2000 	ldr.w	r2, [r9]
 80051e0:	4461      	add	r1, ip
 80051e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80051ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051ee:	b289      	uxth	r1, r1
 80051f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051f4:	4577      	cmp	r7, lr
 80051f6:	f849 1b04 	str.w	r1, [r9], #4
 80051fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051fe:	d8e2      	bhi.n	80051c6 <__multiply+0xb2>
 8005200:	9a01      	ldr	r2, [sp, #4]
 8005202:	f845 c002 	str.w	ip, [r5, r2]
 8005206:	9a03      	ldr	r2, [sp, #12]
 8005208:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800520c:	3304      	adds	r3, #4
 800520e:	f1b9 0f00 	cmp.w	r9, #0
 8005212:	d021      	beq.n	8005258 <__multiply+0x144>
 8005214:	6829      	ldr	r1, [r5, #0]
 8005216:	f104 0c14 	add.w	ip, r4, #20
 800521a:	46ae      	mov	lr, r5
 800521c:	f04f 0a00 	mov.w	sl, #0
 8005220:	f8bc b000 	ldrh.w	fp, [ip]
 8005224:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005228:	fb09 220b 	mla	r2, r9, fp, r2
 800522c:	4452      	add	r2, sl
 800522e:	b289      	uxth	r1, r1
 8005230:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005234:	f84e 1b04 	str.w	r1, [lr], #4
 8005238:	f85c 1b04 	ldr.w	r1, [ip], #4
 800523c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005240:	f8be 1000 	ldrh.w	r1, [lr]
 8005244:	fb09 110a 	mla	r1, r9, sl, r1
 8005248:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800524c:	4567      	cmp	r7, ip
 800524e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005252:	d8e5      	bhi.n	8005220 <__multiply+0x10c>
 8005254:	9a01      	ldr	r2, [sp, #4]
 8005256:	50a9      	str	r1, [r5, r2]
 8005258:	3504      	adds	r5, #4
 800525a:	e799      	b.n	8005190 <__multiply+0x7c>
 800525c:	3e01      	subs	r6, #1
 800525e:	e79b      	b.n	8005198 <__multiply+0x84>
 8005260:	0800705b 	.word	0x0800705b
 8005264:	0800706c 	.word	0x0800706c

08005268 <__pow5mult>:
 8005268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800526c:	4615      	mov	r5, r2
 800526e:	f012 0203 	ands.w	r2, r2, #3
 8005272:	4606      	mov	r6, r0
 8005274:	460f      	mov	r7, r1
 8005276:	d007      	beq.n	8005288 <__pow5mult+0x20>
 8005278:	4c25      	ldr	r4, [pc, #148]	; (8005310 <__pow5mult+0xa8>)
 800527a:	3a01      	subs	r2, #1
 800527c:	2300      	movs	r3, #0
 800527e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005282:	f7ff fe9d 	bl	8004fc0 <__multadd>
 8005286:	4607      	mov	r7, r0
 8005288:	10ad      	asrs	r5, r5, #2
 800528a:	d03d      	beq.n	8005308 <__pow5mult+0xa0>
 800528c:	69f4      	ldr	r4, [r6, #28]
 800528e:	b97c      	cbnz	r4, 80052b0 <__pow5mult+0x48>
 8005290:	2010      	movs	r0, #16
 8005292:	f7fe f893 	bl	80033bc <malloc>
 8005296:	4602      	mov	r2, r0
 8005298:	61f0      	str	r0, [r6, #28]
 800529a:	b928      	cbnz	r0, 80052a8 <__pow5mult+0x40>
 800529c:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <__pow5mult+0xac>)
 800529e:	481e      	ldr	r0, [pc, #120]	; (8005318 <__pow5mult+0xb0>)
 80052a0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80052a4:	f000 fbd4 	bl	8005a50 <__assert_func>
 80052a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052ac:	6004      	str	r4, [r0, #0]
 80052ae:	60c4      	str	r4, [r0, #12]
 80052b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80052b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052b8:	b94c      	cbnz	r4, 80052ce <__pow5mult+0x66>
 80052ba:	f240 2171 	movw	r1, #625	; 0x271
 80052be:	4630      	mov	r0, r6
 80052c0:	f7ff ff12 	bl	80050e8 <__i2b>
 80052c4:	2300      	movs	r3, #0
 80052c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80052ca:	4604      	mov	r4, r0
 80052cc:	6003      	str	r3, [r0, #0]
 80052ce:	f04f 0900 	mov.w	r9, #0
 80052d2:	07eb      	lsls	r3, r5, #31
 80052d4:	d50a      	bpl.n	80052ec <__pow5mult+0x84>
 80052d6:	4639      	mov	r1, r7
 80052d8:	4622      	mov	r2, r4
 80052da:	4630      	mov	r0, r6
 80052dc:	f7ff ff1a 	bl	8005114 <__multiply>
 80052e0:	4639      	mov	r1, r7
 80052e2:	4680      	mov	r8, r0
 80052e4:	4630      	mov	r0, r6
 80052e6:	f7ff fe49 	bl	8004f7c <_Bfree>
 80052ea:	4647      	mov	r7, r8
 80052ec:	106d      	asrs	r5, r5, #1
 80052ee:	d00b      	beq.n	8005308 <__pow5mult+0xa0>
 80052f0:	6820      	ldr	r0, [r4, #0]
 80052f2:	b938      	cbnz	r0, 8005304 <__pow5mult+0x9c>
 80052f4:	4622      	mov	r2, r4
 80052f6:	4621      	mov	r1, r4
 80052f8:	4630      	mov	r0, r6
 80052fa:	f7ff ff0b 	bl	8005114 <__multiply>
 80052fe:	6020      	str	r0, [r4, #0]
 8005300:	f8c0 9000 	str.w	r9, [r0]
 8005304:	4604      	mov	r4, r0
 8005306:	e7e4      	b.n	80052d2 <__pow5mult+0x6a>
 8005308:	4638      	mov	r0, r7
 800530a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800530e:	bf00      	nop
 8005310:	080071b8 	.word	0x080071b8
 8005314:	08006fec 	.word	0x08006fec
 8005318:	0800706c 	.word	0x0800706c

0800531c <__lshift>:
 800531c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005320:	460c      	mov	r4, r1
 8005322:	6849      	ldr	r1, [r1, #4]
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800532a:	68a3      	ldr	r3, [r4, #8]
 800532c:	4607      	mov	r7, r0
 800532e:	4691      	mov	r9, r2
 8005330:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005334:	f108 0601 	add.w	r6, r8, #1
 8005338:	42b3      	cmp	r3, r6
 800533a:	db0b      	blt.n	8005354 <__lshift+0x38>
 800533c:	4638      	mov	r0, r7
 800533e:	f7ff fddd 	bl	8004efc <_Balloc>
 8005342:	4605      	mov	r5, r0
 8005344:	b948      	cbnz	r0, 800535a <__lshift+0x3e>
 8005346:	4602      	mov	r2, r0
 8005348:	4b28      	ldr	r3, [pc, #160]	; (80053ec <__lshift+0xd0>)
 800534a:	4829      	ldr	r0, [pc, #164]	; (80053f0 <__lshift+0xd4>)
 800534c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005350:	f000 fb7e 	bl	8005a50 <__assert_func>
 8005354:	3101      	adds	r1, #1
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	e7ee      	b.n	8005338 <__lshift+0x1c>
 800535a:	2300      	movs	r3, #0
 800535c:	f100 0114 	add.w	r1, r0, #20
 8005360:	f100 0210 	add.w	r2, r0, #16
 8005364:	4618      	mov	r0, r3
 8005366:	4553      	cmp	r3, sl
 8005368:	db33      	blt.n	80053d2 <__lshift+0xb6>
 800536a:	6920      	ldr	r0, [r4, #16]
 800536c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005370:	f104 0314 	add.w	r3, r4, #20
 8005374:	f019 091f 	ands.w	r9, r9, #31
 8005378:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800537c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005380:	d02b      	beq.n	80053da <__lshift+0xbe>
 8005382:	f1c9 0e20 	rsb	lr, r9, #32
 8005386:	468a      	mov	sl, r1
 8005388:	2200      	movs	r2, #0
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	fa00 f009 	lsl.w	r0, r0, r9
 8005390:	4310      	orrs	r0, r2
 8005392:	f84a 0b04 	str.w	r0, [sl], #4
 8005396:	f853 2b04 	ldr.w	r2, [r3], #4
 800539a:	459c      	cmp	ip, r3
 800539c:	fa22 f20e 	lsr.w	r2, r2, lr
 80053a0:	d8f3      	bhi.n	800538a <__lshift+0x6e>
 80053a2:	ebac 0304 	sub.w	r3, ip, r4
 80053a6:	3b15      	subs	r3, #21
 80053a8:	f023 0303 	bic.w	r3, r3, #3
 80053ac:	3304      	adds	r3, #4
 80053ae:	f104 0015 	add.w	r0, r4, #21
 80053b2:	4584      	cmp	ip, r0
 80053b4:	bf38      	it	cc
 80053b6:	2304      	movcc	r3, #4
 80053b8:	50ca      	str	r2, [r1, r3]
 80053ba:	b10a      	cbz	r2, 80053c0 <__lshift+0xa4>
 80053bc:	f108 0602 	add.w	r6, r8, #2
 80053c0:	3e01      	subs	r6, #1
 80053c2:	4638      	mov	r0, r7
 80053c4:	612e      	str	r6, [r5, #16]
 80053c6:	4621      	mov	r1, r4
 80053c8:	f7ff fdd8 	bl	8004f7c <_Bfree>
 80053cc:	4628      	mov	r0, r5
 80053ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80053d6:	3301      	adds	r3, #1
 80053d8:	e7c5      	b.n	8005366 <__lshift+0x4a>
 80053da:	3904      	subs	r1, #4
 80053dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80053e4:	459c      	cmp	ip, r3
 80053e6:	d8f9      	bhi.n	80053dc <__lshift+0xc0>
 80053e8:	e7ea      	b.n	80053c0 <__lshift+0xa4>
 80053ea:	bf00      	nop
 80053ec:	0800705b 	.word	0x0800705b
 80053f0:	0800706c 	.word	0x0800706c

080053f4 <__mcmp>:
 80053f4:	b530      	push	{r4, r5, lr}
 80053f6:	6902      	ldr	r2, [r0, #16]
 80053f8:	690c      	ldr	r4, [r1, #16]
 80053fa:	1b12      	subs	r2, r2, r4
 80053fc:	d10e      	bne.n	800541c <__mcmp+0x28>
 80053fe:	f100 0314 	add.w	r3, r0, #20
 8005402:	3114      	adds	r1, #20
 8005404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800540c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005414:	42a5      	cmp	r5, r4
 8005416:	d003      	beq.n	8005420 <__mcmp+0x2c>
 8005418:	d305      	bcc.n	8005426 <__mcmp+0x32>
 800541a:	2201      	movs	r2, #1
 800541c:	4610      	mov	r0, r2
 800541e:	bd30      	pop	{r4, r5, pc}
 8005420:	4283      	cmp	r3, r0
 8005422:	d3f3      	bcc.n	800540c <__mcmp+0x18>
 8005424:	e7fa      	b.n	800541c <__mcmp+0x28>
 8005426:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800542a:	e7f7      	b.n	800541c <__mcmp+0x28>

0800542c <__mdiff>:
 800542c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	460c      	mov	r4, r1
 8005432:	4606      	mov	r6, r0
 8005434:	4611      	mov	r1, r2
 8005436:	4620      	mov	r0, r4
 8005438:	4690      	mov	r8, r2
 800543a:	f7ff ffdb 	bl	80053f4 <__mcmp>
 800543e:	1e05      	subs	r5, r0, #0
 8005440:	d110      	bne.n	8005464 <__mdiff+0x38>
 8005442:	4629      	mov	r1, r5
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff fd59 	bl	8004efc <_Balloc>
 800544a:	b930      	cbnz	r0, 800545a <__mdiff+0x2e>
 800544c:	4b3a      	ldr	r3, [pc, #232]	; (8005538 <__mdiff+0x10c>)
 800544e:	4602      	mov	r2, r0
 8005450:	f240 2137 	movw	r1, #567	; 0x237
 8005454:	4839      	ldr	r0, [pc, #228]	; (800553c <__mdiff+0x110>)
 8005456:	f000 fafb 	bl	8005a50 <__assert_func>
 800545a:	2301      	movs	r3, #1
 800545c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	bfa4      	itt	ge
 8005466:	4643      	movge	r3, r8
 8005468:	46a0      	movge	r8, r4
 800546a:	4630      	mov	r0, r6
 800546c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005470:	bfa6      	itte	ge
 8005472:	461c      	movge	r4, r3
 8005474:	2500      	movge	r5, #0
 8005476:	2501      	movlt	r5, #1
 8005478:	f7ff fd40 	bl	8004efc <_Balloc>
 800547c:	b920      	cbnz	r0, 8005488 <__mdiff+0x5c>
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <__mdiff+0x10c>)
 8005480:	4602      	mov	r2, r0
 8005482:	f240 2145 	movw	r1, #581	; 0x245
 8005486:	e7e5      	b.n	8005454 <__mdiff+0x28>
 8005488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800548c:	6926      	ldr	r6, [r4, #16]
 800548e:	60c5      	str	r5, [r0, #12]
 8005490:	f104 0914 	add.w	r9, r4, #20
 8005494:	f108 0514 	add.w	r5, r8, #20
 8005498:	f100 0e14 	add.w	lr, r0, #20
 800549c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80054a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80054a4:	f108 0210 	add.w	r2, r8, #16
 80054a8:	46f2      	mov	sl, lr
 80054aa:	2100      	movs	r1, #0
 80054ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80054b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80054b4:	fa11 f88b 	uxtah	r8, r1, fp
 80054b8:	b299      	uxth	r1, r3
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	eba8 0801 	sub.w	r8, r8, r1
 80054c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80054c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80054c8:	fa1f f888 	uxth.w	r8, r8
 80054cc:	1419      	asrs	r1, r3, #16
 80054ce:	454e      	cmp	r6, r9
 80054d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80054d4:	f84a 3b04 	str.w	r3, [sl], #4
 80054d8:	d8e8      	bhi.n	80054ac <__mdiff+0x80>
 80054da:	1b33      	subs	r3, r6, r4
 80054dc:	3b15      	subs	r3, #21
 80054de:	f023 0303 	bic.w	r3, r3, #3
 80054e2:	3304      	adds	r3, #4
 80054e4:	3415      	adds	r4, #21
 80054e6:	42a6      	cmp	r6, r4
 80054e8:	bf38      	it	cc
 80054ea:	2304      	movcc	r3, #4
 80054ec:	441d      	add	r5, r3
 80054ee:	4473      	add	r3, lr
 80054f0:	469e      	mov	lr, r3
 80054f2:	462e      	mov	r6, r5
 80054f4:	4566      	cmp	r6, ip
 80054f6:	d30e      	bcc.n	8005516 <__mdiff+0xea>
 80054f8:	f10c 0203 	add.w	r2, ip, #3
 80054fc:	1b52      	subs	r2, r2, r5
 80054fe:	f022 0203 	bic.w	r2, r2, #3
 8005502:	3d03      	subs	r5, #3
 8005504:	45ac      	cmp	ip, r5
 8005506:	bf38      	it	cc
 8005508:	2200      	movcc	r2, #0
 800550a:	4413      	add	r3, r2
 800550c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005510:	b17a      	cbz	r2, 8005532 <__mdiff+0x106>
 8005512:	6107      	str	r7, [r0, #16]
 8005514:	e7a4      	b.n	8005460 <__mdiff+0x34>
 8005516:	f856 8b04 	ldr.w	r8, [r6], #4
 800551a:	fa11 f288 	uxtah	r2, r1, r8
 800551e:	1414      	asrs	r4, r2, #16
 8005520:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005524:	b292      	uxth	r2, r2
 8005526:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800552a:	f84e 2b04 	str.w	r2, [lr], #4
 800552e:	1421      	asrs	r1, r4, #16
 8005530:	e7e0      	b.n	80054f4 <__mdiff+0xc8>
 8005532:	3f01      	subs	r7, #1
 8005534:	e7ea      	b.n	800550c <__mdiff+0xe0>
 8005536:	bf00      	nop
 8005538:	0800705b 	.word	0x0800705b
 800553c:	0800706c 	.word	0x0800706c

08005540 <__d2b>:
 8005540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005544:	460f      	mov	r7, r1
 8005546:	2101      	movs	r1, #1
 8005548:	ec59 8b10 	vmov	r8, r9, d0
 800554c:	4616      	mov	r6, r2
 800554e:	f7ff fcd5 	bl	8004efc <_Balloc>
 8005552:	4604      	mov	r4, r0
 8005554:	b930      	cbnz	r0, 8005564 <__d2b+0x24>
 8005556:	4602      	mov	r2, r0
 8005558:	4b24      	ldr	r3, [pc, #144]	; (80055ec <__d2b+0xac>)
 800555a:	4825      	ldr	r0, [pc, #148]	; (80055f0 <__d2b+0xb0>)
 800555c:	f240 310f 	movw	r1, #783	; 0x30f
 8005560:	f000 fa76 	bl	8005a50 <__assert_func>
 8005564:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800556c:	bb2d      	cbnz	r5, 80055ba <__d2b+0x7a>
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	f1b8 0300 	subs.w	r3, r8, #0
 8005574:	d026      	beq.n	80055c4 <__d2b+0x84>
 8005576:	4668      	mov	r0, sp
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	f7ff fd87 	bl	800508c <__lo0bits>
 800557e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005582:	b1e8      	cbz	r0, 80055c0 <__d2b+0x80>
 8005584:	f1c0 0320 	rsb	r3, r0, #32
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	430b      	orrs	r3, r1
 800558e:	40c2      	lsrs	r2, r0
 8005590:	6163      	str	r3, [r4, #20]
 8005592:	9201      	str	r2, [sp, #4]
 8005594:	9b01      	ldr	r3, [sp, #4]
 8005596:	61a3      	str	r3, [r4, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	bf14      	ite	ne
 800559c:	2202      	movne	r2, #2
 800559e:	2201      	moveq	r2, #1
 80055a0:	6122      	str	r2, [r4, #16]
 80055a2:	b1bd      	cbz	r5, 80055d4 <__d2b+0x94>
 80055a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80055a8:	4405      	add	r5, r0
 80055aa:	603d      	str	r5, [r7, #0]
 80055ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80055b0:	6030      	str	r0, [r6, #0]
 80055b2:	4620      	mov	r0, r4
 80055b4:	b003      	add	sp, #12
 80055b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055be:	e7d6      	b.n	800556e <__d2b+0x2e>
 80055c0:	6161      	str	r1, [r4, #20]
 80055c2:	e7e7      	b.n	8005594 <__d2b+0x54>
 80055c4:	a801      	add	r0, sp, #4
 80055c6:	f7ff fd61 	bl	800508c <__lo0bits>
 80055ca:	9b01      	ldr	r3, [sp, #4]
 80055cc:	6163      	str	r3, [r4, #20]
 80055ce:	3020      	adds	r0, #32
 80055d0:	2201      	movs	r2, #1
 80055d2:	e7e5      	b.n	80055a0 <__d2b+0x60>
 80055d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055dc:	6038      	str	r0, [r7, #0]
 80055de:	6918      	ldr	r0, [r3, #16]
 80055e0:	f7ff fd34 	bl	800504c <__hi0bits>
 80055e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055e8:	e7e2      	b.n	80055b0 <__d2b+0x70>
 80055ea:	bf00      	nop
 80055ec:	0800705b 	.word	0x0800705b
 80055f0:	0800706c 	.word	0x0800706c

080055f4 <__ssputs_r>:
 80055f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055f8:	688e      	ldr	r6, [r1, #8]
 80055fa:	461f      	mov	r7, r3
 80055fc:	42be      	cmp	r6, r7
 80055fe:	680b      	ldr	r3, [r1, #0]
 8005600:	4682      	mov	sl, r0
 8005602:	460c      	mov	r4, r1
 8005604:	4690      	mov	r8, r2
 8005606:	d82c      	bhi.n	8005662 <__ssputs_r+0x6e>
 8005608:	898a      	ldrh	r2, [r1, #12]
 800560a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800560e:	d026      	beq.n	800565e <__ssputs_r+0x6a>
 8005610:	6965      	ldr	r5, [r4, #20]
 8005612:	6909      	ldr	r1, [r1, #16]
 8005614:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005618:	eba3 0901 	sub.w	r9, r3, r1
 800561c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005620:	1c7b      	adds	r3, r7, #1
 8005622:	444b      	add	r3, r9
 8005624:	106d      	asrs	r5, r5, #1
 8005626:	429d      	cmp	r5, r3
 8005628:	bf38      	it	cc
 800562a:	461d      	movcc	r5, r3
 800562c:	0553      	lsls	r3, r2, #21
 800562e:	d527      	bpl.n	8005680 <__ssputs_r+0x8c>
 8005630:	4629      	mov	r1, r5
 8005632:	f7fd fef3 	bl	800341c <_malloc_r>
 8005636:	4606      	mov	r6, r0
 8005638:	b360      	cbz	r0, 8005694 <__ssputs_r+0xa0>
 800563a:	6921      	ldr	r1, [r4, #16]
 800563c:	464a      	mov	r2, r9
 800563e:	f000 f9f9 	bl	8005a34 <memcpy>
 8005642:	89a3      	ldrh	r3, [r4, #12]
 8005644:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800564c:	81a3      	strh	r3, [r4, #12]
 800564e:	6126      	str	r6, [r4, #16]
 8005650:	6165      	str	r5, [r4, #20]
 8005652:	444e      	add	r6, r9
 8005654:	eba5 0509 	sub.w	r5, r5, r9
 8005658:	6026      	str	r6, [r4, #0]
 800565a:	60a5      	str	r5, [r4, #8]
 800565c:	463e      	mov	r6, r7
 800565e:	42be      	cmp	r6, r7
 8005660:	d900      	bls.n	8005664 <__ssputs_r+0x70>
 8005662:	463e      	mov	r6, r7
 8005664:	6820      	ldr	r0, [r4, #0]
 8005666:	4632      	mov	r2, r6
 8005668:	4641      	mov	r1, r8
 800566a:	f000 f9c9 	bl	8005a00 <memmove>
 800566e:	68a3      	ldr	r3, [r4, #8]
 8005670:	1b9b      	subs	r3, r3, r6
 8005672:	60a3      	str	r3, [r4, #8]
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	4433      	add	r3, r6
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	2000      	movs	r0, #0
 800567c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005680:	462a      	mov	r2, r5
 8005682:	f000 fa2b 	bl	8005adc <_realloc_r>
 8005686:	4606      	mov	r6, r0
 8005688:	2800      	cmp	r0, #0
 800568a:	d1e0      	bne.n	800564e <__ssputs_r+0x5a>
 800568c:	6921      	ldr	r1, [r4, #16]
 800568e:	4650      	mov	r0, sl
 8005690:	f7ff fbe8 	bl	8004e64 <_free_r>
 8005694:	230c      	movs	r3, #12
 8005696:	f8ca 3000 	str.w	r3, [sl]
 800569a:	89a3      	ldrh	r3, [r4, #12]
 800569c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056a0:	81a3      	strh	r3, [r4, #12]
 80056a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056a6:	e7e9      	b.n	800567c <__ssputs_r+0x88>

080056a8 <_svfiprintf_r>:
 80056a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ac:	4698      	mov	r8, r3
 80056ae:	898b      	ldrh	r3, [r1, #12]
 80056b0:	061b      	lsls	r3, r3, #24
 80056b2:	b09d      	sub	sp, #116	; 0x74
 80056b4:	4607      	mov	r7, r0
 80056b6:	460d      	mov	r5, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	d50e      	bpl.n	80056da <_svfiprintf_r+0x32>
 80056bc:	690b      	ldr	r3, [r1, #16]
 80056be:	b963      	cbnz	r3, 80056da <_svfiprintf_r+0x32>
 80056c0:	2140      	movs	r1, #64	; 0x40
 80056c2:	f7fd feab 	bl	800341c <_malloc_r>
 80056c6:	6028      	str	r0, [r5, #0]
 80056c8:	6128      	str	r0, [r5, #16]
 80056ca:	b920      	cbnz	r0, 80056d6 <_svfiprintf_r+0x2e>
 80056cc:	230c      	movs	r3, #12
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056d4:	e0d0      	b.n	8005878 <_svfiprintf_r+0x1d0>
 80056d6:	2340      	movs	r3, #64	; 0x40
 80056d8:	616b      	str	r3, [r5, #20]
 80056da:	2300      	movs	r3, #0
 80056dc:	9309      	str	r3, [sp, #36]	; 0x24
 80056de:	2320      	movs	r3, #32
 80056e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80056e8:	2330      	movs	r3, #48	; 0x30
 80056ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005890 <_svfiprintf_r+0x1e8>
 80056ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056f2:	f04f 0901 	mov.w	r9, #1
 80056f6:	4623      	mov	r3, r4
 80056f8:	469a      	mov	sl, r3
 80056fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056fe:	b10a      	cbz	r2, 8005704 <_svfiprintf_r+0x5c>
 8005700:	2a25      	cmp	r2, #37	; 0x25
 8005702:	d1f9      	bne.n	80056f8 <_svfiprintf_r+0x50>
 8005704:	ebba 0b04 	subs.w	fp, sl, r4
 8005708:	d00b      	beq.n	8005722 <_svfiprintf_r+0x7a>
 800570a:	465b      	mov	r3, fp
 800570c:	4622      	mov	r2, r4
 800570e:	4629      	mov	r1, r5
 8005710:	4638      	mov	r0, r7
 8005712:	f7ff ff6f 	bl	80055f4 <__ssputs_r>
 8005716:	3001      	adds	r0, #1
 8005718:	f000 80a9 	beq.w	800586e <_svfiprintf_r+0x1c6>
 800571c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800571e:	445a      	add	r2, fp
 8005720:	9209      	str	r2, [sp, #36]	; 0x24
 8005722:	f89a 3000 	ldrb.w	r3, [sl]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80a1 	beq.w	800586e <_svfiprintf_r+0x1c6>
 800572c:	2300      	movs	r3, #0
 800572e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005732:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005736:	f10a 0a01 	add.w	sl, sl, #1
 800573a:	9304      	str	r3, [sp, #16]
 800573c:	9307      	str	r3, [sp, #28]
 800573e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005742:	931a      	str	r3, [sp, #104]	; 0x68
 8005744:	4654      	mov	r4, sl
 8005746:	2205      	movs	r2, #5
 8005748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800574c:	4850      	ldr	r0, [pc, #320]	; (8005890 <_svfiprintf_r+0x1e8>)
 800574e:	f7fa fd3f 	bl	80001d0 <memchr>
 8005752:	9a04      	ldr	r2, [sp, #16]
 8005754:	b9d8      	cbnz	r0, 800578e <_svfiprintf_r+0xe6>
 8005756:	06d0      	lsls	r0, r2, #27
 8005758:	bf44      	itt	mi
 800575a:	2320      	movmi	r3, #32
 800575c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005760:	0711      	lsls	r1, r2, #28
 8005762:	bf44      	itt	mi
 8005764:	232b      	movmi	r3, #43	; 0x2b
 8005766:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800576a:	f89a 3000 	ldrb.w	r3, [sl]
 800576e:	2b2a      	cmp	r3, #42	; 0x2a
 8005770:	d015      	beq.n	800579e <_svfiprintf_r+0xf6>
 8005772:	9a07      	ldr	r2, [sp, #28]
 8005774:	4654      	mov	r4, sl
 8005776:	2000      	movs	r0, #0
 8005778:	f04f 0c0a 	mov.w	ip, #10
 800577c:	4621      	mov	r1, r4
 800577e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005782:	3b30      	subs	r3, #48	; 0x30
 8005784:	2b09      	cmp	r3, #9
 8005786:	d94d      	bls.n	8005824 <_svfiprintf_r+0x17c>
 8005788:	b1b0      	cbz	r0, 80057b8 <_svfiprintf_r+0x110>
 800578a:	9207      	str	r2, [sp, #28]
 800578c:	e014      	b.n	80057b8 <_svfiprintf_r+0x110>
 800578e:	eba0 0308 	sub.w	r3, r0, r8
 8005792:	fa09 f303 	lsl.w	r3, r9, r3
 8005796:	4313      	orrs	r3, r2
 8005798:	9304      	str	r3, [sp, #16]
 800579a:	46a2      	mov	sl, r4
 800579c:	e7d2      	b.n	8005744 <_svfiprintf_r+0x9c>
 800579e:	9b03      	ldr	r3, [sp, #12]
 80057a0:	1d19      	adds	r1, r3, #4
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	9103      	str	r1, [sp, #12]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfbb      	ittet	lt
 80057aa:	425b      	neglt	r3, r3
 80057ac:	f042 0202 	orrlt.w	r2, r2, #2
 80057b0:	9307      	strge	r3, [sp, #28]
 80057b2:	9307      	strlt	r3, [sp, #28]
 80057b4:	bfb8      	it	lt
 80057b6:	9204      	strlt	r2, [sp, #16]
 80057b8:	7823      	ldrb	r3, [r4, #0]
 80057ba:	2b2e      	cmp	r3, #46	; 0x2e
 80057bc:	d10c      	bne.n	80057d8 <_svfiprintf_r+0x130>
 80057be:	7863      	ldrb	r3, [r4, #1]
 80057c0:	2b2a      	cmp	r3, #42	; 0x2a
 80057c2:	d134      	bne.n	800582e <_svfiprintf_r+0x186>
 80057c4:	9b03      	ldr	r3, [sp, #12]
 80057c6:	1d1a      	adds	r2, r3, #4
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	9203      	str	r2, [sp, #12]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	bfb8      	it	lt
 80057d0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80057d4:	3402      	adds	r4, #2
 80057d6:	9305      	str	r3, [sp, #20]
 80057d8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80058a0 <_svfiprintf_r+0x1f8>
 80057dc:	7821      	ldrb	r1, [r4, #0]
 80057de:	2203      	movs	r2, #3
 80057e0:	4650      	mov	r0, sl
 80057e2:	f7fa fcf5 	bl	80001d0 <memchr>
 80057e6:	b138      	cbz	r0, 80057f8 <_svfiprintf_r+0x150>
 80057e8:	9b04      	ldr	r3, [sp, #16]
 80057ea:	eba0 000a 	sub.w	r0, r0, sl
 80057ee:	2240      	movs	r2, #64	; 0x40
 80057f0:	4082      	lsls	r2, r0
 80057f2:	4313      	orrs	r3, r2
 80057f4:	3401      	adds	r4, #1
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fc:	4825      	ldr	r0, [pc, #148]	; (8005894 <_svfiprintf_r+0x1ec>)
 80057fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005802:	2206      	movs	r2, #6
 8005804:	f7fa fce4 	bl	80001d0 <memchr>
 8005808:	2800      	cmp	r0, #0
 800580a:	d038      	beq.n	800587e <_svfiprintf_r+0x1d6>
 800580c:	4b22      	ldr	r3, [pc, #136]	; (8005898 <_svfiprintf_r+0x1f0>)
 800580e:	bb1b      	cbnz	r3, 8005858 <_svfiprintf_r+0x1b0>
 8005810:	9b03      	ldr	r3, [sp, #12]
 8005812:	3307      	adds	r3, #7
 8005814:	f023 0307 	bic.w	r3, r3, #7
 8005818:	3308      	adds	r3, #8
 800581a:	9303      	str	r3, [sp, #12]
 800581c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581e:	4433      	add	r3, r6
 8005820:	9309      	str	r3, [sp, #36]	; 0x24
 8005822:	e768      	b.n	80056f6 <_svfiprintf_r+0x4e>
 8005824:	fb0c 3202 	mla	r2, ip, r2, r3
 8005828:	460c      	mov	r4, r1
 800582a:	2001      	movs	r0, #1
 800582c:	e7a6      	b.n	800577c <_svfiprintf_r+0xd4>
 800582e:	2300      	movs	r3, #0
 8005830:	3401      	adds	r4, #1
 8005832:	9305      	str	r3, [sp, #20]
 8005834:	4619      	mov	r1, r3
 8005836:	f04f 0c0a 	mov.w	ip, #10
 800583a:	4620      	mov	r0, r4
 800583c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005840:	3a30      	subs	r2, #48	; 0x30
 8005842:	2a09      	cmp	r2, #9
 8005844:	d903      	bls.n	800584e <_svfiprintf_r+0x1a6>
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0c6      	beq.n	80057d8 <_svfiprintf_r+0x130>
 800584a:	9105      	str	r1, [sp, #20]
 800584c:	e7c4      	b.n	80057d8 <_svfiprintf_r+0x130>
 800584e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005852:	4604      	mov	r4, r0
 8005854:	2301      	movs	r3, #1
 8005856:	e7f0      	b.n	800583a <_svfiprintf_r+0x192>
 8005858:	ab03      	add	r3, sp, #12
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	462a      	mov	r2, r5
 800585e:	4b0f      	ldr	r3, [pc, #60]	; (800589c <_svfiprintf_r+0x1f4>)
 8005860:	a904      	add	r1, sp, #16
 8005862:	4638      	mov	r0, r7
 8005864:	f7fd ff06 	bl	8003674 <_printf_float>
 8005868:	1c42      	adds	r2, r0, #1
 800586a:	4606      	mov	r6, r0
 800586c:	d1d6      	bne.n	800581c <_svfiprintf_r+0x174>
 800586e:	89ab      	ldrh	r3, [r5, #12]
 8005870:	065b      	lsls	r3, r3, #25
 8005872:	f53f af2d 	bmi.w	80056d0 <_svfiprintf_r+0x28>
 8005876:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005878:	b01d      	add	sp, #116	; 0x74
 800587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800587e:	ab03      	add	r3, sp, #12
 8005880:	9300      	str	r3, [sp, #0]
 8005882:	462a      	mov	r2, r5
 8005884:	4b05      	ldr	r3, [pc, #20]	; (800589c <_svfiprintf_r+0x1f4>)
 8005886:	a904      	add	r1, sp, #16
 8005888:	4638      	mov	r0, r7
 800588a:	f7fe f997 	bl	8003bbc <_printf_i>
 800588e:	e7eb      	b.n	8005868 <_svfiprintf_r+0x1c0>
 8005890:	080071c4 	.word	0x080071c4
 8005894:	080071ce 	.word	0x080071ce
 8005898:	08003675 	.word	0x08003675
 800589c:	080055f5 	.word	0x080055f5
 80058a0:	080071ca 	.word	0x080071ca

080058a4 <__sflush_r>:
 80058a4:	898a      	ldrh	r2, [r1, #12]
 80058a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058aa:	4605      	mov	r5, r0
 80058ac:	0710      	lsls	r0, r2, #28
 80058ae:	460c      	mov	r4, r1
 80058b0:	d458      	bmi.n	8005964 <__sflush_r+0xc0>
 80058b2:	684b      	ldr	r3, [r1, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dc05      	bgt.n	80058c4 <__sflush_r+0x20>
 80058b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	dc02      	bgt.n	80058c4 <__sflush_r+0x20>
 80058be:	2000      	movs	r0, #0
 80058c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058c6:	2e00      	cmp	r6, #0
 80058c8:	d0f9      	beq.n	80058be <__sflush_r+0x1a>
 80058ca:	2300      	movs	r3, #0
 80058cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058d0:	682f      	ldr	r7, [r5, #0]
 80058d2:	6a21      	ldr	r1, [r4, #32]
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	d032      	beq.n	800593e <__sflush_r+0x9a>
 80058d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	075a      	lsls	r2, r3, #29
 80058de:	d505      	bpl.n	80058ec <__sflush_r+0x48>
 80058e0:	6863      	ldr	r3, [r4, #4]
 80058e2:	1ac0      	subs	r0, r0, r3
 80058e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058e6:	b10b      	cbz	r3, 80058ec <__sflush_r+0x48>
 80058e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058ea:	1ac0      	subs	r0, r0, r3
 80058ec:	2300      	movs	r3, #0
 80058ee:	4602      	mov	r2, r0
 80058f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058f2:	6a21      	ldr	r1, [r4, #32]
 80058f4:	4628      	mov	r0, r5
 80058f6:	47b0      	blx	r6
 80058f8:	1c43      	adds	r3, r0, #1
 80058fa:	89a3      	ldrh	r3, [r4, #12]
 80058fc:	d106      	bne.n	800590c <__sflush_r+0x68>
 80058fe:	6829      	ldr	r1, [r5, #0]
 8005900:	291d      	cmp	r1, #29
 8005902:	d82b      	bhi.n	800595c <__sflush_r+0xb8>
 8005904:	4a29      	ldr	r2, [pc, #164]	; (80059ac <__sflush_r+0x108>)
 8005906:	410a      	asrs	r2, r1
 8005908:	07d6      	lsls	r6, r2, #31
 800590a:	d427      	bmi.n	800595c <__sflush_r+0xb8>
 800590c:	2200      	movs	r2, #0
 800590e:	6062      	str	r2, [r4, #4]
 8005910:	04d9      	lsls	r1, r3, #19
 8005912:	6922      	ldr	r2, [r4, #16]
 8005914:	6022      	str	r2, [r4, #0]
 8005916:	d504      	bpl.n	8005922 <__sflush_r+0x7e>
 8005918:	1c42      	adds	r2, r0, #1
 800591a:	d101      	bne.n	8005920 <__sflush_r+0x7c>
 800591c:	682b      	ldr	r3, [r5, #0]
 800591e:	b903      	cbnz	r3, 8005922 <__sflush_r+0x7e>
 8005920:	6560      	str	r0, [r4, #84]	; 0x54
 8005922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005924:	602f      	str	r7, [r5, #0]
 8005926:	2900      	cmp	r1, #0
 8005928:	d0c9      	beq.n	80058be <__sflush_r+0x1a>
 800592a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800592e:	4299      	cmp	r1, r3
 8005930:	d002      	beq.n	8005938 <__sflush_r+0x94>
 8005932:	4628      	mov	r0, r5
 8005934:	f7ff fa96 	bl	8004e64 <_free_r>
 8005938:	2000      	movs	r0, #0
 800593a:	6360      	str	r0, [r4, #52]	; 0x34
 800593c:	e7c0      	b.n	80058c0 <__sflush_r+0x1c>
 800593e:	2301      	movs	r3, #1
 8005940:	4628      	mov	r0, r5
 8005942:	47b0      	blx	r6
 8005944:	1c41      	adds	r1, r0, #1
 8005946:	d1c8      	bne.n	80058da <__sflush_r+0x36>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d0c5      	beq.n	80058da <__sflush_r+0x36>
 800594e:	2b1d      	cmp	r3, #29
 8005950:	d001      	beq.n	8005956 <__sflush_r+0xb2>
 8005952:	2b16      	cmp	r3, #22
 8005954:	d101      	bne.n	800595a <__sflush_r+0xb6>
 8005956:	602f      	str	r7, [r5, #0]
 8005958:	e7b1      	b.n	80058be <__sflush_r+0x1a>
 800595a:	89a3      	ldrh	r3, [r4, #12]
 800595c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005960:	81a3      	strh	r3, [r4, #12]
 8005962:	e7ad      	b.n	80058c0 <__sflush_r+0x1c>
 8005964:	690f      	ldr	r7, [r1, #16]
 8005966:	2f00      	cmp	r7, #0
 8005968:	d0a9      	beq.n	80058be <__sflush_r+0x1a>
 800596a:	0793      	lsls	r3, r2, #30
 800596c:	680e      	ldr	r6, [r1, #0]
 800596e:	bf08      	it	eq
 8005970:	694b      	ldreq	r3, [r1, #20]
 8005972:	600f      	str	r7, [r1, #0]
 8005974:	bf18      	it	ne
 8005976:	2300      	movne	r3, #0
 8005978:	eba6 0807 	sub.w	r8, r6, r7
 800597c:	608b      	str	r3, [r1, #8]
 800597e:	f1b8 0f00 	cmp.w	r8, #0
 8005982:	dd9c      	ble.n	80058be <__sflush_r+0x1a>
 8005984:	6a21      	ldr	r1, [r4, #32]
 8005986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005988:	4643      	mov	r3, r8
 800598a:	463a      	mov	r2, r7
 800598c:	4628      	mov	r0, r5
 800598e:	47b0      	blx	r6
 8005990:	2800      	cmp	r0, #0
 8005992:	dc06      	bgt.n	80059a2 <__sflush_r+0xfe>
 8005994:	89a3      	ldrh	r3, [r4, #12]
 8005996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800599a:	81a3      	strh	r3, [r4, #12]
 800599c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059a0:	e78e      	b.n	80058c0 <__sflush_r+0x1c>
 80059a2:	4407      	add	r7, r0
 80059a4:	eba8 0800 	sub.w	r8, r8, r0
 80059a8:	e7e9      	b.n	800597e <__sflush_r+0xda>
 80059aa:	bf00      	nop
 80059ac:	dfbffffe 	.word	0xdfbffffe

080059b0 <_fflush_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	690b      	ldr	r3, [r1, #16]
 80059b4:	4605      	mov	r5, r0
 80059b6:	460c      	mov	r4, r1
 80059b8:	b913      	cbnz	r3, 80059c0 <_fflush_r+0x10>
 80059ba:	2500      	movs	r5, #0
 80059bc:	4628      	mov	r0, r5
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	b118      	cbz	r0, 80059ca <_fflush_r+0x1a>
 80059c2:	6a03      	ldr	r3, [r0, #32]
 80059c4:	b90b      	cbnz	r3, 80059ca <_fflush_r+0x1a>
 80059c6:	f7fe faa7 	bl	8003f18 <__sinit>
 80059ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d0f3      	beq.n	80059ba <_fflush_r+0xa>
 80059d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059d4:	07d0      	lsls	r0, r2, #31
 80059d6:	d404      	bmi.n	80059e2 <_fflush_r+0x32>
 80059d8:	0599      	lsls	r1, r3, #22
 80059da:	d402      	bmi.n	80059e2 <_fflush_r+0x32>
 80059dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059de:	f7fe fbc2 	bl	8004166 <__retarget_lock_acquire_recursive>
 80059e2:	4628      	mov	r0, r5
 80059e4:	4621      	mov	r1, r4
 80059e6:	f7ff ff5d 	bl	80058a4 <__sflush_r>
 80059ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059ec:	07da      	lsls	r2, r3, #31
 80059ee:	4605      	mov	r5, r0
 80059f0:	d4e4      	bmi.n	80059bc <_fflush_r+0xc>
 80059f2:	89a3      	ldrh	r3, [r4, #12]
 80059f4:	059b      	lsls	r3, r3, #22
 80059f6:	d4e1      	bmi.n	80059bc <_fflush_r+0xc>
 80059f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059fa:	f7fe fbb5 	bl	8004168 <__retarget_lock_release_recursive>
 80059fe:	e7dd      	b.n	80059bc <_fflush_r+0xc>

08005a00 <memmove>:
 8005a00:	4288      	cmp	r0, r1
 8005a02:	b510      	push	{r4, lr}
 8005a04:	eb01 0402 	add.w	r4, r1, r2
 8005a08:	d902      	bls.n	8005a10 <memmove+0x10>
 8005a0a:	4284      	cmp	r4, r0
 8005a0c:	4623      	mov	r3, r4
 8005a0e:	d807      	bhi.n	8005a20 <memmove+0x20>
 8005a10:	1e43      	subs	r3, r0, #1
 8005a12:	42a1      	cmp	r1, r4
 8005a14:	d008      	beq.n	8005a28 <memmove+0x28>
 8005a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a1e:	e7f8      	b.n	8005a12 <memmove+0x12>
 8005a20:	4402      	add	r2, r0
 8005a22:	4601      	mov	r1, r0
 8005a24:	428a      	cmp	r2, r1
 8005a26:	d100      	bne.n	8005a2a <memmove+0x2a>
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a32:	e7f7      	b.n	8005a24 <memmove+0x24>

08005a34 <memcpy>:
 8005a34:	440a      	add	r2, r1
 8005a36:	4291      	cmp	r1, r2
 8005a38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a3c:	d100      	bne.n	8005a40 <memcpy+0xc>
 8005a3e:	4770      	bx	lr
 8005a40:	b510      	push	{r4, lr}
 8005a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a4a:	4291      	cmp	r1, r2
 8005a4c:	d1f9      	bne.n	8005a42 <memcpy+0xe>
 8005a4e:	bd10      	pop	{r4, pc}

08005a50 <__assert_func>:
 8005a50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a52:	4614      	mov	r4, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <__assert_func+0x2c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4605      	mov	r5, r0
 8005a5c:	68d8      	ldr	r0, [r3, #12]
 8005a5e:	b14c      	cbz	r4, 8005a74 <__assert_func+0x24>
 8005a60:	4b07      	ldr	r3, [pc, #28]	; (8005a80 <__assert_func+0x30>)
 8005a62:	9100      	str	r1, [sp, #0]
 8005a64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a68:	4906      	ldr	r1, [pc, #24]	; (8005a84 <__assert_func+0x34>)
 8005a6a:	462b      	mov	r3, r5
 8005a6c:	f000 f872 	bl	8005b54 <fiprintf>
 8005a70:	f000 f882 	bl	8005b78 <abort>
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <__assert_func+0x38>)
 8005a76:	461c      	mov	r4, r3
 8005a78:	e7f3      	b.n	8005a62 <__assert_func+0x12>
 8005a7a:	bf00      	nop
 8005a7c:	20000060 	.word	0x20000060
 8005a80:	080071df 	.word	0x080071df
 8005a84:	080071ec 	.word	0x080071ec
 8005a88:	0800721a 	.word	0x0800721a

08005a8c <_calloc_r>:
 8005a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a8e:	fba1 2402 	umull	r2, r4, r1, r2
 8005a92:	b94c      	cbnz	r4, 8005aa8 <_calloc_r+0x1c>
 8005a94:	4611      	mov	r1, r2
 8005a96:	9201      	str	r2, [sp, #4]
 8005a98:	f7fd fcc0 	bl	800341c <_malloc_r>
 8005a9c:	9a01      	ldr	r2, [sp, #4]
 8005a9e:	4605      	mov	r5, r0
 8005aa0:	b930      	cbnz	r0, 8005ab0 <_calloc_r+0x24>
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	b003      	add	sp, #12
 8005aa6:	bd30      	pop	{r4, r5, pc}
 8005aa8:	220c      	movs	r2, #12
 8005aaa:	6002      	str	r2, [r0, #0]
 8005aac:	2500      	movs	r5, #0
 8005aae:	e7f8      	b.n	8005aa2 <_calloc_r+0x16>
 8005ab0:	4621      	mov	r1, r4
 8005ab2:	f7fe faca 	bl	800404a <memset>
 8005ab6:	e7f4      	b.n	8005aa2 <_calloc_r+0x16>

08005ab8 <__ascii_mbtowc>:
 8005ab8:	b082      	sub	sp, #8
 8005aba:	b901      	cbnz	r1, 8005abe <__ascii_mbtowc+0x6>
 8005abc:	a901      	add	r1, sp, #4
 8005abe:	b142      	cbz	r2, 8005ad2 <__ascii_mbtowc+0x1a>
 8005ac0:	b14b      	cbz	r3, 8005ad6 <__ascii_mbtowc+0x1e>
 8005ac2:	7813      	ldrb	r3, [r2, #0]
 8005ac4:	600b      	str	r3, [r1, #0]
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	1e10      	subs	r0, r2, #0
 8005aca:	bf18      	it	ne
 8005acc:	2001      	movne	r0, #1
 8005ace:	b002      	add	sp, #8
 8005ad0:	4770      	bx	lr
 8005ad2:	4610      	mov	r0, r2
 8005ad4:	e7fb      	b.n	8005ace <__ascii_mbtowc+0x16>
 8005ad6:	f06f 0001 	mvn.w	r0, #1
 8005ada:	e7f8      	b.n	8005ace <__ascii_mbtowc+0x16>

08005adc <_realloc_r>:
 8005adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae0:	4680      	mov	r8, r0
 8005ae2:	4614      	mov	r4, r2
 8005ae4:	460e      	mov	r6, r1
 8005ae6:	b921      	cbnz	r1, 8005af2 <_realloc_r+0x16>
 8005ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005aec:	4611      	mov	r1, r2
 8005aee:	f7fd bc95 	b.w	800341c <_malloc_r>
 8005af2:	b92a      	cbnz	r2, 8005b00 <_realloc_r+0x24>
 8005af4:	f7ff f9b6 	bl	8004e64 <_free_r>
 8005af8:	4625      	mov	r5, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b00:	f000 f841 	bl	8005b86 <_malloc_usable_size_r>
 8005b04:	4284      	cmp	r4, r0
 8005b06:	4607      	mov	r7, r0
 8005b08:	d802      	bhi.n	8005b10 <_realloc_r+0x34>
 8005b0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b0e:	d812      	bhi.n	8005b36 <_realloc_r+0x5a>
 8005b10:	4621      	mov	r1, r4
 8005b12:	4640      	mov	r0, r8
 8005b14:	f7fd fc82 	bl	800341c <_malloc_r>
 8005b18:	4605      	mov	r5, r0
 8005b1a:	2800      	cmp	r0, #0
 8005b1c:	d0ed      	beq.n	8005afa <_realloc_r+0x1e>
 8005b1e:	42bc      	cmp	r4, r7
 8005b20:	4622      	mov	r2, r4
 8005b22:	4631      	mov	r1, r6
 8005b24:	bf28      	it	cs
 8005b26:	463a      	movcs	r2, r7
 8005b28:	f7ff ff84 	bl	8005a34 <memcpy>
 8005b2c:	4631      	mov	r1, r6
 8005b2e:	4640      	mov	r0, r8
 8005b30:	f7ff f998 	bl	8004e64 <_free_r>
 8005b34:	e7e1      	b.n	8005afa <_realloc_r+0x1e>
 8005b36:	4635      	mov	r5, r6
 8005b38:	e7df      	b.n	8005afa <_realloc_r+0x1e>

08005b3a <__ascii_wctomb>:
 8005b3a:	b149      	cbz	r1, 8005b50 <__ascii_wctomb+0x16>
 8005b3c:	2aff      	cmp	r2, #255	; 0xff
 8005b3e:	bf85      	ittet	hi
 8005b40:	238a      	movhi	r3, #138	; 0x8a
 8005b42:	6003      	strhi	r3, [r0, #0]
 8005b44:	700a      	strbls	r2, [r1, #0]
 8005b46:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005b4a:	bf98      	it	ls
 8005b4c:	2001      	movls	r0, #1
 8005b4e:	4770      	bx	lr
 8005b50:	4608      	mov	r0, r1
 8005b52:	4770      	bx	lr

08005b54 <fiprintf>:
 8005b54:	b40e      	push	{r1, r2, r3}
 8005b56:	b503      	push	{r0, r1, lr}
 8005b58:	4601      	mov	r1, r0
 8005b5a:	ab03      	add	r3, sp, #12
 8005b5c:	4805      	ldr	r0, [pc, #20]	; (8005b74 <fiprintf+0x20>)
 8005b5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b62:	6800      	ldr	r0, [r0, #0]
 8005b64:	9301      	str	r3, [sp, #4]
 8005b66:	f000 f83f 	bl	8005be8 <_vfiprintf_r>
 8005b6a:	b002      	add	sp, #8
 8005b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b70:	b003      	add	sp, #12
 8005b72:	4770      	bx	lr
 8005b74:	20000060 	.word	0x20000060

08005b78 <abort>:
 8005b78:	b508      	push	{r3, lr}
 8005b7a:	2006      	movs	r0, #6
 8005b7c:	f000 fa0c 	bl	8005f98 <raise>
 8005b80:	2001      	movs	r0, #1
 8005b82:	f7fc fada 	bl	800213a <_exit>

08005b86 <_malloc_usable_size_r>:
 8005b86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8a:	1f18      	subs	r0, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bfbc      	itt	lt
 8005b90:	580b      	ldrlt	r3, [r1, r0]
 8005b92:	18c0      	addlt	r0, r0, r3
 8005b94:	4770      	bx	lr

08005b96 <__sfputc_r>:
 8005b96:	6893      	ldr	r3, [r2, #8]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	b410      	push	{r4}
 8005b9e:	6093      	str	r3, [r2, #8]
 8005ba0:	da08      	bge.n	8005bb4 <__sfputc_r+0x1e>
 8005ba2:	6994      	ldr	r4, [r2, #24]
 8005ba4:	42a3      	cmp	r3, r4
 8005ba6:	db01      	blt.n	8005bac <__sfputc_r+0x16>
 8005ba8:	290a      	cmp	r1, #10
 8005baa:	d103      	bne.n	8005bb4 <__sfputc_r+0x1e>
 8005bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bb0:	f000 b934 	b.w	8005e1c <__swbuf_r>
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	1c58      	adds	r0, r3, #1
 8005bb8:	6010      	str	r0, [r2, #0]
 8005bba:	7019      	strb	r1, [r3, #0]
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <__sfputs_r>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460f      	mov	r7, r1
 8005bca:	4614      	mov	r4, r2
 8005bcc:	18d5      	adds	r5, r2, r3
 8005bce:	42ac      	cmp	r4, r5
 8005bd0:	d101      	bne.n	8005bd6 <__sfputs_r+0x12>
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	e007      	b.n	8005be6 <__sfputs_r+0x22>
 8005bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bda:	463a      	mov	r2, r7
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff ffda 	bl	8005b96 <__sfputc_r>
 8005be2:	1c43      	adds	r3, r0, #1
 8005be4:	d1f3      	bne.n	8005bce <__sfputs_r+0xa>
 8005be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005be8 <_vfiprintf_r>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	460d      	mov	r5, r1
 8005bee:	b09d      	sub	sp, #116	; 0x74
 8005bf0:	4614      	mov	r4, r2
 8005bf2:	4698      	mov	r8, r3
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	b118      	cbz	r0, 8005c00 <_vfiprintf_r+0x18>
 8005bf8:	6a03      	ldr	r3, [r0, #32]
 8005bfa:	b90b      	cbnz	r3, 8005c00 <_vfiprintf_r+0x18>
 8005bfc:	f7fe f98c 	bl	8003f18 <__sinit>
 8005c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c02:	07d9      	lsls	r1, r3, #31
 8005c04:	d405      	bmi.n	8005c12 <_vfiprintf_r+0x2a>
 8005c06:	89ab      	ldrh	r3, [r5, #12]
 8005c08:	059a      	lsls	r2, r3, #22
 8005c0a:	d402      	bmi.n	8005c12 <_vfiprintf_r+0x2a>
 8005c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c0e:	f7fe faaa 	bl	8004166 <__retarget_lock_acquire_recursive>
 8005c12:	89ab      	ldrh	r3, [r5, #12]
 8005c14:	071b      	lsls	r3, r3, #28
 8005c16:	d501      	bpl.n	8005c1c <_vfiprintf_r+0x34>
 8005c18:	692b      	ldr	r3, [r5, #16]
 8005c1a:	b99b      	cbnz	r3, 8005c44 <_vfiprintf_r+0x5c>
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f000 f93a 	bl	8005e98 <__swsetup_r>
 8005c24:	b170      	cbz	r0, 8005c44 <_vfiprintf_r+0x5c>
 8005c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c28:	07dc      	lsls	r4, r3, #31
 8005c2a:	d504      	bpl.n	8005c36 <_vfiprintf_r+0x4e>
 8005c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c30:	b01d      	add	sp, #116	; 0x74
 8005c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c36:	89ab      	ldrh	r3, [r5, #12]
 8005c38:	0598      	lsls	r0, r3, #22
 8005c3a:	d4f7      	bmi.n	8005c2c <_vfiprintf_r+0x44>
 8005c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c3e:	f7fe fa93 	bl	8004168 <__retarget_lock_release_recursive>
 8005c42:	e7f3      	b.n	8005c2c <_vfiprintf_r+0x44>
 8005c44:	2300      	movs	r3, #0
 8005c46:	9309      	str	r3, [sp, #36]	; 0x24
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c52:	2330      	movs	r3, #48	; 0x30
 8005c54:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005e08 <_vfiprintf_r+0x220>
 8005c58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c5c:	f04f 0901 	mov.w	r9, #1
 8005c60:	4623      	mov	r3, r4
 8005c62:	469a      	mov	sl, r3
 8005c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c68:	b10a      	cbz	r2, 8005c6e <_vfiprintf_r+0x86>
 8005c6a:	2a25      	cmp	r2, #37	; 0x25
 8005c6c:	d1f9      	bne.n	8005c62 <_vfiprintf_r+0x7a>
 8005c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8005c72:	d00b      	beq.n	8005c8c <_vfiprintf_r+0xa4>
 8005c74:	465b      	mov	r3, fp
 8005c76:	4622      	mov	r2, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	4630      	mov	r0, r6
 8005c7c:	f7ff ffa2 	bl	8005bc4 <__sfputs_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	f000 80a9 	beq.w	8005dd8 <_vfiprintf_r+0x1f0>
 8005c86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c88:	445a      	add	r2, fp
 8005c8a:	9209      	str	r2, [sp, #36]	; 0x24
 8005c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 80a1 	beq.w	8005dd8 <_vfiprintf_r+0x1f0>
 8005c96:	2300      	movs	r3, #0
 8005c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ca0:	f10a 0a01 	add.w	sl, sl, #1
 8005ca4:	9304      	str	r3, [sp, #16]
 8005ca6:	9307      	str	r3, [sp, #28]
 8005ca8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005cac:	931a      	str	r3, [sp, #104]	; 0x68
 8005cae:	4654      	mov	r4, sl
 8005cb0:	2205      	movs	r2, #5
 8005cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cb6:	4854      	ldr	r0, [pc, #336]	; (8005e08 <_vfiprintf_r+0x220>)
 8005cb8:	f7fa fa8a 	bl	80001d0 <memchr>
 8005cbc:	9a04      	ldr	r2, [sp, #16]
 8005cbe:	b9d8      	cbnz	r0, 8005cf8 <_vfiprintf_r+0x110>
 8005cc0:	06d1      	lsls	r1, r2, #27
 8005cc2:	bf44      	itt	mi
 8005cc4:	2320      	movmi	r3, #32
 8005cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cca:	0713      	lsls	r3, r2, #28
 8005ccc:	bf44      	itt	mi
 8005cce:	232b      	movmi	r3, #43	; 0x2b
 8005cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cda:	d015      	beq.n	8005d08 <_vfiprintf_r+0x120>
 8005cdc:	9a07      	ldr	r2, [sp, #28]
 8005cde:	4654      	mov	r4, sl
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f04f 0c0a 	mov.w	ip, #10
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005cec:	3b30      	subs	r3, #48	; 0x30
 8005cee:	2b09      	cmp	r3, #9
 8005cf0:	d94d      	bls.n	8005d8e <_vfiprintf_r+0x1a6>
 8005cf2:	b1b0      	cbz	r0, 8005d22 <_vfiprintf_r+0x13a>
 8005cf4:	9207      	str	r2, [sp, #28]
 8005cf6:	e014      	b.n	8005d22 <_vfiprintf_r+0x13a>
 8005cf8:	eba0 0308 	sub.w	r3, r0, r8
 8005cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8005d00:	4313      	orrs	r3, r2
 8005d02:	9304      	str	r3, [sp, #16]
 8005d04:	46a2      	mov	sl, r4
 8005d06:	e7d2      	b.n	8005cae <_vfiprintf_r+0xc6>
 8005d08:	9b03      	ldr	r3, [sp, #12]
 8005d0a:	1d19      	adds	r1, r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	9103      	str	r1, [sp, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	bfbb      	ittet	lt
 8005d14:	425b      	neglt	r3, r3
 8005d16:	f042 0202 	orrlt.w	r2, r2, #2
 8005d1a:	9307      	strge	r3, [sp, #28]
 8005d1c:	9307      	strlt	r3, [sp, #28]
 8005d1e:	bfb8      	it	lt
 8005d20:	9204      	strlt	r2, [sp, #16]
 8005d22:	7823      	ldrb	r3, [r4, #0]
 8005d24:	2b2e      	cmp	r3, #46	; 0x2e
 8005d26:	d10c      	bne.n	8005d42 <_vfiprintf_r+0x15a>
 8005d28:	7863      	ldrb	r3, [r4, #1]
 8005d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005d2c:	d134      	bne.n	8005d98 <_vfiprintf_r+0x1b0>
 8005d2e:	9b03      	ldr	r3, [sp, #12]
 8005d30:	1d1a      	adds	r2, r3, #4
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	9203      	str	r2, [sp, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	bfb8      	it	lt
 8005d3a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005d3e:	3402      	adds	r4, #2
 8005d40:	9305      	str	r3, [sp, #20]
 8005d42:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005e18 <_vfiprintf_r+0x230>
 8005d46:	7821      	ldrb	r1, [r4, #0]
 8005d48:	2203      	movs	r2, #3
 8005d4a:	4650      	mov	r0, sl
 8005d4c:	f7fa fa40 	bl	80001d0 <memchr>
 8005d50:	b138      	cbz	r0, 8005d62 <_vfiprintf_r+0x17a>
 8005d52:	9b04      	ldr	r3, [sp, #16]
 8005d54:	eba0 000a 	sub.w	r0, r0, sl
 8005d58:	2240      	movs	r2, #64	; 0x40
 8005d5a:	4082      	lsls	r2, r0
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	3401      	adds	r4, #1
 8005d60:	9304      	str	r3, [sp, #16]
 8005d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d66:	4829      	ldr	r0, [pc, #164]	; (8005e0c <_vfiprintf_r+0x224>)
 8005d68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d6c:	2206      	movs	r2, #6
 8005d6e:	f7fa fa2f 	bl	80001d0 <memchr>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d03f      	beq.n	8005df6 <_vfiprintf_r+0x20e>
 8005d76:	4b26      	ldr	r3, [pc, #152]	; (8005e10 <_vfiprintf_r+0x228>)
 8005d78:	bb1b      	cbnz	r3, 8005dc2 <_vfiprintf_r+0x1da>
 8005d7a:	9b03      	ldr	r3, [sp, #12]
 8005d7c:	3307      	adds	r3, #7
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	3308      	adds	r3, #8
 8005d84:	9303      	str	r3, [sp, #12]
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	443b      	add	r3, r7
 8005d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8c:	e768      	b.n	8005c60 <_vfiprintf_r+0x78>
 8005d8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d92:	460c      	mov	r4, r1
 8005d94:	2001      	movs	r0, #1
 8005d96:	e7a6      	b.n	8005ce6 <_vfiprintf_r+0xfe>
 8005d98:	2300      	movs	r3, #0
 8005d9a:	3401      	adds	r4, #1
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	f04f 0c0a 	mov.w	ip, #10
 8005da4:	4620      	mov	r0, r4
 8005da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005daa:	3a30      	subs	r2, #48	; 0x30
 8005dac:	2a09      	cmp	r2, #9
 8005dae:	d903      	bls.n	8005db8 <_vfiprintf_r+0x1d0>
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d0c6      	beq.n	8005d42 <_vfiprintf_r+0x15a>
 8005db4:	9105      	str	r1, [sp, #20]
 8005db6:	e7c4      	b.n	8005d42 <_vfiprintf_r+0x15a>
 8005db8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005dbc:	4604      	mov	r4, r0
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e7f0      	b.n	8005da4 <_vfiprintf_r+0x1bc>
 8005dc2:	ab03      	add	r3, sp, #12
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	462a      	mov	r2, r5
 8005dc8:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <_vfiprintf_r+0x22c>)
 8005dca:	a904      	add	r1, sp, #16
 8005dcc:	4630      	mov	r0, r6
 8005dce:	f7fd fc51 	bl	8003674 <_printf_float>
 8005dd2:	4607      	mov	r7, r0
 8005dd4:	1c78      	adds	r0, r7, #1
 8005dd6:	d1d6      	bne.n	8005d86 <_vfiprintf_r+0x19e>
 8005dd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dda:	07d9      	lsls	r1, r3, #31
 8005ddc:	d405      	bmi.n	8005dea <_vfiprintf_r+0x202>
 8005dde:	89ab      	ldrh	r3, [r5, #12]
 8005de0:	059a      	lsls	r2, r3, #22
 8005de2:	d402      	bmi.n	8005dea <_vfiprintf_r+0x202>
 8005de4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005de6:	f7fe f9bf 	bl	8004168 <__retarget_lock_release_recursive>
 8005dea:	89ab      	ldrh	r3, [r5, #12]
 8005dec:	065b      	lsls	r3, r3, #25
 8005dee:	f53f af1d 	bmi.w	8005c2c <_vfiprintf_r+0x44>
 8005df2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005df4:	e71c      	b.n	8005c30 <_vfiprintf_r+0x48>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <_vfiprintf_r+0x22c>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	4630      	mov	r0, r6
 8005e02:	f7fd fedb 	bl	8003bbc <_printf_i>
 8005e06:	e7e4      	b.n	8005dd2 <_vfiprintf_r+0x1ea>
 8005e08:	080071c4 	.word	0x080071c4
 8005e0c:	080071ce 	.word	0x080071ce
 8005e10:	08003675 	.word	0x08003675
 8005e14:	08005bc5 	.word	0x08005bc5
 8005e18:	080071ca 	.word	0x080071ca

08005e1c <__swbuf_r>:
 8005e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1e:	460e      	mov	r6, r1
 8005e20:	4614      	mov	r4, r2
 8005e22:	4605      	mov	r5, r0
 8005e24:	b118      	cbz	r0, 8005e2e <__swbuf_r+0x12>
 8005e26:	6a03      	ldr	r3, [r0, #32]
 8005e28:	b90b      	cbnz	r3, 8005e2e <__swbuf_r+0x12>
 8005e2a:	f7fe f875 	bl	8003f18 <__sinit>
 8005e2e:	69a3      	ldr	r3, [r4, #24]
 8005e30:	60a3      	str	r3, [r4, #8]
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	071a      	lsls	r2, r3, #28
 8005e36:	d525      	bpl.n	8005e84 <__swbuf_r+0x68>
 8005e38:	6923      	ldr	r3, [r4, #16]
 8005e3a:	b31b      	cbz	r3, 8005e84 <__swbuf_r+0x68>
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	6922      	ldr	r2, [r4, #16]
 8005e40:	1a98      	subs	r0, r3, r2
 8005e42:	6963      	ldr	r3, [r4, #20]
 8005e44:	b2f6      	uxtb	r6, r6
 8005e46:	4283      	cmp	r3, r0
 8005e48:	4637      	mov	r7, r6
 8005e4a:	dc04      	bgt.n	8005e56 <__swbuf_r+0x3a>
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f7ff fdae 	bl	80059b0 <_fflush_r>
 8005e54:	b9e0      	cbnz	r0, 8005e90 <__swbuf_r+0x74>
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	60a3      	str	r3, [r4, #8]
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	6022      	str	r2, [r4, #0]
 8005e62:	701e      	strb	r6, [r3, #0]
 8005e64:	6962      	ldr	r2, [r4, #20]
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d004      	beq.n	8005e76 <__swbuf_r+0x5a>
 8005e6c:	89a3      	ldrh	r3, [r4, #12]
 8005e6e:	07db      	lsls	r3, r3, #31
 8005e70:	d506      	bpl.n	8005e80 <__swbuf_r+0x64>
 8005e72:	2e0a      	cmp	r6, #10
 8005e74:	d104      	bne.n	8005e80 <__swbuf_r+0x64>
 8005e76:	4621      	mov	r1, r4
 8005e78:	4628      	mov	r0, r5
 8005e7a:	f7ff fd99 	bl	80059b0 <_fflush_r>
 8005e7e:	b938      	cbnz	r0, 8005e90 <__swbuf_r+0x74>
 8005e80:	4638      	mov	r0, r7
 8005e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e84:	4621      	mov	r1, r4
 8005e86:	4628      	mov	r0, r5
 8005e88:	f000 f806 	bl	8005e98 <__swsetup_r>
 8005e8c:	2800      	cmp	r0, #0
 8005e8e:	d0d5      	beq.n	8005e3c <__swbuf_r+0x20>
 8005e90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e94:	e7f4      	b.n	8005e80 <__swbuf_r+0x64>
	...

08005e98 <__swsetup_r>:
 8005e98:	b538      	push	{r3, r4, r5, lr}
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	; (8005f44 <__swsetup_r+0xac>)
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	6818      	ldr	r0, [r3, #0]
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	b118      	cbz	r0, 8005eac <__swsetup_r+0x14>
 8005ea4:	6a03      	ldr	r3, [r0, #32]
 8005ea6:	b90b      	cbnz	r3, 8005eac <__swsetup_r+0x14>
 8005ea8:	f7fe f836 	bl	8003f18 <__sinit>
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005eb2:	0718      	lsls	r0, r3, #28
 8005eb4:	d422      	bmi.n	8005efc <__swsetup_r+0x64>
 8005eb6:	06d9      	lsls	r1, r3, #27
 8005eb8:	d407      	bmi.n	8005eca <__swsetup_r+0x32>
 8005eba:	2309      	movs	r3, #9
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ec8:	e034      	b.n	8005f34 <__swsetup_r+0x9c>
 8005eca:	0758      	lsls	r0, r3, #29
 8005ecc:	d512      	bpl.n	8005ef4 <__swsetup_r+0x5c>
 8005ece:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed0:	b141      	cbz	r1, 8005ee4 <__swsetup_r+0x4c>
 8005ed2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ed6:	4299      	cmp	r1, r3
 8005ed8:	d002      	beq.n	8005ee0 <__swsetup_r+0x48>
 8005eda:	4628      	mov	r0, r5
 8005edc:	f7fe ffc2 	bl	8004e64 <_free_r>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	6363      	str	r3, [r4, #52]	; 0x34
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eea:	81a3      	strh	r3, [r4, #12]
 8005eec:	2300      	movs	r3, #0
 8005eee:	6063      	str	r3, [r4, #4]
 8005ef0:	6923      	ldr	r3, [r4, #16]
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f043 0308 	orr.w	r3, r3, #8
 8005efa:	81a3      	strh	r3, [r4, #12]
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	b94b      	cbnz	r3, 8005f14 <__swsetup_r+0x7c>
 8005f00:	89a3      	ldrh	r3, [r4, #12]
 8005f02:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0a:	d003      	beq.n	8005f14 <__swsetup_r+0x7c>
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	4628      	mov	r0, r5
 8005f10:	f000 f884 	bl	800601c <__smakebuf_r>
 8005f14:	89a0      	ldrh	r0, [r4, #12]
 8005f16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f1a:	f010 0301 	ands.w	r3, r0, #1
 8005f1e:	d00a      	beq.n	8005f36 <__swsetup_r+0x9e>
 8005f20:	2300      	movs	r3, #0
 8005f22:	60a3      	str	r3, [r4, #8]
 8005f24:	6963      	ldr	r3, [r4, #20]
 8005f26:	425b      	negs	r3, r3
 8005f28:	61a3      	str	r3, [r4, #24]
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	b943      	cbnz	r3, 8005f40 <__swsetup_r+0xa8>
 8005f2e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f32:	d1c4      	bne.n	8005ebe <__swsetup_r+0x26>
 8005f34:	bd38      	pop	{r3, r4, r5, pc}
 8005f36:	0781      	lsls	r1, r0, #30
 8005f38:	bf58      	it	pl
 8005f3a:	6963      	ldrpl	r3, [r4, #20]
 8005f3c:	60a3      	str	r3, [r4, #8]
 8005f3e:	e7f4      	b.n	8005f2a <__swsetup_r+0x92>
 8005f40:	2000      	movs	r0, #0
 8005f42:	e7f7      	b.n	8005f34 <__swsetup_r+0x9c>
 8005f44:	20000060 	.word	0x20000060

08005f48 <_raise_r>:
 8005f48:	291f      	cmp	r1, #31
 8005f4a:	b538      	push	{r3, r4, r5, lr}
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	d904      	bls.n	8005f5c <_raise_r+0x14>
 8005f52:	2316      	movs	r3, #22
 8005f54:	6003      	str	r3, [r0, #0]
 8005f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f5a:	bd38      	pop	{r3, r4, r5, pc}
 8005f5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005f5e:	b112      	cbz	r2, 8005f66 <_raise_r+0x1e>
 8005f60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f64:	b94b      	cbnz	r3, 8005f7a <_raise_r+0x32>
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 f830 	bl	8005fcc <_getpid_r>
 8005f6c:	462a      	mov	r2, r5
 8005f6e:	4601      	mov	r1, r0
 8005f70:	4620      	mov	r0, r4
 8005f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f76:	f000 b817 	b.w	8005fa8 <_kill_r>
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d00a      	beq.n	8005f94 <_raise_r+0x4c>
 8005f7e:	1c59      	adds	r1, r3, #1
 8005f80:	d103      	bne.n	8005f8a <_raise_r+0x42>
 8005f82:	2316      	movs	r3, #22
 8005f84:	6003      	str	r3, [r0, #0]
 8005f86:	2001      	movs	r0, #1
 8005f88:	e7e7      	b.n	8005f5a <_raise_r+0x12>
 8005f8a:	2400      	movs	r4, #0
 8005f8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f90:	4628      	mov	r0, r5
 8005f92:	4798      	blx	r3
 8005f94:	2000      	movs	r0, #0
 8005f96:	e7e0      	b.n	8005f5a <_raise_r+0x12>

08005f98 <raise>:
 8005f98:	4b02      	ldr	r3, [pc, #8]	; (8005fa4 <raise+0xc>)
 8005f9a:	4601      	mov	r1, r0
 8005f9c:	6818      	ldr	r0, [r3, #0]
 8005f9e:	f7ff bfd3 	b.w	8005f48 <_raise_r>
 8005fa2:	bf00      	nop
 8005fa4:	20000060 	.word	0x20000060

08005fa8 <_kill_r>:
 8005fa8:	b538      	push	{r3, r4, r5, lr}
 8005faa:	4d07      	ldr	r5, [pc, #28]	; (8005fc8 <_kill_r+0x20>)
 8005fac:	2300      	movs	r3, #0
 8005fae:	4604      	mov	r4, r0
 8005fb0:	4608      	mov	r0, r1
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	602b      	str	r3, [r5, #0]
 8005fb6:	f7fc f8b0 	bl	800211a <_kill>
 8005fba:	1c43      	adds	r3, r0, #1
 8005fbc:	d102      	bne.n	8005fc4 <_kill_r+0x1c>
 8005fbe:	682b      	ldr	r3, [r5, #0]
 8005fc0:	b103      	cbz	r3, 8005fc4 <_kill_r+0x1c>
 8005fc2:	6023      	str	r3, [r4, #0]
 8005fc4:	bd38      	pop	{r3, r4, r5, pc}
 8005fc6:	bf00      	nop
 8005fc8:	2000036c 	.word	0x2000036c

08005fcc <_getpid_r>:
 8005fcc:	f7fc b89d 	b.w	800210a <_getpid>

08005fd0 <__swhatbuf_r>:
 8005fd0:	b570      	push	{r4, r5, r6, lr}
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fd8:	2900      	cmp	r1, #0
 8005fda:	b096      	sub	sp, #88	; 0x58
 8005fdc:	4615      	mov	r5, r2
 8005fde:	461e      	mov	r6, r3
 8005fe0:	da0d      	bge.n	8005ffe <__swhatbuf_r+0x2e>
 8005fe2:	89a3      	ldrh	r3, [r4, #12]
 8005fe4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005fe8:	f04f 0100 	mov.w	r1, #0
 8005fec:	bf0c      	ite	eq
 8005fee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005ff2:	2340      	movne	r3, #64	; 0x40
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	6031      	str	r1, [r6, #0]
 8005ff8:	602b      	str	r3, [r5, #0]
 8005ffa:	b016      	add	sp, #88	; 0x58
 8005ffc:	bd70      	pop	{r4, r5, r6, pc}
 8005ffe:	466a      	mov	r2, sp
 8006000:	f000 f848 	bl	8006094 <_fstat_r>
 8006004:	2800      	cmp	r0, #0
 8006006:	dbec      	blt.n	8005fe2 <__swhatbuf_r+0x12>
 8006008:	9901      	ldr	r1, [sp, #4]
 800600a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800600e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006012:	4259      	negs	r1, r3
 8006014:	4159      	adcs	r1, r3
 8006016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800601a:	e7eb      	b.n	8005ff4 <__swhatbuf_r+0x24>

0800601c <__smakebuf_r>:
 800601c:	898b      	ldrh	r3, [r1, #12]
 800601e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006020:	079d      	lsls	r5, r3, #30
 8006022:	4606      	mov	r6, r0
 8006024:	460c      	mov	r4, r1
 8006026:	d507      	bpl.n	8006038 <__smakebuf_r+0x1c>
 8006028:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800602c:	6023      	str	r3, [r4, #0]
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	2301      	movs	r3, #1
 8006032:	6163      	str	r3, [r4, #20]
 8006034:	b002      	add	sp, #8
 8006036:	bd70      	pop	{r4, r5, r6, pc}
 8006038:	ab01      	add	r3, sp, #4
 800603a:	466a      	mov	r2, sp
 800603c:	f7ff ffc8 	bl	8005fd0 <__swhatbuf_r>
 8006040:	9900      	ldr	r1, [sp, #0]
 8006042:	4605      	mov	r5, r0
 8006044:	4630      	mov	r0, r6
 8006046:	f7fd f9e9 	bl	800341c <_malloc_r>
 800604a:	b948      	cbnz	r0, 8006060 <__smakebuf_r+0x44>
 800604c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006050:	059a      	lsls	r2, r3, #22
 8006052:	d4ef      	bmi.n	8006034 <__smakebuf_r+0x18>
 8006054:	f023 0303 	bic.w	r3, r3, #3
 8006058:	f043 0302 	orr.w	r3, r3, #2
 800605c:	81a3      	strh	r3, [r4, #12]
 800605e:	e7e3      	b.n	8006028 <__smakebuf_r+0xc>
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	6020      	str	r0, [r4, #0]
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	6163      	str	r3, [r4, #20]
 800606e:	9b01      	ldr	r3, [sp, #4]
 8006070:	6120      	str	r0, [r4, #16]
 8006072:	b15b      	cbz	r3, 800608c <__smakebuf_r+0x70>
 8006074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f81d 	bl	80060b8 <_isatty_r>
 800607e:	b128      	cbz	r0, 800608c <__smakebuf_r+0x70>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	f043 0301 	orr.w	r3, r3, #1
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	89a3      	ldrh	r3, [r4, #12]
 800608e:	431d      	orrs	r5, r3
 8006090:	81a5      	strh	r5, [r4, #12]
 8006092:	e7cf      	b.n	8006034 <__smakebuf_r+0x18>

08006094 <_fstat_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	4d07      	ldr	r5, [pc, #28]	; (80060b4 <_fstat_r+0x20>)
 8006098:	2300      	movs	r3, #0
 800609a:	4604      	mov	r4, r0
 800609c:	4608      	mov	r0, r1
 800609e:	4611      	mov	r1, r2
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	f7fc f899 	bl	80021d8 <_fstat>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	d102      	bne.n	80060b0 <_fstat_r+0x1c>
 80060aa:	682b      	ldr	r3, [r5, #0]
 80060ac:	b103      	cbz	r3, 80060b0 <_fstat_r+0x1c>
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	bd38      	pop	{r3, r4, r5, pc}
 80060b2:	bf00      	nop
 80060b4:	2000036c 	.word	0x2000036c

080060b8 <_isatty_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	4d06      	ldr	r5, [pc, #24]	; (80060d4 <_isatty_r+0x1c>)
 80060bc:	2300      	movs	r3, #0
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fc f898 	bl	80021f8 <_isatty>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_isatty_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_isatty_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	2000036c 	.word	0x2000036c

080060d8 <pow>:
 80060d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060da:	ed2d 8b02 	vpush	{d8}
 80060de:	eeb0 8a40 	vmov.f32	s16, s0
 80060e2:	eef0 8a60 	vmov.f32	s17, s1
 80060e6:	ec55 4b11 	vmov	r4, r5, d1
 80060ea:	f000 f871 	bl	80061d0 <__ieee754_pow>
 80060ee:	4622      	mov	r2, r4
 80060f0:	462b      	mov	r3, r5
 80060f2:	4620      	mov	r0, r4
 80060f4:	4629      	mov	r1, r5
 80060f6:	ec57 6b10 	vmov	r6, r7, d0
 80060fa:	f7fa fd17 	bl	8000b2c <__aeabi_dcmpun>
 80060fe:	2800      	cmp	r0, #0
 8006100:	d13b      	bne.n	800617a <pow+0xa2>
 8006102:	ec51 0b18 	vmov	r0, r1, d8
 8006106:	2200      	movs	r2, #0
 8006108:	2300      	movs	r3, #0
 800610a:	f7fa fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800610e:	b1b8      	cbz	r0, 8006140 <pow+0x68>
 8006110:	2200      	movs	r2, #0
 8006112:	2300      	movs	r3, #0
 8006114:	4620      	mov	r0, r4
 8006116:	4629      	mov	r1, r5
 8006118:	f7fa fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800611c:	2800      	cmp	r0, #0
 800611e:	d146      	bne.n	80061ae <pow+0xd6>
 8006120:	ec45 4b10 	vmov	d0, r4, r5
 8006124:	f000 f848 	bl	80061b8 <finite>
 8006128:	b338      	cbz	r0, 800617a <pow+0xa2>
 800612a:	2200      	movs	r2, #0
 800612c:	2300      	movs	r3, #0
 800612e:	4620      	mov	r0, r4
 8006130:	4629      	mov	r1, r5
 8006132:	f7fa fcd3 	bl	8000adc <__aeabi_dcmplt>
 8006136:	b300      	cbz	r0, 800617a <pow+0xa2>
 8006138:	f7fd ffea 	bl	8004110 <__errno>
 800613c:	2322      	movs	r3, #34	; 0x22
 800613e:	e01b      	b.n	8006178 <pow+0xa0>
 8006140:	ec47 6b10 	vmov	d0, r6, r7
 8006144:	f000 f838 	bl	80061b8 <finite>
 8006148:	b9e0      	cbnz	r0, 8006184 <pow+0xac>
 800614a:	eeb0 0a48 	vmov.f32	s0, s16
 800614e:	eef0 0a68 	vmov.f32	s1, s17
 8006152:	f000 f831 	bl	80061b8 <finite>
 8006156:	b1a8      	cbz	r0, 8006184 <pow+0xac>
 8006158:	ec45 4b10 	vmov	d0, r4, r5
 800615c:	f000 f82c 	bl	80061b8 <finite>
 8006160:	b180      	cbz	r0, 8006184 <pow+0xac>
 8006162:	4632      	mov	r2, r6
 8006164:	463b      	mov	r3, r7
 8006166:	4630      	mov	r0, r6
 8006168:	4639      	mov	r1, r7
 800616a:	f7fa fcdf 	bl	8000b2c <__aeabi_dcmpun>
 800616e:	2800      	cmp	r0, #0
 8006170:	d0e2      	beq.n	8006138 <pow+0x60>
 8006172:	f7fd ffcd 	bl	8004110 <__errno>
 8006176:	2321      	movs	r3, #33	; 0x21
 8006178:	6003      	str	r3, [r0, #0]
 800617a:	ecbd 8b02 	vpop	{d8}
 800617e:	ec47 6b10 	vmov	d0, r6, r7
 8006182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006184:	2200      	movs	r2, #0
 8006186:	2300      	movs	r3, #0
 8006188:	4630      	mov	r0, r6
 800618a:	4639      	mov	r1, r7
 800618c:	f7fa fc9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006190:	2800      	cmp	r0, #0
 8006192:	d0f2      	beq.n	800617a <pow+0xa2>
 8006194:	eeb0 0a48 	vmov.f32	s0, s16
 8006198:	eef0 0a68 	vmov.f32	s1, s17
 800619c:	f000 f80c 	bl	80061b8 <finite>
 80061a0:	2800      	cmp	r0, #0
 80061a2:	d0ea      	beq.n	800617a <pow+0xa2>
 80061a4:	ec45 4b10 	vmov	d0, r4, r5
 80061a8:	f000 f806 	bl	80061b8 <finite>
 80061ac:	e7c3      	b.n	8006136 <pow+0x5e>
 80061ae:	4f01      	ldr	r7, [pc, #4]	; (80061b4 <pow+0xdc>)
 80061b0:	2600      	movs	r6, #0
 80061b2:	e7e2      	b.n	800617a <pow+0xa2>
 80061b4:	3ff00000 	.word	0x3ff00000

080061b8 <finite>:
 80061b8:	b082      	sub	sp, #8
 80061ba:	ed8d 0b00 	vstr	d0, [sp]
 80061be:	9801      	ldr	r0, [sp, #4]
 80061c0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80061c4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80061c8:	0fc0      	lsrs	r0, r0, #31
 80061ca:	b002      	add	sp, #8
 80061cc:	4770      	bx	lr
	...

080061d0 <__ieee754_pow>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	ed2d 8b06 	vpush	{d8-d10}
 80061d8:	b089      	sub	sp, #36	; 0x24
 80061da:	ed8d 1b00 	vstr	d1, [sp]
 80061de:	e9dd 2900 	ldrd	r2, r9, [sp]
 80061e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80061e6:	ea58 0102 	orrs.w	r1, r8, r2
 80061ea:	ec57 6b10 	vmov	r6, r7, d0
 80061ee:	d115      	bne.n	800621c <__ieee754_pow+0x4c>
 80061f0:	19b3      	adds	r3, r6, r6
 80061f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80061f6:	4152      	adcs	r2, r2
 80061f8:	4299      	cmp	r1, r3
 80061fa:	4b89      	ldr	r3, [pc, #548]	; (8006420 <__ieee754_pow+0x250>)
 80061fc:	4193      	sbcs	r3, r2
 80061fe:	f080 84d1 	bcs.w	8006ba4 <__ieee754_pow+0x9d4>
 8006202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006206:	4630      	mov	r0, r6
 8006208:	4639      	mov	r1, r7
 800620a:	f7fa f83f 	bl	800028c <__adddf3>
 800620e:	ec41 0b10 	vmov	d0, r0, r1
 8006212:	b009      	add	sp, #36	; 0x24
 8006214:	ecbd 8b06 	vpop	{d8-d10}
 8006218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800621c:	4b81      	ldr	r3, [pc, #516]	; (8006424 <__ieee754_pow+0x254>)
 800621e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006222:	429c      	cmp	r4, r3
 8006224:	ee10 aa10 	vmov	sl, s0
 8006228:	463d      	mov	r5, r7
 800622a:	dc06      	bgt.n	800623a <__ieee754_pow+0x6a>
 800622c:	d101      	bne.n	8006232 <__ieee754_pow+0x62>
 800622e:	2e00      	cmp	r6, #0
 8006230:	d1e7      	bne.n	8006202 <__ieee754_pow+0x32>
 8006232:	4598      	cmp	r8, r3
 8006234:	dc01      	bgt.n	800623a <__ieee754_pow+0x6a>
 8006236:	d10f      	bne.n	8006258 <__ieee754_pow+0x88>
 8006238:	b172      	cbz	r2, 8006258 <__ieee754_pow+0x88>
 800623a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800623e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006242:	ea55 050a 	orrs.w	r5, r5, sl
 8006246:	d1dc      	bne.n	8006202 <__ieee754_pow+0x32>
 8006248:	e9dd 3200 	ldrd	r3, r2, [sp]
 800624c:	18db      	adds	r3, r3, r3
 800624e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006252:	4152      	adcs	r2, r2
 8006254:	429d      	cmp	r5, r3
 8006256:	e7d0      	b.n	80061fa <__ieee754_pow+0x2a>
 8006258:	2d00      	cmp	r5, #0
 800625a:	da3b      	bge.n	80062d4 <__ieee754_pow+0x104>
 800625c:	4b72      	ldr	r3, [pc, #456]	; (8006428 <__ieee754_pow+0x258>)
 800625e:	4598      	cmp	r8, r3
 8006260:	dc51      	bgt.n	8006306 <__ieee754_pow+0x136>
 8006262:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006266:	4598      	cmp	r8, r3
 8006268:	f340 84ab 	ble.w	8006bc2 <__ieee754_pow+0x9f2>
 800626c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006270:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006274:	2b14      	cmp	r3, #20
 8006276:	dd0f      	ble.n	8006298 <__ieee754_pow+0xc8>
 8006278:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800627c:	fa22 f103 	lsr.w	r1, r2, r3
 8006280:	fa01 f303 	lsl.w	r3, r1, r3
 8006284:	4293      	cmp	r3, r2
 8006286:	f040 849c 	bne.w	8006bc2 <__ieee754_pow+0x9f2>
 800628a:	f001 0101 	and.w	r1, r1, #1
 800628e:	f1c1 0302 	rsb	r3, r1, #2
 8006292:	9304      	str	r3, [sp, #16]
 8006294:	b182      	cbz	r2, 80062b8 <__ieee754_pow+0xe8>
 8006296:	e05f      	b.n	8006358 <__ieee754_pow+0x188>
 8006298:	2a00      	cmp	r2, #0
 800629a:	d15b      	bne.n	8006354 <__ieee754_pow+0x184>
 800629c:	f1c3 0314 	rsb	r3, r3, #20
 80062a0:	fa48 f103 	asr.w	r1, r8, r3
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	4543      	cmp	r3, r8
 80062aa:	f040 8487 	bne.w	8006bbc <__ieee754_pow+0x9ec>
 80062ae:	f001 0101 	and.w	r1, r1, #1
 80062b2:	f1c1 0302 	rsb	r3, r1, #2
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	4b5c      	ldr	r3, [pc, #368]	; (800642c <__ieee754_pow+0x25c>)
 80062ba:	4598      	cmp	r8, r3
 80062bc:	d132      	bne.n	8006324 <__ieee754_pow+0x154>
 80062be:	f1b9 0f00 	cmp.w	r9, #0
 80062c2:	f280 8477 	bge.w	8006bb4 <__ieee754_pow+0x9e4>
 80062c6:	4959      	ldr	r1, [pc, #356]	; (800642c <__ieee754_pow+0x25c>)
 80062c8:	4632      	mov	r2, r6
 80062ca:	463b      	mov	r3, r7
 80062cc:	2000      	movs	r0, #0
 80062ce:	f7fa fabd 	bl	800084c <__aeabi_ddiv>
 80062d2:	e79c      	b.n	800620e <__ieee754_pow+0x3e>
 80062d4:	2300      	movs	r3, #0
 80062d6:	9304      	str	r3, [sp, #16]
 80062d8:	2a00      	cmp	r2, #0
 80062da:	d13d      	bne.n	8006358 <__ieee754_pow+0x188>
 80062dc:	4b51      	ldr	r3, [pc, #324]	; (8006424 <__ieee754_pow+0x254>)
 80062de:	4598      	cmp	r8, r3
 80062e0:	d1ea      	bne.n	80062b8 <__ieee754_pow+0xe8>
 80062e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80062e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80062ea:	ea53 030a 	orrs.w	r3, r3, sl
 80062ee:	f000 8459 	beq.w	8006ba4 <__ieee754_pow+0x9d4>
 80062f2:	4b4f      	ldr	r3, [pc, #316]	; (8006430 <__ieee754_pow+0x260>)
 80062f4:	429c      	cmp	r4, r3
 80062f6:	dd08      	ble.n	800630a <__ieee754_pow+0x13a>
 80062f8:	f1b9 0f00 	cmp.w	r9, #0
 80062fc:	f2c0 8456 	blt.w	8006bac <__ieee754_pow+0x9dc>
 8006300:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006304:	e783      	b.n	800620e <__ieee754_pow+0x3e>
 8006306:	2302      	movs	r3, #2
 8006308:	e7e5      	b.n	80062d6 <__ieee754_pow+0x106>
 800630a:	f1b9 0f00 	cmp.w	r9, #0
 800630e:	f04f 0000 	mov.w	r0, #0
 8006312:	f04f 0100 	mov.w	r1, #0
 8006316:	f6bf af7a 	bge.w	800620e <__ieee754_pow+0x3e>
 800631a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800631e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006322:	e774      	b.n	800620e <__ieee754_pow+0x3e>
 8006324:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006328:	d106      	bne.n	8006338 <__ieee754_pow+0x168>
 800632a:	4632      	mov	r2, r6
 800632c:	463b      	mov	r3, r7
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	f7fa f961 	bl	80005f8 <__aeabi_dmul>
 8006336:	e76a      	b.n	800620e <__ieee754_pow+0x3e>
 8006338:	4b3e      	ldr	r3, [pc, #248]	; (8006434 <__ieee754_pow+0x264>)
 800633a:	4599      	cmp	r9, r3
 800633c:	d10c      	bne.n	8006358 <__ieee754_pow+0x188>
 800633e:	2d00      	cmp	r5, #0
 8006340:	db0a      	blt.n	8006358 <__ieee754_pow+0x188>
 8006342:	ec47 6b10 	vmov	d0, r6, r7
 8006346:	b009      	add	sp, #36	; 0x24
 8006348:	ecbd 8b06 	vpop	{d8-d10}
 800634c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006350:	f000 bd20 	b.w	8006d94 <__ieee754_sqrt>
 8006354:	2300      	movs	r3, #0
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	ec47 6b10 	vmov	d0, r6, r7
 800635c:	f000 fc62 	bl	8006c24 <fabs>
 8006360:	ec51 0b10 	vmov	r0, r1, d0
 8006364:	f1ba 0f00 	cmp.w	sl, #0
 8006368:	d129      	bne.n	80063be <__ieee754_pow+0x1ee>
 800636a:	b124      	cbz	r4, 8006376 <__ieee754_pow+0x1a6>
 800636c:	4b2f      	ldr	r3, [pc, #188]	; (800642c <__ieee754_pow+0x25c>)
 800636e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006372:	429a      	cmp	r2, r3
 8006374:	d123      	bne.n	80063be <__ieee754_pow+0x1ee>
 8006376:	f1b9 0f00 	cmp.w	r9, #0
 800637a:	da05      	bge.n	8006388 <__ieee754_pow+0x1b8>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	2000      	movs	r0, #0
 8006382:	492a      	ldr	r1, [pc, #168]	; (800642c <__ieee754_pow+0x25c>)
 8006384:	f7fa fa62 	bl	800084c <__aeabi_ddiv>
 8006388:	2d00      	cmp	r5, #0
 800638a:	f6bf af40 	bge.w	800620e <__ieee754_pow+0x3e>
 800638e:	9b04      	ldr	r3, [sp, #16]
 8006390:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006394:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006398:	431c      	orrs	r4, r3
 800639a:	d108      	bne.n	80063ae <__ieee754_pow+0x1de>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4610      	mov	r0, r2
 80063a2:	4619      	mov	r1, r3
 80063a4:	f7f9 ff70 	bl	8000288 <__aeabi_dsub>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	e78f      	b.n	80062ce <__ieee754_pow+0xfe>
 80063ae:	9b04      	ldr	r3, [sp, #16]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	f47f af2c 	bne.w	800620e <__ieee754_pow+0x3e>
 80063b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063ba:	4619      	mov	r1, r3
 80063bc:	e727      	b.n	800620e <__ieee754_pow+0x3e>
 80063be:	0feb      	lsrs	r3, r5, #31
 80063c0:	3b01      	subs	r3, #1
 80063c2:	9306      	str	r3, [sp, #24]
 80063c4:	9a06      	ldr	r2, [sp, #24]
 80063c6:	9b04      	ldr	r3, [sp, #16]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	d102      	bne.n	80063d2 <__ieee754_pow+0x202>
 80063cc:	4632      	mov	r2, r6
 80063ce:	463b      	mov	r3, r7
 80063d0:	e7e6      	b.n	80063a0 <__ieee754_pow+0x1d0>
 80063d2:	4b19      	ldr	r3, [pc, #100]	; (8006438 <__ieee754_pow+0x268>)
 80063d4:	4598      	cmp	r8, r3
 80063d6:	f340 80fb 	ble.w	80065d0 <__ieee754_pow+0x400>
 80063da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80063de:	4598      	cmp	r8, r3
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <__ieee754_pow+0x260>)
 80063e2:	dd0c      	ble.n	80063fe <__ieee754_pow+0x22e>
 80063e4:	429c      	cmp	r4, r3
 80063e6:	dc0f      	bgt.n	8006408 <__ieee754_pow+0x238>
 80063e8:	f1b9 0f00 	cmp.w	r9, #0
 80063ec:	da0f      	bge.n	800640e <__ieee754_pow+0x23e>
 80063ee:	2000      	movs	r0, #0
 80063f0:	b009      	add	sp, #36	; 0x24
 80063f2:	ecbd 8b06 	vpop	{d8-d10}
 80063f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fa:	f000 bcc2 	b.w	8006d82 <__math_oflow>
 80063fe:	429c      	cmp	r4, r3
 8006400:	dbf2      	blt.n	80063e8 <__ieee754_pow+0x218>
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <__ieee754_pow+0x25c>)
 8006404:	429c      	cmp	r4, r3
 8006406:	dd19      	ble.n	800643c <__ieee754_pow+0x26c>
 8006408:	f1b9 0f00 	cmp.w	r9, #0
 800640c:	dcef      	bgt.n	80063ee <__ieee754_pow+0x21e>
 800640e:	2000      	movs	r0, #0
 8006410:	b009      	add	sp, #36	; 0x24
 8006412:	ecbd 8b06 	vpop	{d8-d10}
 8006416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641a:	f000 bca9 	b.w	8006d70 <__math_uflow>
 800641e:	bf00      	nop
 8006420:	fff00000 	.word	0xfff00000
 8006424:	7ff00000 	.word	0x7ff00000
 8006428:	433fffff 	.word	0x433fffff
 800642c:	3ff00000 	.word	0x3ff00000
 8006430:	3fefffff 	.word	0x3fefffff
 8006434:	3fe00000 	.word	0x3fe00000
 8006438:	41e00000 	.word	0x41e00000
 800643c:	4b60      	ldr	r3, [pc, #384]	; (80065c0 <__ieee754_pow+0x3f0>)
 800643e:	2200      	movs	r2, #0
 8006440:	f7f9 ff22 	bl	8000288 <__aeabi_dsub>
 8006444:	a354      	add	r3, pc, #336	; (adr r3, 8006598 <__ieee754_pow+0x3c8>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	4604      	mov	r4, r0
 800644c:	460d      	mov	r5, r1
 800644e:	f7fa f8d3 	bl	80005f8 <__aeabi_dmul>
 8006452:	a353      	add	r3, pc, #332	; (adr r3, 80065a0 <__ieee754_pow+0x3d0>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	4606      	mov	r6, r0
 800645a:	460f      	mov	r7, r1
 800645c:	4620      	mov	r0, r4
 800645e:	4629      	mov	r1, r5
 8006460:	f7fa f8ca 	bl	80005f8 <__aeabi_dmul>
 8006464:	4b57      	ldr	r3, [pc, #348]	; (80065c4 <__ieee754_pow+0x3f4>)
 8006466:	4682      	mov	sl, r0
 8006468:	468b      	mov	fp, r1
 800646a:	2200      	movs	r2, #0
 800646c:	4620      	mov	r0, r4
 800646e:	4629      	mov	r1, r5
 8006470:	f7fa f8c2 	bl	80005f8 <__aeabi_dmul>
 8006474:	4602      	mov	r2, r0
 8006476:	460b      	mov	r3, r1
 8006478:	a14b      	add	r1, pc, #300	; (adr r1, 80065a8 <__ieee754_pow+0x3d8>)
 800647a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800647e:	f7f9 ff03 	bl	8000288 <__aeabi_dsub>
 8006482:	4622      	mov	r2, r4
 8006484:	462b      	mov	r3, r5
 8006486:	f7fa f8b7 	bl	80005f8 <__aeabi_dmul>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	2000      	movs	r0, #0
 8006490:	494d      	ldr	r1, [pc, #308]	; (80065c8 <__ieee754_pow+0x3f8>)
 8006492:	f7f9 fef9 	bl	8000288 <__aeabi_dsub>
 8006496:	4622      	mov	r2, r4
 8006498:	4680      	mov	r8, r0
 800649a:	4689      	mov	r9, r1
 800649c:	462b      	mov	r3, r5
 800649e:	4620      	mov	r0, r4
 80064a0:	4629      	mov	r1, r5
 80064a2:	f7fa f8a9 	bl	80005f8 <__aeabi_dmul>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4640      	mov	r0, r8
 80064ac:	4649      	mov	r1, r9
 80064ae:	f7fa f8a3 	bl	80005f8 <__aeabi_dmul>
 80064b2:	a33f      	add	r3, pc, #252	; (adr r3, 80065b0 <__ieee754_pow+0x3e0>)
 80064b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b8:	f7fa f89e 	bl	80005f8 <__aeabi_dmul>
 80064bc:	4602      	mov	r2, r0
 80064be:	460b      	mov	r3, r1
 80064c0:	4650      	mov	r0, sl
 80064c2:	4659      	mov	r1, fp
 80064c4:	f7f9 fee0 	bl	8000288 <__aeabi_dsub>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	4680      	mov	r8, r0
 80064ce:	4689      	mov	r9, r1
 80064d0:	4630      	mov	r0, r6
 80064d2:	4639      	mov	r1, r7
 80064d4:	f7f9 feda 	bl	800028c <__adddf3>
 80064d8:	2000      	movs	r0, #0
 80064da:	4632      	mov	r2, r6
 80064dc:	463b      	mov	r3, r7
 80064de:	4604      	mov	r4, r0
 80064e0:	460d      	mov	r5, r1
 80064e2:	f7f9 fed1 	bl	8000288 <__aeabi_dsub>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4640      	mov	r0, r8
 80064ec:	4649      	mov	r1, r9
 80064ee:	f7f9 fecb 	bl	8000288 <__aeabi_dsub>
 80064f2:	9b04      	ldr	r3, [sp, #16]
 80064f4:	9a06      	ldr	r2, [sp, #24]
 80064f6:	3b01      	subs	r3, #1
 80064f8:	4313      	orrs	r3, r2
 80064fa:	4682      	mov	sl, r0
 80064fc:	468b      	mov	fp, r1
 80064fe:	f040 81e7 	bne.w	80068d0 <__ieee754_pow+0x700>
 8006502:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80065b8 <__ieee754_pow+0x3e8>
 8006506:	eeb0 8a47 	vmov.f32	s16, s14
 800650a:	eef0 8a67 	vmov.f32	s17, s15
 800650e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006512:	2600      	movs	r6, #0
 8006514:	4632      	mov	r2, r6
 8006516:	463b      	mov	r3, r7
 8006518:	e9dd 0100 	ldrd	r0, r1, [sp]
 800651c:	f7f9 feb4 	bl	8000288 <__aeabi_dsub>
 8006520:	4622      	mov	r2, r4
 8006522:	462b      	mov	r3, r5
 8006524:	f7fa f868 	bl	80005f8 <__aeabi_dmul>
 8006528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800652c:	4680      	mov	r8, r0
 800652e:	4689      	mov	r9, r1
 8006530:	4650      	mov	r0, sl
 8006532:	4659      	mov	r1, fp
 8006534:	f7fa f860 	bl	80005f8 <__aeabi_dmul>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4640      	mov	r0, r8
 800653e:	4649      	mov	r1, r9
 8006540:	f7f9 fea4 	bl	800028c <__adddf3>
 8006544:	4632      	mov	r2, r6
 8006546:	463b      	mov	r3, r7
 8006548:	4680      	mov	r8, r0
 800654a:	4689      	mov	r9, r1
 800654c:	4620      	mov	r0, r4
 800654e:	4629      	mov	r1, r5
 8006550:	f7fa f852 	bl	80005f8 <__aeabi_dmul>
 8006554:	460b      	mov	r3, r1
 8006556:	4604      	mov	r4, r0
 8006558:	460d      	mov	r5, r1
 800655a:	4602      	mov	r2, r0
 800655c:	4649      	mov	r1, r9
 800655e:	4640      	mov	r0, r8
 8006560:	f7f9 fe94 	bl	800028c <__adddf3>
 8006564:	4b19      	ldr	r3, [pc, #100]	; (80065cc <__ieee754_pow+0x3fc>)
 8006566:	4299      	cmp	r1, r3
 8006568:	ec45 4b19 	vmov	d9, r4, r5
 800656c:	4606      	mov	r6, r0
 800656e:	460f      	mov	r7, r1
 8006570:	468b      	mov	fp, r1
 8006572:	f340 82f0 	ble.w	8006b56 <__ieee754_pow+0x986>
 8006576:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800657a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800657e:	4303      	orrs	r3, r0
 8006580:	f000 81e4 	beq.w	800694c <__ieee754_pow+0x77c>
 8006584:	ec51 0b18 	vmov	r0, r1, d8
 8006588:	2200      	movs	r2, #0
 800658a:	2300      	movs	r3, #0
 800658c:	f7fa faa6 	bl	8000adc <__aeabi_dcmplt>
 8006590:	3800      	subs	r0, #0
 8006592:	bf18      	it	ne
 8006594:	2001      	movne	r0, #1
 8006596:	e72b      	b.n	80063f0 <__ieee754_pow+0x220>
 8006598:	60000000 	.word	0x60000000
 800659c:	3ff71547 	.word	0x3ff71547
 80065a0:	f85ddf44 	.word	0xf85ddf44
 80065a4:	3e54ae0b 	.word	0x3e54ae0b
 80065a8:	55555555 	.word	0x55555555
 80065ac:	3fd55555 	.word	0x3fd55555
 80065b0:	652b82fe 	.word	0x652b82fe
 80065b4:	3ff71547 	.word	0x3ff71547
 80065b8:	00000000 	.word	0x00000000
 80065bc:	bff00000 	.word	0xbff00000
 80065c0:	3ff00000 	.word	0x3ff00000
 80065c4:	3fd00000 	.word	0x3fd00000
 80065c8:	3fe00000 	.word	0x3fe00000
 80065cc:	408fffff 	.word	0x408fffff
 80065d0:	4bd5      	ldr	r3, [pc, #852]	; (8006928 <__ieee754_pow+0x758>)
 80065d2:	402b      	ands	r3, r5
 80065d4:	2200      	movs	r2, #0
 80065d6:	b92b      	cbnz	r3, 80065e4 <__ieee754_pow+0x414>
 80065d8:	4bd4      	ldr	r3, [pc, #848]	; (800692c <__ieee754_pow+0x75c>)
 80065da:	f7fa f80d 	bl	80005f8 <__aeabi_dmul>
 80065de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80065e2:	460c      	mov	r4, r1
 80065e4:	1523      	asrs	r3, r4, #20
 80065e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80065ea:	4413      	add	r3, r2
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	4bd0      	ldr	r3, [pc, #832]	; (8006930 <__ieee754_pow+0x760>)
 80065f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80065f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80065f8:	429c      	cmp	r4, r3
 80065fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80065fe:	dd08      	ble.n	8006612 <__ieee754_pow+0x442>
 8006600:	4bcc      	ldr	r3, [pc, #816]	; (8006934 <__ieee754_pow+0x764>)
 8006602:	429c      	cmp	r4, r3
 8006604:	f340 8162 	ble.w	80068cc <__ieee754_pow+0x6fc>
 8006608:	9b05      	ldr	r3, [sp, #20]
 800660a:	3301      	adds	r3, #1
 800660c:	9305      	str	r3, [sp, #20]
 800660e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8006612:	2400      	movs	r4, #0
 8006614:	00e3      	lsls	r3, r4, #3
 8006616:	9307      	str	r3, [sp, #28]
 8006618:	4bc7      	ldr	r3, [pc, #796]	; (8006938 <__ieee754_pow+0x768>)
 800661a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800661e:	ed93 7b00 	vldr	d7, [r3]
 8006622:	4629      	mov	r1, r5
 8006624:	ec53 2b17 	vmov	r2, r3, d7
 8006628:	eeb0 9a47 	vmov.f32	s18, s14
 800662c:	eef0 9a67 	vmov.f32	s19, s15
 8006630:	4682      	mov	sl, r0
 8006632:	f7f9 fe29 	bl	8000288 <__aeabi_dsub>
 8006636:	4652      	mov	r2, sl
 8006638:	4606      	mov	r6, r0
 800663a:	460f      	mov	r7, r1
 800663c:	462b      	mov	r3, r5
 800663e:	ec51 0b19 	vmov	r0, r1, d9
 8006642:	f7f9 fe23 	bl	800028c <__adddf3>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	2000      	movs	r0, #0
 800664c:	49bb      	ldr	r1, [pc, #748]	; (800693c <__ieee754_pow+0x76c>)
 800664e:	f7fa f8fd 	bl	800084c <__aeabi_ddiv>
 8006652:	ec41 0b1a 	vmov	d10, r0, r1
 8006656:	4602      	mov	r2, r0
 8006658:	460b      	mov	r3, r1
 800665a:	4630      	mov	r0, r6
 800665c:	4639      	mov	r1, r7
 800665e:	f7f9 ffcb 	bl	80005f8 <__aeabi_dmul>
 8006662:	2300      	movs	r3, #0
 8006664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006668:	9302      	str	r3, [sp, #8]
 800666a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800666e:	46ab      	mov	fp, r5
 8006670:	106d      	asrs	r5, r5, #1
 8006672:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006676:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800667a:	ec41 0b18 	vmov	d8, r0, r1
 800667e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006682:	2200      	movs	r2, #0
 8006684:	4640      	mov	r0, r8
 8006686:	4649      	mov	r1, r9
 8006688:	4614      	mov	r4, r2
 800668a:	461d      	mov	r5, r3
 800668c:	f7f9 ffb4 	bl	80005f8 <__aeabi_dmul>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4630      	mov	r0, r6
 8006696:	4639      	mov	r1, r7
 8006698:	f7f9 fdf6 	bl	8000288 <__aeabi_dsub>
 800669c:	ec53 2b19 	vmov	r2, r3, d9
 80066a0:	4606      	mov	r6, r0
 80066a2:	460f      	mov	r7, r1
 80066a4:	4620      	mov	r0, r4
 80066a6:	4629      	mov	r1, r5
 80066a8:	f7f9 fdee 	bl	8000288 <__aeabi_dsub>
 80066ac:	4602      	mov	r2, r0
 80066ae:	460b      	mov	r3, r1
 80066b0:	4650      	mov	r0, sl
 80066b2:	4659      	mov	r1, fp
 80066b4:	f7f9 fde8 	bl	8000288 <__aeabi_dsub>
 80066b8:	4642      	mov	r2, r8
 80066ba:	464b      	mov	r3, r9
 80066bc:	f7f9 ff9c 	bl	80005f8 <__aeabi_dmul>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4630      	mov	r0, r6
 80066c6:	4639      	mov	r1, r7
 80066c8:	f7f9 fdde 	bl	8000288 <__aeabi_dsub>
 80066cc:	ec53 2b1a 	vmov	r2, r3, d10
 80066d0:	f7f9 ff92 	bl	80005f8 <__aeabi_dmul>
 80066d4:	ec53 2b18 	vmov	r2, r3, d8
 80066d8:	ec41 0b19 	vmov	d9, r0, r1
 80066dc:	ec51 0b18 	vmov	r0, r1, d8
 80066e0:	f7f9 ff8a 	bl	80005f8 <__aeabi_dmul>
 80066e4:	a37c      	add	r3, pc, #496	; (adr r3, 80068d8 <__ieee754_pow+0x708>)
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	4604      	mov	r4, r0
 80066ec:	460d      	mov	r5, r1
 80066ee:	f7f9 ff83 	bl	80005f8 <__aeabi_dmul>
 80066f2:	a37b      	add	r3, pc, #492	; (adr r3, 80068e0 <__ieee754_pow+0x710>)
 80066f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f8:	f7f9 fdc8 	bl	800028c <__adddf3>
 80066fc:	4622      	mov	r2, r4
 80066fe:	462b      	mov	r3, r5
 8006700:	f7f9 ff7a 	bl	80005f8 <__aeabi_dmul>
 8006704:	a378      	add	r3, pc, #480	; (adr r3, 80068e8 <__ieee754_pow+0x718>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f7f9 fdbf 	bl	800028c <__adddf3>
 800670e:	4622      	mov	r2, r4
 8006710:	462b      	mov	r3, r5
 8006712:	f7f9 ff71 	bl	80005f8 <__aeabi_dmul>
 8006716:	a376      	add	r3, pc, #472	; (adr r3, 80068f0 <__ieee754_pow+0x720>)
 8006718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671c:	f7f9 fdb6 	bl	800028c <__adddf3>
 8006720:	4622      	mov	r2, r4
 8006722:	462b      	mov	r3, r5
 8006724:	f7f9 ff68 	bl	80005f8 <__aeabi_dmul>
 8006728:	a373      	add	r3, pc, #460	; (adr r3, 80068f8 <__ieee754_pow+0x728>)
 800672a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672e:	f7f9 fdad 	bl	800028c <__adddf3>
 8006732:	4622      	mov	r2, r4
 8006734:	462b      	mov	r3, r5
 8006736:	f7f9 ff5f 	bl	80005f8 <__aeabi_dmul>
 800673a:	a371      	add	r3, pc, #452	; (adr r3, 8006900 <__ieee754_pow+0x730>)
 800673c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006740:	f7f9 fda4 	bl	800028c <__adddf3>
 8006744:	4622      	mov	r2, r4
 8006746:	4606      	mov	r6, r0
 8006748:	460f      	mov	r7, r1
 800674a:	462b      	mov	r3, r5
 800674c:	4620      	mov	r0, r4
 800674e:	4629      	mov	r1, r5
 8006750:	f7f9 ff52 	bl	80005f8 <__aeabi_dmul>
 8006754:	4602      	mov	r2, r0
 8006756:	460b      	mov	r3, r1
 8006758:	4630      	mov	r0, r6
 800675a:	4639      	mov	r1, r7
 800675c:	f7f9 ff4c 	bl	80005f8 <__aeabi_dmul>
 8006760:	4642      	mov	r2, r8
 8006762:	4604      	mov	r4, r0
 8006764:	460d      	mov	r5, r1
 8006766:	464b      	mov	r3, r9
 8006768:	ec51 0b18 	vmov	r0, r1, d8
 800676c:	f7f9 fd8e 	bl	800028c <__adddf3>
 8006770:	ec53 2b19 	vmov	r2, r3, d9
 8006774:	f7f9 ff40 	bl	80005f8 <__aeabi_dmul>
 8006778:	4622      	mov	r2, r4
 800677a:	462b      	mov	r3, r5
 800677c:	f7f9 fd86 	bl	800028c <__adddf3>
 8006780:	4642      	mov	r2, r8
 8006782:	4682      	mov	sl, r0
 8006784:	468b      	mov	fp, r1
 8006786:	464b      	mov	r3, r9
 8006788:	4640      	mov	r0, r8
 800678a:	4649      	mov	r1, r9
 800678c:	f7f9 ff34 	bl	80005f8 <__aeabi_dmul>
 8006790:	4b6b      	ldr	r3, [pc, #428]	; (8006940 <__ieee754_pow+0x770>)
 8006792:	2200      	movs	r2, #0
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	f7f9 fd78 	bl	800028c <__adddf3>
 800679c:	4652      	mov	r2, sl
 800679e:	465b      	mov	r3, fp
 80067a0:	f7f9 fd74 	bl	800028c <__adddf3>
 80067a4:	2000      	movs	r0, #0
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	4640      	mov	r0, r8
 80067b0:	4649      	mov	r1, r9
 80067b2:	f7f9 ff21 	bl	80005f8 <__aeabi_dmul>
 80067b6:	4b62      	ldr	r3, [pc, #392]	; (8006940 <__ieee754_pow+0x770>)
 80067b8:	4680      	mov	r8, r0
 80067ba:	4689      	mov	r9, r1
 80067bc:	2200      	movs	r2, #0
 80067be:	4620      	mov	r0, r4
 80067c0:	4629      	mov	r1, r5
 80067c2:	f7f9 fd61 	bl	8000288 <__aeabi_dsub>
 80067c6:	4632      	mov	r2, r6
 80067c8:	463b      	mov	r3, r7
 80067ca:	f7f9 fd5d 	bl	8000288 <__aeabi_dsub>
 80067ce:	4602      	mov	r2, r0
 80067d0:	460b      	mov	r3, r1
 80067d2:	4650      	mov	r0, sl
 80067d4:	4659      	mov	r1, fp
 80067d6:	f7f9 fd57 	bl	8000288 <__aeabi_dsub>
 80067da:	ec53 2b18 	vmov	r2, r3, d8
 80067de:	f7f9 ff0b 	bl	80005f8 <__aeabi_dmul>
 80067e2:	4622      	mov	r2, r4
 80067e4:	4606      	mov	r6, r0
 80067e6:	460f      	mov	r7, r1
 80067e8:	462b      	mov	r3, r5
 80067ea:	ec51 0b19 	vmov	r0, r1, d9
 80067ee:	f7f9 ff03 	bl	80005f8 <__aeabi_dmul>
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	4630      	mov	r0, r6
 80067f8:	4639      	mov	r1, r7
 80067fa:	f7f9 fd47 	bl	800028c <__adddf3>
 80067fe:	4606      	mov	r6, r0
 8006800:	460f      	mov	r7, r1
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4640      	mov	r0, r8
 8006808:	4649      	mov	r1, r9
 800680a:	f7f9 fd3f 	bl	800028c <__adddf3>
 800680e:	a33e      	add	r3, pc, #248	; (adr r3, 8006908 <__ieee754_pow+0x738>)
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	2000      	movs	r0, #0
 8006816:	4604      	mov	r4, r0
 8006818:	460d      	mov	r5, r1
 800681a:	f7f9 feed 	bl	80005f8 <__aeabi_dmul>
 800681e:	4642      	mov	r2, r8
 8006820:	ec41 0b18 	vmov	d8, r0, r1
 8006824:	464b      	mov	r3, r9
 8006826:	4620      	mov	r0, r4
 8006828:	4629      	mov	r1, r5
 800682a:	f7f9 fd2d 	bl	8000288 <__aeabi_dsub>
 800682e:	4602      	mov	r2, r0
 8006830:	460b      	mov	r3, r1
 8006832:	4630      	mov	r0, r6
 8006834:	4639      	mov	r1, r7
 8006836:	f7f9 fd27 	bl	8000288 <__aeabi_dsub>
 800683a:	a335      	add	r3, pc, #212	; (adr r3, 8006910 <__ieee754_pow+0x740>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 feda 	bl	80005f8 <__aeabi_dmul>
 8006844:	a334      	add	r3, pc, #208	; (adr r3, 8006918 <__ieee754_pow+0x748>)
 8006846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684a:	4606      	mov	r6, r0
 800684c:	460f      	mov	r7, r1
 800684e:	4620      	mov	r0, r4
 8006850:	4629      	mov	r1, r5
 8006852:	f7f9 fed1 	bl	80005f8 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4630      	mov	r0, r6
 800685c:	4639      	mov	r1, r7
 800685e:	f7f9 fd15 	bl	800028c <__adddf3>
 8006862:	9a07      	ldr	r2, [sp, #28]
 8006864:	4b37      	ldr	r3, [pc, #220]	; (8006944 <__ieee754_pow+0x774>)
 8006866:	4413      	add	r3, r2
 8006868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686c:	f7f9 fd0e 	bl	800028c <__adddf3>
 8006870:	4682      	mov	sl, r0
 8006872:	9805      	ldr	r0, [sp, #20]
 8006874:	468b      	mov	fp, r1
 8006876:	f7f9 fe55 	bl	8000524 <__aeabi_i2d>
 800687a:	9a07      	ldr	r2, [sp, #28]
 800687c:	4b32      	ldr	r3, [pc, #200]	; (8006948 <__ieee754_pow+0x778>)
 800687e:	4413      	add	r3, r2
 8006880:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006884:	4606      	mov	r6, r0
 8006886:	460f      	mov	r7, r1
 8006888:	4652      	mov	r2, sl
 800688a:	465b      	mov	r3, fp
 800688c:	ec51 0b18 	vmov	r0, r1, d8
 8006890:	f7f9 fcfc 	bl	800028c <__adddf3>
 8006894:	4642      	mov	r2, r8
 8006896:	464b      	mov	r3, r9
 8006898:	f7f9 fcf8 	bl	800028c <__adddf3>
 800689c:	4632      	mov	r2, r6
 800689e:	463b      	mov	r3, r7
 80068a0:	f7f9 fcf4 	bl	800028c <__adddf3>
 80068a4:	2000      	movs	r0, #0
 80068a6:	4632      	mov	r2, r6
 80068a8:	463b      	mov	r3, r7
 80068aa:	4604      	mov	r4, r0
 80068ac:	460d      	mov	r5, r1
 80068ae:	f7f9 fceb 	bl	8000288 <__aeabi_dsub>
 80068b2:	4642      	mov	r2, r8
 80068b4:	464b      	mov	r3, r9
 80068b6:	f7f9 fce7 	bl	8000288 <__aeabi_dsub>
 80068ba:	ec53 2b18 	vmov	r2, r3, d8
 80068be:	f7f9 fce3 	bl	8000288 <__aeabi_dsub>
 80068c2:	4602      	mov	r2, r0
 80068c4:	460b      	mov	r3, r1
 80068c6:	4650      	mov	r0, sl
 80068c8:	4659      	mov	r1, fp
 80068ca:	e610      	b.n	80064ee <__ieee754_pow+0x31e>
 80068cc:	2401      	movs	r4, #1
 80068ce:	e6a1      	b.n	8006614 <__ieee754_pow+0x444>
 80068d0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006920 <__ieee754_pow+0x750>
 80068d4:	e617      	b.n	8006506 <__ieee754_pow+0x336>
 80068d6:	bf00      	nop
 80068d8:	4a454eef 	.word	0x4a454eef
 80068dc:	3fca7e28 	.word	0x3fca7e28
 80068e0:	93c9db65 	.word	0x93c9db65
 80068e4:	3fcd864a 	.word	0x3fcd864a
 80068e8:	a91d4101 	.word	0xa91d4101
 80068ec:	3fd17460 	.word	0x3fd17460
 80068f0:	518f264d 	.word	0x518f264d
 80068f4:	3fd55555 	.word	0x3fd55555
 80068f8:	db6fabff 	.word	0xdb6fabff
 80068fc:	3fdb6db6 	.word	0x3fdb6db6
 8006900:	33333303 	.word	0x33333303
 8006904:	3fe33333 	.word	0x3fe33333
 8006908:	e0000000 	.word	0xe0000000
 800690c:	3feec709 	.word	0x3feec709
 8006910:	dc3a03fd 	.word	0xdc3a03fd
 8006914:	3feec709 	.word	0x3feec709
 8006918:	145b01f5 	.word	0x145b01f5
 800691c:	be3e2fe0 	.word	0xbe3e2fe0
 8006920:	00000000 	.word	0x00000000
 8006924:	3ff00000 	.word	0x3ff00000
 8006928:	7ff00000 	.word	0x7ff00000
 800692c:	43400000 	.word	0x43400000
 8006930:	0003988e 	.word	0x0003988e
 8006934:	000bb679 	.word	0x000bb679
 8006938:	08007320 	.word	0x08007320
 800693c:	3ff00000 	.word	0x3ff00000
 8006940:	40080000 	.word	0x40080000
 8006944:	08007340 	.word	0x08007340
 8006948:	08007330 	.word	0x08007330
 800694c:	a3b3      	add	r3, pc, #716	; (adr r3, 8006c1c <__ieee754_pow+0xa4c>)
 800694e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006952:	4640      	mov	r0, r8
 8006954:	4649      	mov	r1, r9
 8006956:	f7f9 fc99 	bl	800028c <__adddf3>
 800695a:	4622      	mov	r2, r4
 800695c:	ec41 0b1a 	vmov	d10, r0, r1
 8006960:	462b      	mov	r3, r5
 8006962:	4630      	mov	r0, r6
 8006964:	4639      	mov	r1, r7
 8006966:	f7f9 fc8f 	bl	8000288 <__aeabi_dsub>
 800696a:	4602      	mov	r2, r0
 800696c:	460b      	mov	r3, r1
 800696e:	ec51 0b1a 	vmov	r0, r1, d10
 8006972:	f7fa f8d1 	bl	8000b18 <__aeabi_dcmpgt>
 8006976:	2800      	cmp	r0, #0
 8006978:	f47f ae04 	bne.w	8006584 <__ieee754_pow+0x3b4>
 800697c:	4aa2      	ldr	r2, [pc, #648]	; (8006c08 <__ieee754_pow+0xa38>)
 800697e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006982:	4293      	cmp	r3, r2
 8006984:	f340 8107 	ble.w	8006b96 <__ieee754_pow+0x9c6>
 8006988:	151b      	asrs	r3, r3, #20
 800698a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800698e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006992:	fa4a fa03 	asr.w	sl, sl, r3
 8006996:	44da      	add	sl, fp
 8006998:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800699c:	489b      	ldr	r0, [pc, #620]	; (8006c0c <__ieee754_pow+0xa3c>)
 800699e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80069a2:	4108      	asrs	r0, r1
 80069a4:	ea00 030a 	and.w	r3, r0, sl
 80069a8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80069ac:	f1c1 0114 	rsb	r1, r1, #20
 80069b0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80069b4:	fa4a fa01 	asr.w	sl, sl, r1
 80069b8:	f1bb 0f00 	cmp.w	fp, #0
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	4620      	mov	r0, r4
 80069c2:	4629      	mov	r1, r5
 80069c4:	bfb8      	it	lt
 80069c6:	f1ca 0a00 	rsblt	sl, sl, #0
 80069ca:	f7f9 fc5d 	bl	8000288 <__aeabi_dsub>
 80069ce:	ec41 0b19 	vmov	d9, r0, r1
 80069d2:	4642      	mov	r2, r8
 80069d4:	464b      	mov	r3, r9
 80069d6:	ec51 0b19 	vmov	r0, r1, d9
 80069da:	f7f9 fc57 	bl	800028c <__adddf3>
 80069de:	a37a      	add	r3, pc, #488	; (adr r3, 8006bc8 <__ieee754_pow+0x9f8>)
 80069e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e4:	2000      	movs	r0, #0
 80069e6:	4604      	mov	r4, r0
 80069e8:	460d      	mov	r5, r1
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	ec53 2b19 	vmov	r2, r3, d9
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	4620      	mov	r0, r4
 80069f8:	4629      	mov	r1, r5
 80069fa:	f7f9 fc45 	bl	8000288 <__aeabi_dsub>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4640      	mov	r0, r8
 8006a04:	4649      	mov	r1, r9
 8006a06:	f7f9 fc3f 	bl	8000288 <__aeabi_dsub>
 8006a0a:	a371      	add	r3, pc, #452	; (adr r3, 8006bd0 <__ieee754_pow+0xa00>)
 8006a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a10:	f7f9 fdf2 	bl	80005f8 <__aeabi_dmul>
 8006a14:	a370      	add	r3, pc, #448	; (adr r3, 8006bd8 <__ieee754_pow+0xa08>)
 8006a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1a:	4680      	mov	r8, r0
 8006a1c:	4689      	mov	r9, r1
 8006a1e:	4620      	mov	r0, r4
 8006a20:	4629      	mov	r1, r5
 8006a22:	f7f9 fde9 	bl	80005f8 <__aeabi_dmul>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fc2d 	bl	800028c <__adddf3>
 8006a32:	4604      	mov	r4, r0
 8006a34:	460d      	mov	r5, r1
 8006a36:	4602      	mov	r2, r0
 8006a38:	460b      	mov	r3, r1
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	4639      	mov	r1, r7
 8006a3e:	f7f9 fc25 	bl	800028c <__adddf3>
 8006a42:	4632      	mov	r2, r6
 8006a44:	463b      	mov	r3, r7
 8006a46:	4680      	mov	r8, r0
 8006a48:	4689      	mov	r9, r1
 8006a4a:	f7f9 fc1d 	bl	8000288 <__aeabi_dsub>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	460b      	mov	r3, r1
 8006a52:	4620      	mov	r0, r4
 8006a54:	4629      	mov	r1, r5
 8006a56:	f7f9 fc17 	bl	8000288 <__aeabi_dsub>
 8006a5a:	4642      	mov	r2, r8
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	460f      	mov	r7, r1
 8006a60:	464b      	mov	r3, r9
 8006a62:	4640      	mov	r0, r8
 8006a64:	4649      	mov	r1, r9
 8006a66:	f7f9 fdc7 	bl	80005f8 <__aeabi_dmul>
 8006a6a:	a35d      	add	r3, pc, #372	; (adr r3, 8006be0 <__ieee754_pow+0xa10>)
 8006a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a70:	4604      	mov	r4, r0
 8006a72:	460d      	mov	r5, r1
 8006a74:	f7f9 fdc0 	bl	80005f8 <__aeabi_dmul>
 8006a78:	a35b      	add	r3, pc, #364	; (adr r3, 8006be8 <__ieee754_pow+0xa18>)
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	f7f9 fc03 	bl	8000288 <__aeabi_dsub>
 8006a82:	4622      	mov	r2, r4
 8006a84:	462b      	mov	r3, r5
 8006a86:	f7f9 fdb7 	bl	80005f8 <__aeabi_dmul>
 8006a8a:	a359      	add	r3, pc, #356	; (adr r3, 8006bf0 <__ieee754_pow+0xa20>)
 8006a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a90:	f7f9 fbfc 	bl	800028c <__adddf3>
 8006a94:	4622      	mov	r2, r4
 8006a96:	462b      	mov	r3, r5
 8006a98:	f7f9 fdae 	bl	80005f8 <__aeabi_dmul>
 8006a9c:	a356      	add	r3, pc, #344	; (adr r3, 8006bf8 <__ieee754_pow+0xa28>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	f7f9 fbf1 	bl	8000288 <__aeabi_dsub>
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	f7f9 fda5 	bl	80005f8 <__aeabi_dmul>
 8006aae:	a354      	add	r3, pc, #336	; (adr r3, 8006c00 <__ieee754_pow+0xa30>)
 8006ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab4:	f7f9 fbea 	bl	800028c <__adddf3>
 8006ab8:	4622      	mov	r2, r4
 8006aba:	462b      	mov	r3, r5
 8006abc:	f7f9 fd9c 	bl	80005f8 <__aeabi_dmul>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4640      	mov	r0, r8
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	f7f9 fbde 	bl	8000288 <__aeabi_dsub>
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4640      	mov	r0, r8
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	f7f9 fd8e 	bl	80005f8 <__aeabi_dmul>
 8006adc:	2200      	movs	r2, #0
 8006ade:	ec41 0b19 	vmov	d9, r0, r1
 8006ae2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	4629      	mov	r1, r5
 8006aea:	f7f9 fbcd 	bl	8000288 <__aeabi_dsub>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	ec51 0b19 	vmov	r0, r1, d9
 8006af6:	f7f9 fea9 	bl	800084c <__aeabi_ddiv>
 8006afa:	4632      	mov	r2, r6
 8006afc:	4604      	mov	r4, r0
 8006afe:	460d      	mov	r5, r1
 8006b00:	463b      	mov	r3, r7
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	f7f9 fd77 	bl	80005f8 <__aeabi_dmul>
 8006b0a:	4632      	mov	r2, r6
 8006b0c:	463b      	mov	r3, r7
 8006b0e:	f7f9 fbbd 	bl	800028c <__adddf3>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4620      	mov	r0, r4
 8006b18:	4629      	mov	r1, r5
 8006b1a:	f7f9 fbb5 	bl	8000288 <__aeabi_dsub>
 8006b1e:	4642      	mov	r2, r8
 8006b20:	464b      	mov	r3, r9
 8006b22:	f7f9 fbb1 	bl	8000288 <__aeabi_dsub>
 8006b26:	460b      	mov	r3, r1
 8006b28:	4602      	mov	r2, r0
 8006b2a:	4939      	ldr	r1, [pc, #228]	; (8006c10 <__ieee754_pow+0xa40>)
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	f7f9 fbab 	bl	8000288 <__aeabi_dsub>
 8006b32:	ec41 0b10 	vmov	d0, r0, r1
 8006b36:	ee10 3a90 	vmov	r3, s1
 8006b3a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b42:	da2b      	bge.n	8006b9c <__ieee754_pow+0x9cc>
 8006b44:	4650      	mov	r0, sl
 8006b46:	f000 f877 	bl	8006c38 <scalbn>
 8006b4a:	ec51 0b10 	vmov	r0, r1, d0
 8006b4e:	ec53 2b18 	vmov	r2, r3, d8
 8006b52:	f7ff bbee 	b.w	8006332 <__ieee754_pow+0x162>
 8006b56:	4b2f      	ldr	r3, [pc, #188]	; (8006c14 <__ieee754_pow+0xa44>)
 8006b58:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006b5c:	429e      	cmp	r6, r3
 8006b5e:	f77f af0d 	ble.w	800697c <__ieee754_pow+0x7ac>
 8006b62:	4b2d      	ldr	r3, [pc, #180]	; (8006c18 <__ieee754_pow+0xa48>)
 8006b64:	440b      	add	r3, r1
 8006b66:	4303      	orrs	r3, r0
 8006b68:	d009      	beq.n	8006b7e <__ieee754_pow+0x9ae>
 8006b6a:	ec51 0b18 	vmov	r0, r1, d8
 8006b6e:	2200      	movs	r2, #0
 8006b70:	2300      	movs	r3, #0
 8006b72:	f7f9 ffb3 	bl	8000adc <__aeabi_dcmplt>
 8006b76:	3800      	subs	r0, #0
 8006b78:	bf18      	it	ne
 8006b7a:	2001      	movne	r0, #1
 8006b7c:	e448      	b.n	8006410 <__ieee754_pow+0x240>
 8006b7e:	4622      	mov	r2, r4
 8006b80:	462b      	mov	r3, r5
 8006b82:	f7f9 fb81 	bl	8000288 <__aeabi_dsub>
 8006b86:	4642      	mov	r2, r8
 8006b88:	464b      	mov	r3, r9
 8006b8a:	f7f9 ffbb 	bl	8000b04 <__aeabi_dcmpge>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	f43f aef4 	beq.w	800697c <__ieee754_pow+0x7ac>
 8006b94:	e7e9      	b.n	8006b6a <__ieee754_pow+0x99a>
 8006b96:	f04f 0a00 	mov.w	sl, #0
 8006b9a:	e71a      	b.n	80069d2 <__ieee754_pow+0x802>
 8006b9c:	ec51 0b10 	vmov	r0, r1, d0
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	e7d4      	b.n	8006b4e <__ieee754_pow+0x97e>
 8006ba4:	491a      	ldr	r1, [pc, #104]	; (8006c10 <__ieee754_pow+0xa40>)
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	f7ff bb31 	b.w	800620e <__ieee754_pow+0x3e>
 8006bac:	2000      	movs	r0, #0
 8006bae:	2100      	movs	r1, #0
 8006bb0:	f7ff bb2d 	b.w	800620e <__ieee754_pow+0x3e>
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7ff bb29 	b.w	800620e <__ieee754_pow+0x3e>
 8006bbc:	9204      	str	r2, [sp, #16]
 8006bbe:	f7ff bb7b 	b.w	80062b8 <__ieee754_pow+0xe8>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f7ff bb65 	b.w	8006292 <__ieee754_pow+0xc2>
 8006bc8:	00000000 	.word	0x00000000
 8006bcc:	3fe62e43 	.word	0x3fe62e43
 8006bd0:	fefa39ef 	.word	0xfefa39ef
 8006bd4:	3fe62e42 	.word	0x3fe62e42
 8006bd8:	0ca86c39 	.word	0x0ca86c39
 8006bdc:	be205c61 	.word	0xbe205c61
 8006be0:	72bea4d0 	.word	0x72bea4d0
 8006be4:	3e663769 	.word	0x3e663769
 8006be8:	c5d26bf1 	.word	0xc5d26bf1
 8006bec:	3ebbbd41 	.word	0x3ebbbd41
 8006bf0:	af25de2c 	.word	0xaf25de2c
 8006bf4:	3f11566a 	.word	0x3f11566a
 8006bf8:	16bebd93 	.word	0x16bebd93
 8006bfc:	3f66c16c 	.word	0x3f66c16c
 8006c00:	5555553e 	.word	0x5555553e
 8006c04:	3fc55555 	.word	0x3fc55555
 8006c08:	3fe00000 	.word	0x3fe00000
 8006c0c:	fff00000 	.word	0xfff00000
 8006c10:	3ff00000 	.word	0x3ff00000
 8006c14:	4090cbff 	.word	0x4090cbff
 8006c18:	3f6f3400 	.word	0x3f6f3400
 8006c1c:	652b82fe 	.word	0x652b82fe
 8006c20:	3c971547 	.word	0x3c971547

08006c24 <fabs>:
 8006c24:	ec51 0b10 	vmov	r0, r1, d0
 8006c28:	ee10 2a10 	vmov	r2, s0
 8006c2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006c30:	ec43 2b10 	vmov	d0, r2, r3
 8006c34:	4770      	bx	lr
	...

08006c38 <scalbn>:
 8006c38:	b570      	push	{r4, r5, r6, lr}
 8006c3a:	ec55 4b10 	vmov	r4, r5, d0
 8006c3e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006c42:	4606      	mov	r6, r0
 8006c44:	462b      	mov	r3, r5
 8006c46:	b999      	cbnz	r1, 8006c70 <scalbn+0x38>
 8006c48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006c4c:	4323      	orrs	r3, r4
 8006c4e:	d03f      	beq.n	8006cd0 <scalbn+0x98>
 8006c50:	4b35      	ldr	r3, [pc, #212]	; (8006d28 <scalbn+0xf0>)
 8006c52:	4629      	mov	r1, r5
 8006c54:	ee10 0a10 	vmov	r0, s0
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f7f9 fccd 	bl	80005f8 <__aeabi_dmul>
 8006c5e:	4b33      	ldr	r3, [pc, #204]	; (8006d2c <scalbn+0xf4>)
 8006c60:	429e      	cmp	r6, r3
 8006c62:	4604      	mov	r4, r0
 8006c64:	460d      	mov	r5, r1
 8006c66:	da10      	bge.n	8006c8a <scalbn+0x52>
 8006c68:	a327      	add	r3, pc, #156	; (adr r3, 8006d08 <scalbn+0xd0>)
 8006c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6e:	e01f      	b.n	8006cb0 <scalbn+0x78>
 8006c70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006c74:	4291      	cmp	r1, r2
 8006c76:	d10c      	bne.n	8006c92 <scalbn+0x5a>
 8006c78:	ee10 2a10 	vmov	r2, s0
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	4629      	mov	r1, r5
 8006c80:	f7f9 fb04 	bl	800028c <__adddf3>
 8006c84:	4604      	mov	r4, r0
 8006c86:	460d      	mov	r5, r1
 8006c88:	e022      	b.n	8006cd0 <scalbn+0x98>
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006c90:	3936      	subs	r1, #54	; 0x36
 8006c92:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006c96:	4296      	cmp	r6, r2
 8006c98:	dd0d      	ble.n	8006cb6 <scalbn+0x7e>
 8006c9a:	2d00      	cmp	r5, #0
 8006c9c:	a11c      	add	r1, pc, #112	; (adr r1, 8006d10 <scalbn+0xd8>)
 8006c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ca2:	da02      	bge.n	8006caa <scalbn+0x72>
 8006ca4:	a11c      	add	r1, pc, #112	; (adr r1, 8006d18 <scalbn+0xe0>)
 8006ca6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006caa:	a319      	add	r3, pc, #100	; (adr r3, 8006d10 <scalbn+0xd8>)
 8006cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb0:	f7f9 fca2 	bl	80005f8 <__aeabi_dmul>
 8006cb4:	e7e6      	b.n	8006c84 <scalbn+0x4c>
 8006cb6:	1872      	adds	r2, r6, r1
 8006cb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006cbc:	428a      	cmp	r2, r1
 8006cbe:	dcec      	bgt.n	8006c9a <scalbn+0x62>
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	dd08      	ble.n	8006cd6 <scalbn+0x9e>
 8006cc4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006ccc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006cd0:	ec45 4b10 	vmov	d0, r4, r5
 8006cd4:	bd70      	pop	{r4, r5, r6, pc}
 8006cd6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006cda:	da08      	bge.n	8006cee <scalbn+0xb6>
 8006cdc:	2d00      	cmp	r5, #0
 8006cde:	a10a      	add	r1, pc, #40	; (adr r1, 8006d08 <scalbn+0xd0>)
 8006ce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce4:	dac0      	bge.n	8006c68 <scalbn+0x30>
 8006ce6:	a10e      	add	r1, pc, #56	; (adr r1, 8006d20 <scalbn+0xe8>)
 8006ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cec:	e7bc      	b.n	8006c68 <scalbn+0x30>
 8006cee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006cf2:	3236      	adds	r2, #54	; 0x36
 8006cf4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006cf8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4b0c      	ldr	r3, [pc, #48]	; (8006d30 <scalbn+0xf8>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	e7d5      	b.n	8006cb0 <scalbn+0x78>
 8006d04:	f3af 8000 	nop.w
 8006d08:	c2f8f359 	.word	0xc2f8f359
 8006d0c:	01a56e1f 	.word	0x01a56e1f
 8006d10:	8800759c 	.word	0x8800759c
 8006d14:	7e37e43c 	.word	0x7e37e43c
 8006d18:	8800759c 	.word	0x8800759c
 8006d1c:	fe37e43c 	.word	0xfe37e43c
 8006d20:	c2f8f359 	.word	0xc2f8f359
 8006d24:	81a56e1f 	.word	0x81a56e1f
 8006d28:	43500000 	.word	0x43500000
 8006d2c:	ffff3cb0 	.word	0xffff3cb0
 8006d30:	3c900000 	.word	0x3c900000

08006d34 <with_errno>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	4604      	mov	r4, r0
 8006d38:	460d      	mov	r5, r1
 8006d3a:	4616      	mov	r6, r2
 8006d3c:	f7fd f9e8 	bl	8004110 <__errno>
 8006d40:	4629      	mov	r1, r5
 8006d42:	6006      	str	r6, [r0, #0]
 8006d44:	4620      	mov	r0, r4
 8006d46:	bd70      	pop	{r4, r5, r6, pc}

08006d48 <xflow>:
 8006d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d4a:	4614      	mov	r4, r2
 8006d4c:	461d      	mov	r5, r3
 8006d4e:	b108      	cbz	r0, 8006d54 <xflow+0xc>
 8006d50:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006d54:	e9cd 2300 	strd	r2, r3, [sp]
 8006d58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f7f9 fc4a 	bl	80005f8 <__aeabi_dmul>
 8006d64:	2222      	movs	r2, #34	; 0x22
 8006d66:	b003      	add	sp, #12
 8006d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6c:	f7ff bfe2 	b.w	8006d34 <with_errno>

08006d70 <__math_uflow>:
 8006d70:	b508      	push	{r3, lr}
 8006d72:	2200      	movs	r2, #0
 8006d74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006d78:	f7ff ffe6 	bl	8006d48 <xflow>
 8006d7c:	ec41 0b10 	vmov	d0, r0, r1
 8006d80:	bd08      	pop	{r3, pc}

08006d82 <__math_oflow>:
 8006d82:	b508      	push	{r3, lr}
 8006d84:	2200      	movs	r2, #0
 8006d86:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8006d8a:	f7ff ffdd 	bl	8006d48 <xflow>
 8006d8e:	ec41 0b10 	vmov	d0, r0, r1
 8006d92:	bd08      	pop	{r3, pc}

08006d94 <__ieee754_sqrt>:
 8006d94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d98:	ec55 4b10 	vmov	r4, r5, d0
 8006d9c:	4e67      	ldr	r6, [pc, #412]	; (8006f3c <__ieee754_sqrt+0x1a8>)
 8006d9e:	43ae      	bics	r6, r5
 8006da0:	ee10 0a10 	vmov	r0, s0
 8006da4:	ee10 2a10 	vmov	r2, s0
 8006da8:	4629      	mov	r1, r5
 8006daa:	462b      	mov	r3, r5
 8006dac:	d10d      	bne.n	8006dca <__ieee754_sqrt+0x36>
 8006dae:	f7f9 fc23 	bl	80005f8 <__aeabi_dmul>
 8006db2:	4602      	mov	r2, r0
 8006db4:	460b      	mov	r3, r1
 8006db6:	4620      	mov	r0, r4
 8006db8:	4629      	mov	r1, r5
 8006dba:	f7f9 fa67 	bl	800028c <__adddf3>
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	460d      	mov	r5, r1
 8006dc2:	ec45 4b10 	vmov	d0, r4, r5
 8006dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dca:	2d00      	cmp	r5, #0
 8006dcc:	dc0b      	bgt.n	8006de6 <__ieee754_sqrt+0x52>
 8006dce:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006dd2:	4326      	orrs	r6, r4
 8006dd4:	d0f5      	beq.n	8006dc2 <__ieee754_sqrt+0x2e>
 8006dd6:	b135      	cbz	r5, 8006de6 <__ieee754_sqrt+0x52>
 8006dd8:	f7f9 fa56 	bl	8000288 <__aeabi_dsub>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	460b      	mov	r3, r1
 8006de0:	f7f9 fd34 	bl	800084c <__aeabi_ddiv>
 8006de4:	e7eb      	b.n	8006dbe <__ieee754_sqrt+0x2a>
 8006de6:	1509      	asrs	r1, r1, #20
 8006de8:	f000 808d 	beq.w	8006f06 <__ieee754_sqrt+0x172>
 8006dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006df0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8006df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006df8:	07c9      	lsls	r1, r1, #31
 8006dfa:	bf5c      	itt	pl
 8006dfc:	005b      	lslpl	r3, r3, #1
 8006dfe:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8006e02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e06:	bf58      	it	pl
 8006e08:	0052      	lslpl	r2, r2, #1
 8006e0a:	2500      	movs	r5, #0
 8006e0c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006e10:	1076      	asrs	r6, r6, #1
 8006e12:	0052      	lsls	r2, r2, #1
 8006e14:	f04f 0e16 	mov.w	lr, #22
 8006e18:	46ac      	mov	ip, r5
 8006e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e1e:	eb0c 0001 	add.w	r0, ip, r1
 8006e22:	4298      	cmp	r0, r3
 8006e24:	bfde      	ittt	le
 8006e26:	1a1b      	suble	r3, r3, r0
 8006e28:	eb00 0c01 	addle.w	ip, r0, r1
 8006e2c:	186d      	addle	r5, r5, r1
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	f1be 0e01 	subs.w	lr, lr, #1
 8006e34:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006e38:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006e3c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006e40:	d1ed      	bne.n	8006e1e <__ieee754_sqrt+0x8a>
 8006e42:	4674      	mov	r4, lr
 8006e44:	2720      	movs	r7, #32
 8006e46:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006e4a:	4563      	cmp	r3, ip
 8006e4c:	eb01 000e 	add.w	r0, r1, lr
 8006e50:	dc02      	bgt.n	8006e58 <__ieee754_sqrt+0xc4>
 8006e52:	d113      	bne.n	8006e7c <__ieee754_sqrt+0xe8>
 8006e54:	4290      	cmp	r0, r2
 8006e56:	d811      	bhi.n	8006e7c <__ieee754_sqrt+0xe8>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	eb00 0e01 	add.w	lr, r0, r1
 8006e5e:	da57      	bge.n	8006f10 <__ieee754_sqrt+0x17c>
 8006e60:	f1be 0f00 	cmp.w	lr, #0
 8006e64:	db54      	blt.n	8006f10 <__ieee754_sqrt+0x17c>
 8006e66:	f10c 0801 	add.w	r8, ip, #1
 8006e6a:	eba3 030c 	sub.w	r3, r3, ip
 8006e6e:	4290      	cmp	r0, r2
 8006e70:	bf88      	it	hi
 8006e72:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8006e76:	1a12      	subs	r2, r2, r0
 8006e78:	440c      	add	r4, r1
 8006e7a:	46c4      	mov	ip, r8
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	3f01      	subs	r7, #1
 8006e80:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8006e84:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006e88:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006e8c:	d1dd      	bne.n	8006e4a <__ieee754_sqrt+0xb6>
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	d01b      	beq.n	8006eca <__ieee754_sqrt+0x136>
 8006e92:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8006f40 <__ieee754_sqrt+0x1ac>
 8006e96:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8006f44 <__ieee754_sqrt+0x1b0>
 8006e9a:	e9da 0100 	ldrd	r0, r1, [sl]
 8006e9e:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ea2:	f7f9 f9f1 	bl	8000288 <__aeabi_dsub>
 8006ea6:	e9da 8900 	ldrd	r8, r9, [sl]
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	4640      	mov	r0, r8
 8006eb0:	4649      	mov	r1, r9
 8006eb2:	f7f9 fe1d 	bl	8000af0 <__aeabi_dcmple>
 8006eb6:	b140      	cbz	r0, 8006eca <__ieee754_sqrt+0x136>
 8006eb8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8006ebc:	e9da 0100 	ldrd	r0, r1, [sl]
 8006ec0:	e9db 2300 	ldrd	r2, r3, [fp]
 8006ec4:	d126      	bne.n	8006f14 <__ieee754_sqrt+0x180>
 8006ec6:	3501      	adds	r5, #1
 8006ec8:	463c      	mov	r4, r7
 8006eca:	106a      	asrs	r2, r5, #1
 8006ecc:	0863      	lsrs	r3, r4, #1
 8006ece:	07e9      	lsls	r1, r5, #31
 8006ed0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006ed4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006ed8:	bf48      	it	mi
 8006eda:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8006ede:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8006ee2:	461c      	mov	r4, r3
 8006ee4:	e76d      	b.n	8006dc2 <__ieee754_sqrt+0x2e>
 8006ee6:	0ad3      	lsrs	r3, r2, #11
 8006ee8:	3815      	subs	r0, #21
 8006eea:	0552      	lsls	r2, r2, #21
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0fa      	beq.n	8006ee6 <__ieee754_sqrt+0x152>
 8006ef0:	02dc      	lsls	r4, r3, #11
 8006ef2:	d50a      	bpl.n	8006f0a <__ieee754_sqrt+0x176>
 8006ef4:	f1c1 0420 	rsb	r4, r1, #32
 8006ef8:	fa22 f404 	lsr.w	r4, r2, r4
 8006efc:	1e4d      	subs	r5, r1, #1
 8006efe:	408a      	lsls	r2, r1
 8006f00:	4323      	orrs	r3, r4
 8006f02:	1b41      	subs	r1, r0, r5
 8006f04:	e772      	b.n	8006dec <__ieee754_sqrt+0x58>
 8006f06:	4608      	mov	r0, r1
 8006f08:	e7f0      	b.n	8006eec <__ieee754_sqrt+0x158>
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	3101      	adds	r1, #1
 8006f0e:	e7ef      	b.n	8006ef0 <__ieee754_sqrt+0x15c>
 8006f10:	46e0      	mov	r8, ip
 8006f12:	e7aa      	b.n	8006e6a <__ieee754_sqrt+0xd6>
 8006f14:	f7f9 f9ba 	bl	800028c <__adddf3>
 8006f18:	e9da 8900 	ldrd	r8, r9, [sl]
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4640      	mov	r0, r8
 8006f22:	4649      	mov	r1, r9
 8006f24:	f7f9 fdda 	bl	8000adc <__aeabi_dcmplt>
 8006f28:	b120      	cbz	r0, 8006f34 <__ieee754_sqrt+0x1a0>
 8006f2a:	1ca0      	adds	r0, r4, #2
 8006f2c:	bf08      	it	eq
 8006f2e:	3501      	addeq	r5, #1
 8006f30:	3402      	adds	r4, #2
 8006f32:	e7ca      	b.n	8006eca <__ieee754_sqrt+0x136>
 8006f34:	3401      	adds	r4, #1
 8006f36:	f024 0401 	bic.w	r4, r4, #1
 8006f3a:	e7c6      	b.n	8006eca <__ieee754_sqrt+0x136>
 8006f3c:	7ff00000 	.word	0x7ff00000
 8006f40:	200001d0 	.word	0x200001d0
 8006f44:	200001d8 	.word	0x200001d8

08006f48 <_init>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr

08006f54 <_fini>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	bf00      	nop
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr
