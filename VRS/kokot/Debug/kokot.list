
kokot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  08006258  08006258  00016258  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006604  08006604  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  08006604  08006604  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006604  08006604  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006604  08006604  00016604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006608  08006608  00016608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800660c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201d0  2**0
                  CONTENTS
 10 .bss          0000021c  200001d0  200001d0  000201d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  000201d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 14 .debug_info   00006b84  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001b89  00000000  00000000  00026dc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000908  00000000  00000000  00028950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000688  00000000  00000000  00029258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00017638  00000000  00000000  000298e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00006fc2  00000000  00000000  00040f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000771a9  00000000  00000000  00047eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003584  00000000  00000000  000bf084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  000c2608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006240 	.word	0x08006240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08006240 	.word	0x08006240

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <hts221_read_bytes>:
uint8_t slaveAddress = HTS221_I2C_ADDRESS;

void hts221_write_bytes(uint8_t reg_address, uint8_t *data,uint8_t len){
	masterWriteMultiByte(data,len, slaveAddress, reg_address);
}
void hts221_read_bytes(uint8_t reg_address, uint8_t *data,uint8_t len){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	71bb      	strb	r3, [r7, #6]
	masterReadMultiByte(data,len, slaveAddress, reg_address);
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <hts221_read_bytes+0x28>)
 8000bba:	781a      	ldrb	r2, [r3, #0]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	79b9      	ldrb	r1, [r7, #6]
 8000bc0:	6838      	ldr	r0, [r7, #0]
 8000bc2:	f000 fe23 	bl	800180c <masterReadMultiByte>
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000000 	.word	0x20000000

08000bd4 <hts221_init>:

uint8_t hts221_init(){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	uint8_t ID;
	hts221_read_bytes(HTS221_REG_WHO_AM_I, &ID, 1);
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4619      	mov	r1, r3
 8000be0:	200f      	movs	r0, #15
 8000be2:	f7ff ffe1 	bl	8000ba8 <hts221_read_bytes>
	if(ID != HTS221_WHO_AM_I_VALUE){
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2bbc      	cmp	r3, #188	; 0xbc
 8000bea:	d001      	beq.n	8000bf0 <hts221_init+0x1c>
		return 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	e088      	b.n	8000d02 <hts221_init+0x12e>
	}

	uint8_t data[2];
	hts221_read_bytes(HTS221_REG_H0_rH_x2, &data, 1);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	2030      	movs	r0, #48	; 0x30
 8000bf8:	f7ff ffd6 	bl	8000ba8 <hts221_read_bytes>
	hy0 = data[0]/2;
 8000bfc:	793b      	ldrb	r3, [r7, #4]
 8000bfe:	085b      	lsrs	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	ee07 3a90 	vmov	s15, r3
 8000c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c0a:	4b40      	ldr	r3, [pc, #256]	; (8000d0c <hts221_init+0x138>)
 8000c0c:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_rH_x2, &data, 1);
 8000c10:	1d3b      	adds	r3, r7, #4
 8000c12:	2201      	movs	r2, #1
 8000c14:	4619      	mov	r1, r3
 8000c16:	2031      	movs	r0, #49	; 0x31
 8000c18:	f7ff ffc6 	bl	8000ba8 <hts221_read_bytes>
	hy1 = data[0]/2;
 8000c1c:	793b      	ldrb	r3, [r7, #4]
 8000c1e:	085b      	lsrs	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	ee07 3a90 	vmov	s15, r3
 8000c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c2a:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <hts221_init+0x13c>)
 8000c2c:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_H0_T0_OUT_L, &data, 2);
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2202      	movs	r2, #2
 8000c34:	4619      	mov	r1, r3
 8000c36:	2036      	movs	r0, #54	; 0x36
 8000c38:	f7ff ffb6 	bl	8000ba8 <hts221_read_bytes>
	hx0 = data[1] | data[0] << 8;
 8000c3c:	797b      	ldrb	r3, [r7, #5]
 8000c3e:	461a      	mov	r2, r3
 8000c40:	793b      	ldrb	r3, [r7, #4]
 8000c42:	021b      	lsls	r3, r3, #8
 8000c44:	4313      	orrs	r3, r2
 8000c46:	ee07 3a90 	vmov	s15, r3
 8000c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4e:	4b31      	ldr	r3, [pc, #196]	; (8000d14 <hts221_init+0x140>)
 8000c50:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_H1_T0_OUT_L, &data, 2);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2202      	movs	r2, #2
 8000c58:	4619      	mov	r1, r3
 8000c5a:	203a      	movs	r0, #58	; 0x3a
 8000c5c:	f7ff ffa4 	bl	8000ba8 <hts221_read_bytes>
	hx1 = data[1] | data[0] << 8;
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	461a      	mov	r2, r3
 8000c64:	793b      	ldrb	r3, [r7, #4]
 8000c66:	021b      	lsls	r3, r3, #8
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	ee07 3a90 	vmov	s15, r3
 8000c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <hts221_init+0x144>)
 8000c74:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_degC_x8, &data, 1);
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	2032      	movs	r0, #50	; 0x32
 8000c80:	f7ff ff92 	bl	8000ba8 <hts221_read_bytes>
	ty0 = data[0]/8;
 8000c84:	793b      	ldrb	r3, [r7, #4]
 8000c86:	08db      	lsrs	r3, r3, #3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	ee07 3a90 	vmov	s15, r3
 8000c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <hts221_init+0x148>)
 8000c94:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_degC_x8, &data, 1);
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	2033      	movs	r0, #51	; 0x33
 8000ca0:	f7ff ff82 	bl	8000ba8 <hts221_read_bytes>
	ty1 = data[0]/8;
 8000ca4:	793b      	ldrb	r3, [r7, #4]
 8000ca6:	08db      	lsrs	r3, r3, #3
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	ee07 3a90 	vmov	s15, r3
 8000cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <hts221_init+0x14c>)
 8000cb4:	edc3 7a00 	vstr	s15, [r3]

	hts221_read_bytes(HTS221_REG_T0_OUT_L, &data, 2);
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	2202      	movs	r2, #2
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	203c      	movs	r0, #60	; 0x3c
 8000cc0:	f7ff ff72 	bl	8000ba8 <hts221_read_bytes>
	tx0 = data[1] | data[0] << 8;
 8000cc4:	797b      	ldrb	r3, [r7, #5]
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	793b      	ldrb	r3, [r7, #4]
 8000cca:	021b      	lsls	r3, r3, #8
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <hts221_init+0x150>)
 8000cd8:	edc3 7a00 	vstr	s15, [r3]
	hts221_read_bytes(HTS221_REG_T1_OUT_L, &data, 2);
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	203e      	movs	r0, #62	; 0x3e
 8000ce4:	f7ff ff60 	bl	8000ba8 <hts221_read_bytes>
	tx1 = data[1] | data[0] << 8;
 8000ce8:	797b      	ldrb	r3, [r7, #5]
 8000cea:	461a      	mov	r2, r3
 8000cec:	793b      	ldrb	r3, [r7, #4]
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	ee07 3a90 	vmov	s15, r3
 8000cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	; (8000d28 <hts221_init+0x154>)
 8000cfc:	edc3 7a00 	vstr	s15, [r3]
	return 1;
 8000d00:	2301      	movs	r3, #1
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000204 	.word	0x20000204
 8000d10:	20000208 	.word	0x20000208
 8000d14:	200001fc 	.word	0x200001fc
 8000d18:	20000200 	.word	0x20000200
 8000d1c:	200001f4 	.word	0x200001f4
 8000d20:	200001f8 	.word	0x200001f8
 8000d24:	200001ec 	.word	0x200001ec
 8000d28:	200001f0 	.word	0x200001f0

08000d2c <hts221_get_temperature>:
float hts221_get_temperature(){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_TEMP_OUT_L, &data, 2);
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2202      	movs	r2, #2
 8000d36:	4619      	mov	r1, r3
 8000d38:	202a      	movs	r0, #42	; 0x2a
 8000d3a:	f7ff ff35 	bl	8000ba8 <hts221_read_bytes>
	x = data[1] | data[0]<<8;
 8000d3e:	797b      	ldrb	r3, [r7, #5]
 8000d40:	b21a      	sxth	r2, r3
 8000d42:	793b      	ldrb	r3, [r7, #4]
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	b21b      	sxth	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, tx0, tx1, ty0, ty1);
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <hts221_get_temperature+0x60>)
 8000d50:	edd3 7a00 	vldr	s15, [r3]
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <hts221_get_temperature+0x64>)
 8000d56:	ed93 7a00 	vldr	s14, [r3]
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <hts221_get_temperature+0x68>)
 8000d5c:	edd3 6a00 	vldr	s13, [r3]
 8000d60:	4b0d      	ldr	r3, [pc, #52]	; (8000d98 <hts221_get_temperature+0x6c>)
 8000d62:	ed93 6a00 	vldr	s12, [r3]
 8000d66:	88fb      	ldrh	r3, [r7, #6]
 8000d68:	eef0 1a46 	vmov.f32	s3, s12
 8000d6c:	eeb0 1a66 	vmov.f32	s2, s13
 8000d70:	eef0 0a47 	vmov.f32	s1, s14
 8000d74:	eeb0 0a67 	vmov.f32	s0, s15
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f000 f847 	bl	8000e0c <linear_interpolation>
 8000d7e:	eef0 7a40 	vmov.f32	s15, s0
}
 8000d82:	eeb0 0a67 	vmov.f32	s0, s15
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200001ec 	.word	0x200001ec
 8000d90:	200001f0 	.word	0x200001f0
 8000d94:	200001f4 	.word	0x200001f4
 8000d98:	200001f8 	.word	0x200001f8

08000d9c <hts221_get_humidity>:

float hts221_get_humidity(){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
	uint8_t data[2];
	uint16_t x;
	hts221_read_bytes(HTS221_REG_HUMIDITY_OUT_L, &data, 2);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2202      	movs	r2, #2
 8000da6:	4619      	mov	r1, r3
 8000da8:	2028      	movs	r0, #40	; 0x28
 8000daa:	f7ff fefd 	bl	8000ba8 <hts221_read_bytes>
	x = data[1] | data[0]<<8;
 8000dae:	797b      	ldrb	r3, [r7, #5]
 8000db0:	b21a      	sxth	r2, r3
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	021b      	lsls	r3, r3, #8
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b21b      	sxth	r3, r3
 8000dbc:	80fb      	strh	r3, [r7, #6]
	return linear_interpolation(x, hx0, hx1, hy0, hy1);
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <hts221_get_humidity+0x60>)
 8000dc0:	edd3 7a00 	vldr	s15, [r3]
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <hts221_get_humidity+0x64>)
 8000dc6:	ed93 7a00 	vldr	s14, [r3]
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <hts221_get_humidity+0x68>)
 8000dcc:	edd3 6a00 	vldr	s13, [r3]
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <hts221_get_humidity+0x6c>)
 8000dd2:	ed93 6a00 	vldr	s12, [r3]
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	eef0 1a46 	vmov.f32	s3, s12
 8000ddc:	eeb0 1a66 	vmov.f32	s2, s13
 8000de0:	eef0 0a47 	vmov.f32	s1, s14
 8000de4:	eeb0 0a67 	vmov.f32	s0, s15
 8000de8:	4618      	mov	r0, r3
 8000dea:	f000 f80f 	bl	8000e0c <linear_interpolation>
 8000dee:	eef0 7a40 	vmov.f32	s15, s0
}
 8000df2:	eeb0 0a67 	vmov.f32	s0, s15
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200001fc 	.word	0x200001fc
 8000e00:	20000200 	.word	0x20000200
 8000e04:	20000204 	.word	0x20000204
 8000e08:	20000208 	.word	0x20000208

08000e0c <linear_interpolation>:
float linear_interpolation(uint16_t x,float x0,float x1,float y0,float y1){
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	ed87 0a04 	vstr	s0, [r7, #16]
 8000e18:	edc7 0a03 	vstr	s1, [r7, #12]
 8000e1c:	ed87 1a02 	vstr	s2, [r7, #8]
 8000e20:	edc7 1a01 	vstr	s3, [r7, #4]
 8000e24:	82fb      	strh	r3, [r7, #22]
	return (y0 + (((float)x-x0)*(y1-y0))/(x1-x0));
 8000e26:	8afb      	ldrh	r3, [r7, #22]
 8000e28:	ee07 3a90 	vmov	s15, r3
 8000e2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e30:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000e38:	edd7 6a01 	vldr	s13, [r7, #4]
 8000e3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e40:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000e44:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e48:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e58:	edd7 7a02 	vldr	s15, [r7, #8]
 8000e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000e60:	eeb0 0a67 	vmov.f32	s0, s15
 8000e64:	371c      	adds	r7, #28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f8e:	695a      	ldr	r2, [r3, #20]
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f9a:	695a      	ldr	r2, [r3, #20]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fa2:	68fb      	ldr	r3, [r7, #12]
}
 8000fa4:	bf00      	nop
 8000fa6:	3714      	adds	r7, #20
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000fb8:	2001      	movs	r0, #1
 8000fba:	f7ff ffe3 	bl	8000f84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fbe:	f7ff ff57 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ffa7 	bl	8000f1c <NVIC_EncodePriority>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	200c      	movs	r0, #12
 8000fd4:	f7ff ff78 	bl	8000ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000fd8:	200c      	movs	r0, #12
 8000fda:	f7ff ff57 	bl	8000e8c <__NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fde:	f7ff ff47 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff97 	bl	8000f1c <NVIC_EncodePriority>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	200d      	movs	r0, #13
 8000ff4:	f7ff ff68 	bl	8000ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ff8:	200d      	movs	r0, #13
 8000ffa:	f7ff ff47 	bl	8000e8c <__NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000ffe:	f7ff ff37 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8001002:	4603      	mov	r3, r0
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff87 	bl	8000f1c <NVIC_EncodePriority>
 800100e:	4603      	mov	r3, r0
 8001010:	4619      	mov	r1, r3
 8001012:	2010      	movs	r0, #16
 8001014:	f7ff ff58 	bl	8000ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001018:	2010      	movs	r0, #16
 800101a:	f7ff ff37 	bl	8000e8c <__NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800101e:	f7ff ff27 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8001022:	4603      	mov	r3, r0
 8001024:	2200      	movs	r2, #0
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff ff77 	bl	8000f1c <NVIC_EncodePriority>
 800102e:	4603      	mov	r3, r0
 8001030:	4619      	mov	r1, r3
 8001032:	2011      	movs	r0, #17
 8001034:	f7ff ff48 	bl	8000ec8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001038:	2011      	movs	r0, #17
 800103a:	f7ff ff27 	bl	8000e8c <__NVIC_EnableIRQ>

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <LL_AHB1_GRP1_EnableClock>:
{
 8001044:	b480      	push	{r7}
 8001046:	b085      	sub	sp, #20
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	4907      	ldr	r1, [pc, #28]	; (8001070 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4313      	orrs	r3, r2
 8001056:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001058:	4b05      	ldr	r3, [pc, #20]	; (8001070 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800105a:	695a      	ldr	r2, [r3, #20]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4013      	ands	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40021000 	.word	0x40021000

08001074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001078:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800107c:	f7ff ffe2 	bl	8001044 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001080:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001084:	f7ff ffde 	bl	8001044 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001088:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800108c:	f7ff ffda 	bl	8001044 <LL_AHB1_GRP1_EnableClock>

}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <__NVIC_GetPriorityGrouping>:
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	; (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	; (800113c <__NVIC_SetPriority+0x50>)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	; 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	; 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <LL_DMA_SetDataTransferDirection+0x48>)
 80011ba:	5cd3      	ldrb	r3, [r2, r3]
 80011bc:	461a      	mov	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4413      	add	r3, r2
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011c8:	f023 0310 	bic.w	r3, r3, #16
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	3a01      	subs	r2, #1
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <LL_DMA_SetDataTransferDirection+0x48>)
 80011d2:	5c8a      	ldrb	r2, [r1, r2]
 80011d4:	4611      	mov	r1, r2
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	440a      	add	r2, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	08006260 	.word	0x08006260

080011f4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	3b01      	subs	r3, #1
 8001204:	4a0c      	ldr	r2, [pc, #48]	; (8001238 <LL_DMA_SetMode+0x44>)
 8001206:	5cd3      	ldrb	r3, [r2, r3]
 8001208:	461a      	mov	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4413      	add	r3, r2
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 0220 	bic.w	r2, r3, #32
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	3b01      	subs	r3, #1
 8001218:	4907      	ldr	r1, [pc, #28]	; (8001238 <LL_DMA_SetMode+0x44>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	4619      	mov	r1, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	440b      	add	r3, r1
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	600b      	str	r3, [r1, #0]
             Mode);
}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	08006260 	.word	0x08006260

0800123c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	3b01      	subs	r3, #1
 800124c:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <LL_DMA_SetPeriphIncMode+0x44>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	461a      	mov	r2, r3
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4413      	add	r3, r2
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	3b01      	subs	r3, #1
 8001260:	4907      	ldr	r1, [pc, #28]	; (8001280 <LL_DMA_SetPeriphIncMode+0x44>)
 8001262:	5ccb      	ldrb	r3, [r1, r3]
 8001264:	4619      	mov	r1, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	440b      	add	r3, r1
 800126a:	4619      	mov	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	4313      	orrs	r3, r2
 8001270:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 8001272:	bf00      	nop
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	08006260 	.word	0x08006260

08001284 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	3b01      	subs	r3, #1
 8001294:	4a0c      	ldr	r2, [pc, #48]	; (80012c8 <LL_DMA_SetMemoryIncMode+0x44>)
 8001296:	5cd3      	ldrb	r3, [r2, r3]
 8001298:	461a      	mov	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <LL_DMA_SetMemoryIncMode+0x44>)
 80012aa:	5ccb      	ldrb	r3, [r1, r3]
 80012ac:	4619      	mov	r1, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	440b      	add	r3, r1
 80012b2:	4619      	mov	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 80012ba:	bf00      	nop
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	08006260 	.word	0x08006260

080012cc <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	60f8      	str	r0, [r7, #12]
 80012d4:	60b9      	str	r1, [r7, #8]
 80012d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	3b01      	subs	r3, #1
 80012dc:	4a0c      	ldr	r2, [pc, #48]	; (8001310 <LL_DMA_SetPeriphSize+0x44>)
 80012de:	5cd3      	ldrb	r3, [r2, r3]
 80012e0:	461a      	mov	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	4413      	add	r3, r2
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	4907      	ldr	r1, [pc, #28]	; (8001310 <LL_DMA_SetPeriphSize+0x44>)
 80012f2:	5ccb      	ldrb	r3, [r1, r3]
 80012f4:	4619      	mov	r1, r3
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	440b      	add	r3, r1
 80012fa:	4619      	mov	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	08006260 	.word	0x08006260

08001314 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <LL_DMA_SetMemorySize+0x44>)
 8001326:	5cd3      	ldrb	r3, [r2, r3]
 8001328:	461a      	mov	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4413      	add	r3, r2
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3b01      	subs	r3, #1
 8001338:	4907      	ldr	r1, [pc, #28]	; (8001358 <LL_DMA_SetMemorySize+0x44>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	4619      	mov	r1, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	440b      	add	r3, r1
 8001342:	4619      	mov	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 800134a:	bf00      	nop
 800134c:	3714      	adds	r7, #20
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	08006260 	.word	0x08006260

0800135c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	3b01      	subs	r3, #1
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	461a      	mov	r2, r3
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4413      	add	r3, r2
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	3b01      	subs	r3, #1
 8001380:	4907      	ldr	r1, [pc, #28]	; (80013a0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	4619      	mov	r1, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	440b      	add	r3, r1
 800138a:	4619      	mov	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
             Priority);
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	08006260 	.word	0x08006260

080013a4 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f043 0201 	orr.w	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	601a      	str	r2, [r3, #0]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001418:	f023 0306 	bic.w	r3, r3, #6
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	430a      	orrs	r2, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	60da      	str	r2, [r3, #12]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	68db      	ldr	r3, [r3, #12]
 8001440:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f043 0204 	orr.w	r2, r3, #4
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	601a      	str	r2, [r3, #0]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f023 0204 	bic.w	r2, r3, #4
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	601a      	str	r2, [r3, #0]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(const I2C_TypeDef *I2Cx)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	699b      	ldr	r3, [r3, #24]
 80014a0:	f003 0302 	and.w	r3, r3, #2
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d101      	bne.n	80014ac <LL_I2C_IsActiveFlag_TXIS+0x18>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_I2C_IsActiveFlag_TXIS+0x1a>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(const I2C_TypeDef *I2Cx)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	2b04      	cmp	r3, #4
 80014cc:	d101      	bne.n	80014d2 <LL_I2C_IsActiveFlag_RXNE+0x18>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80014d2:	2300      	movs	r3, #0
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(const I2C_TypeDef *I2Cx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0320 	and.w	r3, r3, #32
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	d101      	bne.n	80014f8 <LL_I2C_IsActiveFlag_STOP+0x18>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <LL_I2C_IsActiveFlag_STOP+0x1a>
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr

08001506 <LL_I2C_ClearFlag_NACK>:
  * @rmtoll ICR          NACKCF        LL_I2C_ClearFlag_NACK
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_NACK(I2C_TypeDef *I2Cx)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_NACKCF);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f043 0210 	orr.w	r2, r3, #16
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	61da      	str	r2, [r3, #28]
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f043 0220 	orr.w	r2, r3, #32
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	61da      	str	r2, [r3, #28]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001546:	b480      	push	{r7}
 8001548:	b083      	sub	sp, #12
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	605a      	str	r2, [r3, #4]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	0d5b      	lsrs	r3, r3, #21
 800157e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <LL_I2C_HandleTransfer+0x48>)
 8001584:	430b      	orrs	r3, r1
 8001586:	43db      	mvns	r3, r3
 8001588:	401a      	ands	r2, r3
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4319      	orrs	r1, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	041b      	lsls	r3, r3, #16
 8001594:	4319      	orrs	r1, r3
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4319      	orrs	r1, r3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	430b      	orrs	r3, r1
 800159e:	431a      	orrs	r2, r3
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	03ff7bff 	.word	0x03ff7bff

080015b4 <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(const I2C_TypeDef *I2Cx)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	b2db      	uxtb	r3, r3
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	460b      	mov	r3, r1
 80015d8:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_AHB1_GRP1_EnableClock>:
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001602:	695a      	ldr	r2, [r3, #20]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40021000 	.word	0x40021000

0800161c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001626:	69da      	ldr	r2, [r3, #28]
 8001628:	4907      	ldr	r1, [pc, #28]	; (8001648 <LL_APB1_GRP1_EnableClock+0x2c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4313      	orrs	r3, r2
 800162e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001630:	4b05      	ldr	r3, [pc, #20]	; (8001648 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001632:	69da      	ldr	r2, [r3, #28]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4013      	ands	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800163a:	68fb      	ldr	r3, [r7, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40021000 	.word	0x40021000

0800164c <LL_SYSCFG_SetRemapDMA_I2C>:
  *         @arg @ref LL_SYSCFG_I2C1TX_RMP_DMA1_CH2
  *         @arg @ref LL_SYSCFG_I2C1TX_RMP_DMA1_CH4
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetRemapDMA_I2C(uint32_t Remap)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (Remap >> 16U), (Remap & 0x0000FFFF));
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <LL_SYSCFG_SetRemapDMA_I2C+0x2c>)
 8001656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0c1b      	lsrs	r3, r3, #16
 800165c:	43db      	mvns	r3, r3
 800165e:	401a      	ands	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	b29b      	uxth	r3, r3
 8001664:	4904      	ldr	r1, [pc, #16]	; (8001678 <LL_SYSCFG_SetRemapDMA_I2C+0x2c>)
 8001666:	4313      	orrs	r3, r2
 8001668:	650b      	str	r3, [r1, #80]	; 0x50
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	40010000 	.word	0x40010000

0800167c <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08e      	sub	sp, #56	; 0x38
 8001680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001682:	f107 031c 	add.w	r3, r7, #28
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
 80016a4:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80016a6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80016aa:	f7ff ff9f 	bl	80015ec <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80016ae:	23c0      	movs	r3, #192	; 0xc0
 80016b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80016b2:	2302      	movs	r3, #2
 80016b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80016b6:	2303      	movs	r3, #3
 80016b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80016ba:	2301      	movs	r3, #1
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80016c2:	2304      	movs	r3, #4
 80016c4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	484a      	ldr	r0, [pc, #296]	; (80017f4 <MX_I2C1_Init+0x178>)
 80016cc:	f001 fb22 	bl	8002d14 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80016d0:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80016d4:	f7ff ffa2 	bl	800161c <LL_APB1_GRP1_EnableClock>

  /* I2C1 DMA Init */

  /* I2C1_RX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80016d8:	2200      	movs	r2, #0
 80016da:	2103      	movs	r1, #3
 80016dc:	4846      	ldr	r0, [pc, #280]	; (80017f8 <MX_I2C1_Init+0x17c>)
 80016de:	f7ff fd63 	bl	80011a8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2103      	movs	r1, #3
 80016e6:	4844      	ldr	r0, [pc, #272]	; (80017f8 <MX_I2C1_Init+0x17c>)
 80016e8:	f7ff fe38 	bl	800135c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2103      	movs	r1, #3
 80016f0:	4841      	ldr	r0, [pc, #260]	; (80017f8 <MX_I2C1_Init+0x17c>)
 80016f2:	f7ff fd7f 	bl	80011f4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2103      	movs	r1, #3
 80016fa:	483f      	ldr	r0, [pc, #252]	; (80017f8 <MX_I2C1_Init+0x17c>)
 80016fc:	f7ff fd9e 	bl	800123c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8001700:	2280      	movs	r2, #128	; 0x80
 8001702:	2103      	movs	r1, #3
 8001704:	483c      	ldr	r0, [pc, #240]	; (80017f8 <MX_I2C1_Init+0x17c>)
 8001706:	f7ff fdbd 	bl	8001284 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 800170a:	2200      	movs	r2, #0
 800170c:	2103      	movs	r1, #3
 800170e:	483a      	ldr	r0, [pc, #232]	; (80017f8 <MX_I2C1_Init+0x17c>)
 8001710:	f7ff fddc 	bl	80012cc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8001714:	2200      	movs	r2, #0
 8001716:	2103      	movs	r1, #3
 8001718:	4837      	ldr	r0, [pc, #220]	; (80017f8 <MX_I2C1_Init+0x17c>)
 800171a:	f7ff fdfb 	bl	8001314 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_I2C(LL_SYSCFG_I2C1RX_RMP_DMA1_CH3);
 800171e:	4837      	ldr	r0, [pc, #220]	; (80017fc <MX_I2C1_Init+0x180>)
 8001720:	f7ff ff94 	bl	800164c <LL_SYSCFG_SetRemapDMA_I2C>

  /* I2C1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8001724:	2210      	movs	r2, #16
 8001726:	2102      	movs	r1, #2
 8001728:	4833      	ldr	r0, [pc, #204]	; (80017f8 <MX_I2C1_Init+0x17c>)
 800172a:	f7ff fd3d 	bl	80011a8 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800172e:	2200      	movs	r2, #0
 8001730:	2102      	movs	r1, #2
 8001732:	4831      	ldr	r0, [pc, #196]	; (80017f8 <MX_I2C1_Init+0x17c>)
 8001734:	f7ff fe12 	bl	800135c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8001738:	2200      	movs	r2, #0
 800173a:	2102      	movs	r1, #2
 800173c:	482e      	ldr	r0, [pc, #184]	; (80017f8 <MX_I2C1_Init+0x17c>)
 800173e:	f7ff fd59 	bl	80011f4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8001742:	2200      	movs	r2, #0
 8001744:	2102      	movs	r1, #2
 8001746:	482c      	ldr	r0, [pc, #176]	; (80017f8 <MX_I2C1_Init+0x17c>)
 8001748:	f7ff fd78 	bl	800123c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 800174c:	2280      	movs	r2, #128	; 0x80
 800174e:	2102      	movs	r1, #2
 8001750:	4829      	ldr	r0, [pc, #164]	; (80017f8 <MX_I2C1_Init+0x17c>)
 8001752:	f7ff fd97 	bl	8001284 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8001756:	2200      	movs	r2, #0
 8001758:	2102      	movs	r1, #2
 800175a:	4827      	ldr	r0, [pc, #156]	; (80017f8 <MX_I2C1_Init+0x17c>)
 800175c:	f7ff fdb6 	bl	80012cc <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8001760:	2200      	movs	r2, #0
 8001762:	2102      	movs	r1, #2
 8001764:	4824      	ldr	r0, [pc, #144]	; (80017f8 <MX_I2C1_Init+0x17c>)
 8001766:	f7ff fdd5 	bl	8001314 <LL_DMA_SetMemorySize>

  LL_SYSCFG_SetRemapDMA_I2C(LL_SYSCFG_I2C1TX_RMP_DMA1_CH2);
 800176a:	4825      	ldr	r0, [pc, #148]	; (8001800 <MX_I2C1_Init+0x184>)
 800176c:	f7ff ff6e 	bl	800164c <LL_SYSCFG_SetRemapDMA_I2C>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001770:	f7ff fc90 	bl	8001094 <__NVIC_GetPriorityGrouping>
 8001774:	4603      	mov	r3, r0
 8001776:	2200      	movs	r2, #0
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fce0 	bl	8001140 <NVIC_EncodePriority>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	201f      	movs	r0, #31
 8001786:	f7ff fcb1 	bl	80010ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800178a:	201f      	movs	r0, #31
 800178c:	f7ff fc90 	bl	80010b0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN I2C1_Init 1 */
  GPIOB->ODR |= (0b11 << 6);
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_I2C1_Init+0x178>)
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <MX_I2C1_Init+0x178>)
 8001796:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800179a:	6153      	str	r3, [r2, #20]

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 800179c:	4819      	ldr	r0, [pc, #100]	; (8001804 <MX_I2C1_Init+0x188>)
 800179e:	f7ff fed2 	bl	8001546 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 80017a2:	4818      	ldr	r0, [pc, #96]	; (8001804 <MX_I2C1_Init+0x188>)
 80017a4:	f7ff fe46 	bl	8001434 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80017a8:	4816      	ldr	r0, [pc, #88]	; (8001804 <MX_I2C1_Init+0x188>)
 80017aa:	f7ff fe1b 	bl	80013e4 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80017ae:	4815      	ldr	r0, [pc, #84]	; (8001804 <MX_I2C1_Init+0x188>)
 80017b0:	f7ff fe08 	bl	80013c4 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_I2C1_Init+0x18c>)
 80017ba:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80017bc:	2300      	movs	r3, #0
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80017c8:	2300      	movs	r3, #0
 80017ca:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80017cc:	2300      	movs	r3, #0
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	480b      	ldr	r0, [pc, #44]	; (8001804 <MX_I2C1_Init+0x188>)
 80017d8:	f001 fbaf 	bl	8002f3a <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80017dc:	2200      	movs	r2, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	4808      	ldr	r0, [pc, #32]	; (8001804 <MX_I2C1_Init+0x188>)
 80017e2:	f7ff fe0f 	bl	8001404 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */
  LL_I2C_Enable(I2C1);
 80017e6:	4807      	ldr	r0, [pc, #28]	; (8001804 <MX_I2C1_Init+0x188>)
 80017e8:	f7ff fddc 	bl	80013a4 <LL_I2C_Enable>
  /* USER CODE END I2C1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3738      	adds	r7, #56	; 0x38
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	48000400 	.word	0x48000400
 80017f8:	40020000 	.word	0x40020000
 80017fc:	00300010 	.word	0x00300010
 8001800:	00c00040 	.word	0x00c00040
 8001804:	40005400 	.word	0x40005400
 8001808:	2000090e 	.word	0x2000090e

0800180c <masterReadMultiByte>:

/* USER CODE BEGIN 1 */
void masterReadMultiByte(uint8_t *data,uint8_t len, uint8_t slaveAddress, uint8_t registerAddress){
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af02      	add	r7, sp, #8
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4603      	mov	r3, r0
 800181c:	70fb      	strb	r3, [r7, #3]
 800181e:	460b      	mov	r3, r1
 8001820:	70bb      	strb	r3, [r7, #2]
 8001822:	4613      	mov	r3, r2
 8001824:	707b      	strb	r3, [r7, #1]
		aReceiveBuffer_read = data;
 8001826:	4a27      	ldr	r2, [pc, #156]	; (80018c4 <masterReadMultiByte+0xb8>)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6013      	str	r3, [r2, #0]

		LL_I2C_EnableIT_RX(I2C1);
 800182c:	4826      	ldr	r0, [pc, #152]	; (80018c8 <masterReadMultiByte+0xbc>)
 800182e:	f7ff fe11 	bl	8001454 <LL_I2C_EnableIT_RX>

		LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001832:	78b9      	ldrb	r1, [r7, #2]
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <masterReadMultiByte+0xc0>)
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800183c:	9300      	str	r3, [sp, #0]
 800183e:	2301      	movs	r3, #1
 8001840:	2200      	movs	r2, #0
 8001842:	4821      	ldr	r0, [pc, #132]	; (80018c8 <masterReadMultiByte+0xbc>)
 8001844:	f7ff fe90 	bl	8001568 <LL_I2C_HandleTransfer>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001848:	e00a      	b.n	8001860 <masterReadMultiByte+0x54>
		{
			if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 800184a:	481f      	ldr	r0, [pc, #124]	; (80018c8 <masterReadMultiByte+0xbc>)
 800184c:	f7ff fe22 	bl	8001494 <LL_I2C_IsActiveFlag_TXIS>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d004      	beq.n	8001860 <masterReadMultiByte+0x54>
			{
				LL_I2C_TransmitData8(I2C1, registerAddress);
 8001856:	787b      	ldrb	r3, [r7, #1]
 8001858:	4619      	mov	r1, r3
 800185a:	481b      	ldr	r0, [pc, #108]	; (80018c8 <masterReadMultiByte+0xbc>)
 800185c:	f7ff feb7 	bl	80015ce <LL_I2C_TransmitData8>
		while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001860:	4819      	ldr	r0, [pc, #100]	; (80018c8 <masterReadMultiByte+0xbc>)
 8001862:	f7ff fe3d 	bl	80014e0 <LL_I2C_IsActiveFlag_STOP>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ee      	beq.n	800184a <masterReadMultiByte+0x3e>
			}
		}
		LL_I2C_ClearFlag_STOP(I2C1);
 800186c:	4816      	ldr	r0, [pc, #88]	; (80018c8 <masterReadMultiByte+0xbc>)
 800186e:	f7ff fe5a 	bl	8001526 <LL_I2C_ClearFlag_STOP>
		while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 8001872:	bf00      	nop
 8001874:	4814      	ldr	r0, [pc, #80]	; (80018c8 <masterReadMultiByte+0xbc>)
 8001876:	f7ff fe33 	bl	80014e0 <LL_I2C_IsActiveFlag_STOP>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1f9      	bne.n	8001874 <masterReadMultiByte+0x68>

		LL_I2C_HandleTransfer(I2C1, slaveAddress, LL_I2C_ADDRSLAVE_7BIT, len, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 8001880:	78b9      	ldrb	r1, [r7, #2]
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <masterReadMultiByte+0xc4>)
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800188c:	9200      	str	r2, [sp, #0]
 800188e:	2200      	movs	r2, #0
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <masterReadMultiByte+0xbc>)
 8001892:	f7ff fe69 	bl	8001568 <LL_I2C_HandleTransfer>

		while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 8001896:	bf00      	nop
 8001898:	480b      	ldr	r0, [pc, #44]	; (80018c8 <masterReadMultiByte+0xbc>)
 800189a:	f7ff fe21 	bl	80014e0 <LL_I2C_IsActiveFlag_STOP>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f9      	beq.n	8001898 <masterReadMultiByte+0x8c>

		//End of transfer
		LL_I2C_ClearFlag_STOP(I2C1);
 80018a4:	4808      	ldr	r0, [pc, #32]	; (80018c8 <masterReadMultiByte+0xbc>)
 80018a6:	f7ff fe3e 	bl	8001526 <LL_I2C_ClearFlag_STOP>
		LL_I2C_DisableIT_RX(I2C1);
 80018aa:	4807      	ldr	r0, [pc, #28]	; (80018c8 <masterReadMultiByte+0xbc>)
 80018ac:	f7ff fde2 	bl	8001474 <LL_I2C_DisableIT_RX>

		LL_I2C_ClearFlag_NACK(I2C1);
 80018b0:	4805      	ldr	r0, [pc, #20]	; (80018c8 <masterReadMultiByte+0xbc>)
 80018b2:	f7ff fe28 	bl	8001506 <LL_I2C_ClearFlag_NACK>
		ubReceiveIndex = 0;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <masterReadMultiByte+0xc8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000020c 	.word	0x2000020c
 80018c8:	40005400 	.word	0x40005400
 80018cc:	80002000 	.word	0x80002000
 80018d0:	80002400 	.word	0x80002400
 80018d4:	20000210 	.word	0x20000210

080018d8 <I2C_IRQHandler>:
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
}

void I2C_IRQHandler(){
 80018d8:	b598      	push	{r3, r4, r7, lr}
 80018da:	af00      	add	r7, sp, #0
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 80018dc:	4810      	ldr	r0, [pc, #64]	; (8001920 <I2C_IRQHandler+0x48>)
 80018de:	f7ff fdec 	bl	80014ba <LL_I2C_IsActiveFlag_RXNE>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d019      	beq.n	800191c <I2C_IRQHandler+0x44>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 80018e8:	4b0e      	ldr	r3, [pc, #56]	; (8001924 <I2C_IRQHandler+0x4c>)
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <I2C_IRQHandler+0x50>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	1c59      	adds	r1, r3, #1
 80018f4:	b2c8      	uxtb	r0, r1
 80018f6:	490c      	ldr	r1, [pc, #48]	; (8001928 <I2C_IRQHandler+0x50>)
 80018f8:	7008      	strb	r0, [r1, #0]
 80018fa:	18d4      	adds	r4, r2, r3
 80018fc:	4808      	ldr	r0, [pc, #32]	; (8001920 <I2C_IRQHandler+0x48>)
 80018fe:	f7ff fe59 	bl	80015b4 <LL_I2C_ReceiveData8>
 8001902:	4603      	mov	r3, r0
 8001904:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001906:	4b08      	ldr	r3, [pc, #32]	; (8001928 <I2C_IRQHandler+0x50>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b13      	cmp	r3, #19
 800190e:	d903      	bls.n	8001918 <I2C_IRQHandler+0x40>
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <I2C_IRQHandler+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
	}
}
 8001916:	e001      	b.n	800191c <I2C_IRQHandler+0x44>
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <I2C_IRQHandler+0x50>)
 800191a:	781b      	ldrb	r3, [r3, #0]
}
 800191c:	bf00      	nop
 800191e:	bd98      	pop	{r3, r4, r7, pc}
 8001920:	40005400 	.word	0x40005400
 8001924:	2000020c 	.word	0x2000020c
 8001928:	20000210 	.word	0x20000210

0800192c <__NVIC_SetPriorityGrouping>:
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	; (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <LL_RCC_HSI_Enable+0x1c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <LL_RCC_HSI_Enable+0x1c>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000

08001994 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <LL_RCC_HSI_IsReady+0x20>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40021000 	.word	0x40021000

080019b8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80019c0:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	4904      	ldr	r1, [pc, #16]	; (80019e0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	600b      	str	r3, [r1, #0]
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <LL_RCC_SetSysClkSource+0x24>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f023 0203 	bic.w	r2, r3, #3
 80019f4:	4904      	ldr	r1, [pc, #16]	; (8001a08 <LL_RCC_SetSysClkSource+0x24>)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000

08001a0c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a10:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <LL_RCC_GetSysClkSource+0x18>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40021000 	.word	0x40021000

08001a28 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	4904      	ldr	r1, [pc, #16]	; (8001a4c <LL_RCC_SetAHBPrescaler+0x24>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	40021000 	.word	0x40021000

08001a50 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a60:	4904      	ldr	r1, [pc, #16]	; (8001a74 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000

08001a78 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a88:	4904      	ldr	r1, [pc, #16]	; (8001a9c <LL_RCC_SetAPB2Prescaler+0x24>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <LL_RCC_SetI2CClockSource+0x2c>)
 8001aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	0e1b      	lsrs	r3, r3, #24
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	401a      	ands	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001aba:	4904      	ldr	r1, [pc, #16]	; (8001acc <LL_RCC_SetI2CClockSource+0x2c>)
 8001abc:	4313      	orrs	r3, r2
 8001abe:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000

08001ad0 <LL_APB1_GRP1_EnableClock>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ada:	69da      	ldr	r2, [r3, #28]
 8001adc:	4907      	ldr	r1, [pc, #28]	; (8001afc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40021000 	.word	0x40021000

08001b00 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b08:	4b08      	ldr	r3, [pc, #32]	; (8001b2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b14:	4b05      	ldr	r3, [pc, #20]	; (8001b2c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b16:	699a      	ldr	r2, [r3, #24]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000

08001b30 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <LL_FLASH_SetLatency+0x24>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 0207 	bic.w	r2, r3, #7
 8001b40:	4904      	ldr	r1, [pc, #16]	; (8001b54 <LL_FLASH_SetLatency+0x24>)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40022000 	.word	0x40022000

08001b58 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b5c:	4b04      	ldr	r3, [pc, #16]	; (8001b70 <LL_FLASH_GetLatency+0x18>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0307 	and.w	r3, r3, #7
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40022000 	.word	0x40022000

08001b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b74:	b5b0      	push	{r4, r5, r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b7a:	2001      	movs	r0, #1
 8001b7c:	f7ff ffc0 	bl	8001b00 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b80:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b84:	f7ff ffa4 	bl	8001ad0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f7ff fecf 	bl	800192c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b8e:	f000 f843 	bl	8001c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b92:	f7ff fa6f 	bl	8001074 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b96:	f7ff fa0d 	bl	8000fb4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001b9a:	f000 fe29 	bl	80027f0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001b9e:	f7ff fd6d 	bl	800167c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint8_t hts_work = hts221_init();
 8001ba2:	f7ff f817 	bl	8000bd4 <hts221_init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	73fb      	strb	r3, [r7, #15]
  uint8_t *buffer;
  int len;
  while (1)
  {

	  if(hts_work){
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d008      	beq.n	8001bc2 <main+0x4e>
		  temp = hts221_get_temperature();
 8001bb0:	f7ff f8bc 	bl	8000d2c <hts221_get_temperature>
 8001bb4:	ed87 0a05 	vstr	s0, [r7, #20]
		  hum = hts221_get_humidity();
 8001bb8:	f7ff f8f0 	bl	8000d9c <hts221_get_humidity>
 8001bbc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001bc0:	e005      	b.n	8001bce <main+0x5a>
	  }else{
		  temp = 0;
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
		  hum = 0;
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
	  }
	  buffer = malloc(32*sizeof(uint8_t));
 8001bce:	2020      	movs	r0, #32
 8001bd0:	f001 fcaa 	bl	8003528 <malloc>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	60bb      	str	r3, [r7, #8]
	  len = sprintf(buffer, "%f,%f\n",temp,hum);
 8001bd8:	6978      	ldr	r0, [r7, #20]
 8001bda:	f7fe fcb5 	bl	8000548 <__aeabi_f2d>
 8001bde:	4604      	mov	r4, r0
 8001be0:	460d      	mov	r5, r1
 8001be2:	6938      	ldr	r0, [r7, #16]
 8001be4:	f7fe fcb0 	bl	8000548 <__aeabi_f2d>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf0:	4622      	mov	r2, r4
 8001bf2:	462b      	mov	r3, r5
 8001bf4:	4907      	ldr	r1, [pc, #28]	; (8001c14 <main+0xa0>)
 8001bf6:	68b8      	ldr	r0, [r7, #8]
 8001bf8:	f002 fa7a 	bl	80040f0 <siprintf>
 8001bfc:	6078      	str	r0, [r7, #4]
	  USART2_PutBuffer(buffer, len);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	4619      	mov	r1, r3
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f000 fed5 	bl	80029b4 <USART2_PutBuffer>
	  free(buffer);
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f001 fc94 	bl	8003538 <free>
  {
 8001c10:	e7cb      	b.n	8001baa <main+0x36>
 8001c12:	bf00      	nop
 8001c14:	08006258 	.word	0x08006258

08001c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff ff87 	bl	8001b30 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001c22:	bf00      	nop
 8001c24:	f7ff ff98 	bl	8001b58 <LL_FLASH_GetLatency>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1fa      	bne.n	8001c24 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001c2e:	f7ff fea1 	bl	8001974 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c32:	bf00      	nop
 8001c34:	f7ff feae 	bl	8001994 <LL_RCC_HSI_IsReady>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d1fa      	bne.n	8001c34 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001c3e:	2010      	movs	r0, #16
 8001c40:	f7ff feba 	bl	80019b8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff feef 	bl	8001a28 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	f7ff ff00 	bl	8001a50 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff ff11 	bl	8001a78 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fec4 	bl	80019e4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001c5c:	bf00      	nop
 8001c5e:	f7ff fed5 	bl	8001a0c <LL_RCC_GetSysClkSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1fa      	bne.n	8001c5e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <SystemClock_Config+0x68>)
 8001c6a:	f001 fc3f 	bl	80034ec <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001c6e:	4804      	ldr	r0, [pc, #16]	; (8001c80 <SystemClock_Config+0x68>)
 8001c70:	f001 fc4a 	bl	8003508 <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001c74:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001c78:	f7ff ff12 	bl	8001aa0 <LL_RCC_SetI2CClockSource>
}
 8001c7c:	bf00      	nop
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	007a1200 	.word	0x007a1200

08001c84 <LL_DMA_DisableChannel>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <LL_DMA_DisableChannel+0x3c>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	3a01      	subs	r2, #1
 8001ca2:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <LL_DMA_DisableChannel+0x3c>)
 8001ca4:	5c8a      	ldrb	r2, [r1, r2]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	440a      	add	r2, r1
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6013      	str	r3, [r2, #0]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	08006268 	.word	0x08006268

08001cc4 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001cd8:	bf0c      	ite	eq
 8001cda:	2301      	moveq	r3, #1
 8001cdc:	2300      	movne	r3, #0
 8001cde:	b2db      	uxtb	r3, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d28:	bf0c      	ite	eq
 8001d2a:	2301      	moveq	r3, #1
 8001d2c:	2300      	movne	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d4a:	605a      	str	r2, [r3, #4]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d66:	605a      	str	r2, [r3, #4]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d82:	605a      	str	r2, [r3, #4]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f003 0310 	and.w	r3, r3, #16
 8001da0:	2b10      	cmp	r3, #16
 8001da2:	d101      	bne.n	8001da8 <LL_USART_IsActiveFlag_IDLE+0x18>
 8001da4:	2301      	movs	r3, #1
 8001da6:	e000      	b.n	8001daa <LL_USART_IsActiveFlag_IDLE+0x1a>
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dc6:	2b40      	cmp	r3, #64	; 0x40
 8001dc8:	d101      	bne.n	8001dce <LL_USART_IsActiveFlag_TC+0x18>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <LL_USART_IsActiveFlag_TC+0x1a>
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2210      	movs	r2, #16
 8001de8:	621a      	str	r2, [r3, #32]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df6:	b480      	push	{r7}
 8001df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dfa:	e7fe      	b.n	8001dfa <NMI_Handler+0x4>

08001dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <HardFault_Handler+0x4>

08001e02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <MemManage_Handler+0x4>

08001e08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <BusFault_Handler+0x4>

08001e0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <UsageFault_Handler+0x4>

08001e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8001e6c:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <DMA1_Channel6_IRQHandler+0x38>)
 8001e6e:	f7ff ff29 	bl	8001cc4 <LL_DMA_IsActiveFlag_TC6>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8001e78:	f000 fdbc 	bl	80029f4 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8001e7c:	4808      	ldr	r0, [pc, #32]	; (8001ea0 <DMA1_Channel6_IRQHandler+0x38>)
 8001e7e:	f7ff ff5d 	bl	8001d3c <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 8001e82:	e00a      	b.n	8001e9a <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8001e84:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <DMA1_Channel6_IRQHandler+0x38>)
 8001e86:	f7ff ff45 	bl	8001d14 <LL_DMA_IsActiveFlag_HT6>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d104      	bne.n	8001e9a <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8001e90:	f000 fdb0 	bl	80029f4 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8001e94:	4802      	ldr	r0, [pc, #8]	; (8001ea0 <DMA1_Channel6_IRQHandler+0x38>)
 8001e96:	f7ff ff6d 	bl	8001d74 <LL_DMA_ClearFlag_HT6>
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40020000 	.word	0x40020000

08001ea4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8001ea8:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <DMA1_Channel7_IRQHandler+0x30>)
 8001eaa:	f7ff ff1f 	bl	8001cec <LL_DMA_IsActiveFlag_TC7>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d10d      	bne.n	8001ed0 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <DMA1_Channel7_IRQHandler+0x30>)
 8001eb6:	f7ff ff4f 	bl	8001d58 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8001eba:	bf00      	nop
 8001ebc:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <DMA1_Channel7_IRQHandler+0x34>)
 8001ebe:	f7ff ff7a 	bl	8001db6 <LL_USART_IsActiveFlag_TC>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f9      	beq.n	8001ebc <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 8001ec8:	2107      	movs	r1, #7
 8001eca:	4802      	ldr	r0, [pc, #8]	; (8001ed4 <DMA1_Channel7_IRQHandler+0x30>)
 8001ecc:	f7ff feda 	bl	8001c84 <LL_DMA_DisableChannel>
	}
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40004400 	.word	0x40004400

08001edc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C_IRQHandler();
 8001ee0:	f7ff fcfa 	bl	80018d8 <I2C_IRQHandler>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 8001eec:	4806      	ldr	r0, [pc, #24]	; (8001f08 <USART2_IRQHandler+0x20>)
 8001eee:	f7ff ff4f 	bl	8001d90 <LL_USART_IsActiveFlag_IDLE>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 8001ef8:	f000 fd7c 	bl	80029f4 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 8001efc:	4802      	ldr	r0, [pc, #8]	; (8001f08 <USART2_IRQHandler+0x20>)
 8001efe:	f7ff ff6d 	bl	8001ddc <LL_USART_ClearFlag_IDLE>
	}
}
 8001f02:	bf00      	nop
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40004400 	.word	0x40004400

08001f0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  return 1;
 8001f10:	2301      	movs	r3, #1
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_kill>:

int _kill(int pid, int sig)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f26:	f002 f9a9 	bl	800427c <__errno>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2216      	movs	r2, #22
 8001f2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3708      	adds	r7, #8
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <_exit>:

void _exit (int status)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ffe7 	bl	8001f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f4e:	e7fe      	b.n	8001f4e <_exit+0x12>

08001f50 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e00a      	b.n	8001f78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f62:	f3af 8000 	nop.w
 8001f66:	4601      	mov	r1, r0
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	1c5a      	adds	r2, r3, #1
 8001f6c:	60ba      	str	r2, [r7, #8]
 8001f6e:	b2ca      	uxtb	r2, r1
 8001f70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697a      	ldr	r2, [r7, #20]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	dbf0      	blt.n	8001f62 <_read+0x12>
  }

  return len;
 8001f80:	687b      	ldr	r3, [r7, #4]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b086      	sub	sp, #24
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	60f8      	str	r0, [r7, #12]
 8001f92:	60b9      	str	r1, [r7, #8]
 8001f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e009      	b.n	8001fb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	60ba      	str	r2, [r7, #8]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf1      	blt.n	8001f9c <_write+0x12>
  }
  return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_close>:

int _close(int file)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fea:	605a      	str	r2, [r3, #4]
  return 0;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	370c      	adds	r7, #12
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <_isatty>:

int _isatty(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f002 f90e 	bl	800427c <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20003000 	.word	0x20003000
 800208c:	00000400 	.word	0x00000400
 8002090:	20000214 	.word	0x20000214
 8002094:	200003f0 	.word	0x200003f0

08002098 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800209c:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <SystemInit+0x20>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <SystemInit+0x20>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_EnableIRQ>:
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	db0b      	blt.n	80020e6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	f003 021f 	and.w	r2, r3, #31
 80020d4:	4907      	ldr	r1, [pc, #28]	; (80020f4 <__NVIC_EnableIRQ+0x38>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2001      	movs	r0, #1
 80020de:	fa00 f202 	lsl.w	r2, r0, r2
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <__NVIC_SetPriority>:
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	6039      	str	r1, [r7, #0]
 8002102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002108:	2b00      	cmp	r3, #0
 800210a:	db0a      	blt.n	8002122 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	490c      	ldr	r1, [pc, #48]	; (8002144 <__NVIC_SetPriority+0x4c>)
 8002112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002116:	0112      	lsls	r2, r2, #4
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	440b      	add	r3, r1
 800211c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002120:	e00a      	b.n	8002138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4908      	ldr	r1, [pc, #32]	; (8002148 <__NVIC_SetPriority+0x50>)
 8002128:	79fb      	ldrb	r3, [r7, #7]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	3b04      	subs	r3, #4
 8002130:	0112      	lsls	r2, r2, #4
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	440b      	add	r3, r1
 8002136:	761a      	strb	r2, [r3, #24]
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000e100 	.word	0xe000e100
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <LL_DMA_EnableChannel>:
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	3b01      	subs	r3, #1
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <LL_DMA_EnableChannel+0x3c>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	461a      	mov	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4413      	add	r3, r2
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	3a01      	subs	r2, #1
 800216a:	4907      	ldr	r1, [pc, #28]	; (8002188 <LL_DMA_EnableChannel+0x3c>)
 800216c:	5c8a      	ldrb	r2, [r1, r2]
 800216e:	4611      	mov	r1, r2
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	440a      	add	r2, r1
 8002174:	f043 0301 	orr.w	r3, r3, #1
 8002178:	6013      	str	r3, [r2, #0]
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	08006288 	.word	0x08006288

0800218c <LL_DMA_DisableChannel>:
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	3b01      	subs	r3, #1
 800219a:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <LL_DMA_DisableChannel+0x3c>)
 800219c:	5cd3      	ldrb	r3, [r2, r3]
 800219e:	461a      	mov	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	3a01      	subs	r2, #1
 80021aa:	4907      	ldr	r1, [pc, #28]	; (80021c8 <LL_DMA_DisableChannel+0x3c>)
 80021ac:	5c8a      	ldrb	r2, [r1, r2]
 80021ae:	4611      	mov	r1, r2
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	440a      	add	r2, r1
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6013      	str	r3, [r2, #0]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	08006288 	.word	0x08006288

080021cc <LL_DMA_SetDataTransferDirection>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	3b01      	subs	r3, #1
 80021dc:	4a0d      	ldr	r2, [pc, #52]	; (8002214 <LL_DMA_SetDataTransferDirection+0x48>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	461a      	mov	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021ec:	f023 0310 	bic.w	r3, r3, #16
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	3a01      	subs	r2, #1
 80021f4:	4907      	ldr	r1, [pc, #28]	; (8002214 <LL_DMA_SetDataTransferDirection+0x48>)
 80021f6:	5c8a      	ldrb	r2, [r1, r2]
 80021f8:	4611      	mov	r1, r2
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	440a      	add	r2, r1
 80021fe:	4611      	mov	r1, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
}
 8002206:	bf00      	nop
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	08006288 	.word	0x08006288

08002218 <LL_DMA_GetDataTransferDirection>:
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	3b01      	subs	r3, #1
 8002226:	4a07      	ldr	r2, [pc, #28]	; (8002244 <LL_DMA_GetDataTransferDirection+0x2c>)
 8002228:	5cd3      	ldrb	r3, [r2, r3]
 800222a:	461a      	mov	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f244 0310 	movw	r3, #16400	; 0x4010
 8002236:	4013      	ands	r3, r2
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	08006288 	.word	0x08006288

08002248 <LL_DMA_SetMode>:
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3b01      	subs	r3, #1
 8002258:	4a0c      	ldr	r2, [pc, #48]	; (800228c <LL_DMA_SetMode+0x44>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	461a      	mov	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4413      	add	r3, r2
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 0220 	bic.w	r2, r3, #32
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	3b01      	subs	r3, #1
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <LL_DMA_SetMode+0x44>)
 800226e:	5ccb      	ldrb	r3, [r1, r3]
 8002270:	4619      	mov	r1, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	440b      	add	r3, r1
 8002276:	4619      	mov	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	08006288 	.word	0x08006288

08002290 <LL_DMA_SetPeriphIncMode>:
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	3b01      	subs	r3, #1
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <LL_DMA_SetPeriphIncMode+0x44>)
 80022a2:	5cd3      	ldrb	r3, [r2, r3]
 80022a4:	461a      	mov	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	4413      	add	r3, r2
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	4907      	ldr	r1, [pc, #28]	; (80022d4 <LL_DMA_SetPeriphIncMode+0x44>)
 80022b6:	5ccb      	ldrb	r3, [r1, r3]
 80022b8:	4619      	mov	r1, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	440b      	add	r3, r1
 80022be:	4619      	mov	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	600b      	str	r3, [r1, #0]
}
 80022c6:	bf00      	nop
 80022c8:	3714      	adds	r7, #20
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	08006288 	.word	0x08006288

080022d8 <LL_DMA_SetMemoryIncMode>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	4a0c      	ldr	r2, [pc, #48]	; (800231c <LL_DMA_SetMemoryIncMode+0x44>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	461a      	mov	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4413      	add	r3, r2
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	4907      	ldr	r1, [pc, #28]	; (800231c <LL_DMA_SetMemoryIncMode+0x44>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	4619      	mov	r1, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	440b      	add	r3, r1
 8002306:	4619      	mov	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
}
 800230e:	bf00      	nop
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	08006288 	.word	0x08006288

08002320 <LL_DMA_SetPeriphSize>:
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	3b01      	subs	r3, #1
 8002330:	4a0c      	ldr	r2, [pc, #48]	; (8002364 <LL_DMA_SetPeriphSize+0x44>)
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	461a      	mov	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4413      	add	r3, r2
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	3b01      	subs	r3, #1
 8002344:	4907      	ldr	r1, [pc, #28]	; (8002364 <LL_DMA_SetPeriphSize+0x44>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	4619      	mov	r1, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	440b      	add	r3, r1
 800234e:	4619      	mov	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4313      	orrs	r3, r2
 8002354:	600b      	str	r3, [r1, #0]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	08006288 	.word	0x08006288

08002368 <LL_DMA_SetMemorySize>:
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3b01      	subs	r3, #1
 8002378:	4a0c      	ldr	r2, [pc, #48]	; (80023ac <LL_DMA_SetMemorySize+0x44>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	461a      	mov	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4413      	add	r3, r2
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	3b01      	subs	r3, #1
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <LL_DMA_SetMemorySize+0x44>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	4619      	mov	r1, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	440b      	add	r3, r1
 8002396:	4619      	mov	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	08006288 	.word	0x08006288

080023b0 <LL_DMA_SetChannelPriorityLevel>:
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	3b01      	subs	r3, #1
 80023c0:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	461a      	mov	r2, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	4413      	add	r3, r2
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	4907      	ldr	r1, [pc, #28]	; (80023f4 <LL_DMA_SetChannelPriorityLevel+0x44>)
 80023d6:	5ccb      	ldrb	r3, [r1, r3]
 80023d8:	4619      	mov	r1, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	440b      	add	r3, r1
 80023de:	4619      	mov	r1, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	08006288 	.word	0x08006288

080023f8 <LL_DMA_SetDataLength>:
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	3b01      	subs	r3, #1
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <LL_DMA_SetDataLength+0x44>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	461a      	mov	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4413      	add	r3, r2
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	041b      	lsls	r3, r3, #16
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	3a01      	subs	r2, #1
 800241c:	4907      	ldr	r1, [pc, #28]	; (800243c <LL_DMA_SetDataLength+0x44>)
 800241e:	5c8a      	ldrb	r2, [r1, r2]
 8002420:	4611      	mov	r1, r2
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	440a      	add	r2, r1
 8002426:	4611      	mov	r1, r2
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	08006288 	.word	0x08006288

08002440 <LL_DMA_GetDataLength>:
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	3b01      	subs	r3, #1
 800244e:	4a06      	ldr	r2, [pc, #24]	; (8002468 <LL_DMA_GetDataLength+0x28>)
 8002450:	5cd3      	ldrb	r3, [r2, r3]
 8002452:	461a      	mov	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	b29b      	uxth	r3, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	08006288 	.word	0x08006288

0800246c <LL_DMA_ConfigAddresses>:
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b10      	cmp	r3, #16
 800247e:	d114      	bne.n	80024aa <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	3b01      	subs	r3, #1
 8002484:	4a16      	ldr	r2, [pc, #88]	; (80024e0 <LL_DMA_ConfigAddresses+0x74>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	461a      	mov	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	3b01      	subs	r3, #1
 8002498:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <LL_DMA_ConfigAddresses+0x74>)
 800249a:	5cd3      	ldrb	r3, [r2, r3]
 800249c:	461a      	mov	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4413      	add	r3, r2
 80024a2:	461a      	mov	r2, r3
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	6093      	str	r3, [r2, #8]
}
 80024a8:	e013      	b.n	80024d2 <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <LL_DMA_ConfigAddresses+0x74>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	461a      	mov	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4413      	add	r3, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <LL_DMA_ConfigAddresses+0x74>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4413      	add	r3, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	60d3      	str	r3, [r2, #12]
}
 80024d2:	bf00      	nop
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	08006288 	.word	0x08006288

080024e4 <LL_DMA_SetMemoryAddress>:
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <LL_DMA_SetMemoryAddress+0x2c>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	461a      	mov	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4413      	add	r3, r2
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	08006288 	.word	0x08006288

08002514 <LL_DMA_SetPeriphAddress>:
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	3b01      	subs	r3, #1
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <LL_DMA_SetPeriphAddress+0x2c>)
 8002526:	5cd3      	ldrb	r3, [r2, r3]
 8002528:	461a      	mov	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4413      	add	r3, r2
 800252e:	461a      	mov	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6093      	str	r3, [r2, #8]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	08006288 	.word	0x08006288

08002544 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3b01      	subs	r3, #1
 8002552:	4a0b      	ldr	r2, [pc, #44]	; (8002580 <LL_DMA_EnableIT_TC+0x3c>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	461a      	mov	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	3a01      	subs	r2, #1
 8002562:	4907      	ldr	r1, [pc, #28]	; (8002580 <LL_DMA_EnableIT_TC+0x3c>)
 8002564:	5c8a      	ldrb	r2, [r1, r2]
 8002566:	4611      	mov	r1, r2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	440a      	add	r2, r1
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6013      	str	r3, [r2, #0]
}
 8002572:	bf00      	nop
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	08006288 	.word	0x08006288

08002584 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3b01      	subs	r3, #1
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LL_DMA_EnableIT_HT+0x3c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	3a01      	subs	r2, #1
 80025a2:	4907      	ldr	r1, [pc, #28]	; (80025c0 <LL_DMA_EnableIT_HT+0x3c>)
 80025a4:	5c8a      	ldrb	r2, [r1, r2]
 80025a6:	4611      	mov	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	440a      	add	r2, r1
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6013      	str	r3, [r2, #0]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	08006288 	.word	0x08006288

080025c4 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	4a0b      	ldr	r2, [pc, #44]	; (8002600 <LL_DMA_EnableIT_TE+0x3c>)
 80025d4:	5cd3      	ldrb	r3, [r2, r3]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4413      	add	r3, r2
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	3a01      	subs	r2, #1
 80025e2:	4907      	ldr	r1, [pc, #28]	; (8002600 <LL_DMA_EnableIT_TE+0x3c>)
 80025e4:	5c8a      	ldrb	r2, [r1, r2]
 80025e6:	4611      	mov	r1, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	440a      	add	r2, r1
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	6013      	str	r3, [r2, #0]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	08006288 	.word	0x08006288

08002604 <LL_AHB1_GRP1_EnableClock>:
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800260c:	4b08      	ldr	r3, [pc, #32]	; (8002630 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800260e:	695a      	ldr	r2, [r3, #20]
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4313      	orrs	r3, r2
 8002616:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800261a:	695a      	ldr	r2, [r3, #20]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4013      	ands	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002622:	68fb      	ldr	r3, [r7, #12]
}
 8002624:	bf00      	nop
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40021000 	.word	0x40021000

08002634 <LL_APB1_GRP1_EnableClock>:
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <LL_APB1_GRP1_EnableClock+0x2c>)
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	4907      	ldr	r1, [pc, #28]	; (8002660 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4313      	orrs	r3, r2
 8002646:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002648:	4b05      	ldr	r3, [pc, #20]	; (8002660 <LL_APB1_GRP1_EnableClock+0x2c>)
 800264a:	69da      	ldr	r2, [r3, #28]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4013      	ands	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	bf00      	nop
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40021000 	.word	0x40021000

08002664 <LL_USART_Enable>:
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <LL_USART_ConfigAsyncMode>:
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b089      	sub	sp, #36	; 0x24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	e853 3f00 	ldrex	r3, [r3]
 80026c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f043 0310 	orr.w	r3, r3, #16
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	61ba      	str	r2, [r7, #24]
 80026d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	e841 2300 	strex	r3, r2, [r1]
 80026dc:	613b      	str	r3, [r7, #16]
   return(result);
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1e9      	bne.n	80026b8 <LL_USART_EnableIT_IDLE+0x8>
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b089      	sub	sp, #36	; 0x24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3308      	adds	r3, #8
 80026fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	e853 3f00 	ldrex	r3, [r3]
 8002706:	60bb      	str	r3, [r7, #8]
   return(result);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3308      	adds	r3, #8
 8002714:	69fa      	ldr	r2, [r7, #28]
 8002716:	61ba      	str	r2, [r7, #24]
 8002718:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271a:	6979      	ldr	r1, [r7, #20]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	e841 2300 	strex	r3, r2, [r1]
 8002722:	613b      	str	r3, [r7, #16]
   return(result);
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1e7      	bne.n	80026fa <LL_USART_DisableIT_CTS+0x8>
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	3724      	adds	r7, #36	; 0x24
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	3308      	adds	r3, #8
 8002744:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	60bb      	str	r3, [r7, #8]
   return(result);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3308      	adds	r3, #8
 800275a:	69fa      	ldr	r2, [r7, #28]
 800275c:	61ba      	str	r2, [r7, #24]
 800275e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6979      	ldr	r1, [r7, #20]
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	e841 2300 	strex	r3, r2, [r1]
 8002768:	613b      	str	r3, [r7, #16]
   return(result);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e7      	bne.n	8002740 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3724      	adds	r7, #36	; 0x24
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800277e:	b480      	push	{r7}
 8002780:	b089      	sub	sp, #36	; 0x24
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3308      	adds	r3, #8
 800278a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	e853 3f00 	ldrex	r3, [r3]
 8002792:	60bb      	str	r3, [r7, #8]
   return(result);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279a:	61fb      	str	r3, [r7, #28]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3308      	adds	r3, #8
 80027a0:	69fa      	ldr	r2, [r7, #28]
 80027a2:	61ba      	str	r2, [r7, #24]
 80027a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a6:	6979      	ldr	r1, [r7, #20]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	e841 2300 	strex	r3, r2, [r1]
 80027ae:	613b      	str	r3, [r7, #16]
   return(result);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1e7      	bne.n	8002786 <LL_USART_EnableDMAReq_TX+0x8>
}
 80027b6:	bf00      	nop
 80027b8:	bf00      	nop
 80027ba:	3724      	adds	r7, #36	; 0x24
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d103      	bne.n	80027dc <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3328      	adds	r3, #40	; 0x28
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	e002      	b.n	80027e2 <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3324      	adds	r3, #36	; 0x24
 80027e0:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <MX_USART2_UART_Init>:
	// type global variables here
uint16_t buf_read_pos = 0;

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 80027f0:	b5b0      	push	{r4, r5, r7, lr}
 80027f2:	b090      	sub	sp, #64	; 0x40
 80027f4:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80027f6:	f107 031c 	add.w	r3, r7, #28
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	609a      	str	r2, [r3, #8]
 8002802:	60da      	str	r2, [r3, #12]
 8002804:	611a      	str	r2, [r3, #16]
 8002806:	615a      	str	r2, [r3, #20]
 8002808:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
 8002818:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800281a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800281e:	f7ff ff09 	bl	8002634 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002822:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002826:	f7ff feed 	bl	8002604 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_15;
 800282a:	f248 0304 	movw	r3, #32772	; 0x8004
 800282e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002830:	2302      	movs	r3, #2
 8002832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002840:	2307      	movs	r3, #7
 8002842:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002844:	1d3b      	adds	r3, r7, #4
 8002846:	4619      	mov	r1, r3
 8002848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800284c:	f000 fa62 	bl	8002d14 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002850:	2200      	movs	r2, #0
 8002852:	2106      	movs	r1, #6
 8002854:	4854      	ldr	r0, [pc, #336]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 8002856:	f7ff fcb9 	bl	80021cc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PRIORITY_MEDIUM);
 800285a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800285e:	2106      	movs	r1, #6
 8002860:	4851      	ldr	r0, [pc, #324]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 8002862:	f7ff fda5 	bl	80023b0 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8002866:	2200      	movs	r2, #0
 8002868:	2106      	movs	r1, #6
 800286a:	484f      	ldr	r0, [pc, #316]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 800286c:	f7ff fcec 	bl	8002248 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 8002870:	2200      	movs	r2, #0
 8002872:	2106      	movs	r1, #6
 8002874:	484c      	ldr	r0, [pc, #304]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 8002876:	f7ff fd0b 	bl	8002290 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	2106      	movs	r1, #6
 800287e:	484a      	ldr	r0, [pc, #296]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 8002880:	f7ff fd2a 	bl	80022d8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8002884:	2200      	movs	r2, #0
 8002886:	2106      	movs	r1, #6
 8002888:	4847      	ldr	r0, [pc, #284]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 800288a:	f7ff fd49 	bl	8002320 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800288e:	2200      	movs	r2, #0
 8002890:	2106      	movs	r1, #6
 8002892:	4845      	ldr	r0, [pc, #276]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 8002894:	f7ff fd68 	bl	8002368 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_6,
 8002898:	2101      	movs	r1, #1
 800289a:	4844      	ldr	r0, [pc, #272]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 800289c:	f7ff ff92 	bl	80027c4 <LL_USART_DMA_GetRegAddr>
 80028a0:	4604      	mov	r4, r0
 80028a2:	4d43      	ldr	r5, [pc, #268]	; (80029b0 <MX_USART2_UART_Init+0x1c0>)
 80028a4:	2106      	movs	r1, #6
 80028a6:	4840      	ldr	r0, [pc, #256]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 80028a8:	f7ff fcb6 	bl	8002218 <LL_DMA_GetDataTransferDirection>
 80028ac:	4603      	mov	r3, r0
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	462b      	mov	r3, r5
 80028b2:	4622      	mov	r2, r4
 80028b4:	2106      	movs	r1, #6
 80028b6:	483c      	ldr	r0, [pc, #240]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 80028b8:	f7ff fdd8 	bl	800246c <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART2dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80028bc:	2280      	movs	r2, #128	; 0x80
 80028be:	2106      	movs	r1, #6
 80028c0:	4839      	ldr	r0, [pc, #228]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 80028c2:	f7ff fd99 	bl	80023f8 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80028c6:	2106      	movs	r1, #6
 80028c8:	4837      	ldr	r0, [pc, #220]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 80028ca:	f7ff fc3f 	bl	800214c <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART2);
 80028ce:	4837      	ldr	r0, [pc, #220]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 80028d0:	f7ff ff32 	bl	8002738 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80028d4:	2106      	movs	r1, #6
 80028d6:	4834      	ldr	r0, [pc, #208]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 80028d8:	f7ff fe34 	bl	8002544 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80028dc:	2106      	movs	r1, #6
 80028de:	4832      	ldr	r0, [pc, #200]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 80028e0:	f7ff fe50 	bl	8002584 <LL_DMA_EnableIT_HT>

  /* USART2_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80028e4:	2210      	movs	r2, #16
 80028e6:	2107      	movs	r1, #7
 80028e8:	482f      	ldr	r0, [pc, #188]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 80028ea:	f7ff fc6f 	bl	80021cc <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PRIORITY_MEDIUM);
 80028ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028f2:	2107      	movs	r1, #7
 80028f4:	482c      	ldr	r0, [pc, #176]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 80028f6:	f7ff fd5b 	bl	80023b0 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2107      	movs	r1, #7
 80028fe:	482a      	ldr	r0, [pc, #168]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 8002900:	f7ff fca2 	bl	8002248 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8002904:	2200      	movs	r2, #0
 8002906:	2107      	movs	r1, #7
 8002908:	4827      	ldr	r0, [pc, #156]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 800290a:	f7ff fcc1 	bl	8002290 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	2107      	movs	r1, #7
 8002912:	4825      	ldr	r0, [pc, #148]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 8002914:	f7ff fce0 	bl	80022d8 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8002918:	2200      	movs	r2, #0
 800291a:	2107      	movs	r1, #7
 800291c:	4822      	ldr	r0, [pc, #136]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 800291e:	f7ff fcff 	bl	8002320 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8002922:	2200      	movs	r2, #0
 8002924:	2107      	movs	r1, #7
 8002926:	4820      	ldr	r0, [pc, #128]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 8002928:	f7ff fd1e 	bl	8002368 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7, LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
 800292c:	2100      	movs	r1, #0
 800292e:	481f      	ldr	r0, [pc, #124]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 8002930:	f7ff ff48 	bl	80027c4 <LL_USART_DMA_GetRegAddr>
 8002934:	4603      	mov	r3, r0
 8002936:	461a      	mov	r2, r3
 8002938:	2107      	movs	r1, #7
 800293a:	481b      	ldr	r0, [pc, #108]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 800293c:	f7ff fdea 	bl	8002514 <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART2);
 8002940:	481a      	ldr	r0, [pc, #104]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 8002942:	f7ff ff1c 	bl	800277e <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8002946:	2107      	movs	r1, #7
 8002948:	4817      	ldr	r0, [pc, #92]	; (80029a8 <MX_USART2_UART_Init+0x1b8>)
 800294a:	f7ff fe3b 	bl	80025c4 <LL_DMA_EnableIT_TE>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, 0);
 800294e:	2100      	movs	r1, #0
 8002950:	2026      	movs	r0, #38	; 0x26
 8002952:	f7ff fbd1 	bl	80020f8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8002956:	2026      	movs	r0, #38	; 0x26
 8002958:	f7ff fbb0 	bl	80020bc <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 115200;
 800295c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002960:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002966:	2300      	movs	r3, #0
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800296a:	2300      	movs	r3, #0
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800296e:	230c      	movs	r3, #12
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002976:	2300      	movs	r3, #0
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	4619      	mov	r1, r3
 8002980:	480a      	ldr	r0, [pc, #40]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 8002982:	f000 fd2d 	bl	80033e0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002986:	4809      	ldr	r0, [pc, #36]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 8002988:	f7ff fe7c 	bl	8002684 <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART2);
 800298c:	4807      	ldr	r0, [pc, #28]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 800298e:	f7ff feb0 	bl	80026f2 <LL_USART_DisableIT_CTS>

  /* Enable USART2 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART2);
 8002992:	4806      	ldr	r0, [pc, #24]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 8002994:	f7ff fe8c 	bl	80026b0 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART2);
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <MX_USART2_UART_Init+0x1bc>)
 800299a:	f7ff fe63 	bl	8002664 <LL_USART_Enable>
  	  //type your code here:
}
 800299e:	bf00      	nop
 80029a0:	3738      	adds	r7, #56	; 0x38
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bdb0      	pop	{r4, r5, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40004400 	.word	0x40004400
 80029b0:	20000218 	.word	0x20000218

080029b4 <USART2_PutBuffer>:


// Send data stored in buffer with DMA
void USART2_PutBuffer(uint8_t *buffer, uint8_t length)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
	LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_7, (uint32_t)buffer);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	461a      	mov	r2, r3
 80029c4:	2107      	movs	r1, #7
 80029c6:	480a      	ldr	r0, [pc, #40]	; (80029f0 <USART2_PutBuffer+0x3c>)
 80029c8:	f7ff fd8c 	bl	80024e4 <LL_DMA_SetMemoryAddress>

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_7, length);
 80029cc:	78fb      	ldrb	r3, [r7, #3]
 80029ce:	461a      	mov	r2, r3
 80029d0:	2107      	movs	r1, #7
 80029d2:	4807      	ldr	r0, [pc, #28]	; (80029f0 <USART2_PutBuffer+0x3c>)
 80029d4:	f7ff fd10 	bl	80023f8 <LL_DMA_SetDataLength>

	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_7);
 80029d8:	2107      	movs	r1, #7
 80029da:	4805      	ldr	r0, [pc, #20]	; (80029f0 <USART2_PutBuffer+0x3c>)
 80029dc:	f7ff fdb2 	bl	8002544 <LL_DMA_EnableIT_TC>

	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_7);
 80029e0:	2107      	movs	r1, #7
 80029e2:	4803      	ldr	r0, [pc, #12]	; (80029f0 <USART2_PutBuffer+0x3c>)
 80029e4:	f7ff fbb2 	bl	800214c <LL_DMA_EnableChannel>
}
 80029e8:	bf00      	nop
 80029ea:	3708      	adds	r7, #8
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40020000 	.word	0x40020000

080029f4 <USART2_CheckDmaReception>:
 *	Forwards data to callback function.
 *	Keeps track of pointer pointing to Rx memory buffer and resets the pointer if overflow is possible in next Rx.
 *	Refer to reference manual - "normal memory mode" and "increment memory mode".
 */
void USART2_CheckDmaReception(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART2_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 80029fa:	2106      	movs	r1, #6
 80029fc:	482a      	ldr	r0, [pc, #168]	; (8002aa8 <USART2_CheckDmaReception+0xb4>)
 80029fe:	f7ff fd1f 	bl	8002440 <LL_DMA_GetDataLength>
 8002a02:	4603      	mov	r3, r0
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002a0a:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART2_BUFFER_SIZE)
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002a10:	d941      	bls.n	8002a96 <USART2_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002a12:	2106      	movs	r1, #6
 8002a14:	4824      	ldr	r0, [pc, #144]	; (8002aa8 <USART2_CheckDmaReception+0xb4>)
 8002a16:	f7ff fbb9 	bl	800218c <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_6, (uint32_t)bufferUSART2dma);
 8002a1a:	4b24      	ldr	r3, [pc, #144]	; (8002aac <USART2_CheckDmaReception+0xb8>)
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2106      	movs	r1, #6
 8002a20:	4821      	ldr	r0, [pc, #132]	; (8002aa8 <USART2_CheckDmaReception+0xb4>)
 8002a22:	f7ff fd5f 	bl	80024e4 <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	2106      	movs	r1, #6
 8002a2a:	481f      	ldr	r0, [pc, #124]	; (8002aa8 <USART2_CheckDmaReception+0xb4>)
 8002a2c:	f7ff fce4 	bl	80023f8 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 8002a30:	2106      	movs	r1, #6
 8002a32:	481d      	ldr	r0, [pc, #116]	; (8002aa8 <USART2_CheckDmaReception+0xb4>)
 8002a34:	f7ff fb8a 	bl	800214c <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002a38:	e012      	b.n	8002a60 <USART2_CheckDmaReception+0x6c>
		{
			if(USART2_ProcessData != 0)
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <USART2_CheckDmaReception+0xbc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <USART2_CheckDmaReception+0x60>
			{
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <USART2_CheckDmaReception+0xbc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1b      	ldr	r2, [pc, #108]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a48:	8812      	ldrh	r2, [r2, #0]
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4a17      	ldr	r2, [pc, #92]	; (8002aac <USART2_CheckDmaReception+0xb8>)
 8002a4e:	5c52      	ldrb	r2, [r2, r1]
 8002a50:	4610      	mov	r0, r2
 8002a52:	4798      	blx	r3
			}
			buf_read_pos++;
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a56:	881b      	ldrh	r3, [r3, #0]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	4b15      	ldr	r3, [pc, #84]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a5e:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART2_BUFFER_SIZE)
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a62:	881b      	ldrh	r3, [r3, #0]
 8002a64:	2b7f      	cmp	r3, #127	; 0x7f
 8002a66:	d9e8      	bls.n	8002a3a <USART2_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 8002a68:	4b12      	ldr	r3, [pc, #72]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	801a      	strh	r2, [r3, #0]
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 8002a6e:	e017      	b.n	8002aa0 <USART2_CheckDmaReception+0xac>
			if(USART2_ProcessData != 0)
 8002a70:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <USART2_CheckDmaReception+0xbc>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <USART2_CheckDmaReception+0x96>
				USART2_ProcessData(bufferUSART2dma[buf_read_pos]);
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <USART2_CheckDmaReception+0xbc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0d      	ldr	r2, [pc, #52]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a7e:	8812      	ldrh	r2, [r2, #0]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4a0a      	ldr	r2, [pc, #40]	; (8002aac <USART2_CheckDmaReception+0xb8>)
 8002a84:	5c52      	ldrb	r2, [r2, r1]
 8002a86:	4610      	mov	r0, r2
 8002a88:	4798      	blx	r3
			buf_read_pos++;
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a94:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <USART2_CheckDmaReception+0xc0>)
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	88fa      	ldrh	r2, [r7, #6]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d8e7      	bhi.n	8002a70 <USART2_CheckDmaReception+0x7c>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	20000218 	.word	0x20000218
 8002ab0:	20000298 	.word	0x20000298
 8002ab4:	2000029c 	.word	0x2000029c

08002ab8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002af0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002abc:	f7ff faec 	bl	8002098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ac0:	480c      	ldr	r0, [pc, #48]	; (8002af4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ac2:	490d      	ldr	r1, [pc, #52]	; (8002af8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	; (8002afc <LoopForever+0xe>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ac8:	e002      	b.n	8002ad0 <LoopCopyDataInit>

08002aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ace:	3304      	adds	r3, #4

08002ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad4:	d3f9      	bcc.n	8002aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ad6:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ad8:	4c0a      	ldr	r4, [pc, #40]	; (8002b04 <LoopForever+0x16>)
  movs r3, #0
 8002ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002adc:	e001      	b.n	8002ae2 <LoopFillZerobss>

08002ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae0:	3204      	adds	r2, #4

08002ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae4:	d3fb      	bcc.n	8002ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ae6:	f001 fbcf 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002aea:	f7ff f843 	bl	8001b74 <main>

08002aee <LoopForever>:

LoopForever:
    b LoopForever
 8002aee:	e7fe      	b.n	8002aee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002af0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8002af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002af8:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002afc:	0800660c 	.word	0x0800660c
  ldr r2, =_sbss
 8002b00:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002b04:	200003ec 	.word	0x200003ec

08002b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b08:	e7fe      	b.n	8002b08 <ADC1_2_IRQHandler>

08002b0a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b089      	sub	sp, #36	; 0x24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	613b      	str	r3, [r7, #16]
  return result;
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2103      	movs	r1, #3
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	401a      	ands	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	fa93 f3a3 	rbit	r3, r3
 8002b44:	61bb      	str	r3, [r7, #24]
  return result;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	fab3 f383 	clz	r3, r3
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	431a      	orrs	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	601a      	str	r2, [r3, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	3724      	adds	r7, #36	; 0x24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	401a      	ands	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	431a      	orrs	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	605a      	str	r2, [r3, #4]
}
 8002b8c:	bf00      	nop
 8002b8e:	3714      	adds	r7, #20
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	613b      	str	r3, [r7, #16]
  return result;
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2103      	movs	r1, #3
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	fa93 f3a3 	rbit	r3, r3
 8002bd2:	61bb      	str	r3, [r7, #24]
  return result;
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fab3 f383 	clz	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	fa01 f303 	lsl.w	r3, r1, r3
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002bea:	bf00      	nop
 8002bec:	3724      	adds	r7, #36	; 0x24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b089      	sub	sp, #36	; 0x24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	fa93 f3a3 	rbit	r3, r3
 8002c10:	613b      	str	r3, [r7, #16]
  return result;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	fab3 f383 	clz	r3, r3
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2103      	movs	r1, #3
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	401a      	ands	r2, r3
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa93 f3a3 	rbit	r3, r3
 8002c30:	61bb      	str	r3, [r7, #24]
  return result;
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c42:	431a      	orrs	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	60da      	str	r2, [r3, #12]
}
 8002c48:	bf00      	nop
 8002c4a:	3724      	adds	r7, #36	; 0x24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b089      	sub	sp, #36	; 0x24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa93 f3a3 	rbit	r3, r3
 8002c6e:	613b      	str	r3, [r7, #16]
  return result;
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	401a      	ands	r2, r3
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	fa93 f3a3 	rbit	r3, r3
 8002c8e:	61bb      	str	r3, [r7, #24]
  return result;
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8002ca6:	bf00      	nop
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b089      	sub	sp, #36	; 0x24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	0a1b      	lsrs	r3, r3, #8
 8002cc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	613b      	str	r3, [r7, #16]
  return result;
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	210f      	movs	r1, #15
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	61bb      	str	r3, [r7, #24]
  return result;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	fab3 f383 	clz	r3, r3
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	431a      	orrs	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8002d08:	bf00      	nop
 8002d0a:	3724      	adds	r7, #36	; 0x24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	613b      	str	r3, [r7, #16]
  return result;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	fab3 f383 	clz	r3, r3
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002d36:	e051      	b.n	8002ddc <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d043      	beq.n	8002dd6 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d003      	beq.n	8002d5e <LL_GPIO_Init+0x4a>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d10e      	bne.n	8002d7c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	461a      	mov	r2, r3
 8002d64:	69b9      	ldr	r1, [r7, #24]
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ff16 	bl	8002b98 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	461a      	mov	r2, r3
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7ff fef6 	bl	8002b68 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	461a      	mov	r2, r3
 8002d82:	69b9      	ldr	r1, [r7, #24]
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff36 	bl	8002bf6 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d11a      	bne.n	8002dc8 <LL_GPIO_Init+0xb4>
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	60bb      	str	r3, [r7, #8]
  return result;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002da0:	fab3 f383 	clz	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b07      	cmp	r3, #7
 8002da8:	d807      	bhi.n	8002dba <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	461a      	mov	r2, r3
 8002db0:	69b9      	ldr	r1, [r7, #24]
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ff4e 	bl	8002c54 <LL_GPIO_SetAFPin_0_7>
 8002db8:	e006      	b.n	8002dc8 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	69b9      	ldr	r1, [r7, #24]
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff75 	bl	8002cb2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	69b9      	ldr	r1, [r7, #24]
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f7ff fe9a 	bl	8002b0a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	fa22 f303 	lsr.w	r3, r2, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1a6      	bne.n	8002d38 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3720      	adds	r7, #32
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <LL_I2C_Enable>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f043 0201 	orr.w	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	601a      	str	r2, [r3, #0]
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_I2C_Disable>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 0201 	bic.w	r2, r3, #1
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	601a      	str	r2, [r3, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <LL_I2C_ConfigFilters>:
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	0219      	lsls	r1, r3, #8
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	601a      	str	r2, [r3, #0]
}
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_I2C_SetOwnAddress1>:
{
 8002e62:	b480      	push	{r7}
 8002e64:	b085      	sub	sp, #20
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e76:	f023 0307 	bic.w	r3, r3, #7
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	609a      	str	r2, [r3, #8]
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr

08002e92 <LL_I2C_EnableOwnAddress1>:
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <LL_I2C_DisableOwnAddress1>:
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	609a      	str	r2, [r3, #8]
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_I2C_SetTiming>:
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	611a      	str	r2, [r3, #16]
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_I2C_SetMode>:
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	601a      	str	r2, [r3, #0]
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <LL_I2C_AcknowledgeNextData>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	605a      	str	r2, [r3, #4]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, const LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff65 	bl	8002e14 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ff6d 	bl	8002e34 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff ffb6 	bl	8002ed2 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f7ff ff44 	bl	8002df4 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7ff ffa0 	bl	8002eb2 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	6919      	ldr	r1, [r3, #16]
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff70 	bl	8002e62 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff ff81 	bl	8002e92 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffa9 	bl	8002eee <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ffb6 	bl	8002f14 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <LL_RCC_HSI_IsReady>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002fb8:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <LL_RCC_HSI_IsReady+0x20>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <LL_RCC_LSE_IsReady>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <LL_RCC_LSE_IsReady+0x20>)
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	f003 0302 	and.w	r3, r3, #2
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	bf0c      	ite	eq
 8002fe8:	2301      	moveq	r3, #1
 8002fea:	2300      	movne	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40021000 	.word	0x40021000

08002ffc <LL_RCC_GetSysClkSource>:
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003000:	4b04      	ldr	r3, [pc, #16]	; (8003014 <LL_RCC_GetSysClkSource+0x18>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 030c 	and.w	r3, r3, #12
}
 8003008:	4618      	mov	r0, r3
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000

08003018 <LL_RCC_GetAHBPrescaler>:
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800301c:	4b04      	ldr	r3, [pc, #16]	; (8003030 <LL_RCC_GetAHBPrescaler+0x18>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000

08003034 <LL_RCC_GetAPB1Prescaler>:
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003038:	4b04      	ldr	r3, [pc, #16]	; (800304c <LL_RCC_GetAPB1Prescaler+0x18>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000

08003050 <LL_RCC_GetAPB2Prescaler>:
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800305c:	4618      	mov	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003074:	4b07      	ldr	r3, [pc, #28]	; (8003094 <LL_RCC_GetUSARTClockSource+0x28>)
 8003076:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003078:	2103      	movs	r1, #3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	401a      	ands	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	061b      	lsls	r3, r3, #24
 8003086:	4313      	orrs	r3, r2
}
 8003088:	4618      	mov	r0, r3
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	40021000 	.word	0x40021000

08003098 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800309c:	4b04      	ldr	r3, [pc, #16]	; (80030b0 <LL_RCC_PLL_GetMainSource+0x18>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80030b8:	4b04      	ldr	r3, [pc, #16]	; (80030cc <LL_RCC_PLL_GetMultiplicator+0x18>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40021000 	.word	0x40021000

080030d0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80030d0:	b480      	push	{r7}
 80030d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <LL_RCC_PLL_GetPrediv+0x18>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f003 030f 	and.w	r3, r3, #15
}
 80030dc:	4618      	mov	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40021000 	.word	0x40021000

080030ec <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80030f4:	f000 f862 	bl	80031bc <RCC_GetSystemClockFreq>
 80030f8:	4602      	mov	r2, r0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f000 f880 	bl	8003208 <RCC_GetHCLKClockFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f88e 	bl	8003234 <RCC_GetPCLK1ClockFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f89a 	bl	800325c <RCC_GetPCLK2ClockFreq>
 8003128:	4602      	mov	r2, r0
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60da      	str	r2, [r3, #12]
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003140:	2300      	movs	r3, #0
 8003142:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d130      	bne.n	80031ac <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff ff8e 	bl	800306c <LL_RCC_GetUSARTClockSource>
 8003150:	4603      	mov	r3, r0
 8003152:	2b03      	cmp	r3, #3
 8003154:	d00a      	beq.n	800316c <LL_RCC_GetUSARTClockFreq+0x34>
 8003156:	2b03      	cmp	r3, #3
 8003158:	d819      	bhi.n	800318e <LL_RCC_GetUSARTClockFreq+0x56>
 800315a:	2b01      	cmp	r3, #1
 800315c:	d002      	beq.n	8003164 <LL_RCC_GetUSARTClockFreq+0x2c>
 800315e:	2b02      	cmp	r3, #2
 8003160:	d00c      	beq.n	800317c <LL_RCC_GetUSARTClockFreq+0x44>
 8003162:	e014      	b.n	800318e <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003164:	f000 f82a 	bl	80031bc <RCC_GetSystemClockFreq>
 8003168:	60f8      	str	r0, [r7, #12]
        break;
 800316a:	e01f      	b.n	80031ac <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800316c:	f7ff ff22 	bl	8002fb4 <LL_RCC_HSI_IsReady>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d017      	beq.n	80031a6 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <LL_RCC_GetUSARTClockFreq+0x80>)
 8003178:	60fb      	str	r3, [r7, #12]
        }
        break;
 800317a:	e014      	b.n	80031a6 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800317c:	f7ff ff2c 	bl	8002fd8 <LL_RCC_LSE_IsReady>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d011      	beq.n	80031aa <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8003186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800318c:	e00d      	b.n	80031aa <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800318e:	f000 f815 	bl	80031bc <RCC_GetSystemClockFreq>
 8003192:	4603      	mov	r3, r0
 8003194:	4618      	mov	r0, r3
 8003196:	f000 f837 	bl	8003208 <RCC_GetHCLKClockFreq>
 800319a:	4603      	mov	r3, r0
 800319c:	4618      	mov	r0, r3
 800319e:	f000 f849 	bl	8003234 <RCC_GetPCLK1ClockFreq>
 80031a2:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 80031a4:	e002      	b.n	80031ac <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 80031aa:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 80031ac:	68fb      	ldr	r3, [r7, #12]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	007a1200 	.word	0x007a1200

080031bc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80031c6:	f7ff ff19 	bl	8002ffc <LL_RCC_GetSysClkSource>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d00c      	beq.n	80031ea <RCC_GetSystemClockFreq+0x2e>
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d80e      	bhi.n	80031f2 <RCC_GetSystemClockFreq+0x36>
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d002      	beq.n	80031de <RCC_GetSystemClockFreq+0x22>
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d003      	beq.n	80031e4 <RCC_GetSystemClockFreq+0x28>
 80031dc:	e009      	b.n	80031f2 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <RCC_GetSystemClockFreq+0x48>)
 80031e0:	607b      	str	r3, [r7, #4]
      break;
 80031e2:	e009      	b.n	80031f8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80031e4:	4b07      	ldr	r3, [pc, #28]	; (8003204 <RCC_GetSystemClockFreq+0x48>)
 80031e6:	607b      	str	r3, [r7, #4]
      break;
 80031e8:	e006      	b.n	80031f8 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80031ea:	f000 f84b 	bl	8003284 <RCC_PLL_GetFreqDomain_SYS>
 80031ee:	6078      	str	r0, [r7, #4]
      break;
 80031f0:	e002      	b.n	80031f8 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <RCC_GetSystemClockFreq+0x48>)
 80031f4:	607b      	str	r3, [r7, #4]
      break;
 80031f6:	bf00      	nop
  }

  return frequency;
 80031f8:	687b      	ldr	r3, [r7, #4]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	007a1200 	.word	0x007a1200

08003208 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003210:	f7ff ff02 	bl	8003018 <LL_RCC_GetAHBPrescaler>
 8003214:	4603      	mov	r3, r0
 8003216:	091b      	lsrs	r3, r3, #4
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <RCC_GetHCLKClockFreq+0x28>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	461a      	mov	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	40d3      	lsrs	r3, r2
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	08006270 	.word	0x08006270

08003234 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800323c:	f7ff fefa 	bl	8003034 <LL_RCC_GetAPB1Prescaler>
 8003240:	4603      	mov	r3, r0
 8003242:	0a1b      	lsrs	r3, r3, #8
 8003244:	4a04      	ldr	r2, [pc, #16]	; (8003258 <RCC_GetPCLK1ClockFreq+0x24>)
 8003246:	5cd3      	ldrb	r3, [r2, r3]
 8003248:	461a      	mov	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	40d3      	lsrs	r3, r2
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	08006280 	.word	0x08006280

0800325c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003264:	f7ff fef4 	bl	8003050 <LL_RCC_GetAPB2Prescaler>
 8003268:	4603      	mov	r3, r0
 800326a:	0adb      	lsrs	r3, r3, #11
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <RCC_GetPCLK2ClockFreq+0x24>)
 800326e:	5cd3      	ldrb	r3, [r2, r3]
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	40d3      	lsrs	r3, r2
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	08006280 	.word	0x08006280

08003284 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	60fb      	str	r3, [r7, #12]
 800328e:	2300      	movs	r3, #0
 8003290:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003292:	f7ff ff01 	bl	8003098 <LL_RCC_PLL_GetMainSource>
 8003296:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d004      	beq.n	80032a8 <RCC_PLL_GetFreqDomain_SYS+0x24>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a4:	d003      	beq.n	80032ae <RCC_PLL_GetFreqDomain_SYS+0x2a>
 80032a6:	e005      	b.n	80032b4 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 80032a8:	4b13      	ldr	r3, [pc, #76]	; (80032f8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80032aa:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80032ac:	e005      	b.n	80032ba <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80032ae:	4b13      	ldr	r3, [pc, #76]	; (80032fc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80032b0:	60fb      	str	r3, [r7, #12]
      break;
 80032b2:	e002      	b.n	80032ba <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 80032b4:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80032b6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80032b8:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 80032ba:	f7ff ff09 	bl	80030d0 <LL_RCC_PLL_GetPrediv>
 80032be:	4603      	mov	r3, r0
 80032c0:	3301      	adds	r3, #1
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	fbb2 f4f3 	udiv	r4, r2, r3
 80032c8:	f7ff fef4 	bl	80030b4 <LL_RCC_PLL_GetMultiplicator>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80032d2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80032d6:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	fa92 f2a2 	rbit	r2, r2
 80032de:	603a      	str	r2, [r7, #0]
  return result;
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	fab2 f282 	clz	r2, r2
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	40d3      	lsrs	r3, r2
 80032ea:	3302      	adds	r3, #2
 80032ec:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd90      	pop	{r4, r7, pc}
 80032f8:	003d0900 	.word	0x003d0900
 80032fc:	007a1200 	.word	0x007a1200

08003300 <LL_USART_IsEnabled>:
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <LL_USART_IsEnabled+0x18>
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <LL_USART_IsEnabled+0x1a>
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <LL_USART_SetStopBitsLength>:
{
 8003326:	b480      	push	{r7}
 8003328:	b083      	sub	sp, #12
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	605a      	str	r2, [r3, #4]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <LL_USART_SetHWFlowCtrl>:
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	431a      	orrs	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	609a      	str	r2, [r3, #8]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_USART_SetBaudRate>:
{
 8003372:	b480      	push	{r7}
 8003374:	b087      	sub	sp, #28
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
 800337e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003386:	d11a      	bne.n	80033be <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	005a      	lsls	r2, r3, #1
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	085b      	lsrs	r3, r3, #1
 8003390:	441a      	add	r2, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	fbb2 f3f3 	udiv	r3, r2, r3
 8003398:	b29b      	uxth	r3, r3
 800339a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	60da      	str	r2, [r3, #12]
}
 80033bc:	e00a      	b.n	80033d4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	085a      	lsrs	r2, r3, #1
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	441a      	add	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	60da      	str	r2, [r3, #12]
}
 80033d4:	bf00      	nop
 80033d6:	371c      	adds	r7, #28
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff ff84 	bl	8003300 <LL_USART_IsEnabled>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d14e      	bne.n	800349c <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4b29      	ldr	r3, [pc, #164]	; (80034a8 <LL_USART_Init+0xc8>)
 8003404:	4013      	ands	r3, r2
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	6851      	ldr	r1, [r2, #4]
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	4311      	orrs	r1, r2
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	6912      	ldr	r2, [r2, #16]
 8003414:	4311      	orrs	r1, r2
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	6992      	ldr	r2, [r2, #24]
 800341a:	430a      	orrs	r2, r1
 800341c:	431a      	orrs	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	4619      	mov	r1, r3
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f7ff ff7c 	bl	8003326 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	4619      	mov	r1, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff89 	bl	800334c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a1b      	ldr	r2, [pc, #108]	; (80034ac <LL_USART_Init+0xcc>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d104      	bne.n	800344c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003442:	2000      	movs	r0, #0
 8003444:	f7ff fe78 	bl	8003138 <LL_RCC_GetUSARTClockFreq>
 8003448:	61b8      	str	r0, [r7, #24]
 800344a:	e016      	b.n	800347a <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <LL_USART_Init+0xd0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d107      	bne.n	8003464 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003454:	f107 0308 	add.w	r3, r7, #8
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff fe47 	bl	80030ec <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e00a      	b.n	800347a <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a13      	ldr	r2, [pc, #76]	; (80034b4 <LL_USART_Init+0xd4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d106      	bne.n	800347a <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 800346c:	f107 0308 	add.w	r3, r7, #8
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff fe3b 	bl	80030ec <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8003488:	2300      	movs	r3, #0
 800348a:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ff6b 	bl	8003372 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800349c:	7ffb      	ldrb	r3, [r7, #31]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3720      	adds	r7, #32
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	efff69f3 	.word	0xefff69f3
 80034ac:	40013800 	.word	0x40013800
 80034b0:	40004400 	.word	0x40004400
 80034b4:	40004800 	.word	0x40004800

080034b8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ca:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <LL_InitTick+0x30>)
 80034cc:	3b01      	subs	r3, #1
 80034ce:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <LL_InitTick+0x30>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d6:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <LL_InitTick+0x30>)
 80034d8:	2205      	movs	r2, #5
 80034da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	e000e010 	.word	0xe000e010

080034ec <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80034f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f7ff ffdd 	bl	80034b8 <LL_InitTick>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003510:	4a04      	ldr	r2, [pc, #16]	; (8003524 <LL_SetSystemCoreClock+0x1c>)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6013      	str	r3, [r2, #0]
}
 8003516:	bf00      	nop
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	20000004 	.word	0x20000004

08003528 <malloc>:
 8003528:	4b02      	ldr	r3, [pc, #8]	; (8003534 <malloc+0xc>)
 800352a:	4601      	mov	r1, r0
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	f000 b82b 	b.w	8003588 <_malloc_r>
 8003532:	bf00      	nop
 8003534:	20000060 	.word	0x20000060

08003538 <free>:
 8003538:	4b02      	ldr	r3, [pc, #8]	; (8003544 <free+0xc>)
 800353a:	4601      	mov	r1, r0
 800353c:	6818      	ldr	r0, [r3, #0]
 800353e:	f001 bd45 	b.w	8004fcc <_free_r>
 8003542:	bf00      	nop
 8003544:	20000060 	.word	0x20000060

08003548 <sbrk_aligned>:
 8003548:	b570      	push	{r4, r5, r6, lr}
 800354a:	4e0e      	ldr	r6, [pc, #56]	; (8003584 <sbrk_aligned+0x3c>)
 800354c:	460c      	mov	r4, r1
 800354e:	6831      	ldr	r1, [r6, #0]
 8003550:	4605      	mov	r5, r0
 8003552:	b911      	cbnz	r1, 800355a <sbrk_aligned+0x12>
 8003554:	f000 fe70 	bl	8004238 <_sbrk_r>
 8003558:	6030      	str	r0, [r6, #0]
 800355a:	4621      	mov	r1, r4
 800355c:	4628      	mov	r0, r5
 800355e:	f000 fe6b 	bl	8004238 <_sbrk_r>
 8003562:	1c43      	adds	r3, r0, #1
 8003564:	d00a      	beq.n	800357c <sbrk_aligned+0x34>
 8003566:	1cc4      	adds	r4, r0, #3
 8003568:	f024 0403 	bic.w	r4, r4, #3
 800356c:	42a0      	cmp	r0, r4
 800356e:	d007      	beq.n	8003580 <sbrk_aligned+0x38>
 8003570:	1a21      	subs	r1, r4, r0
 8003572:	4628      	mov	r0, r5
 8003574:	f000 fe60 	bl	8004238 <_sbrk_r>
 8003578:	3001      	adds	r0, #1
 800357a:	d101      	bne.n	8003580 <sbrk_aligned+0x38>
 800357c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003580:	4620      	mov	r0, r4
 8003582:	bd70      	pop	{r4, r5, r6, pc}
 8003584:	200002a4 	.word	0x200002a4

08003588 <_malloc_r>:
 8003588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800358c:	1ccd      	adds	r5, r1, #3
 800358e:	f025 0503 	bic.w	r5, r5, #3
 8003592:	3508      	adds	r5, #8
 8003594:	2d0c      	cmp	r5, #12
 8003596:	bf38      	it	cc
 8003598:	250c      	movcc	r5, #12
 800359a:	2d00      	cmp	r5, #0
 800359c:	4607      	mov	r7, r0
 800359e:	db01      	blt.n	80035a4 <_malloc_r+0x1c>
 80035a0:	42a9      	cmp	r1, r5
 80035a2:	d905      	bls.n	80035b0 <_malloc_r+0x28>
 80035a4:	230c      	movs	r3, #12
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	2600      	movs	r6, #0
 80035aa:	4630      	mov	r0, r6
 80035ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003684 <_malloc_r+0xfc>
 80035b4:	f000 f868 	bl	8003688 <__malloc_lock>
 80035b8:	f8d8 3000 	ldr.w	r3, [r8]
 80035bc:	461c      	mov	r4, r3
 80035be:	bb5c      	cbnz	r4, 8003618 <_malloc_r+0x90>
 80035c0:	4629      	mov	r1, r5
 80035c2:	4638      	mov	r0, r7
 80035c4:	f7ff ffc0 	bl	8003548 <sbrk_aligned>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	4604      	mov	r4, r0
 80035cc:	d155      	bne.n	800367a <_malloc_r+0xf2>
 80035ce:	f8d8 4000 	ldr.w	r4, [r8]
 80035d2:	4626      	mov	r6, r4
 80035d4:	2e00      	cmp	r6, #0
 80035d6:	d145      	bne.n	8003664 <_malloc_r+0xdc>
 80035d8:	2c00      	cmp	r4, #0
 80035da:	d048      	beq.n	800366e <_malloc_r+0xe6>
 80035dc:	6823      	ldr	r3, [r4, #0]
 80035de:	4631      	mov	r1, r6
 80035e0:	4638      	mov	r0, r7
 80035e2:	eb04 0903 	add.w	r9, r4, r3
 80035e6:	f000 fe27 	bl	8004238 <_sbrk_r>
 80035ea:	4581      	cmp	r9, r0
 80035ec:	d13f      	bne.n	800366e <_malloc_r+0xe6>
 80035ee:	6821      	ldr	r1, [r4, #0]
 80035f0:	1a6d      	subs	r5, r5, r1
 80035f2:	4629      	mov	r1, r5
 80035f4:	4638      	mov	r0, r7
 80035f6:	f7ff ffa7 	bl	8003548 <sbrk_aligned>
 80035fa:	3001      	adds	r0, #1
 80035fc:	d037      	beq.n	800366e <_malloc_r+0xe6>
 80035fe:	6823      	ldr	r3, [r4, #0]
 8003600:	442b      	add	r3, r5
 8003602:	6023      	str	r3, [r4, #0]
 8003604:	f8d8 3000 	ldr.w	r3, [r8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d038      	beq.n	800367e <_malloc_r+0xf6>
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	42a2      	cmp	r2, r4
 8003610:	d12b      	bne.n	800366a <_malloc_r+0xe2>
 8003612:	2200      	movs	r2, #0
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	e00f      	b.n	8003638 <_malloc_r+0xb0>
 8003618:	6822      	ldr	r2, [r4, #0]
 800361a:	1b52      	subs	r2, r2, r5
 800361c:	d41f      	bmi.n	800365e <_malloc_r+0xd6>
 800361e:	2a0b      	cmp	r2, #11
 8003620:	d917      	bls.n	8003652 <_malloc_r+0xca>
 8003622:	1961      	adds	r1, r4, r5
 8003624:	42a3      	cmp	r3, r4
 8003626:	6025      	str	r5, [r4, #0]
 8003628:	bf18      	it	ne
 800362a:	6059      	strne	r1, [r3, #4]
 800362c:	6863      	ldr	r3, [r4, #4]
 800362e:	bf08      	it	eq
 8003630:	f8c8 1000 	streq.w	r1, [r8]
 8003634:	5162      	str	r2, [r4, r5]
 8003636:	604b      	str	r3, [r1, #4]
 8003638:	4638      	mov	r0, r7
 800363a:	f104 060b 	add.w	r6, r4, #11
 800363e:	f000 f829 	bl	8003694 <__malloc_unlock>
 8003642:	f026 0607 	bic.w	r6, r6, #7
 8003646:	1d23      	adds	r3, r4, #4
 8003648:	1af2      	subs	r2, r6, r3
 800364a:	d0ae      	beq.n	80035aa <_malloc_r+0x22>
 800364c:	1b9b      	subs	r3, r3, r6
 800364e:	50a3      	str	r3, [r4, r2]
 8003650:	e7ab      	b.n	80035aa <_malloc_r+0x22>
 8003652:	42a3      	cmp	r3, r4
 8003654:	6862      	ldr	r2, [r4, #4]
 8003656:	d1dd      	bne.n	8003614 <_malloc_r+0x8c>
 8003658:	f8c8 2000 	str.w	r2, [r8]
 800365c:	e7ec      	b.n	8003638 <_malloc_r+0xb0>
 800365e:	4623      	mov	r3, r4
 8003660:	6864      	ldr	r4, [r4, #4]
 8003662:	e7ac      	b.n	80035be <_malloc_r+0x36>
 8003664:	4634      	mov	r4, r6
 8003666:	6876      	ldr	r6, [r6, #4]
 8003668:	e7b4      	b.n	80035d4 <_malloc_r+0x4c>
 800366a:	4613      	mov	r3, r2
 800366c:	e7cc      	b.n	8003608 <_malloc_r+0x80>
 800366e:	230c      	movs	r3, #12
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4638      	mov	r0, r7
 8003674:	f000 f80e 	bl	8003694 <__malloc_unlock>
 8003678:	e797      	b.n	80035aa <_malloc_r+0x22>
 800367a:	6025      	str	r5, [r4, #0]
 800367c:	e7dc      	b.n	8003638 <_malloc_r+0xb0>
 800367e:	605b      	str	r3, [r3, #4]
 8003680:	deff      	udf	#255	; 0xff
 8003682:	bf00      	nop
 8003684:	200002a0 	.word	0x200002a0

08003688 <__malloc_lock>:
 8003688:	4801      	ldr	r0, [pc, #4]	; (8003690 <__malloc_lock+0x8>)
 800368a:	f000 be22 	b.w	80042d2 <__retarget_lock_acquire_recursive>
 800368e:	bf00      	nop
 8003690:	200003e8 	.word	0x200003e8

08003694 <__malloc_unlock>:
 8003694:	4801      	ldr	r0, [pc, #4]	; (800369c <__malloc_unlock+0x8>)
 8003696:	f000 be1d 	b.w	80042d4 <__retarget_lock_release_recursive>
 800369a:	bf00      	nop
 800369c:	200003e8 	.word	0x200003e8

080036a0 <__cvt>:
 80036a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	ec55 4b10 	vmov	r4, r5, d0
 80036a8:	2d00      	cmp	r5, #0
 80036aa:	460e      	mov	r6, r1
 80036ac:	4619      	mov	r1, r3
 80036ae:	462b      	mov	r3, r5
 80036b0:	bfbb      	ittet	lt
 80036b2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80036b6:	461d      	movlt	r5, r3
 80036b8:	2300      	movge	r3, #0
 80036ba:	232d      	movlt	r3, #45	; 0x2d
 80036bc:	700b      	strb	r3, [r1, #0]
 80036be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80036c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80036c4:	4691      	mov	r9, r2
 80036c6:	f023 0820 	bic.w	r8, r3, #32
 80036ca:	bfbc      	itt	lt
 80036cc:	4622      	movlt	r2, r4
 80036ce:	4614      	movlt	r4, r2
 80036d0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036d4:	d005      	beq.n	80036e2 <__cvt+0x42>
 80036d6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80036da:	d100      	bne.n	80036de <__cvt+0x3e>
 80036dc:	3601      	adds	r6, #1
 80036de:	2102      	movs	r1, #2
 80036e0:	e000      	b.n	80036e4 <__cvt+0x44>
 80036e2:	2103      	movs	r1, #3
 80036e4:	ab03      	add	r3, sp, #12
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	ab02      	add	r3, sp, #8
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	ec45 4b10 	vmov	d0, r4, r5
 80036f0:	4653      	mov	r3, sl
 80036f2:	4632      	mov	r2, r6
 80036f4:	f000 fe78 	bl	80043e8 <_dtoa_r>
 80036f8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80036fc:	4607      	mov	r7, r0
 80036fe:	d102      	bne.n	8003706 <__cvt+0x66>
 8003700:	f019 0f01 	tst.w	r9, #1
 8003704:	d022      	beq.n	800374c <__cvt+0xac>
 8003706:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800370a:	eb07 0906 	add.w	r9, r7, r6
 800370e:	d110      	bne.n	8003732 <__cvt+0x92>
 8003710:	783b      	ldrb	r3, [r7, #0]
 8003712:	2b30      	cmp	r3, #48	; 0x30
 8003714:	d10a      	bne.n	800372c <__cvt+0x8c>
 8003716:	2200      	movs	r2, #0
 8003718:	2300      	movs	r3, #0
 800371a:	4620      	mov	r0, r4
 800371c:	4629      	mov	r1, r5
 800371e:	f7fd f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8003722:	b918      	cbnz	r0, 800372c <__cvt+0x8c>
 8003724:	f1c6 0601 	rsb	r6, r6, #1
 8003728:	f8ca 6000 	str.w	r6, [sl]
 800372c:	f8da 3000 	ldr.w	r3, [sl]
 8003730:	4499      	add	r9, r3
 8003732:	2200      	movs	r2, #0
 8003734:	2300      	movs	r3, #0
 8003736:	4620      	mov	r0, r4
 8003738:	4629      	mov	r1, r5
 800373a:	f7fd f9c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800373e:	b108      	cbz	r0, 8003744 <__cvt+0xa4>
 8003740:	f8cd 900c 	str.w	r9, [sp, #12]
 8003744:	2230      	movs	r2, #48	; 0x30
 8003746:	9b03      	ldr	r3, [sp, #12]
 8003748:	454b      	cmp	r3, r9
 800374a:	d307      	bcc.n	800375c <__cvt+0xbc>
 800374c:	9b03      	ldr	r3, [sp, #12]
 800374e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003750:	1bdb      	subs	r3, r3, r7
 8003752:	4638      	mov	r0, r7
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	b004      	add	sp, #16
 8003758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800375c:	1c59      	adds	r1, r3, #1
 800375e:	9103      	str	r1, [sp, #12]
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e7f0      	b.n	8003746 <__cvt+0xa6>

08003764 <__exponent>:
 8003764:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003766:	4603      	mov	r3, r0
 8003768:	2900      	cmp	r1, #0
 800376a:	bfb8      	it	lt
 800376c:	4249      	neglt	r1, r1
 800376e:	f803 2b02 	strb.w	r2, [r3], #2
 8003772:	bfb4      	ite	lt
 8003774:	222d      	movlt	r2, #45	; 0x2d
 8003776:	222b      	movge	r2, #43	; 0x2b
 8003778:	2909      	cmp	r1, #9
 800377a:	7042      	strb	r2, [r0, #1]
 800377c:	dd2a      	ble.n	80037d4 <__exponent+0x70>
 800377e:	f10d 0207 	add.w	r2, sp, #7
 8003782:	4617      	mov	r7, r2
 8003784:	260a      	movs	r6, #10
 8003786:	4694      	mov	ip, r2
 8003788:	fb91 f5f6 	sdiv	r5, r1, r6
 800378c:	fb06 1415 	mls	r4, r6, r5, r1
 8003790:	3430      	adds	r4, #48	; 0x30
 8003792:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003796:	460c      	mov	r4, r1
 8003798:	2c63      	cmp	r4, #99	; 0x63
 800379a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800379e:	4629      	mov	r1, r5
 80037a0:	dcf1      	bgt.n	8003786 <__exponent+0x22>
 80037a2:	3130      	adds	r1, #48	; 0x30
 80037a4:	f1ac 0402 	sub.w	r4, ip, #2
 80037a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80037ac:	1c41      	adds	r1, r0, #1
 80037ae:	4622      	mov	r2, r4
 80037b0:	42ba      	cmp	r2, r7
 80037b2:	d30a      	bcc.n	80037ca <__exponent+0x66>
 80037b4:	f10d 0209 	add.w	r2, sp, #9
 80037b8:	eba2 020c 	sub.w	r2, r2, ip
 80037bc:	42bc      	cmp	r4, r7
 80037be:	bf88      	it	hi
 80037c0:	2200      	movhi	r2, #0
 80037c2:	4413      	add	r3, r2
 80037c4:	1a18      	subs	r0, r3, r0
 80037c6:	b003      	add	sp, #12
 80037c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037ca:	f812 5b01 	ldrb.w	r5, [r2], #1
 80037ce:	f801 5f01 	strb.w	r5, [r1, #1]!
 80037d2:	e7ed      	b.n	80037b0 <__exponent+0x4c>
 80037d4:	2330      	movs	r3, #48	; 0x30
 80037d6:	3130      	adds	r1, #48	; 0x30
 80037d8:	7083      	strb	r3, [r0, #2]
 80037da:	70c1      	strb	r1, [r0, #3]
 80037dc:	1d03      	adds	r3, r0, #4
 80037de:	e7f1      	b.n	80037c4 <__exponent+0x60>

080037e0 <_printf_float>:
 80037e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e4:	ed2d 8b02 	vpush	{d8}
 80037e8:	b08d      	sub	sp, #52	; 0x34
 80037ea:	460c      	mov	r4, r1
 80037ec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80037f0:	4616      	mov	r6, r2
 80037f2:	461f      	mov	r7, r3
 80037f4:	4605      	mov	r5, r0
 80037f6:	f000 fce7 	bl	80041c8 <_localeconv_r>
 80037fa:	f8d0 a000 	ldr.w	sl, [r0]
 80037fe:	4650      	mov	r0, sl
 8003800:	f7fc fd36 	bl	8000270 <strlen>
 8003804:	2300      	movs	r3, #0
 8003806:	930a      	str	r3, [sp, #40]	; 0x28
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	9305      	str	r3, [sp, #20]
 800380c:	f8d8 3000 	ldr.w	r3, [r8]
 8003810:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003814:	3307      	adds	r3, #7
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	f103 0208 	add.w	r2, r3, #8
 800381e:	f8c8 2000 	str.w	r2, [r8]
 8003822:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003826:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800382a:	9307      	str	r3, [sp, #28]
 800382c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003830:	ee08 0a10 	vmov	s16, r0
 8003834:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003838:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800383c:	4b9e      	ldr	r3, [pc, #632]	; (8003ab8 <_printf_float+0x2d8>)
 800383e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003842:	f7fd f973 	bl	8000b2c <__aeabi_dcmpun>
 8003846:	bb88      	cbnz	r0, 80038ac <_printf_float+0xcc>
 8003848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800384c:	4b9a      	ldr	r3, [pc, #616]	; (8003ab8 <_printf_float+0x2d8>)
 800384e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003852:	f7fd f94d 	bl	8000af0 <__aeabi_dcmple>
 8003856:	bb48      	cbnz	r0, 80038ac <_printf_float+0xcc>
 8003858:	2200      	movs	r2, #0
 800385a:	2300      	movs	r3, #0
 800385c:	4640      	mov	r0, r8
 800385e:	4649      	mov	r1, r9
 8003860:	f7fd f93c 	bl	8000adc <__aeabi_dcmplt>
 8003864:	b110      	cbz	r0, 800386c <_printf_float+0x8c>
 8003866:	232d      	movs	r3, #45	; 0x2d
 8003868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800386c:	4a93      	ldr	r2, [pc, #588]	; (8003abc <_printf_float+0x2dc>)
 800386e:	4b94      	ldr	r3, [pc, #592]	; (8003ac0 <_printf_float+0x2e0>)
 8003870:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003874:	bf94      	ite	ls
 8003876:	4690      	movls	r8, r2
 8003878:	4698      	movhi	r8, r3
 800387a:	2303      	movs	r3, #3
 800387c:	6123      	str	r3, [r4, #16]
 800387e:	9b05      	ldr	r3, [sp, #20]
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	f04f 0900 	mov.w	r9, #0
 800388a:	9700      	str	r7, [sp, #0]
 800388c:	4633      	mov	r3, r6
 800388e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003890:	4621      	mov	r1, r4
 8003892:	4628      	mov	r0, r5
 8003894:	f000 f9da 	bl	8003c4c <_printf_common>
 8003898:	3001      	adds	r0, #1
 800389a:	f040 8090 	bne.w	80039be <_printf_float+0x1de>
 800389e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038a2:	b00d      	add	sp, #52	; 0x34
 80038a4:	ecbd 8b02 	vpop	{d8}
 80038a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ac:	4642      	mov	r2, r8
 80038ae:	464b      	mov	r3, r9
 80038b0:	4640      	mov	r0, r8
 80038b2:	4649      	mov	r1, r9
 80038b4:	f7fd f93a 	bl	8000b2c <__aeabi_dcmpun>
 80038b8:	b140      	cbz	r0, 80038cc <_printf_float+0xec>
 80038ba:	464b      	mov	r3, r9
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bfbc      	itt	lt
 80038c0:	232d      	movlt	r3, #45	; 0x2d
 80038c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80038c6:	4a7f      	ldr	r2, [pc, #508]	; (8003ac4 <_printf_float+0x2e4>)
 80038c8:	4b7f      	ldr	r3, [pc, #508]	; (8003ac8 <_printf_float+0x2e8>)
 80038ca:	e7d1      	b.n	8003870 <_printf_float+0x90>
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80038d2:	9206      	str	r2, [sp, #24]
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	d13f      	bne.n	8003958 <_printf_float+0x178>
 80038d8:	2306      	movs	r3, #6
 80038da:	6063      	str	r3, [r4, #4]
 80038dc:	9b05      	ldr	r3, [sp, #20]
 80038de:	6861      	ldr	r1, [r4, #4]
 80038e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80038e4:	2300      	movs	r3, #0
 80038e6:	9303      	str	r3, [sp, #12]
 80038e8:	ab0a      	add	r3, sp, #40	; 0x28
 80038ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 80038ee:	ab09      	add	r3, sp, #36	; 0x24
 80038f0:	ec49 8b10 	vmov	d0, r8, r9
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	6022      	str	r2, [r4, #0]
 80038f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80038fc:	4628      	mov	r0, r5
 80038fe:	f7ff fecf 	bl	80036a0 <__cvt>
 8003902:	9b06      	ldr	r3, [sp, #24]
 8003904:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003906:	2b47      	cmp	r3, #71	; 0x47
 8003908:	4680      	mov	r8, r0
 800390a:	d108      	bne.n	800391e <_printf_float+0x13e>
 800390c:	1cc8      	adds	r0, r1, #3
 800390e:	db02      	blt.n	8003916 <_printf_float+0x136>
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	4299      	cmp	r1, r3
 8003914:	dd41      	ble.n	800399a <_printf_float+0x1ba>
 8003916:	f1ab 0302 	sub.w	r3, fp, #2
 800391a:	fa5f fb83 	uxtb.w	fp, r3
 800391e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003922:	d820      	bhi.n	8003966 <_printf_float+0x186>
 8003924:	3901      	subs	r1, #1
 8003926:	465a      	mov	r2, fp
 8003928:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800392c:	9109      	str	r1, [sp, #36]	; 0x24
 800392e:	f7ff ff19 	bl	8003764 <__exponent>
 8003932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003934:	1813      	adds	r3, r2, r0
 8003936:	2a01      	cmp	r2, #1
 8003938:	4681      	mov	r9, r0
 800393a:	6123      	str	r3, [r4, #16]
 800393c:	dc02      	bgt.n	8003944 <_printf_float+0x164>
 800393e:	6822      	ldr	r2, [r4, #0]
 8003940:	07d2      	lsls	r2, r2, #31
 8003942:	d501      	bpl.n	8003948 <_printf_float+0x168>
 8003944:	3301      	adds	r3, #1
 8003946:	6123      	str	r3, [r4, #16]
 8003948:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800394c:	2b00      	cmp	r3, #0
 800394e:	d09c      	beq.n	800388a <_printf_float+0xaa>
 8003950:	232d      	movs	r3, #45	; 0x2d
 8003952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003956:	e798      	b.n	800388a <_printf_float+0xaa>
 8003958:	9a06      	ldr	r2, [sp, #24]
 800395a:	2a47      	cmp	r2, #71	; 0x47
 800395c:	d1be      	bne.n	80038dc <_printf_float+0xfc>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1bc      	bne.n	80038dc <_printf_float+0xfc>
 8003962:	2301      	movs	r3, #1
 8003964:	e7b9      	b.n	80038da <_printf_float+0xfa>
 8003966:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800396a:	d118      	bne.n	800399e <_printf_float+0x1be>
 800396c:	2900      	cmp	r1, #0
 800396e:	6863      	ldr	r3, [r4, #4]
 8003970:	dd0b      	ble.n	800398a <_printf_float+0x1aa>
 8003972:	6121      	str	r1, [r4, #16]
 8003974:	b913      	cbnz	r3, 800397c <_printf_float+0x19c>
 8003976:	6822      	ldr	r2, [r4, #0]
 8003978:	07d0      	lsls	r0, r2, #31
 800397a:	d502      	bpl.n	8003982 <_printf_float+0x1a2>
 800397c:	3301      	adds	r3, #1
 800397e:	440b      	add	r3, r1
 8003980:	6123      	str	r3, [r4, #16]
 8003982:	65a1      	str	r1, [r4, #88]	; 0x58
 8003984:	f04f 0900 	mov.w	r9, #0
 8003988:	e7de      	b.n	8003948 <_printf_float+0x168>
 800398a:	b913      	cbnz	r3, 8003992 <_printf_float+0x1b2>
 800398c:	6822      	ldr	r2, [r4, #0]
 800398e:	07d2      	lsls	r2, r2, #31
 8003990:	d501      	bpl.n	8003996 <_printf_float+0x1b6>
 8003992:	3302      	adds	r3, #2
 8003994:	e7f4      	b.n	8003980 <_printf_float+0x1a0>
 8003996:	2301      	movs	r3, #1
 8003998:	e7f2      	b.n	8003980 <_printf_float+0x1a0>
 800399a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800399e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039a0:	4299      	cmp	r1, r3
 80039a2:	db05      	blt.n	80039b0 <_printf_float+0x1d0>
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	6121      	str	r1, [r4, #16]
 80039a8:	07d8      	lsls	r0, r3, #31
 80039aa:	d5ea      	bpl.n	8003982 <_printf_float+0x1a2>
 80039ac:	1c4b      	adds	r3, r1, #1
 80039ae:	e7e7      	b.n	8003980 <_printf_float+0x1a0>
 80039b0:	2900      	cmp	r1, #0
 80039b2:	bfd4      	ite	le
 80039b4:	f1c1 0202 	rsble	r2, r1, #2
 80039b8:	2201      	movgt	r2, #1
 80039ba:	4413      	add	r3, r2
 80039bc:	e7e0      	b.n	8003980 <_printf_float+0x1a0>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	055a      	lsls	r2, r3, #21
 80039c2:	d407      	bmi.n	80039d4 <_printf_float+0x1f4>
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	4642      	mov	r2, r8
 80039c8:	4631      	mov	r1, r6
 80039ca:	4628      	mov	r0, r5
 80039cc:	47b8      	blx	r7
 80039ce:	3001      	adds	r0, #1
 80039d0:	d12c      	bne.n	8003a2c <_printf_float+0x24c>
 80039d2:	e764      	b.n	800389e <_printf_float+0xbe>
 80039d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80039d8:	f240 80e0 	bls.w	8003b9c <_printf_float+0x3bc>
 80039dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039e0:	2200      	movs	r2, #0
 80039e2:	2300      	movs	r3, #0
 80039e4:	f7fd f870 	bl	8000ac8 <__aeabi_dcmpeq>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d034      	beq.n	8003a56 <_printf_float+0x276>
 80039ec:	4a37      	ldr	r2, [pc, #220]	; (8003acc <_printf_float+0x2ec>)
 80039ee:	2301      	movs	r3, #1
 80039f0:	4631      	mov	r1, r6
 80039f2:	4628      	mov	r0, r5
 80039f4:	47b8      	blx	r7
 80039f6:	3001      	adds	r0, #1
 80039f8:	f43f af51 	beq.w	800389e <_printf_float+0xbe>
 80039fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a00:	429a      	cmp	r2, r3
 8003a02:	db02      	blt.n	8003a0a <_printf_float+0x22a>
 8003a04:	6823      	ldr	r3, [r4, #0]
 8003a06:	07d8      	lsls	r0, r3, #31
 8003a08:	d510      	bpl.n	8003a2c <_printf_float+0x24c>
 8003a0a:	ee18 3a10 	vmov	r3, s16
 8003a0e:	4652      	mov	r2, sl
 8003a10:	4631      	mov	r1, r6
 8003a12:	4628      	mov	r0, r5
 8003a14:	47b8      	blx	r7
 8003a16:	3001      	adds	r0, #1
 8003a18:	f43f af41 	beq.w	800389e <_printf_float+0xbe>
 8003a1c:	f04f 0800 	mov.w	r8, #0
 8003a20:	f104 091a 	add.w	r9, r4, #26
 8003a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	4543      	cmp	r3, r8
 8003a2a:	dc09      	bgt.n	8003a40 <_printf_float+0x260>
 8003a2c:	6823      	ldr	r3, [r4, #0]
 8003a2e:	079b      	lsls	r3, r3, #30
 8003a30:	f100 8107 	bmi.w	8003c42 <_printf_float+0x462>
 8003a34:	68e0      	ldr	r0, [r4, #12]
 8003a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	bfb8      	it	lt
 8003a3c:	4618      	movlt	r0, r3
 8003a3e:	e730      	b.n	80038a2 <_printf_float+0xc2>
 8003a40:	2301      	movs	r3, #1
 8003a42:	464a      	mov	r2, r9
 8003a44:	4631      	mov	r1, r6
 8003a46:	4628      	mov	r0, r5
 8003a48:	47b8      	blx	r7
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	f43f af27 	beq.w	800389e <_printf_float+0xbe>
 8003a50:	f108 0801 	add.w	r8, r8, #1
 8003a54:	e7e6      	b.n	8003a24 <_printf_float+0x244>
 8003a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	dc39      	bgt.n	8003ad0 <_printf_float+0x2f0>
 8003a5c:	4a1b      	ldr	r2, [pc, #108]	; (8003acc <_printf_float+0x2ec>)
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4631      	mov	r1, r6
 8003a62:	4628      	mov	r0, r5
 8003a64:	47b8      	blx	r7
 8003a66:	3001      	adds	r0, #1
 8003a68:	f43f af19 	beq.w	800389e <_printf_float+0xbe>
 8003a6c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003a70:	4313      	orrs	r3, r2
 8003a72:	d102      	bne.n	8003a7a <_printf_float+0x29a>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	07d9      	lsls	r1, r3, #31
 8003a78:	d5d8      	bpl.n	8003a2c <_printf_float+0x24c>
 8003a7a:	ee18 3a10 	vmov	r3, s16
 8003a7e:	4652      	mov	r2, sl
 8003a80:	4631      	mov	r1, r6
 8003a82:	4628      	mov	r0, r5
 8003a84:	47b8      	blx	r7
 8003a86:	3001      	adds	r0, #1
 8003a88:	f43f af09 	beq.w	800389e <_printf_float+0xbe>
 8003a8c:	f04f 0900 	mov.w	r9, #0
 8003a90:	f104 0a1a 	add.w	sl, r4, #26
 8003a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a96:	425b      	negs	r3, r3
 8003a98:	454b      	cmp	r3, r9
 8003a9a:	dc01      	bgt.n	8003aa0 <_printf_float+0x2c0>
 8003a9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a9e:	e792      	b.n	80039c6 <_printf_float+0x1e6>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	4652      	mov	r2, sl
 8003aa4:	4631      	mov	r1, r6
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	47b8      	blx	r7
 8003aaa:	3001      	adds	r0, #1
 8003aac:	f43f aef7 	beq.w	800389e <_printf_float+0xbe>
 8003ab0:	f109 0901 	add.w	r9, r9, #1
 8003ab4:	e7ee      	b.n	8003a94 <_printf_float+0x2b4>
 8003ab6:	bf00      	nop
 8003ab8:	7fefffff 	.word	0x7fefffff
 8003abc:	0800628f 	.word	0x0800628f
 8003ac0:	08006293 	.word	0x08006293
 8003ac4:	08006297 	.word	0x08006297
 8003ac8:	0800629b 	.word	0x0800629b
 8003acc:	0800629f 	.word	0x0800629f
 8003ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ad2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	bfa8      	it	ge
 8003ad8:	461a      	movge	r2, r3
 8003ada:	2a00      	cmp	r2, #0
 8003adc:	4691      	mov	r9, r2
 8003ade:	dc37      	bgt.n	8003b50 <_printf_float+0x370>
 8003ae0:	f04f 0b00 	mov.w	fp, #0
 8003ae4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ae8:	f104 021a 	add.w	r2, r4, #26
 8003aec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003aee:	9305      	str	r3, [sp, #20]
 8003af0:	eba3 0309 	sub.w	r3, r3, r9
 8003af4:	455b      	cmp	r3, fp
 8003af6:	dc33      	bgt.n	8003b60 <_printf_float+0x380>
 8003af8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003afc:	429a      	cmp	r2, r3
 8003afe:	db3b      	blt.n	8003b78 <_printf_float+0x398>
 8003b00:	6823      	ldr	r3, [r4, #0]
 8003b02:	07da      	lsls	r2, r3, #31
 8003b04:	d438      	bmi.n	8003b78 <_printf_float+0x398>
 8003b06:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003b0a:	eba2 0903 	sub.w	r9, r2, r3
 8003b0e:	9b05      	ldr	r3, [sp, #20]
 8003b10:	1ad2      	subs	r2, r2, r3
 8003b12:	4591      	cmp	r9, r2
 8003b14:	bfa8      	it	ge
 8003b16:	4691      	movge	r9, r2
 8003b18:	f1b9 0f00 	cmp.w	r9, #0
 8003b1c:	dc35      	bgt.n	8003b8a <_printf_float+0x3aa>
 8003b1e:	f04f 0800 	mov.w	r8, #0
 8003b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b26:	f104 0a1a 	add.w	sl, r4, #26
 8003b2a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	eba3 0309 	sub.w	r3, r3, r9
 8003b34:	4543      	cmp	r3, r8
 8003b36:	f77f af79 	ble.w	8003a2c <_printf_float+0x24c>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	4652      	mov	r2, sl
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4628      	mov	r0, r5
 8003b42:	47b8      	blx	r7
 8003b44:	3001      	adds	r0, #1
 8003b46:	f43f aeaa 	beq.w	800389e <_printf_float+0xbe>
 8003b4a:	f108 0801 	add.w	r8, r8, #1
 8003b4e:	e7ec      	b.n	8003b2a <_printf_float+0x34a>
 8003b50:	4613      	mov	r3, r2
 8003b52:	4631      	mov	r1, r6
 8003b54:	4642      	mov	r2, r8
 8003b56:	4628      	mov	r0, r5
 8003b58:	47b8      	blx	r7
 8003b5a:	3001      	adds	r0, #1
 8003b5c:	d1c0      	bne.n	8003ae0 <_printf_float+0x300>
 8003b5e:	e69e      	b.n	800389e <_printf_float+0xbe>
 8003b60:	2301      	movs	r3, #1
 8003b62:	4631      	mov	r1, r6
 8003b64:	4628      	mov	r0, r5
 8003b66:	9205      	str	r2, [sp, #20]
 8003b68:	47b8      	blx	r7
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f43f ae97 	beq.w	800389e <_printf_float+0xbe>
 8003b70:	9a05      	ldr	r2, [sp, #20]
 8003b72:	f10b 0b01 	add.w	fp, fp, #1
 8003b76:	e7b9      	b.n	8003aec <_printf_float+0x30c>
 8003b78:	ee18 3a10 	vmov	r3, s16
 8003b7c:	4652      	mov	r2, sl
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b8      	blx	r7
 8003b84:	3001      	adds	r0, #1
 8003b86:	d1be      	bne.n	8003b06 <_printf_float+0x326>
 8003b88:	e689      	b.n	800389e <_printf_float+0xbe>
 8003b8a:	9a05      	ldr	r2, [sp, #20]
 8003b8c:	464b      	mov	r3, r9
 8003b8e:	4442      	add	r2, r8
 8003b90:	4631      	mov	r1, r6
 8003b92:	4628      	mov	r0, r5
 8003b94:	47b8      	blx	r7
 8003b96:	3001      	adds	r0, #1
 8003b98:	d1c1      	bne.n	8003b1e <_printf_float+0x33e>
 8003b9a:	e680      	b.n	800389e <_printf_float+0xbe>
 8003b9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b9e:	2a01      	cmp	r2, #1
 8003ba0:	dc01      	bgt.n	8003ba6 <_printf_float+0x3c6>
 8003ba2:	07db      	lsls	r3, r3, #31
 8003ba4:	d53a      	bpl.n	8003c1c <_printf_float+0x43c>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	4642      	mov	r2, r8
 8003baa:	4631      	mov	r1, r6
 8003bac:	4628      	mov	r0, r5
 8003bae:	47b8      	blx	r7
 8003bb0:	3001      	adds	r0, #1
 8003bb2:	f43f ae74 	beq.w	800389e <_printf_float+0xbe>
 8003bb6:	ee18 3a10 	vmov	r3, s16
 8003bba:	4652      	mov	r2, sl
 8003bbc:	4631      	mov	r1, r6
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	47b8      	blx	r7
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	f43f ae6b 	beq.w	800389e <_printf_float+0xbe>
 8003bc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bcc:	2200      	movs	r2, #0
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003bd4:	f7fc ff78 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bd8:	b9d8      	cbnz	r0, 8003c12 <_printf_float+0x432>
 8003bda:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8003bde:	f108 0201 	add.w	r2, r8, #1
 8003be2:	4631      	mov	r1, r6
 8003be4:	4628      	mov	r0, r5
 8003be6:	47b8      	blx	r7
 8003be8:	3001      	adds	r0, #1
 8003bea:	d10e      	bne.n	8003c0a <_printf_float+0x42a>
 8003bec:	e657      	b.n	800389e <_printf_float+0xbe>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	4652      	mov	r2, sl
 8003bf2:	4631      	mov	r1, r6
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	47b8      	blx	r7
 8003bf8:	3001      	adds	r0, #1
 8003bfa:	f43f ae50 	beq.w	800389e <_printf_float+0xbe>
 8003bfe:	f108 0801 	add.w	r8, r8, #1
 8003c02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	4543      	cmp	r3, r8
 8003c08:	dcf1      	bgt.n	8003bee <_printf_float+0x40e>
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c10:	e6da      	b.n	80039c8 <_printf_float+0x1e8>
 8003c12:	f04f 0800 	mov.w	r8, #0
 8003c16:	f104 0a1a 	add.w	sl, r4, #26
 8003c1a:	e7f2      	b.n	8003c02 <_printf_float+0x422>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	4642      	mov	r2, r8
 8003c20:	e7df      	b.n	8003be2 <_printf_float+0x402>
 8003c22:	2301      	movs	r3, #1
 8003c24:	464a      	mov	r2, r9
 8003c26:	4631      	mov	r1, r6
 8003c28:	4628      	mov	r0, r5
 8003c2a:	47b8      	blx	r7
 8003c2c:	3001      	adds	r0, #1
 8003c2e:	f43f ae36 	beq.w	800389e <_printf_float+0xbe>
 8003c32:	f108 0801 	add.w	r8, r8, #1
 8003c36:	68e3      	ldr	r3, [r4, #12]
 8003c38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c3a:	1a5b      	subs	r3, r3, r1
 8003c3c:	4543      	cmp	r3, r8
 8003c3e:	dcf0      	bgt.n	8003c22 <_printf_float+0x442>
 8003c40:	e6f8      	b.n	8003a34 <_printf_float+0x254>
 8003c42:	f04f 0800 	mov.w	r8, #0
 8003c46:	f104 0919 	add.w	r9, r4, #25
 8003c4a:	e7f4      	b.n	8003c36 <_printf_float+0x456>

08003c4c <_printf_common>:
 8003c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c50:	4616      	mov	r6, r2
 8003c52:	4699      	mov	r9, r3
 8003c54:	688a      	ldr	r2, [r1, #8]
 8003c56:	690b      	ldr	r3, [r1, #16]
 8003c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	bfb8      	it	lt
 8003c60:	4613      	movlt	r3, r2
 8003c62:	6033      	str	r3, [r6, #0]
 8003c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c68:	4607      	mov	r7, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	b10a      	cbz	r2, 8003c72 <_printf_common+0x26>
 8003c6e:	3301      	adds	r3, #1
 8003c70:	6033      	str	r3, [r6, #0]
 8003c72:	6823      	ldr	r3, [r4, #0]
 8003c74:	0699      	lsls	r1, r3, #26
 8003c76:	bf42      	ittt	mi
 8003c78:	6833      	ldrmi	r3, [r6, #0]
 8003c7a:	3302      	addmi	r3, #2
 8003c7c:	6033      	strmi	r3, [r6, #0]
 8003c7e:	6825      	ldr	r5, [r4, #0]
 8003c80:	f015 0506 	ands.w	r5, r5, #6
 8003c84:	d106      	bne.n	8003c94 <_printf_common+0x48>
 8003c86:	f104 0a19 	add.w	sl, r4, #25
 8003c8a:	68e3      	ldr	r3, [r4, #12]
 8003c8c:	6832      	ldr	r2, [r6, #0]
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	42ab      	cmp	r3, r5
 8003c92:	dc26      	bgt.n	8003ce2 <_printf_common+0x96>
 8003c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c98:	1e13      	subs	r3, r2, #0
 8003c9a:	6822      	ldr	r2, [r4, #0]
 8003c9c:	bf18      	it	ne
 8003c9e:	2301      	movne	r3, #1
 8003ca0:	0692      	lsls	r2, r2, #26
 8003ca2:	d42b      	bmi.n	8003cfc <_printf_common+0xb0>
 8003ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ca8:	4649      	mov	r1, r9
 8003caa:	4638      	mov	r0, r7
 8003cac:	47c0      	blx	r8
 8003cae:	3001      	adds	r0, #1
 8003cb0:	d01e      	beq.n	8003cf0 <_printf_common+0xa4>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	6922      	ldr	r2, [r4, #16]
 8003cb6:	f003 0306 	and.w	r3, r3, #6
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	bf02      	ittt	eq
 8003cbe:	68e5      	ldreq	r5, [r4, #12]
 8003cc0:	6833      	ldreq	r3, [r6, #0]
 8003cc2:	1aed      	subeq	r5, r5, r3
 8003cc4:	68a3      	ldr	r3, [r4, #8]
 8003cc6:	bf0c      	ite	eq
 8003cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ccc:	2500      	movne	r5, #0
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	bfc4      	itt	gt
 8003cd2:	1a9b      	subgt	r3, r3, r2
 8003cd4:	18ed      	addgt	r5, r5, r3
 8003cd6:	2600      	movs	r6, #0
 8003cd8:	341a      	adds	r4, #26
 8003cda:	42b5      	cmp	r5, r6
 8003cdc:	d11a      	bne.n	8003d14 <_printf_common+0xc8>
 8003cde:	2000      	movs	r0, #0
 8003ce0:	e008      	b.n	8003cf4 <_printf_common+0xa8>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	4652      	mov	r2, sl
 8003ce6:	4649      	mov	r1, r9
 8003ce8:	4638      	mov	r0, r7
 8003cea:	47c0      	blx	r8
 8003cec:	3001      	adds	r0, #1
 8003cee:	d103      	bne.n	8003cf8 <_printf_common+0xac>
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	e7c6      	b.n	8003c8a <_printf_common+0x3e>
 8003cfc:	18e1      	adds	r1, r4, r3
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	2030      	movs	r0, #48	; 0x30
 8003d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d06:	4422      	add	r2, r4
 8003d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d10:	3302      	adds	r3, #2
 8003d12:	e7c7      	b.n	8003ca4 <_printf_common+0x58>
 8003d14:	2301      	movs	r3, #1
 8003d16:	4622      	mov	r2, r4
 8003d18:	4649      	mov	r1, r9
 8003d1a:	4638      	mov	r0, r7
 8003d1c:	47c0      	blx	r8
 8003d1e:	3001      	adds	r0, #1
 8003d20:	d0e6      	beq.n	8003cf0 <_printf_common+0xa4>
 8003d22:	3601      	adds	r6, #1
 8003d24:	e7d9      	b.n	8003cda <_printf_common+0x8e>
	...

08003d28 <_printf_i>:
 8003d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d2c:	7e0f      	ldrb	r7, [r1, #24]
 8003d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003d30:	2f78      	cmp	r7, #120	; 0x78
 8003d32:	4691      	mov	r9, r2
 8003d34:	4680      	mov	r8, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	469a      	mov	sl, r3
 8003d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003d3e:	d807      	bhi.n	8003d50 <_printf_i+0x28>
 8003d40:	2f62      	cmp	r7, #98	; 0x62
 8003d42:	d80a      	bhi.n	8003d5a <_printf_i+0x32>
 8003d44:	2f00      	cmp	r7, #0
 8003d46:	f000 80d4 	beq.w	8003ef2 <_printf_i+0x1ca>
 8003d4a:	2f58      	cmp	r7, #88	; 0x58
 8003d4c:	f000 80c0 	beq.w	8003ed0 <_printf_i+0x1a8>
 8003d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d58:	e03a      	b.n	8003dd0 <_printf_i+0xa8>
 8003d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d5e:	2b15      	cmp	r3, #21
 8003d60:	d8f6      	bhi.n	8003d50 <_printf_i+0x28>
 8003d62:	a101      	add	r1, pc, #4	; (adr r1, 8003d68 <_printf_i+0x40>)
 8003d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d68:	08003dc1 	.word	0x08003dc1
 8003d6c:	08003dd5 	.word	0x08003dd5
 8003d70:	08003d51 	.word	0x08003d51
 8003d74:	08003d51 	.word	0x08003d51
 8003d78:	08003d51 	.word	0x08003d51
 8003d7c:	08003d51 	.word	0x08003d51
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003d51 	.word	0x08003d51
 8003d88:	08003d51 	.word	0x08003d51
 8003d8c:	08003d51 	.word	0x08003d51
 8003d90:	08003d51 	.word	0x08003d51
 8003d94:	08003ed9 	.word	0x08003ed9
 8003d98:	08003e01 	.word	0x08003e01
 8003d9c:	08003e93 	.word	0x08003e93
 8003da0:	08003d51 	.word	0x08003d51
 8003da4:	08003d51 	.word	0x08003d51
 8003da8:	08003efb 	.word	0x08003efb
 8003dac:	08003d51 	.word	0x08003d51
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003d51 	.word	0x08003d51
 8003db8:	08003d51 	.word	0x08003d51
 8003dbc:	08003e9b 	.word	0x08003e9b
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	602a      	str	r2, [r5, #0]
 8003dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e09f      	b.n	8003f14 <_printf_i+0x1ec>
 8003dd4:	6820      	ldr	r0, [r4, #0]
 8003dd6:	682b      	ldr	r3, [r5, #0]
 8003dd8:	0607      	lsls	r7, r0, #24
 8003dda:	f103 0104 	add.w	r1, r3, #4
 8003dde:	6029      	str	r1, [r5, #0]
 8003de0:	d501      	bpl.n	8003de6 <_printf_i+0xbe>
 8003de2:	681e      	ldr	r6, [r3, #0]
 8003de4:	e003      	b.n	8003dee <_printf_i+0xc6>
 8003de6:	0646      	lsls	r6, r0, #25
 8003de8:	d5fb      	bpl.n	8003de2 <_printf_i+0xba>
 8003dea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003dee:	2e00      	cmp	r6, #0
 8003df0:	da03      	bge.n	8003dfa <_printf_i+0xd2>
 8003df2:	232d      	movs	r3, #45	; 0x2d
 8003df4:	4276      	negs	r6, r6
 8003df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfa:	485a      	ldr	r0, [pc, #360]	; (8003f64 <_printf_i+0x23c>)
 8003dfc:	230a      	movs	r3, #10
 8003dfe:	e012      	b.n	8003e26 <_printf_i+0xfe>
 8003e00:	682b      	ldr	r3, [r5, #0]
 8003e02:	6820      	ldr	r0, [r4, #0]
 8003e04:	1d19      	adds	r1, r3, #4
 8003e06:	6029      	str	r1, [r5, #0]
 8003e08:	0605      	lsls	r5, r0, #24
 8003e0a:	d501      	bpl.n	8003e10 <_printf_i+0xe8>
 8003e0c:	681e      	ldr	r6, [r3, #0]
 8003e0e:	e002      	b.n	8003e16 <_printf_i+0xee>
 8003e10:	0641      	lsls	r1, r0, #25
 8003e12:	d5fb      	bpl.n	8003e0c <_printf_i+0xe4>
 8003e14:	881e      	ldrh	r6, [r3, #0]
 8003e16:	4853      	ldr	r0, [pc, #332]	; (8003f64 <_printf_i+0x23c>)
 8003e18:	2f6f      	cmp	r7, #111	; 0x6f
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2308      	moveq	r3, #8
 8003e1e:	230a      	movne	r3, #10
 8003e20:	2100      	movs	r1, #0
 8003e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e26:	6865      	ldr	r5, [r4, #4]
 8003e28:	60a5      	str	r5, [r4, #8]
 8003e2a:	2d00      	cmp	r5, #0
 8003e2c:	bfa2      	ittt	ge
 8003e2e:	6821      	ldrge	r1, [r4, #0]
 8003e30:	f021 0104 	bicge.w	r1, r1, #4
 8003e34:	6021      	strge	r1, [r4, #0]
 8003e36:	b90e      	cbnz	r6, 8003e3c <_printf_i+0x114>
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	d04b      	beq.n	8003ed4 <_printf_i+0x1ac>
 8003e3c:	4615      	mov	r5, r2
 8003e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e42:	fb03 6711 	mls	r7, r3, r1, r6
 8003e46:	5dc7      	ldrb	r7, [r0, r7]
 8003e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e4c:	4637      	mov	r7, r6
 8003e4e:	42bb      	cmp	r3, r7
 8003e50:	460e      	mov	r6, r1
 8003e52:	d9f4      	bls.n	8003e3e <_printf_i+0x116>
 8003e54:	2b08      	cmp	r3, #8
 8003e56:	d10b      	bne.n	8003e70 <_printf_i+0x148>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	07de      	lsls	r6, r3, #31
 8003e5c:	d508      	bpl.n	8003e70 <_printf_i+0x148>
 8003e5e:	6923      	ldr	r3, [r4, #16]
 8003e60:	6861      	ldr	r1, [r4, #4]
 8003e62:	4299      	cmp	r1, r3
 8003e64:	bfde      	ittt	le
 8003e66:	2330      	movle	r3, #48	; 0x30
 8003e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e70:	1b52      	subs	r2, r2, r5
 8003e72:	6122      	str	r2, [r4, #16]
 8003e74:	f8cd a000 	str.w	sl, [sp]
 8003e78:	464b      	mov	r3, r9
 8003e7a:	aa03      	add	r2, sp, #12
 8003e7c:	4621      	mov	r1, r4
 8003e7e:	4640      	mov	r0, r8
 8003e80:	f7ff fee4 	bl	8003c4c <_printf_common>
 8003e84:	3001      	adds	r0, #1
 8003e86:	d14a      	bne.n	8003f1e <_printf_i+0x1f6>
 8003e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e8c:	b004      	add	sp, #16
 8003e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e92:	6823      	ldr	r3, [r4, #0]
 8003e94:	f043 0320 	orr.w	r3, r3, #32
 8003e98:	6023      	str	r3, [r4, #0]
 8003e9a:	4833      	ldr	r0, [pc, #204]	; (8003f68 <_printf_i+0x240>)
 8003e9c:	2778      	movs	r7, #120	; 0x78
 8003e9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	6829      	ldr	r1, [r5, #0]
 8003ea6:	061f      	lsls	r7, r3, #24
 8003ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8003eac:	d402      	bmi.n	8003eb4 <_printf_i+0x18c>
 8003eae:	065f      	lsls	r7, r3, #25
 8003eb0:	bf48      	it	mi
 8003eb2:	b2b6      	uxthmi	r6, r6
 8003eb4:	07df      	lsls	r7, r3, #31
 8003eb6:	bf48      	it	mi
 8003eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ebc:	6029      	str	r1, [r5, #0]
 8003ebe:	bf48      	it	mi
 8003ec0:	6023      	strmi	r3, [r4, #0]
 8003ec2:	b91e      	cbnz	r6, 8003ecc <_printf_i+0x1a4>
 8003ec4:	6823      	ldr	r3, [r4, #0]
 8003ec6:	f023 0320 	bic.w	r3, r3, #32
 8003eca:	6023      	str	r3, [r4, #0]
 8003ecc:	2310      	movs	r3, #16
 8003ece:	e7a7      	b.n	8003e20 <_printf_i+0xf8>
 8003ed0:	4824      	ldr	r0, [pc, #144]	; (8003f64 <_printf_i+0x23c>)
 8003ed2:	e7e4      	b.n	8003e9e <_printf_i+0x176>
 8003ed4:	4615      	mov	r5, r2
 8003ed6:	e7bd      	b.n	8003e54 <_printf_i+0x12c>
 8003ed8:	682b      	ldr	r3, [r5, #0]
 8003eda:	6826      	ldr	r6, [r4, #0]
 8003edc:	6961      	ldr	r1, [r4, #20]
 8003ede:	1d18      	adds	r0, r3, #4
 8003ee0:	6028      	str	r0, [r5, #0]
 8003ee2:	0635      	lsls	r5, r6, #24
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	d501      	bpl.n	8003eec <_printf_i+0x1c4>
 8003ee8:	6019      	str	r1, [r3, #0]
 8003eea:	e002      	b.n	8003ef2 <_printf_i+0x1ca>
 8003eec:	0670      	lsls	r0, r6, #25
 8003eee:	d5fb      	bpl.n	8003ee8 <_printf_i+0x1c0>
 8003ef0:	8019      	strh	r1, [r3, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	6123      	str	r3, [r4, #16]
 8003ef6:	4615      	mov	r5, r2
 8003ef8:	e7bc      	b.n	8003e74 <_printf_i+0x14c>
 8003efa:	682b      	ldr	r3, [r5, #0]
 8003efc:	1d1a      	adds	r2, r3, #4
 8003efe:	602a      	str	r2, [r5, #0]
 8003f00:	681d      	ldr	r5, [r3, #0]
 8003f02:	6862      	ldr	r2, [r4, #4]
 8003f04:	2100      	movs	r1, #0
 8003f06:	4628      	mov	r0, r5
 8003f08:	f7fc f962 	bl	80001d0 <memchr>
 8003f0c:	b108      	cbz	r0, 8003f12 <_printf_i+0x1ea>
 8003f0e:	1b40      	subs	r0, r0, r5
 8003f10:	6060      	str	r0, [r4, #4]
 8003f12:	6863      	ldr	r3, [r4, #4]
 8003f14:	6123      	str	r3, [r4, #16]
 8003f16:	2300      	movs	r3, #0
 8003f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f1c:	e7aa      	b.n	8003e74 <_printf_i+0x14c>
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	462a      	mov	r2, r5
 8003f22:	4649      	mov	r1, r9
 8003f24:	4640      	mov	r0, r8
 8003f26:	47d0      	blx	sl
 8003f28:	3001      	adds	r0, #1
 8003f2a:	d0ad      	beq.n	8003e88 <_printf_i+0x160>
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	079b      	lsls	r3, r3, #30
 8003f30:	d413      	bmi.n	8003f5a <_printf_i+0x232>
 8003f32:	68e0      	ldr	r0, [r4, #12]
 8003f34:	9b03      	ldr	r3, [sp, #12]
 8003f36:	4298      	cmp	r0, r3
 8003f38:	bfb8      	it	lt
 8003f3a:	4618      	movlt	r0, r3
 8003f3c:	e7a6      	b.n	8003e8c <_printf_i+0x164>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	4632      	mov	r2, r6
 8003f42:	4649      	mov	r1, r9
 8003f44:	4640      	mov	r0, r8
 8003f46:	47d0      	blx	sl
 8003f48:	3001      	adds	r0, #1
 8003f4a:	d09d      	beq.n	8003e88 <_printf_i+0x160>
 8003f4c:	3501      	adds	r5, #1
 8003f4e:	68e3      	ldr	r3, [r4, #12]
 8003f50:	9903      	ldr	r1, [sp, #12]
 8003f52:	1a5b      	subs	r3, r3, r1
 8003f54:	42ab      	cmp	r3, r5
 8003f56:	dcf2      	bgt.n	8003f3e <_printf_i+0x216>
 8003f58:	e7eb      	b.n	8003f32 <_printf_i+0x20a>
 8003f5a:	2500      	movs	r5, #0
 8003f5c:	f104 0619 	add.w	r6, r4, #25
 8003f60:	e7f5      	b.n	8003f4e <_printf_i+0x226>
 8003f62:	bf00      	nop
 8003f64:	080062a1 	.word	0x080062a1
 8003f68:	080062b2 	.word	0x080062b2

08003f6c <std>:
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	4604      	mov	r4, r0
 8003f72:	e9c0 3300 	strd	r3, r3, [r0]
 8003f76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f7a:	6083      	str	r3, [r0, #8]
 8003f7c:	8181      	strh	r1, [r0, #12]
 8003f7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003f80:	81c2      	strh	r2, [r0, #14]
 8003f82:	6183      	str	r3, [r0, #24]
 8003f84:	4619      	mov	r1, r3
 8003f86:	2208      	movs	r2, #8
 8003f88:	305c      	adds	r0, #92	; 0x5c
 8003f8a:	f000 f914 	bl	80041b6 <memset>
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <std+0x58>)
 8003f90:	6263      	str	r3, [r4, #36]	; 0x24
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <std+0x5c>)
 8003f94:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <std+0x60>)
 8003f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f9a:	4b0d      	ldr	r3, [pc, #52]	; (8003fd0 <std+0x64>)
 8003f9c:	6323      	str	r3, [r4, #48]	; 0x30
 8003f9e:	4b0d      	ldr	r3, [pc, #52]	; (8003fd4 <std+0x68>)
 8003fa0:	6224      	str	r4, [r4, #32]
 8003fa2:	429c      	cmp	r4, r3
 8003fa4:	d006      	beq.n	8003fb4 <std+0x48>
 8003fa6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8003faa:	4294      	cmp	r4, r2
 8003fac:	d002      	beq.n	8003fb4 <std+0x48>
 8003fae:	33d0      	adds	r3, #208	; 0xd0
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d105      	bne.n	8003fc0 <std+0x54>
 8003fb4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fbc:	f000 b988 	b.w	80042d0 <__retarget_lock_init_recursive>
 8003fc0:	bd10      	pop	{r4, pc}
 8003fc2:	bf00      	nop
 8003fc4:	08004131 	.word	0x08004131
 8003fc8:	08004153 	.word	0x08004153
 8003fcc:	0800418b 	.word	0x0800418b
 8003fd0:	080041af 	.word	0x080041af
 8003fd4:	200002a8 	.word	0x200002a8

08003fd8 <stdio_exit_handler>:
 8003fd8:	4a02      	ldr	r2, [pc, #8]	; (8003fe4 <stdio_exit_handler+0xc>)
 8003fda:	4903      	ldr	r1, [pc, #12]	; (8003fe8 <stdio_exit_handler+0x10>)
 8003fdc:	4803      	ldr	r0, [pc, #12]	; (8003fec <stdio_exit_handler+0x14>)
 8003fde:	f000 b869 	b.w	80040b4 <_fwalk_sglue>
 8003fe2:	bf00      	nop
 8003fe4:	20000008 	.word	0x20000008
 8003fe8:	08005b19 	.word	0x08005b19
 8003fec:	20000014 	.word	0x20000014

08003ff0 <cleanup_stdio>:
 8003ff0:	6841      	ldr	r1, [r0, #4]
 8003ff2:	4b0c      	ldr	r3, [pc, #48]	; (8004024 <cleanup_stdio+0x34>)
 8003ff4:	4299      	cmp	r1, r3
 8003ff6:	b510      	push	{r4, lr}
 8003ff8:	4604      	mov	r4, r0
 8003ffa:	d001      	beq.n	8004000 <cleanup_stdio+0x10>
 8003ffc:	f001 fd8c 	bl	8005b18 <_fflush_r>
 8004000:	68a1      	ldr	r1, [r4, #8]
 8004002:	4b09      	ldr	r3, [pc, #36]	; (8004028 <cleanup_stdio+0x38>)
 8004004:	4299      	cmp	r1, r3
 8004006:	d002      	beq.n	800400e <cleanup_stdio+0x1e>
 8004008:	4620      	mov	r0, r4
 800400a:	f001 fd85 	bl	8005b18 <_fflush_r>
 800400e:	68e1      	ldr	r1, [r4, #12]
 8004010:	4b06      	ldr	r3, [pc, #24]	; (800402c <cleanup_stdio+0x3c>)
 8004012:	4299      	cmp	r1, r3
 8004014:	d004      	beq.n	8004020 <cleanup_stdio+0x30>
 8004016:	4620      	mov	r0, r4
 8004018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800401c:	f001 bd7c 	b.w	8005b18 <_fflush_r>
 8004020:	bd10      	pop	{r4, pc}
 8004022:	bf00      	nop
 8004024:	200002a8 	.word	0x200002a8
 8004028:	20000310 	.word	0x20000310
 800402c:	20000378 	.word	0x20000378

08004030 <global_stdio_init.part.0>:
 8004030:	b510      	push	{r4, lr}
 8004032:	4b0b      	ldr	r3, [pc, #44]	; (8004060 <global_stdio_init.part.0+0x30>)
 8004034:	4c0b      	ldr	r4, [pc, #44]	; (8004064 <global_stdio_init.part.0+0x34>)
 8004036:	4a0c      	ldr	r2, [pc, #48]	; (8004068 <global_stdio_init.part.0+0x38>)
 8004038:	601a      	str	r2, [r3, #0]
 800403a:	4620      	mov	r0, r4
 800403c:	2200      	movs	r2, #0
 800403e:	2104      	movs	r1, #4
 8004040:	f7ff ff94 	bl	8003f6c <std>
 8004044:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004048:	2201      	movs	r2, #1
 800404a:	2109      	movs	r1, #9
 800404c:	f7ff ff8e 	bl	8003f6c <std>
 8004050:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004054:	2202      	movs	r2, #2
 8004056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800405a:	2112      	movs	r1, #18
 800405c:	f7ff bf86 	b.w	8003f6c <std>
 8004060:	200003e0 	.word	0x200003e0
 8004064:	200002a8 	.word	0x200002a8
 8004068:	08003fd9 	.word	0x08003fd9

0800406c <__sfp_lock_acquire>:
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <__sfp_lock_acquire+0x8>)
 800406e:	f000 b930 	b.w	80042d2 <__retarget_lock_acquire_recursive>
 8004072:	bf00      	nop
 8004074:	200003e9 	.word	0x200003e9

08004078 <__sfp_lock_release>:
 8004078:	4801      	ldr	r0, [pc, #4]	; (8004080 <__sfp_lock_release+0x8>)
 800407a:	f000 b92b 	b.w	80042d4 <__retarget_lock_release_recursive>
 800407e:	bf00      	nop
 8004080:	200003e9 	.word	0x200003e9

08004084 <__sinit>:
 8004084:	b510      	push	{r4, lr}
 8004086:	4604      	mov	r4, r0
 8004088:	f7ff fff0 	bl	800406c <__sfp_lock_acquire>
 800408c:	6a23      	ldr	r3, [r4, #32]
 800408e:	b11b      	cbz	r3, 8004098 <__sinit+0x14>
 8004090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004094:	f7ff bff0 	b.w	8004078 <__sfp_lock_release>
 8004098:	4b04      	ldr	r3, [pc, #16]	; (80040ac <__sinit+0x28>)
 800409a:	6223      	str	r3, [r4, #32]
 800409c:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <__sinit+0x2c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d1f5      	bne.n	8004090 <__sinit+0xc>
 80040a4:	f7ff ffc4 	bl	8004030 <global_stdio_init.part.0>
 80040a8:	e7f2      	b.n	8004090 <__sinit+0xc>
 80040aa:	bf00      	nop
 80040ac:	08003ff1 	.word	0x08003ff1
 80040b0:	200003e0 	.word	0x200003e0

080040b4 <_fwalk_sglue>:
 80040b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b8:	4607      	mov	r7, r0
 80040ba:	4688      	mov	r8, r1
 80040bc:	4614      	mov	r4, r2
 80040be:	2600      	movs	r6, #0
 80040c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040c4:	f1b9 0901 	subs.w	r9, r9, #1
 80040c8:	d505      	bpl.n	80040d6 <_fwalk_sglue+0x22>
 80040ca:	6824      	ldr	r4, [r4, #0]
 80040cc:	2c00      	cmp	r4, #0
 80040ce:	d1f7      	bne.n	80040c0 <_fwalk_sglue+0xc>
 80040d0:	4630      	mov	r0, r6
 80040d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040d6:	89ab      	ldrh	r3, [r5, #12]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d907      	bls.n	80040ec <_fwalk_sglue+0x38>
 80040dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040e0:	3301      	adds	r3, #1
 80040e2:	d003      	beq.n	80040ec <_fwalk_sglue+0x38>
 80040e4:	4629      	mov	r1, r5
 80040e6:	4638      	mov	r0, r7
 80040e8:	47c0      	blx	r8
 80040ea:	4306      	orrs	r6, r0
 80040ec:	3568      	adds	r5, #104	; 0x68
 80040ee:	e7e9      	b.n	80040c4 <_fwalk_sglue+0x10>

080040f0 <siprintf>:
 80040f0:	b40e      	push	{r1, r2, r3}
 80040f2:	b500      	push	{lr}
 80040f4:	b09c      	sub	sp, #112	; 0x70
 80040f6:	ab1d      	add	r3, sp, #116	; 0x74
 80040f8:	9002      	str	r0, [sp, #8]
 80040fa:	9006      	str	r0, [sp, #24]
 80040fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004100:	4809      	ldr	r0, [pc, #36]	; (8004128 <siprintf+0x38>)
 8004102:	9107      	str	r1, [sp, #28]
 8004104:	9104      	str	r1, [sp, #16]
 8004106:	4909      	ldr	r1, [pc, #36]	; (800412c <siprintf+0x3c>)
 8004108:	f853 2b04 	ldr.w	r2, [r3], #4
 800410c:	9105      	str	r1, [sp, #20]
 800410e:	6800      	ldr	r0, [r0, #0]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	a902      	add	r1, sp, #8
 8004114:	f001 fb7c 	bl	8005810 <_svfiprintf_r>
 8004118:	9b02      	ldr	r3, [sp, #8]
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
 800411e:	b01c      	add	sp, #112	; 0x70
 8004120:	f85d eb04 	ldr.w	lr, [sp], #4
 8004124:	b003      	add	sp, #12
 8004126:	4770      	bx	lr
 8004128:	20000060 	.word	0x20000060
 800412c:	ffff0208 	.word	0xffff0208

08004130 <__sread>:
 8004130:	b510      	push	{r4, lr}
 8004132:	460c      	mov	r4, r1
 8004134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004138:	f000 f86c 	bl	8004214 <_read_r>
 800413c:	2800      	cmp	r0, #0
 800413e:	bfab      	itete	ge
 8004140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004142:	89a3      	ldrhlt	r3, [r4, #12]
 8004144:	181b      	addge	r3, r3, r0
 8004146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800414a:	bfac      	ite	ge
 800414c:	6563      	strge	r3, [r4, #84]	; 0x54
 800414e:	81a3      	strhlt	r3, [r4, #12]
 8004150:	bd10      	pop	{r4, pc}

08004152 <__swrite>:
 8004152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004156:	461f      	mov	r7, r3
 8004158:	898b      	ldrh	r3, [r1, #12]
 800415a:	05db      	lsls	r3, r3, #23
 800415c:	4605      	mov	r5, r0
 800415e:	460c      	mov	r4, r1
 8004160:	4616      	mov	r6, r2
 8004162:	d505      	bpl.n	8004170 <__swrite+0x1e>
 8004164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004168:	2302      	movs	r3, #2
 800416a:	2200      	movs	r2, #0
 800416c:	f000 f840 	bl	80041f0 <_lseek_r>
 8004170:	89a3      	ldrh	r3, [r4, #12]
 8004172:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004176:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800417a:	81a3      	strh	r3, [r4, #12]
 800417c:	4632      	mov	r2, r6
 800417e:	463b      	mov	r3, r7
 8004180:	4628      	mov	r0, r5
 8004182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004186:	f000 b867 	b.w	8004258 <_write_r>

0800418a <__sseek>:
 800418a:	b510      	push	{r4, lr}
 800418c:	460c      	mov	r4, r1
 800418e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004192:	f000 f82d 	bl	80041f0 <_lseek_r>
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	bf15      	itete	ne
 800419c:	6560      	strne	r0, [r4, #84]	; 0x54
 800419e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041a6:	81a3      	strheq	r3, [r4, #12]
 80041a8:	bf18      	it	ne
 80041aa:	81a3      	strhne	r3, [r4, #12]
 80041ac:	bd10      	pop	{r4, pc}

080041ae <__sclose>:
 80041ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041b2:	f000 b80d 	b.w	80041d0 <_close_r>

080041b6 <memset>:
 80041b6:	4402      	add	r2, r0
 80041b8:	4603      	mov	r3, r0
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d100      	bne.n	80041c0 <memset+0xa>
 80041be:	4770      	bx	lr
 80041c0:	f803 1b01 	strb.w	r1, [r3], #1
 80041c4:	e7f9      	b.n	80041ba <memset+0x4>
	...

080041c8 <_localeconv_r>:
 80041c8:	4800      	ldr	r0, [pc, #0]	; (80041cc <_localeconv_r+0x4>)
 80041ca:	4770      	bx	lr
 80041cc:	20000154 	.word	0x20000154

080041d0 <_close_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	4d06      	ldr	r5, [pc, #24]	; (80041ec <_close_r+0x1c>)
 80041d4:	2300      	movs	r3, #0
 80041d6:	4604      	mov	r4, r0
 80041d8:	4608      	mov	r0, r1
 80041da:	602b      	str	r3, [r5, #0]
 80041dc:	f7fd fef1 	bl	8001fc2 <_close>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_close_r+0x1a>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_close_r+0x1a>
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	200003e4 	.word	0x200003e4

080041f0 <_lseek_r>:
 80041f0:	b538      	push	{r3, r4, r5, lr}
 80041f2:	4d07      	ldr	r5, [pc, #28]	; (8004210 <_lseek_r+0x20>)
 80041f4:	4604      	mov	r4, r0
 80041f6:	4608      	mov	r0, r1
 80041f8:	4611      	mov	r1, r2
 80041fa:	2200      	movs	r2, #0
 80041fc:	602a      	str	r2, [r5, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	f7fd ff06 	bl	8002010 <_lseek>
 8004204:	1c43      	adds	r3, r0, #1
 8004206:	d102      	bne.n	800420e <_lseek_r+0x1e>
 8004208:	682b      	ldr	r3, [r5, #0]
 800420a:	b103      	cbz	r3, 800420e <_lseek_r+0x1e>
 800420c:	6023      	str	r3, [r4, #0]
 800420e:	bd38      	pop	{r3, r4, r5, pc}
 8004210:	200003e4 	.word	0x200003e4

08004214 <_read_r>:
 8004214:	b538      	push	{r3, r4, r5, lr}
 8004216:	4d07      	ldr	r5, [pc, #28]	; (8004234 <_read_r+0x20>)
 8004218:	4604      	mov	r4, r0
 800421a:	4608      	mov	r0, r1
 800421c:	4611      	mov	r1, r2
 800421e:	2200      	movs	r2, #0
 8004220:	602a      	str	r2, [r5, #0]
 8004222:	461a      	mov	r2, r3
 8004224:	f7fd fe94 	bl	8001f50 <_read>
 8004228:	1c43      	adds	r3, r0, #1
 800422a:	d102      	bne.n	8004232 <_read_r+0x1e>
 800422c:	682b      	ldr	r3, [r5, #0]
 800422e:	b103      	cbz	r3, 8004232 <_read_r+0x1e>
 8004230:	6023      	str	r3, [r4, #0]
 8004232:	bd38      	pop	{r3, r4, r5, pc}
 8004234:	200003e4 	.word	0x200003e4

08004238 <_sbrk_r>:
 8004238:	b538      	push	{r3, r4, r5, lr}
 800423a:	4d06      	ldr	r5, [pc, #24]	; (8004254 <_sbrk_r+0x1c>)
 800423c:	2300      	movs	r3, #0
 800423e:	4604      	mov	r4, r0
 8004240:	4608      	mov	r0, r1
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	f7fd fef2 	bl	800202c <_sbrk>
 8004248:	1c43      	adds	r3, r0, #1
 800424a:	d102      	bne.n	8004252 <_sbrk_r+0x1a>
 800424c:	682b      	ldr	r3, [r5, #0]
 800424e:	b103      	cbz	r3, 8004252 <_sbrk_r+0x1a>
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	bd38      	pop	{r3, r4, r5, pc}
 8004254:	200003e4 	.word	0x200003e4

08004258 <_write_r>:
 8004258:	b538      	push	{r3, r4, r5, lr}
 800425a:	4d07      	ldr	r5, [pc, #28]	; (8004278 <_write_r+0x20>)
 800425c:	4604      	mov	r4, r0
 800425e:	4608      	mov	r0, r1
 8004260:	4611      	mov	r1, r2
 8004262:	2200      	movs	r2, #0
 8004264:	602a      	str	r2, [r5, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	f7fd fe8f 	bl	8001f8a <_write>
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d102      	bne.n	8004276 <_write_r+0x1e>
 8004270:	682b      	ldr	r3, [r5, #0]
 8004272:	b103      	cbz	r3, 8004276 <_write_r+0x1e>
 8004274:	6023      	str	r3, [r4, #0]
 8004276:	bd38      	pop	{r3, r4, r5, pc}
 8004278:	200003e4 	.word	0x200003e4

0800427c <__errno>:
 800427c:	4b01      	ldr	r3, [pc, #4]	; (8004284 <__errno+0x8>)
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000060 	.word	0x20000060

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4d0d      	ldr	r5, [pc, #52]	; (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	; (80042c4 <__libc_init_array+0x3c>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2600      	movs	r6, #0
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4d0b      	ldr	r5, [pc, #44]	; (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	; (80042cc <__libc_init_array+0x44>)
 800429c:	f001 ffd0 	bl	8006240 <_init>
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2600      	movs	r6, #0
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	08006604 	.word	0x08006604
 80042c4:	08006604 	.word	0x08006604
 80042c8:	08006604 	.word	0x08006604
 80042cc:	08006608 	.word	0x08006608

080042d0 <__retarget_lock_init_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <__retarget_lock_acquire_recursive>:
 80042d2:	4770      	bx	lr

080042d4 <__retarget_lock_release_recursive>:
 80042d4:	4770      	bx	lr

080042d6 <quorem>:
 80042d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042da:	6903      	ldr	r3, [r0, #16]
 80042dc:	690c      	ldr	r4, [r1, #16]
 80042de:	42a3      	cmp	r3, r4
 80042e0:	4607      	mov	r7, r0
 80042e2:	db7e      	blt.n	80043e2 <quorem+0x10c>
 80042e4:	3c01      	subs	r4, #1
 80042e6:	f101 0814 	add.w	r8, r1, #20
 80042ea:	f100 0514 	add.w	r5, r0, #20
 80042ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80042f2:	9301      	str	r3, [sp, #4]
 80042f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80042f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80042fc:	3301      	adds	r3, #1
 80042fe:	429a      	cmp	r2, r3
 8004300:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004304:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004308:	fbb2 f6f3 	udiv	r6, r2, r3
 800430c:	d331      	bcc.n	8004372 <quorem+0x9c>
 800430e:	f04f 0e00 	mov.w	lr, #0
 8004312:	4640      	mov	r0, r8
 8004314:	46ac      	mov	ip, r5
 8004316:	46f2      	mov	sl, lr
 8004318:	f850 2b04 	ldr.w	r2, [r0], #4
 800431c:	b293      	uxth	r3, r2
 800431e:	fb06 e303 	mla	r3, r6, r3, lr
 8004322:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004326:	0c1a      	lsrs	r2, r3, #16
 8004328:	b29b      	uxth	r3, r3
 800432a:	ebaa 0303 	sub.w	r3, sl, r3
 800432e:	f8dc a000 	ldr.w	sl, [ip]
 8004332:	fa13 f38a 	uxtah	r3, r3, sl
 8004336:	fb06 220e 	mla	r2, r6, lr, r2
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	9b00      	ldr	r3, [sp, #0]
 800433e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004342:	b292      	uxth	r2, r2
 8004344:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800434c:	f8bd 3000 	ldrh.w	r3, [sp]
 8004350:	4581      	cmp	r9, r0
 8004352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004356:	f84c 3b04 	str.w	r3, [ip], #4
 800435a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800435e:	d2db      	bcs.n	8004318 <quorem+0x42>
 8004360:	f855 300b 	ldr.w	r3, [r5, fp]
 8004364:	b92b      	cbnz	r3, 8004372 <quorem+0x9c>
 8004366:	9b01      	ldr	r3, [sp, #4]
 8004368:	3b04      	subs	r3, #4
 800436a:	429d      	cmp	r5, r3
 800436c:	461a      	mov	r2, r3
 800436e:	d32c      	bcc.n	80043ca <quorem+0xf4>
 8004370:	613c      	str	r4, [r7, #16]
 8004372:	4638      	mov	r0, r7
 8004374:	f001 f8f2 	bl	800555c <__mcmp>
 8004378:	2800      	cmp	r0, #0
 800437a:	db22      	blt.n	80043c2 <quorem+0xec>
 800437c:	3601      	adds	r6, #1
 800437e:	4629      	mov	r1, r5
 8004380:	2000      	movs	r0, #0
 8004382:	f858 2b04 	ldr.w	r2, [r8], #4
 8004386:	f8d1 c000 	ldr.w	ip, [r1]
 800438a:	b293      	uxth	r3, r2
 800438c:	1ac3      	subs	r3, r0, r3
 800438e:	0c12      	lsrs	r2, r2, #16
 8004390:	fa13 f38c 	uxtah	r3, r3, ip
 8004394:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800439c:	b29b      	uxth	r3, r3
 800439e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80043a2:	45c1      	cmp	r9, r8
 80043a4:	f841 3b04 	str.w	r3, [r1], #4
 80043a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80043ac:	d2e9      	bcs.n	8004382 <quorem+0xac>
 80043ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043b6:	b922      	cbnz	r2, 80043c2 <quorem+0xec>
 80043b8:	3b04      	subs	r3, #4
 80043ba:	429d      	cmp	r5, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	d30a      	bcc.n	80043d6 <quorem+0x100>
 80043c0:	613c      	str	r4, [r7, #16]
 80043c2:	4630      	mov	r0, r6
 80043c4:	b003      	add	sp, #12
 80043c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	3b04      	subs	r3, #4
 80043ce:	2a00      	cmp	r2, #0
 80043d0:	d1ce      	bne.n	8004370 <quorem+0x9a>
 80043d2:	3c01      	subs	r4, #1
 80043d4:	e7c9      	b.n	800436a <quorem+0x94>
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	3b04      	subs	r3, #4
 80043da:	2a00      	cmp	r2, #0
 80043dc:	d1f0      	bne.n	80043c0 <quorem+0xea>
 80043de:	3c01      	subs	r4, #1
 80043e0:	e7eb      	b.n	80043ba <quorem+0xe4>
 80043e2:	2000      	movs	r0, #0
 80043e4:	e7ee      	b.n	80043c4 <quorem+0xee>
	...

080043e8 <_dtoa_r>:
 80043e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ec:	ed2d 8b04 	vpush	{d8-d9}
 80043f0:	69c5      	ldr	r5, [r0, #28]
 80043f2:	b093      	sub	sp, #76	; 0x4c
 80043f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80043f8:	ec57 6b10 	vmov	r6, r7, d0
 80043fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004400:	9107      	str	r1, [sp, #28]
 8004402:	4604      	mov	r4, r0
 8004404:	920a      	str	r2, [sp, #40]	; 0x28
 8004406:	930d      	str	r3, [sp, #52]	; 0x34
 8004408:	b975      	cbnz	r5, 8004428 <_dtoa_r+0x40>
 800440a:	2010      	movs	r0, #16
 800440c:	f7ff f88c 	bl	8003528 <malloc>
 8004410:	4602      	mov	r2, r0
 8004412:	61e0      	str	r0, [r4, #28]
 8004414:	b920      	cbnz	r0, 8004420 <_dtoa_r+0x38>
 8004416:	4bae      	ldr	r3, [pc, #696]	; (80046d0 <_dtoa_r+0x2e8>)
 8004418:	21ef      	movs	r1, #239	; 0xef
 800441a:	48ae      	ldr	r0, [pc, #696]	; (80046d4 <_dtoa_r+0x2ec>)
 800441c:	f001 fbcc 	bl	8005bb8 <__assert_func>
 8004420:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004424:	6005      	str	r5, [r0, #0]
 8004426:	60c5      	str	r5, [r0, #12]
 8004428:	69e3      	ldr	r3, [r4, #28]
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	b151      	cbz	r1, 8004444 <_dtoa_r+0x5c>
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	604a      	str	r2, [r1, #4]
 8004432:	2301      	movs	r3, #1
 8004434:	4093      	lsls	r3, r2
 8004436:	608b      	str	r3, [r1, #8]
 8004438:	4620      	mov	r0, r4
 800443a:	f000 fe53 	bl	80050e4 <_Bfree>
 800443e:	69e3      	ldr	r3, [r4, #28]
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	1e3b      	subs	r3, r7, #0
 8004446:	bfbb      	ittet	lt
 8004448:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800444c:	9303      	strlt	r3, [sp, #12]
 800444e:	2300      	movge	r3, #0
 8004450:	2201      	movlt	r2, #1
 8004452:	bfac      	ite	ge
 8004454:	f8c8 3000 	strge.w	r3, [r8]
 8004458:	f8c8 2000 	strlt.w	r2, [r8]
 800445c:	4b9e      	ldr	r3, [pc, #632]	; (80046d8 <_dtoa_r+0x2f0>)
 800445e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004462:	ea33 0308 	bics.w	r3, r3, r8
 8004466:	d11b      	bne.n	80044a0 <_dtoa_r+0xb8>
 8004468:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800446a:	f242 730f 	movw	r3, #9999	; 0x270f
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004474:	4333      	orrs	r3, r6
 8004476:	f000 8593 	beq.w	8004fa0 <_dtoa_r+0xbb8>
 800447a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800447c:	b963      	cbnz	r3, 8004498 <_dtoa_r+0xb0>
 800447e:	4b97      	ldr	r3, [pc, #604]	; (80046dc <_dtoa_r+0x2f4>)
 8004480:	e027      	b.n	80044d2 <_dtoa_r+0xea>
 8004482:	4b97      	ldr	r3, [pc, #604]	; (80046e0 <_dtoa_r+0x2f8>)
 8004484:	9300      	str	r3, [sp, #0]
 8004486:	3308      	adds	r3, #8
 8004488:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	9800      	ldr	r0, [sp, #0]
 800448e:	b013      	add	sp, #76	; 0x4c
 8004490:	ecbd 8b04 	vpop	{d8-d9}
 8004494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004498:	4b90      	ldr	r3, [pc, #576]	; (80046dc <_dtoa_r+0x2f4>)
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	3303      	adds	r3, #3
 800449e:	e7f3      	b.n	8004488 <_dtoa_r+0xa0>
 80044a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80044a4:	2200      	movs	r2, #0
 80044a6:	ec51 0b17 	vmov	r0, r1, d7
 80044aa:	eeb0 8a47 	vmov.f32	s16, s14
 80044ae:	eef0 8a67 	vmov.f32	s17, s15
 80044b2:	2300      	movs	r3, #0
 80044b4:	f7fc fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80044b8:	4681      	mov	r9, r0
 80044ba:	b160      	cbz	r0, 80044d6 <_dtoa_r+0xee>
 80044bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80044be:	2301      	movs	r3, #1
 80044c0:	6013      	str	r3, [r2, #0]
 80044c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 8568 	beq.w	8004f9a <_dtoa_r+0xbb2>
 80044ca:	4b86      	ldr	r3, [pc, #536]	; (80046e4 <_dtoa_r+0x2fc>)
 80044cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	e7da      	b.n	800448c <_dtoa_r+0xa4>
 80044d6:	aa10      	add	r2, sp, #64	; 0x40
 80044d8:	a911      	add	r1, sp, #68	; 0x44
 80044da:	4620      	mov	r0, r4
 80044dc:	eeb0 0a48 	vmov.f32	s0, s16
 80044e0:	eef0 0a68 	vmov.f32	s1, s17
 80044e4:	f001 f8e0 	bl	80056a8 <__d2b>
 80044e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80044ec:	4682      	mov	sl, r0
 80044ee:	2d00      	cmp	r5, #0
 80044f0:	d07f      	beq.n	80045f2 <_dtoa_r+0x20a>
 80044f2:	ee18 3a90 	vmov	r3, s17
 80044f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80044fe:	ec51 0b18 	vmov	r0, r1, d8
 8004502:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004506:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800450a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800450e:	4619      	mov	r1, r3
 8004510:	2200      	movs	r2, #0
 8004512:	4b75      	ldr	r3, [pc, #468]	; (80046e8 <_dtoa_r+0x300>)
 8004514:	f7fb feb8 	bl	8000288 <__aeabi_dsub>
 8004518:	a367      	add	r3, pc, #412	; (adr r3, 80046b8 <_dtoa_r+0x2d0>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fc f86b 	bl	80005f8 <__aeabi_dmul>
 8004522:	a367      	add	r3, pc, #412	; (adr r3, 80046c0 <_dtoa_r+0x2d8>)
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f7fb feb0 	bl	800028c <__adddf3>
 800452c:	4606      	mov	r6, r0
 800452e:	4628      	mov	r0, r5
 8004530:	460f      	mov	r7, r1
 8004532:	f7fb fff7 	bl	8000524 <__aeabi_i2d>
 8004536:	a364      	add	r3, pc, #400	; (adr r3, 80046c8 <_dtoa_r+0x2e0>)
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f7fc f85c 	bl	80005f8 <__aeabi_dmul>
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4630      	mov	r0, r6
 8004546:	4639      	mov	r1, r7
 8004548:	f7fb fea0 	bl	800028c <__adddf3>
 800454c:	4606      	mov	r6, r0
 800454e:	460f      	mov	r7, r1
 8004550:	f7fc fb02 	bl	8000b58 <__aeabi_d2iz>
 8004554:	2200      	movs	r2, #0
 8004556:	4683      	mov	fp, r0
 8004558:	2300      	movs	r3, #0
 800455a:	4630      	mov	r0, r6
 800455c:	4639      	mov	r1, r7
 800455e:	f7fc fabd 	bl	8000adc <__aeabi_dcmplt>
 8004562:	b148      	cbz	r0, 8004578 <_dtoa_r+0x190>
 8004564:	4658      	mov	r0, fp
 8004566:	f7fb ffdd 	bl	8000524 <__aeabi_i2d>
 800456a:	4632      	mov	r2, r6
 800456c:	463b      	mov	r3, r7
 800456e:	f7fc faab 	bl	8000ac8 <__aeabi_dcmpeq>
 8004572:	b908      	cbnz	r0, 8004578 <_dtoa_r+0x190>
 8004574:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004578:	f1bb 0f16 	cmp.w	fp, #22
 800457c:	d857      	bhi.n	800462e <_dtoa_r+0x246>
 800457e:	4b5b      	ldr	r3, [pc, #364]	; (80046ec <_dtoa_r+0x304>)
 8004580:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004588:	ec51 0b18 	vmov	r0, r1, d8
 800458c:	f7fc faa6 	bl	8000adc <__aeabi_dcmplt>
 8004590:	2800      	cmp	r0, #0
 8004592:	d04e      	beq.n	8004632 <_dtoa_r+0x24a>
 8004594:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004598:	2300      	movs	r3, #0
 800459a:	930c      	str	r3, [sp, #48]	; 0x30
 800459c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800459e:	1b5b      	subs	r3, r3, r5
 80045a0:	1e5a      	subs	r2, r3, #1
 80045a2:	bf45      	ittet	mi
 80045a4:	f1c3 0301 	rsbmi	r3, r3, #1
 80045a8:	9305      	strmi	r3, [sp, #20]
 80045aa:	2300      	movpl	r3, #0
 80045ac:	2300      	movmi	r3, #0
 80045ae:	9206      	str	r2, [sp, #24]
 80045b0:	bf54      	ite	pl
 80045b2:	9305      	strpl	r3, [sp, #20]
 80045b4:	9306      	strmi	r3, [sp, #24]
 80045b6:	f1bb 0f00 	cmp.w	fp, #0
 80045ba:	db3c      	blt.n	8004636 <_dtoa_r+0x24e>
 80045bc:	9b06      	ldr	r3, [sp, #24]
 80045be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80045c2:	445b      	add	r3, fp
 80045c4:	9306      	str	r3, [sp, #24]
 80045c6:	2300      	movs	r3, #0
 80045c8:	9308      	str	r3, [sp, #32]
 80045ca:	9b07      	ldr	r3, [sp, #28]
 80045cc:	2b09      	cmp	r3, #9
 80045ce:	d868      	bhi.n	80046a2 <_dtoa_r+0x2ba>
 80045d0:	2b05      	cmp	r3, #5
 80045d2:	bfc4      	itt	gt
 80045d4:	3b04      	subgt	r3, #4
 80045d6:	9307      	strgt	r3, [sp, #28]
 80045d8:	9b07      	ldr	r3, [sp, #28]
 80045da:	f1a3 0302 	sub.w	r3, r3, #2
 80045de:	bfcc      	ite	gt
 80045e0:	2500      	movgt	r5, #0
 80045e2:	2501      	movle	r5, #1
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	f200 8085 	bhi.w	80046f4 <_dtoa_r+0x30c>
 80045ea:	e8df f003 	tbb	[pc, r3]
 80045ee:	3b2e      	.short	0x3b2e
 80045f0:	5839      	.short	0x5839
 80045f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80045f6:	441d      	add	r5, r3
 80045f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	bfc1      	itttt	gt
 8004600:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004604:	fa08 f803 	lslgt.w	r8, r8, r3
 8004608:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800460c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004610:	bfd6      	itet	le
 8004612:	f1c3 0320 	rsble	r3, r3, #32
 8004616:	ea48 0003 	orrgt.w	r0, r8, r3
 800461a:	fa06 f003 	lslle.w	r0, r6, r3
 800461e:	f7fb ff71 	bl	8000504 <__aeabi_ui2d>
 8004622:	2201      	movs	r2, #1
 8004624:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004628:	3d01      	subs	r5, #1
 800462a:	920e      	str	r2, [sp, #56]	; 0x38
 800462c:	e76f      	b.n	800450e <_dtoa_r+0x126>
 800462e:	2301      	movs	r3, #1
 8004630:	e7b3      	b.n	800459a <_dtoa_r+0x1b2>
 8004632:	900c      	str	r0, [sp, #48]	; 0x30
 8004634:	e7b2      	b.n	800459c <_dtoa_r+0x1b4>
 8004636:	9b05      	ldr	r3, [sp, #20]
 8004638:	eba3 030b 	sub.w	r3, r3, fp
 800463c:	9305      	str	r3, [sp, #20]
 800463e:	f1cb 0300 	rsb	r3, fp, #0
 8004642:	9308      	str	r3, [sp, #32]
 8004644:	2300      	movs	r3, #0
 8004646:	930b      	str	r3, [sp, #44]	; 0x2c
 8004648:	e7bf      	b.n	80045ca <_dtoa_r+0x1e2>
 800464a:	2300      	movs	r3, #0
 800464c:	9309      	str	r3, [sp, #36]	; 0x24
 800464e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004650:	2b00      	cmp	r3, #0
 8004652:	dc52      	bgt.n	80046fa <_dtoa_r+0x312>
 8004654:	2301      	movs	r3, #1
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	9304      	str	r3, [sp, #16]
 800465a:	461a      	mov	r2, r3
 800465c:	920a      	str	r2, [sp, #40]	; 0x28
 800465e:	e00b      	b.n	8004678 <_dtoa_r+0x290>
 8004660:	2301      	movs	r3, #1
 8004662:	e7f3      	b.n	800464c <_dtoa_r+0x264>
 8004664:	2300      	movs	r3, #0
 8004666:	9309      	str	r3, [sp, #36]	; 0x24
 8004668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800466a:	445b      	add	r3, fp
 800466c:	9301      	str	r3, [sp, #4]
 800466e:	3301      	adds	r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	9304      	str	r3, [sp, #16]
 8004674:	bfb8      	it	lt
 8004676:	2301      	movlt	r3, #1
 8004678:	69e0      	ldr	r0, [r4, #28]
 800467a:	2100      	movs	r1, #0
 800467c:	2204      	movs	r2, #4
 800467e:	f102 0614 	add.w	r6, r2, #20
 8004682:	429e      	cmp	r6, r3
 8004684:	d93d      	bls.n	8004702 <_dtoa_r+0x31a>
 8004686:	6041      	str	r1, [r0, #4]
 8004688:	4620      	mov	r0, r4
 800468a:	f000 fceb 	bl	8005064 <_Balloc>
 800468e:	9000      	str	r0, [sp, #0]
 8004690:	2800      	cmp	r0, #0
 8004692:	d139      	bne.n	8004708 <_dtoa_r+0x320>
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <_dtoa_r+0x308>)
 8004696:	4602      	mov	r2, r0
 8004698:	f240 11af 	movw	r1, #431	; 0x1af
 800469c:	e6bd      	b.n	800441a <_dtoa_r+0x32>
 800469e:	2301      	movs	r3, #1
 80046a0:	e7e1      	b.n	8004666 <_dtoa_r+0x27e>
 80046a2:	2501      	movs	r5, #1
 80046a4:	2300      	movs	r3, #0
 80046a6:	9307      	str	r3, [sp, #28]
 80046a8:	9509      	str	r5, [sp, #36]	; 0x24
 80046aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	9304      	str	r3, [sp, #16]
 80046b2:	2200      	movs	r2, #0
 80046b4:	2312      	movs	r3, #18
 80046b6:	e7d1      	b.n	800465c <_dtoa_r+0x274>
 80046b8:	636f4361 	.word	0x636f4361
 80046bc:	3fd287a7 	.word	0x3fd287a7
 80046c0:	8b60c8b3 	.word	0x8b60c8b3
 80046c4:	3fc68a28 	.word	0x3fc68a28
 80046c8:	509f79fb 	.word	0x509f79fb
 80046cc:	3fd34413 	.word	0x3fd34413
 80046d0:	080062d0 	.word	0x080062d0
 80046d4:	080062e7 	.word	0x080062e7
 80046d8:	7ff00000 	.word	0x7ff00000
 80046dc:	080062cc 	.word	0x080062cc
 80046e0:	080062c3 	.word	0x080062c3
 80046e4:	080062a0 	.word	0x080062a0
 80046e8:	3ff80000 	.word	0x3ff80000
 80046ec:	080063d8 	.word	0x080063d8
 80046f0:	0800633f 	.word	0x0800633f
 80046f4:	2301      	movs	r3, #1
 80046f6:	9309      	str	r3, [sp, #36]	; 0x24
 80046f8:	e7d7      	b.n	80046aa <_dtoa_r+0x2c2>
 80046fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	9304      	str	r3, [sp, #16]
 8004700:	e7ba      	b.n	8004678 <_dtoa_r+0x290>
 8004702:	3101      	adds	r1, #1
 8004704:	0052      	lsls	r2, r2, #1
 8004706:	e7ba      	b.n	800467e <_dtoa_r+0x296>
 8004708:	69e3      	ldr	r3, [r4, #28]
 800470a:	9a00      	ldr	r2, [sp, #0]
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	9b04      	ldr	r3, [sp, #16]
 8004710:	2b0e      	cmp	r3, #14
 8004712:	f200 80a8 	bhi.w	8004866 <_dtoa_r+0x47e>
 8004716:	2d00      	cmp	r5, #0
 8004718:	f000 80a5 	beq.w	8004866 <_dtoa_r+0x47e>
 800471c:	f1bb 0f00 	cmp.w	fp, #0
 8004720:	dd38      	ble.n	8004794 <_dtoa_r+0x3ac>
 8004722:	4bc0      	ldr	r3, [pc, #768]	; (8004a24 <_dtoa_r+0x63c>)
 8004724:	f00b 020f 	and.w	r2, fp, #15
 8004728:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800472c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004730:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004734:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004738:	d019      	beq.n	800476e <_dtoa_r+0x386>
 800473a:	4bbb      	ldr	r3, [pc, #748]	; (8004a28 <_dtoa_r+0x640>)
 800473c:	ec51 0b18 	vmov	r0, r1, d8
 8004740:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004744:	f7fc f882 	bl	800084c <__aeabi_ddiv>
 8004748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800474c:	f008 080f 	and.w	r8, r8, #15
 8004750:	2503      	movs	r5, #3
 8004752:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004a28 <_dtoa_r+0x640>
 8004756:	f1b8 0f00 	cmp.w	r8, #0
 800475a:	d10a      	bne.n	8004772 <_dtoa_r+0x38a>
 800475c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004760:	4632      	mov	r2, r6
 8004762:	463b      	mov	r3, r7
 8004764:	f7fc f872 	bl	800084c <__aeabi_ddiv>
 8004768:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800476c:	e02b      	b.n	80047c6 <_dtoa_r+0x3de>
 800476e:	2502      	movs	r5, #2
 8004770:	e7ef      	b.n	8004752 <_dtoa_r+0x36a>
 8004772:	f018 0f01 	tst.w	r8, #1
 8004776:	d008      	beq.n	800478a <_dtoa_r+0x3a2>
 8004778:	4630      	mov	r0, r6
 800477a:	4639      	mov	r1, r7
 800477c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004780:	f7fb ff3a 	bl	80005f8 <__aeabi_dmul>
 8004784:	3501      	adds	r5, #1
 8004786:	4606      	mov	r6, r0
 8004788:	460f      	mov	r7, r1
 800478a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800478e:	f109 0908 	add.w	r9, r9, #8
 8004792:	e7e0      	b.n	8004756 <_dtoa_r+0x36e>
 8004794:	f000 809f 	beq.w	80048d6 <_dtoa_r+0x4ee>
 8004798:	f1cb 0600 	rsb	r6, fp, #0
 800479c:	4ba1      	ldr	r3, [pc, #644]	; (8004a24 <_dtoa_r+0x63c>)
 800479e:	4fa2      	ldr	r7, [pc, #648]	; (8004a28 <_dtoa_r+0x640>)
 80047a0:	f006 020f 	and.w	r2, r6, #15
 80047a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ac:	ec51 0b18 	vmov	r0, r1, d8
 80047b0:	f7fb ff22 	bl	80005f8 <__aeabi_dmul>
 80047b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047b8:	1136      	asrs	r6, r6, #4
 80047ba:	2300      	movs	r3, #0
 80047bc:	2502      	movs	r5, #2
 80047be:	2e00      	cmp	r6, #0
 80047c0:	d17e      	bne.n	80048c0 <_dtoa_r+0x4d8>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1d0      	bne.n	8004768 <_dtoa_r+0x380>
 80047c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 8084 	beq.w	80048da <_dtoa_r+0x4f2>
 80047d2:	4b96      	ldr	r3, [pc, #600]	; (8004a2c <_dtoa_r+0x644>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	4640      	mov	r0, r8
 80047d8:	4649      	mov	r1, r9
 80047da:	f7fc f97f 	bl	8000adc <__aeabi_dcmplt>
 80047de:	2800      	cmp	r0, #0
 80047e0:	d07b      	beq.n	80048da <_dtoa_r+0x4f2>
 80047e2:	9b04      	ldr	r3, [sp, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d078      	beq.n	80048da <_dtoa_r+0x4f2>
 80047e8:	9b01      	ldr	r3, [sp, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	dd39      	ble.n	8004862 <_dtoa_r+0x47a>
 80047ee:	4b90      	ldr	r3, [pc, #576]	; (8004a30 <_dtoa_r+0x648>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	4640      	mov	r0, r8
 80047f4:	4649      	mov	r1, r9
 80047f6:	f7fb feff 	bl	80005f8 <__aeabi_dmul>
 80047fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047fe:	9e01      	ldr	r6, [sp, #4]
 8004800:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8004804:	3501      	adds	r5, #1
 8004806:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800480a:	4628      	mov	r0, r5
 800480c:	f7fb fe8a 	bl	8000524 <__aeabi_i2d>
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	f7fb fef0 	bl	80005f8 <__aeabi_dmul>
 8004818:	4b86      	ldr	r3, [pc, #536]	; (8004a34 <_dtoa_r+0x64c>)
 800481a:	2200      	movs	r2, #0
 800481c:	f7fb fd36 	bl	800028c <__adddf3>
 8004820:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004828:	9303      	str	r3, [sp, #12]
 800482a:	2e00      	cmp	r6, #0
 800482c:	d158      	bne.n	80048e0 <_dtoa_r+0x4f8>
 800482e:	4b82      	ldr	r3, [pc, #520]	; (8004a38 <_dtoa_r+0x650>)
 8004830:	2200      	movs	r2, #0
 8004832:	4640      	mov	r0, r8
 8004834:	4649      	mov	r1, r9
 8004836:	f7fb fd27 	bl	8000288 <__aeabi_dsub>
 800483a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800483e:	4680      	mov	r8, r0
 8004840:	4689      	mov	r9, r1
 8004842:	f7fc f969 	bl	8000b18 <__aeabi_dcmpgt>
 8004846:	2800      	cmp	r0, #0
 8004848:	f040 8296 	bne.w	8004d78 <_dtoa_r+0x990>
 800484c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004850:	4640      	mov	r0, r8
 8004852:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004856:	4649      	mov	r1, r9
 8004858:	f7fc f940 	bl	8000adc <__aeabi_dcmplt>
 800485c:	2800      	cmp	r0, #0
 800485e:	f040 8289 	bne.w	8004d74 <_dtoa_r+0x98c>
 8004862:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004866:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004868:	2b00      	cmp	r3, #0
 800486a:	f2c0 814e 	blt.w	8004b0a <_dtoa_r+0x722>
 800486e:	f1bb 0f0e 	cmp.w	fp, #14
 8004872:	f300 814a 	bgt.w	8004b0a <_dtoa_r+0x722>
 8004876:	4b6b      	ldr	r3, [pc, #428]	; (8004a24 <_dtoa_r+0x63c>)
 8004878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800487c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004882:	2b00      	cmp	r3, #0
 8004884:	f280 80dc 	bge.w	8004a40 <_dtoa_r+0x658>
 8004888:	9b04      	ldr	r3, [sp, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f300 80d8 	bgt.w	8004a40 <_dtoa_r+0x658>
 8004890:	f040 826f 	bne.w	8004d72 <_dtoa_r+0x98a>
 8004894:	4b68      	ldr	r3, [pc, #416]	; (8004a38 <_dtoa_r+0x650>)
 8004896:	2200      	movs	r2, #0
 8004898:	4640      	mov	r0, r8
 800489a:	4649      	mov	r1, r9
 800489c:	f7fb feac 	bl	80005f8 <__aeabi_dmul>
 80048a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80048a4:	f7fc f92e 	bl	8000b04 <__aeabi_dcmpge>
 80048a8:	9e04      	ldr	r6, [sp, #16]
 80048aa:	4637      	mov	r7, r6
 80048ac:	2800      	cmp	r0, #0
 80048ae:	f040 8245 	bne.w	8004d3c <_dtoa_r+0x954>
 80048b2:	9d00      	ldr	r5, [sp, #0]
 80048b4:	2331      	movs	r3, #49	; 0x31
 80048b6:	f805 3b01 	strb.w	r3, [r5], #1
 80048ba:	f10b 0b01 	add.w	fp, fp, #1
 80048be:	e241      	b.n	8004d44 <_dtoa_r+0x95c>
 80048c0:	07f2      	lsls	r2, r6, #31
 80048c2:	d505      	bpl.n	80048d0 <_dtoa_r+0x4e8>
 80048c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048c8:	f7fb fe96 	bl	80005f8 <__aeabi_dmul>
 80048cc:	3501      	adds	r5, #1
 80048ce:	2301      	movs	r3, #1
 80048d0:	1076      	asrs	r6, r6, #1
 80048d2:	3708      	adds	r7, #8
 80048d4:	e773      	b.n	80047be <_dtoa_r+0x3d6>
 80048d6:	2502      	movs	r5, #2
 80048d8:	e775      	b.n	80047c6 <_dtoa_r+0x3de>
 80048da:	9e04      	ldr	r6, [sp, #16]
 80048dc:	465f      	mov	r7, fp
 80048de:	e792      	b.n	8004806 <_dtoa_r+0x41e>
 80048e0:	9900      	ldr	r1, [sp, #0]
 80048e2:	4b50      	ldr	r3, [pc, #320]	; (8004a24 <_dtoa_r+0x63c>)
 80048e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80048e8:	4431      	add	r1, r6
 80048ea:	9102      	str	r1, [sp, #8]
 80048ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048ee:	eeb0 9a47 	vmov.f32	s18, s14
 80048f2:	eef0 9a67 	vmov.f32	s19, s15
 80048f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80048fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80048fe:	2900      	cmp	r1, #0
 8004900:	d044      	beq.n	800498c <_dtoa_r+0x5a4>
 8004902:	494e      	ldr	r1, [pc, #312]	; (8004a3c <_dtoa_r+0x654>)
 8004904:	2000      	movs	r0, #0
 8004906:	f7fb ffa1 	bl	800084c <__aeabi_ddiv>
 800490a:	ec53 2b19 	vmov	r2, r3, d9
 800490e:	f7fb fcbb 	bl	8000288 <__aeabi_dsub>
 8004912:	9d00      	ldr	r5, [sp, #0]
 8004914:	ec41 0b19 	vmov	d9, r0, r1
 8004918:	4649      	mov	r1, r9
 800491a:	4640      	mov	r0, r8
 800491c:	f7fc f91c 	bl	8000b58 <__aeabi_d2iz>
 8004920:	4606      	mov	r6, r0
 8004922:	f7fb fdff 	bl	8000524 <__aeabi_i2d>
 8004926:	4602      	mov	r2, r0
 8004928:	460b      	mov	r3, r1
 800492a:	4640      	mov	r0, r8
 800492c:	4649      	mov	r1, r9
 800492e:	f7fb fcab 	bl	8000288 <__aeabi_dsub>
 8004932:	3630      	adds	r6, #48	; 0x30
 8004934:	f805 6b01 	strb.w	r6, [r5], #1
 8004938:	ec53 2b19 	vmov	r2, r3, d9
 800493c:	4680      	mov	r8, r0
 800493e:	4689      	mov	r9, r1
 8004940:	f7fc f8cc 	bl	8000adc <__aeabi_dcmplt>
 8004944:	2800      	cmp	r0, #0
 8004946:	d164      	bne.n	8004a12 <_dtoa_r+0x62a>
 8004948:	4642      	mov	r2, r8
 800494a:	464b      	mov	r3, r9
 800494c:	4937      	ldr	r1, [pc, #220]	; (8004a2c <_dtoa_r+0x644>)
 800494e:	2000      	movs	r0, #0
 8004950:	f7fb fc9a 	bl	8000288 <__aeabi_dsub>
 8004954:	ec53 2b19 	vmov	r2, r3, d9
 8004958:	f7fc f8c0 	bl	8000adc <__aeabi_dcmplt>
 800495c:	2800      	cmp	r0, #0
 800495e:	f040 80b6 	bne.w	8004ace <_dtoa_r+0x6e6>
 8004962:	9b02      	ldr	r3, [sp, #8]
 8004964:	429d      	cmp	r5, r3
 8004966:	f43f af7c 	beq.w	8004862 <_dtoa_r+0x47a>
 800496a:	4b31      	ldr	r3, [pc, #196]	; (8004a30 <_dtoa_r+0x648>)
 800496c:	ec51 0b19 	vmov	r0, r1, d9
 8004970:	2200      	movs	r2, #0
 8004972:	f7fb fe41 	bl	80005f8 <__aeabi_dmul>
 8004976:	4b2e      	ldr	r3, [pc, #184]	; (8004a30 <_dtoa_r+0x648>)
 8004978:	ec41 0b19 	vmov	d9, r0, r1
 800497c:	2200      	movs	r2, #0
 800497e:	4640      	mov	r0, r8
 8004980:	4649      	mov	r1, r9
 8004982:	f7fb fe39 	bl	80005f8 <__aeabi_dmul>
 8004986:	4680      	mov	r8, r0
 8004988:	4689      	mov	r9, r1
 800498a:	e7c5      	b.n	8004918 <_dtoa_r+0x530>
 800498c:	ec51 0b17 	vmov	r0, r1, d7
 8004990:	f7fb fe32 	bl	80005f8 <__aeabi_dmul>
 8004994:	9b02      	ldr	r3, [sp, #8]
 8004996:	9d00      	ldr	r5, [sp, #0]
 8004998:	930f      	str	r3, [sp, #60]	; 0x3c
 800499a:	ec41 0b19 	vmov	d9, r0, r1
 800499e:	4649      	mov	r1, r9
 80049a0:	4640      	mov	r0, r8
 80049a2:	f7fc f8d9 	bl	8000b58 <__aeabi_d2iz>
 80049a6:	4606      	mov	r6, r0
 80049a8:	f7fb fdbc 	bl	8000524 <__aeabi_i2d>
 80049ac:	3630      	adds	r6, #48	; 0x30
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4640      	mov	r0, r8
 80049b4:	4649      	mov	r1, r9
 80049b6:	f7fb fc67 	bl	8000288 <__aeabi_dsub>
 80049ba:	f805 6b01 	strb.w	r6, [r5], #1
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	429d      	cmp	r5, r3
 80049c2:	4680      	mov	r8, r0
 80049c4:	4689      	mov	r9, r1
 80049c6:	f04f 0200 	mov.w	r2, #0
 80049ca:	d124      	bne.n	8004a16 <_dtoa_r+0x62e>
 80049cc:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <_dtoa_r+0x654>)
 80049ce:	ec51 0b19 	vmov	r0, r1, d9
 80049d2:	f7fb fc5b 	bl	800028c <__adddf3>
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	4640      	mov	r0, r8
 80049dc:	4649      	mov	r1, r9
 80049de:	f7fc f89b 	bl	8000b18 <__aeabi_dcmpgt>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d173      	bne.n	8004ace <_dtoa_r+0x6e6>
 80049e6:	ec53 2b19 	vmov	r2, r3, d9
 80049ea:	4914      	ldr	r1, [pc, #80]	; (8004a3c <_dtoa_r+0x654>)
 80049ec:	2000      	movs	r0, #0
 80049ee:	f7fb fc4b 	bl	8000288 <__aeabi_dsub>
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4640      	mov	r0, r8
 80049f8:	4649      	mov	r1, r9
 80049fa:	f7fc f86f 	bl	8000adc <__aeabi_dcmplt>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	f43f af2f 	beq.w	8004862 <_dtoa_r+0x47a>
 8004a04:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004a06:	1e6b      	subs	r3, r5, #1
 8004a08:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004a0e:	2b30      	cmp	r3, #48	; 0x30
 8004a10:	d0f8      	beq.n	8004a04 <_dtoa_r+0x61c>
 8004a12:	46bb      	mov	fp, r7
 8004a14:	e04a      	b.n	8004aac <_dtoa_r+0x6c4>
 8004a16:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <_dtoa_r+0x648>)
 8004a18:	f7fb fdee 	bl	80005f8 <__aeabi_dmul>
 8004a1c:	4680      	mov	r8, r0
 8004a1e:	4689      	mov	r9, r1
 8004a20:	e7bd      	b.n	800499e <_dtoa_r+0x5b6>
 8004a22:	bf00      	nop
 8004a24:	080063d8 	.word	0x080063d8
 8004a28:	080063b0 	.word	0x080063b0
 8004a2c:	3ff00000 	.word	0x3ff00000
 8004a30:	40240000 	.word	0x40240000
 8004a34:	401c0000 	.word	0x401c0000
 8004a38:	40140000 	.word	0x40140000
 8004a3c:	3fe00000 	.word	0x3fe00000
 8004a40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004a44:	9d00      	ldr	r5, [sp, #0]
 8004a46:	4642      	mov	r2, r8
 8004a48:	464b      	mov	r3, r9
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	4639      	mov	r1, r7
 8004a4e:	f7fb fefd 	bl	800084c <__aeabi_ddiv>
 8004a52:	f7fc f881 	bl	8000b58 <__aeabi_d2iz>
 8004a56:	9001      	str	r0, [sp, #4]
 8004a58:	f7fb fd64 	bl	8000524 <__aeabi_i2d>
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	f7fb fdca 	bl	80005f8 <__aeabi_dmul>
 8004a64:	4602      	mov	r2, r0
 8004a66:	460b      	mov	r3, r1
 8004a68:	4630      	mov	r0, r6
 8004a6a:	4639      	mov	r1, r7
 8004a6c:	f7fb fc0c 	bl	8000288 <__aeabi_dsub>
 8004a70:	9e01      	ldr	r6, [sp, #4]
 8004a72:	9f04      	ldr	r7, [sp, #16]
 8004a74:	3630      	adds	r6, #48	; 0x30
 8004a76:	f805 6b01 	strb.w	r6, [r5], #1
 8004a7a:	9e00      	ldr	r6, [sp, #0]
 8004a7c:	1bae      	subs	r6, r5, r6
 8004a7e:	42b7      	cmp	r7, r6
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	d134      	bne.n	8004af0 <_dtoa_r+0x708>
 8004a86:	f7fb fc01 	bl	800028c <__adddf3>
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	464b      	mov	r3, r9
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460f      	mov	r7, r1
 8004a92:	f7fc f841 	bl	8000b18 <__aeabi_dcmpgt>
 8004a96:	b9c8      	cbnz	r0, 8004acc <_dtoa_r+0x6e4>
 8004a98:	4642      	mov	r2, r8
 8004a9a:	464b      	mov	r3, r9
 8004a9c:	4630      	mov	r0, r6
 8004a9e:	4639      	mov	r1, r7
 8004aa0:	f7fc f812 	bl	8000ac8 <__aeabi_dcmpeq>
 8004aa4:	b110      	cbz	r0, 8004aac <_dtoa_r+0x6c4>
 8004aa6:	9b01      	ldr	r3, [sp, #4]
 8004aa8:	07db      	lsls	r3, r3, #31
 8004aaa:	d40f      	bmi.n	8004acc <_dtoa_r+0x6e4>
 8004aac:	4651      	mov	r1, sl
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f000 fb18 	bl	80050e4 <_Bfree>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004ab8:	702b      	strb	r3, [r5, #0]
 8004aba:	f10b 0301 	add.w	r3, fp, #1
 8004abe:	6013      	str	r3, [r2, #0]
 8004ac0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f43f ace2 	beq.w	800448c <_dtoa_r+0xa4>
 8004ac8:	601d      	str	r5, [r3, #0]
 8004aca:	e4df      	b.n	800448c <_dtoa_r+0xa4>
 8004acc:	465f      	mov	r7, fp
 8004ace:	462b      	mov	r3, r5
 8004ad0:	461d      	mov	r5, r3
 8004ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ad6:	2a39      	cmp	r2, #57	; 0x39
 8004ad8:	d106      	bne.n	8004ae8 <_dtoa_r+0x700>
 8004ada:	9a00      	ldr	r2, [sp, #0]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d1f7      	bne.n	8004ad0 <_dtoa_r+0x6e8>
 8004ae0:	9900      	ldr	r1, [sp, #0]
 8004ae2:	2230      	movs	r2, #48	; 0x30
 8004ae4:	3701      	adds	r7, #1
 8004ae6:	700a      	strb	r2, [r1, #0]
 8004ae8:	781a      	ldrb	r2, [r3, #0]
 8004aea:	3201      	adds	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
 8004aee:	e790      	b.n	8004a12 <_dtoa_r+0x62a>
 8004af0:	4ba3      	ldr	r3, [pc, #652]	; (8004d80 <_dtoa_r+0x998>)
 8004af2:	2200      	movs	r2, #0
 8004af4:	f7fb fd80 	bl	80005f8 <__aeabi_dmul>
 8004af8:	2200      	movs	r2, #0
 8004afa:	2300      	movs	r3, #0
 8004afc:	4606      	mov	r6, r0
 8004afe:	460f      	mov	r7, r1
 8004b00:	f7fb ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d09e      	beq.n	8004a46 <_dtoa_r+0x65e>
 8004b08:	e7d0      	b.n	8004aac <_dtoa_r+0x6c4>
 8004b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b0c:	2a00      	cmp	r2, #0
 8004b0e:	f000 80ca 	beq.w	8004ca6 <_dtoa_r+0x8be>
 8004b12:	9a07      	ldr	r2, [sp, #28]
 8004b14:	2a01      	cmp	r2, #1
 8004b16:	f300 80ad 	bgt.w	8004c74 <_dtoa_r+0x88c>
 8004b1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	f000 80a5 	beq.w	8004c6c <_dtoa_r+0x884>
 8004b22:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004b26:	9e08      	ldr	r6, [sp, #32]
 8004b28:	9d05      	ldr	r5, [sp, #20]
 8004b2a:	9a05      	ldr	r2, [sp, #20]
 8004b2c:	441a      	add	r2, r3
 8004b2e:	9205      	str	r2, [sp, #20]
 8004b30:	9a06      	ldr	r2, [sp, #24]
 8004b32:	2101      	movs	r1, #1
 8004b34:	441a      	add	r2, r3
 8004b36:	4620      	mov	r0, r4
 8004b38:	9206      	str	r2, [sp, #24]
 8004b3a:	f000 fb89 	bl	8005250 <__i2b>
 8004b3e:	4607      	mov	r7, r0
 8004b40:	b165      	cbz	r5, 8004b5c <_dtoa_r+0x774>
 8004b42:	9b06      	ldr	r3, [sp, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	dd09      	ble.n	8004b5c <_dtoa_r+0x774>
 8004b48:	42ab      	cmp	r3, r5
 8004b4a:	9a05      	ldr	r2, [sp, #20]
 8004b4c:	bfa8      	it	ge
 8004b4e:	462b      	movge	r3, r5
 8004b50:	1ad2      	subs	r2, r2, r3
 8004b52:	9205      	str	r2, [sp, #20]
 8004b54:	9a06      	ldr	r2, [sp, #24]
 8004b56:	1aed      	subs	r5, r5, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	9306      	str	r3, [sp, #24]
 8004b5c:	9b08      	ldr	r3, [sp, #32]
 8004b5e:	b1f3      	cbz	r3, 8004b9e <_dtoa_r+0x7b6>
 8004b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	f000 80a3 	beq.w	8004cae <_dtoa_r+0x8c6>
 8004b68:	2e00      	cmp	r6, #0
 8004b6a:	dd10      	ble.n	8004b8e <_dtoa_r+0x7a6>
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	4632      	mov	r2, r6
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 fc2d 	bl	80053d0 <__pow5mult>
 8004b76:	4652      	mov	r2, sl
 8004b78:	4601      	mov	r1, r0
 8004b7a:	4607      	mov	r7, r0
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	f000 fb7d 	bl	800527c <__multiply>
 8004b82:	4651      	mov	r1, sl
 8004b84:	4680      	mov	r8, r0
 8004b86:	4620      	mov	r0, r4
 8004b88:	f000 faac 	bl	80050e4 <_Bfree>
 8004b8c:	46c2      	mov	sl, r8
 8004b8e:	9b08      	ldr	r3, [sp, #32]
 8004b90:	1b9a      	subs	r2, r3, r6
 8004b92:	d004      	beq.n	8004b9e <_dtoa_r+0x7b6>
 8004b94:	4651      	mov	r1, sl
 8004b96:	4620      	mov	r0, r4
 8004b98:	f000 fc1a 	bl	80053d0 <__pow5mult>
 8004b9c:	4682      	mov	sl, r0
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 fb55 	bl	8005250 <__i2b>
 8004ba6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	4606      	mov	r6, r0
 8004bac:	f340 8081 	ble.w	8004cb2 <_dtoa_r+0x8ca>
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	4601      	mov	r1, r0
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f000 fc0b 	bl	80053d0 <__pow5mult>
 8004bba:	9b07      	ldr	r3, [sp, #28]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	4606      	mov	r6, r0
 8004bc0:	dd7a      	ble.n	8004cb8 <_dtoa_r+0x8d0>
 8004bc2:	f04f 0800 	mov.w	r8, #0
 8004bc6:	6933      	ldr	r3, [r6, #16]
 8004bc8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004bcc:	6918      	ldr	r0, [r3, #16]
 8004bce:	f000 faf1 	bl	80051b4 <__hi0bits>
 8004bd2:	f1c0 0020 	rsb	r0, r0, #32
 8004bd6:	9b06      	ldr	r3, [sp, #24]
 8004bd8:	4418      	add	r0, r3
 8004bda:	f010 001f 	ands.w	r0, r0, #31
 8004bde:	f000 8094 	beq.w	8004d0a <_dtoa_r+0x922>
 8004be2:	f1c0 0320 	rsb	r3, r0, #32
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	f340 8085 	ble.w	8004cf6 <_dtoa_r+0x90e>
 8004bec:	9b05      	ldr	r3, [sp, #20]
 8004bee:	f1c0 001c 	rsb	r0, r0, #28
 8004bf2:	4403      	add	r3, r0
 8004bf4:	9305      	str	r3, [sp, #20]
 8004bf6:	9b06      	ldr	r3, [sp, #24]
 8004bf8:	4403      	add	r3, r0
 8004bfa:	4405      	add	r5, r0
 8004bfc:	9306      	str	r3, [sp, #24]
 8004bfe:	9b05      	ldr	r3, [sp, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dd05      	ble.n	8004c10 <_dtoa_r+0x828>
 8004c04:	4651      	mov	r1, sl
 8004c06:	461a      	mov	r2, r3
 8004c08:	4620      	mov	r0, r4
 8004c0a:	f000 fc3b 	bl	8005484 <__lshift>
 8004c0e:	4682      	mov	sl, r0
 8004c10:	9b06      	ldr	r3, [sp, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dd05      	ble.n	8004c22 <_dtoa_r+0x83a>
 8004c16:	4631      	mov	r1, r6
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	f000 fc32 	bl	8005484 <__lshift>
 8004c20:	4606      	mov	r6, r0
 8004c22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d072      	beq.n	8004d0e <_dtoa_r+0x926>
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4650      	mov	r0, sl
 8004c2c:	f000 fc96 	bl	800555c <__mcmp>
 8004c30:	2800      	cmp	r0, #0
 8004c32:	da6c      	bge.n	8004d0e <_dtoa_r+0x926>
 8004c34:	2300      	movs	r3, #0
 8004c36:	4651      	mov	r1, sl
 8004c38:	220a      	movs	r2, #10
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	f000 fa74 	bl	8005128 <__multadd>
 8004c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c42:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004c46:	4682      	mov	sl, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 81b0 	beq.w	8004fae <_dtoa_r+0xbc6>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	4639      	mov	r1, r7
 8004c52:	220a      	movs	r2, #10
 8004c54:	4620      	mov	r0, r4
 8004c56:	f000 fa67 	bl	8005128 <__multadd>
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	4607      	mov	r7, r0
 8004c60:	f300 8096 	bgt.w	8004d90 <_dtoa_r+0x9a8>
 8004c64:	9b07      	ldr	r3, [sp, #28]
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	dc59      	bgt.n	8004d1e <_dtoa_r+0x936>
 8004c6a:	e091      	b.n	8004d90 <_dtoa_r+0x9a8>
 8004c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004c72:	e758      	b.n	8004b26 <_dtoa_r+0x73e>
 8004c74:	9b04      	ldr	r3, [sp, #16]
 8004c76:	1e5e      	subs	r6, r3, #1
 8004c78:	9b08      	ldr	r3, [sp, #32]
 8004c7a:	42b3      	cmp	r3, r6
 8004c7c:	bfbf      	itttt	lt
 8004c7e:	9b08      	ldrlt	r3, [sp, #32]
 8004c80:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8004c82:	9608      	strlt	r6, [sp, #32]
 8004c84:	1af3      	sublt	r3, r6, r3
 8004c86:	bfb4      	ite	lt
 8004c88:	18d2      	addlt	r2, r2, r3
 8004c8a:	1b9e      	subge	r6, r3, r6
 8004c8c:	9b04      	ldr	r3, [sp, #16]
 8004c8e:	bfbc      	itt	lt
 8004c90:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8004c92:	2600      	movlt	r6, #0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	bfb7      	itett	lt
 8004c98:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8004c9c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8004ca0:	1a9d      	sublt	r5, r3, r2
 8004ca2:	2300      	movlt	r3, #0
 8004ca4:	e741      	b.n	8004b2a <_dtoa_r+0x742>
 8004ca6:	9e08      	ldr	r6, [sp, #32]
 8004ca8:	9d05      	ldr	r5, [sp, #20]
 8004caa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004cac:	e748      	b.n	8004b40 <_dtoa_r+0x758>
 8004cae:	9a08      	ldr	r2, [sp, #32]
 8004cb0:	e770      	b.n	8004b94 <_dtoa_r+0x7ac>
 8004cb2:	9b07      	ldr	r3, [sp, #28]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	dc19      	bgt.n	8004cec <_dtoa_r+0x904>
 8004cb8:	9b02      	ldr	r3, [sp, #8]
 8004cba:	b9bb      	cbnz	r3, 8004cec <_dtoa_r+0x904>
 8004cbc:	9b03      	ldr	r3, [sp, #12]
 8004cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cc2:	b99b      	cbnz	r3, 8004cec <_dtoa_r+0x904>
 8004cc4:	9b03      	ldr	r3, [sp, #12]
 8004cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cca:	0d1b      	lsrs	r3, r3, #20
 8004ccc:	051b      	lsls	r3, r3, #20
 8004cce:	b183      	cbz	r3, 8004cf2 <_dtoa_r+0x90a>
 8004cd0:	9b05      	ldr	r3, [sp, #20]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	9305      	str	r3, [sp, #20]
 8004cd6:	9b06      	ldr	r3, [sp, #24]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	9306      	str	r3, [sp, #24]
 8004cdc:	f04f 0801 	mov.w	r8, #1
 8004ce0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f47f af6f 	bne.w	8004bc6 <_dtoa_r+0x7de>
 8004ce8:	2001      	movs	r0, #1
 8004cea:	e774      	b.n	8004bd6 <_dtoa_r+0x7ee>
 8004cec:	f04f 0800 	mov.w	r8, #0
 8004cf0:	e7f6      	b.n	8004ce0 <_dtoa_r+0x8f8>
 8004cf2:	4698      	mov	r8, r3
 8004cf4:	e7f4      	b.n	8004ce0 <_dtoa_r+0x8f8>
 8004cf6:	d082      	beq.n	8004bfe <_dtoa_r+0x816>
 8004cf8:	9a05      	ldr	r2, [sp, #20]
 8004cfa:	331c      	adds	r3, #28
 8004cfc:	441a      	add	r2, r3
 8004cfe:	9205      	str	r2, [sp, #20]
 8004d00:	9a06      	ldr	r2, [sp, #24]
 8004d02:	441a      	add	r2, r3
 8004d04:	441d      	add	r5, r3
 8004d06:	9206      	str	r2, [sp, #24]
 8004d08:	e779      	b.n	8004bfe <_dtoa_r+0x816>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	e7f4      	b.n	8004cf8 <_dtoa_r+0x910>
 8004d0e:	9b04      	ldr	r3, [sp, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	dc37      	bgt.n	8004d84 <_dtoa_r+0x99c>
 8004d14:	9b07      	ldr	r3, [sp, #28]
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	dd34      	ble.n	8004d84 <_dtoa_r+0x99c>
 8004d1a:	9b04      	ldr	r3, [sp, #16]
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	9b01      	ldr	r3, [sp, #4]
 8004d20:	b963      	cbnz	r3, 8004d3c <_dtoa_r+0x954>
 8004d22:	4631      	mov	r1, r6
 8004d24:	2205      	movs	r2, #5
 8004d26:	4620      	mov	r0, r4
 8004d28:	f000 f9fe 	bl	8005128 <__multadd>
 8004d2c:	4601      	mov	r1, r0
 8004d2e:	4606      	mov	r6, r0
 8004d30:	4650      	mov	r0, sl
 8004d32:	f000 fc13 	bl	800555c <__mcmp>
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f73f adbb 	bgt.w	80048b2 <_dtoa_r+0x4ca>
 8004d3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d3e:	9d00      	ldr	r5, [sp, #0]
 8004d40:	ea6f 0b03 	mvn.w	fp, r3
 8004d44:	f04f 0800 	mov.w	r8, #0
 8004d48:	4631      	mov	r1, r6
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	f000 f9ca 	bl	80050e4 <_Bfree>
 8004d50:	2f00      	cmp	r7, #0
 8004d52:	f43f aeab 	beq.w	8004aac <_dtoa_r+0x6c4>
 8004d56:	f1b8 0f00 	cmp.w	r8, #0
 8004d5a:	d005      	beq.n	8004d68 <_dtoa_r+0x980>
 8004d5c:	45b8      	cmp	r8, r7
 8004d5e:	d003      	beq.n	8004d68 <_dtoa_r+0x980>
 8004d60:	4641      	mov	r1, r8
 8004d62:	4620      	mov	r0, r4
 8004d64:	f000 f9be 	bl	80050e4 <_Bfree>
 8004d68:	4639      	mov	r1, r7
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f000 f9ba 	bl	80050e4 <_Bfree>
 8004d70:	e69c      	b.n	8004aac <_dtoa_r+0x6c4>
 8004d72:	2600      	movs	r6, #0
 8004d74:	4637      	mov	r7, r6
 8004d76:	e7e1      	b.n	8004d3c <_dtoa_r+0x954>
 8004d78:	46bb      	mov	fp, r7
 8004d7a:	4637      	mov	r7, r6
 8004d7c:	e599      	b.n	80048b2 <_dtoa_r+0x4ca>
 8004d7e:	bf00      	nop
 8004d80:	40240000 	.word	0x40240000
 8004d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	f000 80c8 	beq.w	8004f1c <_dtoa_r+0xb34>
 8004d8c:	9b04      	ldr	r3, [sp, #16]
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	2d00      	cmp	r5, #0
 8004d92:	dd05      	ble.n	8004da0 <_dtoa_r+0x9b8>
 8004d94:	4639      	mov	r1, r7
 8004d96:	462a      	mov	r2, r5
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 fb73 	bl	8005484 <__lshift>
 8004d9e:	4607      	mov	r7, r0
 8004da0:	f1b8 0f00 	cmp.w	r8, #0
 8004da4:	d05b      	beq.n	8004e5e <_dtoa_r+0xa76>
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	4620      	mov	r0, r4
 8004daa:	f000 f95b 	bl	8005064 <_Balloc>
 8004dae:	4605      	mov	r5, r0
 8004db0:	b928      	cbnz	r0, 8004dbe <_dtoa_r+0x9d6>
 8004db2:	4b83      	ldr	r3, [pc, #524]	; (8004fc0 <_dtoa_r+0xbd8>)
 8004db4:	4602      	mov	r2, r0
 8004db6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004dba:	f7ff bb2e 	b.w	800441a <_dtoa_r+0x32>
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	3202      	adds	r2, #2
 8004dc2:	0092      	lsls	r2, r2, #2
 8004dc4:	f107 010c 	add.w	r1, r7, #12
 8004dc8:	300c      	adds	r0, #12
 8004dca:	f000 fee7 	bl	8005b9c <memcpy>
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4629      	mov	r1, r5
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f000 fb56 	bl	8005484 <__lshift>
 8004dd8:	9b00      	ldr	r3, [sp, #0]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	9304      	str	r3, [sp, #16]
 8004dde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004de2:	4413      	add	r3, r2
 8004de4:	9308      	str	r3, [sp, #32]
 8004de6:	9b02      	ldr	r3, [sp, #8]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	46b8      	mov	r8, r7
 8004dee:	9306      	str	r3, [sp, #24]
 8004df0:	4607      	mov	r7, r0
 8004df2:	9b04      	ldr	r3, [sp, #16]
 8004df4:	4631      	mov	r1, r6
 8004df6:	3b01      	subs	r3, #1
 8004df8:	4650      	mov	r0, sl
 8004dfa:	9301      	str	r3, [sp, #4]
 8004dfc:	f7ff fa6b 	bl	80042d6 <quorem>
 8004e00:	4641      	mov	r1, r8
 8004e02:	9002      	str	r0, [sp, #8]
 8004e04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004e08:	4650      	mov	r0, sl
 8004e0a:	f000 fba7 	bl	800555c <__mcmp>
 8004e0e:	463a      	mov	r2, r7
 8004e10:	9005      	str	r0, [sp, #20]
 8004e12:	4631      	mov	r1, r6
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fbbd 	bl	8005594 <__mdiff>
 8004e1a:	68c2      	ldr	r2, [r0, #12]
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	bb02      	cbnz	r2, 8004e62 <_dtoa_r+0xa7a>
 8004e20:	4601      	mov	r1, r0
 8004e22:	4650      	mov	r0, sl
 8004e24:	f000 fb9a 	bl	800555c <__mcmp>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4629      	mov	r1, r5
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	9209      	str	r2, [sp, #36]	; 0x24
 8004e30:	f000 f958 	bl	80050e4 <_Bfree>
 8004e34:	9b07      	ldr	r3, [sp, #28]
 8004e36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e38:	9d04      	ldr	r5, [sp, #16]
 8004e3a:	ea43 0102 	orr.w	r1, r3, r2
 8004e3e:	9b06      	ldr	r3, [sp, #24]
 8004e40:	4319      	orrs	r1, r3
 8004e42:	d110      	bne.n	8004e66 <_dtoa_r+0xa7e>
 8004e44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e48:	d029      	beq.n	8004e9e <_dtoa_r+0xab6>
 8004e4a:	9b05      	ldr	r3, [sp, #20]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	dd02      	ble.n	8004e56 <_dtoa_r+0xa6e>
 8004e50:	9b02      	ldr	r3, [sp, #8]
 8004e52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004e56:	9b01      	ldr	r3, [sp, #4]
 8004e58:	f883 9000 	strb.w	r9, [r3]
 8004e5c:	e774      	b.n	8004d48 <_dtoa_r+0x960>
 8004e5e:	4638      	mov	r0, r7
 8004e60:	e7ba      	b.n	8004dd8 <_dtoa_r+0x9f0>
 8004e62:	2201      	movs	r2, #1
 8004e64:	e7e1      	b.n	8004e2a <_dtoa_r+0xa42>
 8004e66:	9b05      	ldr	r3, [sp, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	db04      	blt.n	8004e76 <_dtoa_r+0xa8e>
 8004e6c:	9907      	ldr	r1, [sp, #28]
 8004e6e:	430b      	orrs	r3, r1
 8004e70:	9906      	ldr	r1, [sp, #24]
 8004e72:	430b      	orrs	r3, r1
 8004e74:	d120      	bne.n	8004eb8 <_dtoa_r+0xad0>
 8004e76:	2a00      	cmp	r2, #0
 8004e78:	dded      	ble.n	8004e56 <_dtoa_r+0xa6e>
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f000 fb00 	bl	8005484 <__lshift>
 8004e84:	4631      	mov	r1, r6
 8004e86:	4682      	mov	sl, r0
 8004e88:	f000 fb68 	bl	800555c <__mcmp>
 8004e8c:	2800      	cmp	r0, #0
 8004e8e:	dc03      	bgt.n	8004e98 <_dtoa_r+0xab0>
 8004e90:	d1e1      	bne.n	8004e56 <_dtoa_r+0xa6e>
 8004e92:	f019 0f01 	tst.w	r9, #1
 8004e96:	d0de      	beq.n	8004e56 <_dtoa_r+0xa6e>
 8004e98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004e9c:	d1d8      	bne.n	8004e50 <_dtoa_r+0xa68>
 8004e9e:	9a01      	ldr	r2, [sp, #4]
 8004ea0:	2339      	movs	r3, #57	; 0x39
 8004ea2:	7013      	strb	r3, [r2, #0]
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	461d      	mov	r5, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004eae:	2a39      	cmp	r2, #57	; 0x39
 8004eb0:	d06c      	beq.n	8004f8c <_dtoa_r+0xba4>
 8004eb2:	3201      	adds	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
 8004eb6:	e747      	b.n	8004d48 <_dtoa_r+0x960>
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	dd07      	ble.n	8004ecc <_dtoa_r+0xae4>
 8004ebc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004ec0:	d0ed      	beq.n	8004e9e <_dtoa_r+0xab6>
 8004ec2:	9a01      	ldr	r2, [sp, #4]
 8004ec4:	f109 0301 	add.w	r3, r9, #1
 8004ec8:	7013      	strb	r3, [r2, #0]
 8004eca:	e73d      	b.n	8004d48 <_dtoa_r+0x960>
 8004ecc:	9b04      	ldr	r3, [sp, #16]
 8004ece:	9a08      	ldr	r2, [sp, #32]
 8004ed0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d043      	beq.n	8004f60 <_dtoa_r+0xb78>
 8004ed8:	4651      	mov	r1, sl
 8004eda:	2300      	movs	r3, #0
 8004edc:	220a      	movs	r2, #10
 8004ede:	4620      	mov	r0, r4
 8004ee0:	f000 f922 	bl	8005128 <__multadd>
 8004ee4:	45b8      	cmp	r8, r7
 8004ee6:	4682      	mov	sl, r0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	f04f 020a 	mov.w	r2, #10
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	d107      	bne.n	8004f06 <_dtoa_r+0xb1e>
 8004ef6:	f000 f917 	bl	8005128 <__multadd>
 8004efa:	4680      	mov	r8, r0
 8004efc:	4607      	mov	r7, r0
 8004efe:	9b04      	ldr	r3, [sp, #16]
 8004f00:	3301      	adds	r3, #1
 8004f02:	9304      	str	r3, [sp, #16]
 8004f04:	e775      	b.n	8004df2 <_dtoa_r+0xa0a>
 8004f06:	f000 f90f 	bl	8005128 <__multadd>
 8004f0a:	4639      	mov	r1, r7
 8004f0c:	4680      	mov	r8, r0
 8004f0e:	2300      	movs	r3, #0
 8004f10:	220a      	movs	r2, #10
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f908 	bl	8005128 <__multadd>
 8004f18:	4607      	mov	r7, r0
 8004f1a:	e7f0      	b.n	8004efe <_dtoa_r+0xb16>
 8004f1c:	9b04      	ldr	r3, [sp, #16]
 8004f1e:	9301      	str	r3, [sp, #4]
 8004f20:	9d00      	ldr	r5, [sp, #0]
 8004f22:	4631      	mov	r1, r6
 8004f24:	4650      	mov	r0, sl
 8004f26:	f7ff f9d6 	bl	80042d6 <quorem>
 8004f2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8004f2e:	9b00      	ldr	r3, [sp, #0]
 8004f30:	f805 9b01 	strb.w	r9, [r5], #1
 8004f34:	1aea      	subs	r2, r5, r3
 8004f36:	9b01      	ldr	r3, [sp, #4]
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	dd07      	ble.n	8004f4c <_dtoa_r+0xb64>
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	2300      	movs	r3, #0
 8004f40:	220a      	movs	r2, #10
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 f8f0 	bl	8005128 <__multadd>
 8004f48:	4682      	mov	sl, r0
 8004f4a:	e7ea      	b.n	8004f22 <_dtoa_r+0xb3a>
 8004f4c:	9b01      	ldr	r3, [sp, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	bfc8      	it	gt
 8004f52:	461d      	movgt	r5, r3
 8004f54:	9b00      	ldr	r3, [sp, #0]
 8004f56:	bfd8      	it	le
 8004f58:	2501      	movle	r5, #1
 8004f5a:	441d      	add	r5, r3
 8004f5c:	f04f 0800 	mov.w	r8, #0
 8004f60:	4651      	mov	r1, sl
 8004f62:	2201      	movs	r2, #1
 8004f64:	4620      	mov	r0, r4
 8004f66:	f000 fa8d 	bl	8005484 <__lshift>
 8004f6a:	4631      	mov	r1, r6
 8004f6c:	4682      	mov	sl, r0
 8004f6e:	f000 faf5 	bl	800555c <__mcmp>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	dc96      	bgt.n	8004ea4 <_dtoa_r+0xabc>
 8004f76:	d102      	bne.n	8004f7e <_dtoa_r+0xb96>
 8004f78:	f019 0f01 	tst.w	r9, #1
 8004f7c:	d192      	bne.n	8004ea4 <_dtoa_r+0xabc>
 8004f7e:	462b      	mov	r3, r5
 8004f80:	461d      	mov	r5, r3
 8004f82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004f86:	2a30      	cmp	r2, #48	; 0x30
 8004f88:	d0fa      	beq.n	8004f80 <_dtoa_r+0xb98>
 8004f8a:	e6dd      	b.n	8004d48 <_dtoa_r+0x960>
 8004f8c:	9a00      	ldr	r2, [sp, #0]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d189      	bne.n	8004ea6 <_dtoa_r+0xabe>
 8004f92:	f10b 0b01 	add.w	fp, fp, #1
 8004f96:	2331      	movs	r3, #49	; 0x31
 8004f98:	e796      	b.n	8004ec8 <_dtoa_r+0xae0>
 8004f9a:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <_dtoa_r+0xbdc>)
 8004f9c:	f7ff ba99 	b.w	80044d2 <_dtoa_r+0xea>
 8004fa0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f47f aa6d 	bne.w	8004482 <_dtoa_r+0x9a>
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <_dtoa_r+0xbe0>)
 8004faa:	f7ff ba92 	b.w	80044d2 <_dtoa_r+0xea>
 8004fae:	9b01      	ldr	r3, [sp, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	dcb5      	bgt.n	8004f20 <_dtoa_r+0xb38>
 8004fb4:	9b07      	ldr	r3, [sp, #28]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	f73f aeb1 	bgt.w	8004d1e <_dtoa_r+0x936>
 8004fbc:	e7b0      	b.n	8004f20 <_dtoa_r+0xb38>
 8004fbe:	bf00      	nop
 8004fc0:	0800633f 	.word	0x0800633f
 8004fc4:	0800629f 	.word	0x0800629f
 8004fc8:	080062c3 	.word	0x080062c3

08004fcc <_free_r>:
 8004fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d044      	beq.n	800505c <_free_r+0x90>
 8004fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd6:	9001      	str	r0, [sp, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f1a1 0404 	sub.w	r4, r1, #4
 8004fde:	bfb8      	it	lt
 8004fe0:	18e4      	addlt	r4, r4, r3
 8004fe2:	f7fe fb51 	bl	8003688 <__malloc_lock>
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <_free_r+0x94>)
 8004fe8:	9801      	ldr	r0, [sp, #4]
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	b933      	cbnz	r3, 8004ffc <_free_r+0x30>
 8004fee:	6063      	str	r3, [r4, #4]
 8004ff0:	6014      	str	r4, [r2, #0]
 8004ff2:	b003      	add	sp, #12
 8004ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff8:	f7fe bb4c 	b.w	8003694 <__malloc_unlock>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d908      	bls.n	8005012 <_free_r+0x46>
 8005000:	6825      	ldr	r5, [r4, #0]
 8005002:	1961      	adds	r1, r4, r5
 8005004:	428b      	cmp	r3, r1
 8005006:	bf01      	itttt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	1949      	addeq	r1, r1, r5
 800500e:	6021      	streq	r1, [r4, #0]
 8005010:	e7ed      	b.n	8004fee <_free_r+0x22>
 8005012:	461a      	mov	r2, r3
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b10b      	cbz	r3, 800501c <_free_r+0x50>
 8005018:	42a3      	cmp	r3, r4
 800501a:	d9fa      	bls.n	8005012 <_free_r+0x46>
 800501c:	6811      	ldr	r1, [r2, #0]
 800501e:	1855      	adds	r5, r2, r1
 8005020:	42a5      	cmp	r5, r4
 8005022:	d10b      	bne.n	800503c <_free_r+0x70>
 8005024:	6824      	ldr	r4, [r4, #0]
 8005026:	4421      	add	r1, r4
 8005028:	1854      	adds	r4, r2, r1
 800502a:	42a3      	cmp	r3, r4
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	d1e0      	bne.n	8004ff2 <_free_r+0x26>
 8005030:	681c      	ldr	r4, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	6053      	str	r3, [r2, #4]
 8005036:	440c      	add	r4, r1
 8005038:	6014      	str	r4, [r2, #0]
 800503a:	e7da      	b.n	8004ff2 <_free_r+0x26>
 800503c:	d902      	bls.n	8005044 <_free_r+0x78>
 800503e:	230c      	movs	r3, #12
 8005040:	6003      	str	r3, [r0, #0]
 8005042:	e7d6      	b.n	8004ff2 <_free_r+0x26>
 8005044:	6825      	ldr	r5, [r4, #0]
 8005046:	1961      	adds	r1, r4, r5
 8005048:	428b      	cmp	r3, r1
 800504a:	bf04      	itt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	6063      	str	r3, [r4, #4]
 8005052:	bf04      	itt	eq
 8005054:	1949      	addeq	r1, r1, r5
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	6054      	str	r4, [r2, #4]
 800505a:	e7ca      	b.n	8004ff2 <_free_r+0x26>
 800505c:	b003      	add	sp, #12
 800505e:	bd30      	pop	{r4, r5, pc}
 8005060:	200002a0 	.word	0x200002a0

08005064 <_Balloc>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	69c6      	ldr	r6, [r0, #28]
 8005068:	4604      	mov	r4, r0
 800506a:	460d      	mov	r5, r1
 800506c:	b976      	cbnz	r6, 800508c <_Balloc+0x28>
 800506e:	2010      	movs	r0, #16
 8005070:	f7fe fa5a 	bl	8003528 <malloc>
 8005074:	4602      	mov	r2, r0
 8005076:	61e0      	str	r0, [r4, #28]
 8005078:	b920      	cbnz	r0, 8005084 <_Balloc+0x20>
 800507a:	4b18      	ldr	r3, [pc, #96]	; (80050dc <_Balloc+0x78>)
 800507c:	4818      	ldr	r0, [pc, #96]	; (80050e0 <_Balloc+0x7c>)
 800507e:	216b      	movs	r1, #107	; 0x6b
 8005080:	f000 fd9a 	bl	8005bb8 <__assert_func>
 8005084:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005088:	6006      	str	r6, [r0, #0]
 800508a:	60c6      	str	r6, [r0, #12]
 800508c:	69e6      	ldr	r6, [r4, #28]
 800508e:	68f3      	ldr	r3, [r6, #12]
 8005090:	b183      	cbz	r3, 80050b4 <_Balloc+0x50>
 8005092:	69e3      	ldr	r3, [r4, #28]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800509a:	b9b8      	cbnz	r0, 80050cc <_Balloc+0x68>
 800509c:	2101      	movs	r1, #1
 800509e:	fa01 f605 	lsl.w	r6, r1, r5
 80050a2:	1d72      	adds	r2, r6, #5
 80050a4:	0092      	lsls	r2, r2, #2
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 fda4 	bl	8005bf4 <_calloc_r>
 80050ac:	b160      	cbz	r0, 80050c8 <_Balloc+0x64>
 80050ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80050b2:	e00e      	b.n	80050d2 <_Balloc+0x6e>
 80050b4:	2221      	movs	r2, #33	; 0x21
 80050b6:	2104      	movs	r1, #4
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fd9b 	bl	8005bf4 <_calloc_r>
 80050be:	69e3      	ldr	r3, [r4, #28]
 80050c0:	60f0      	str	r0, [r6, #12]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1e4      	bne.n	8005092 <_Balloc+0x2e>
 80050c8:	2000      	movs	r0, #0
 80050ca:	bd70      	pop	{r4, r5, r6, pc}
 80050cc:	6802      	ldr	r2, [r0, #0]
 80050ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80050d2:	2300      	movs	r3, #0
 80050d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80050d8:	e7f7      	b.n	80050ca <_Balloc+0x66>
 80050da:	bf00      	nop
 80050dc:	080062d0 	.word	0x080062d0
 80050e0:	08006350 	.word	0x08006350

080050e4 <_Bfree>:
 80050e4:	b570      	push	{r4, r5, r6, lr}
 80050e6:	69c6      	ldr	r6, [r0, #28]
 80050e8:	4605      	mov	r5, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	b976      	cbnz	r6, 800510c <_Bfree+0x28>
 80050ee:	2010      	movs	r0, #16
 80050f0:	f7fe fa1a 	bl	8003528 <malloc>
 80050f4:	4602      	mov	r2, r0
 80050f6:	61e8      	str	r0, [r5, #28]
 80050f8:	b920      	cbnz	r0, 8005104 <_Bfree+0x20>
 80050fa:	4b09      	ldr	r3, [pc, #36]	; (8005120 <_Bfree+0x3c>)
 80050fc:	4809      	ldr	r0, [pc, #36]	; (8005124 <_Bfree+0x40>)
 80050fe:	218f      	movs	r1, #143	; 0x8f
 8005100:	f000 fd5a 	bl	8005bb8 <__assert_func>
 8005104:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005108:	6006      	str	r6, [r0, #0]
 800510a:	60c6      	str	r6, [r0, #12]
 800510c:	b13c      	cbz	r4, 800511e <_Bfree+0x3a>
 800510e:	69eb      	ldr	r3, [r5, #28]
 8005110:	6862      	ldr	r2, [r4, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005118:	6021      	str	r1, [r4, #0]
 800511a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	080062d0 	.word	0x080062d0
 8005124:	08006350 	.word	0x08006350

08005128 <__multadd>:
 8005128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512c:	690d      	ldr	r5, [r1, #16]
 800512e:	4607      	mov	r7, r0
 8005130:	460c      	mov	r4, r1
 8005132:	461e      	mov	r6, r3
 8005134:	f101 0c14 	add.w	ip, r1, #20
 8005138:	2000      	movs	r0, #0
 800513a:	f8dc 3000 	ldr.w	r3, [ip]
 800513e:	b299      	uxth	r1, r3
 8005140:	fb02 6101 	mla	r1, r2, r1, r6
 8005144:	0c1e      	lsrs	r6, r3, #16
 8005146:	0c0b      	lsrs	r3, r1, #16
 8005148:	fb02 3306 	mla	r3, r2, r6, r3
 800514c:	b289      	uxth	r1, r1
 800514e:	3001      	adds	r0, #1
 8005150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005154:	4285      	cmp	r5, r0
 8005156:	f84c 1b04 	str.w	r1, [ip], #4
 800515a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800515e:	dcec      	bgt.n	800513a <__multadd+0x12>
 8005160:	b30e      	cbz	r6, 80051a6 <__multadd+0x7e>
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	42ab      	cmp	r3, r5
 8005166:	dc19      	bgt.n	800519c <__multadd+0x74>
 8005168:	6861      	ldr	r1, [r4, #4]
 800516a:	4638      	mov	r0, r7
 800516c:	3101      	adds	r1, #1
 800516e:	f7ff ff79 	bl	8005064 <_Balloc>
 8005172:	4680      	mov	r8, r0
 8005174:	b928      	cbnz	r0, 8005182 <__multadd+0x5a>
 8005176:	4602      	mov	r2, r0
 8005178:	4b0c      	ldr	r3, [pc, #48]	; (80051ac <__multadd+0x84>)
 800517a:	480d      	ldr	r0, [pc, #52]	; (80051b0 <__multadd+0x88>)
 800517c:	21ba      	movs	r1, #186	; 0xba
 800517e:	f000 fd1b 	bl	8005bb8 <__assert_func>
 8005182:	6922      	ldr	r2, [r4, #16]
 8005184:	3202      	adds	r2, #2
 8005186:	f104 010c 	add.w	r1, r4, #12
 800518a:	0092      	lsls	r2, r2, #2
 800518c:	300c      	adds	r0, #12
 800518e:	f000 fd05 	bl	8005b9c <memcpy>
 8005192:	4621      	mov	r1, r4
 8005194:	4638      	mov	r0, r7
 8005196:	f7ff ffa5 	bl	80050e4 <_Bfree>
 800519a:	4644      	mov	r4, r8
 800519c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051a0:	3501      	adds	r5, #1
 80051a2:	615e      	str	r6, [r3, #20]
 80051a4:	6125      	str	r5, [r4, #16]
 80051a6:	4620      	mov	r0, r4
 80051a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ac:	0800633f 	.word	0x0800633f
 80051b0:	08006350 	.word	0x08006350

080051b4 <__hi0bits>:
 80051b4:	0c03      	lsrs	r3, r0, #16
 80051b6:	041b      	lsls	r3, r3, #16
 80051b8:	b9d3      	cbnz	r3, 80051f0 <__hi0bits+0x3c>
 80051ba:	0400      	lsls	r0, r0, #16
 80051bc:	2310      	movs	r3, #16
 80051be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80051c2:	bf04      	itt	eq
 80051c4:	0200      	lsleq	r0, r0, #8
 80051c6:	3308      	addeq	r3, #8
 80051c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80051cc:	bf04      	itt	eq
 80051ce:	0100      	lsleq	r0, r0, #4
 80051d0:	3304      	addeq	r3, #4
 80051d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80051d6:	bf04      	itt	eq
 80051d8:	0080      	lsleq	r0, r0, #2
 80051da:	3302      	addeq	r3, #2
 80051dc:	2800      	cmp	r0, #0
 80051de:	db05      	blt.n	80051ec <__hi0bits+0x38>
 80051e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80051e4:	f103 0301 	add.w	r3, r3, #1
 80051e8:	bf08      	it	eq
 80051ea:	2320      	moveq	r3, #32
 80051ec:	4618      	mov	r0, r3
 80051ee:	4770      	bx	lr
 80051f0:	2300      	movs	r3, #0
 80051f2:	e7e4      	b.n	80051be <__hi0bits+0xa>

080051f4 <__lo0bits>:
 80051f4:	6803      	ldr	r3, [r0, #0]
 80051f6:	f013 0207 	ands.w	r2, r3, #7
 80051fa:	d00c      	beq.n	8005216 <__lo0bits+0x22>
 80051fc:	07d9      	lsls	r1, r3, #31
 80051fe:	d422      	bmi.n	8005246 <__lo0bits+0x52>
 8005200:	079a      	lsls	r2, r3, #30
 8005202:	bf49      	itett	mi
 8005204:	085b      	lsrmi	r3, r3, #1
 8005206:	089b      	lsrpl	r3, r3, #2
 8005208:	6003      	strmi	r3, [r0, #0]
 800520a:	2201      	movmi	r2, #1
 800520c:	bf5c      	itt	pl
 800520e:	6003      	strpl	r3, [r0, #0]
 8005210:	2202      	movpl	r2, #2
 8005212:	4610      	mov	r0, r2
 8005214:	4770      	bx	lr
 8005216:	b299      	uxth	r1, r3
 8005218:	b909      	cbnz	r1, 800521e <__lo0bits+0x2a>
 800521a:	0c1b      	lsrs	r3, r3, #16
 800521c:	2210      	movs	r2, #16
 800521e:	b2d9      	uxtb	r1, r3
 8005220:	b909      	cbnz	r1, 8005226 <__lo0bits+0x32>
 8005222:	3208      	adds	r2, #8
 8005224:	0a1b      	lsrs	r3, r3, #8
 8005226:	0719      	lsls	r1, r3, #28
 8005228:	bf04      	itt	eq
 800522a:	091b      	lsreq	r3, r3, #4
 800522c:	3204      	addeq	r2, #4
 800522e:	0799      	lsls	r1, r3, #30
 8005230:	bf04      	itt	eq
 8005232:	089b      	lsreq	r3, r3, #2
 8005234:	3202      	addeq	r2, #2
 8005236:	07d9      	lsls	r1, r3, #31
 8005238:	d403      	bmi.n	8005242 <__lo0bits+0x4e>
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	f102 0201 	add.w	r2, r2, #1
 8005240:	d003      	beq.n	800524a <__lo0bits+0x56>
 8005242:	6003      	str	r3, [r0, #0]
 8005244:	e7e5      	b.n	8005212 <__lo0bits+0x1e>
 8005246:	2200      	movs	r2, #0
 8005248:	e7e3      	b.n	8005212 <__lo0bits+0x1e>
 800524a:	2220      	movs	r2, #32
 800524c:	e7e1      	b.n	8005212 <__lo0bits+0x1e>
	...

08005250 <__i2b>:
 8005250:	b510      	push	{r4, lr}
 8005252:	460c      	mov	r4, r1
 8005254:	2101      	movs	r1, #1
 8005256:	f7ff ff05 	bl	8005064 <_Balloc>
 800525a:	4602      	mov	r2, r0
 800525c:	b928      	cbnz	r0, 800526a <__i2b+0x1a>
 800525e:	4b05      	ldr	r3, [pc, #20]	; (8005274 <__i2b+0x24>)
 8005260:	4805      	ldr	r0, [pc, #20]	; (8005278 <__i2b+0x28>)
 8005262:	f240 1145 	movw	r1, #325	; 0x145
 8005266:	f000 fca7 	bl	8005bb8 <__assert_func>
 800526a:	2301      	movs	r3, #1
 800526c:	6144      	str	r4, [r0, #20]
 800526e:	6103      	str	r3, [r0, #16]
 8005270:	bd10      	pop	{r4, pc}
 8005272:	bf00      	nop
 8005274:	0800633f 	.word	0x0800633f
 8005278:	08006350 	.word	0x08006350

0800527c <__multiply>:
 800527c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005280:	4691      	mov	r9, r2
 8005282:	690a      	ldr	r2, [r1, #16]
 8005284:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005288:	429a      	cmp	r2, r3
 800528a:	bfb8      	it	lt
 800528c:	460b      	movlt	r3, r1
 800528e:	460c      	mov	r4, r1
 8005290:	bfbc      	itt	lt
 8005292:	464c      	movlt	r4, r9
 8005294:	4699      	movlt	r9, r3
 8005296:	6927      	ldr	r7, [r4, #16]
 8005298:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800529c:	68a3      	ldr	r3, [r4, #8]
 800529e:	6861      	ldr	r1, [r4, #4]
 80052a0:	eb07 060a 	add.w	r6, r7, sl
 80052a4:	42b3      	cmp	r3, r6
 80052a6:	b085      	sub	sp, #20
 80052a8:	bfb8      	it	lt
 80052aa:	3101      	addlt	r1, #1
 80052ac:	f7ff feda 	bl	8005064 <_Balloc>
 80052b0:	b930      	cbnz	r0, 80052c0 <__multiply+0x44>
 80052b2:	4602      	mov	r2, r0
 80052b4:	4b44      	ldr	r3, [pc, #272]	; (80053c8 <__multiply+0x14c>)
 80052b6:	4845      	ldr	r0, [pc, #276]	; (80053cc <__multiply+0x150>)
 80052b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80052bc:	f000 fc7c 	bl	8005bb8 <__assert_func>
 80052c0:	f100 0514 	add.w	r5, r0, #20
 80052c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80052c8:	462b      	mov	r3, r5
 80052ca:	2200      	movs	r2, #0
 80052cc:	4543      	cmp	r3, r8
 80052ce:	d321      	bcc.n	8005314 <__multiply+0x98>
 80052d0:	f104 0314 	add.w	r3, r4, #20
 80052d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80052d8:	f109 0314 	add.w	r3, r9, #20
 80052dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80052e0:	9202      	str	r2, [sp, #8]
 80052e2:	1b3a      	subs	r2, r7, r4
 80052e4:	3a15      	subs	r2, #21
 80052e6:	f022 0203 	bic.w	r2, r2, #3
 80052ea:	3204      	adds	r2, #4
 80052ec:	f104 0115 	add.w	r1, r4, #21
 80052f0:	428f      	cmp	r7, r1
 80052f2:	bf38      	it	cc
 80052f4:	2204      	movcc	r2, #4
 80052f6:	9201      	str	r2, [sp, #4]
 80052f8:	9a02      	ldr	r2, [sp, #8]
 80052fa:	9303      	str	r3, [sp, #12]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d80c      	bhi.n	800531a <__multiply+0x9e>
 8005300:	2e00      	cmp	r6, #0
 8005302:	dd03      	ble.n	800530c <__multiply+0x90>
 8005304:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005308:	2b00      	cmp	r3, #0
 800530a:	d05b      	beq.n	80053c4 <__multiply+0x148>
 800530c:	6106      	str	r6, [r0, #16]
 800530e:	b005      	add	sp, #20
 8005310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005314:	f843 2b04 	str.w	r2, [r3], #4
 8005318:	e7d8      	b.n	80052cc <__multiply+0x50>
 800531a:	f8b3 a000 	ldrh.w	sl, [r3]
 800531e:	f1ba 0f00 	cmp.w	sl, #0
 8005322:	d024      	beq.n	800536e <__multiply+0xf2>
 8005324:	f104 0e14 	add.w	lr, r4, #20
 8005328:	46a9      	mov	r9, r5
 800532a:	f04f 0c00 	mov.w	ip, #0
 800532e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005332:	f8d9 1000 	ldr.w	r1, [r9]
 8005336:	fa1f fb82 	uxth.w	fp, r2
 800533a:	b289      	uxth	r1, r1
 800533c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005340:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005344:	f8d9 2000 	ldr.w	r2, [r9]
 8005348:	4461      	add	r1, ip
 800534a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800534e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005352:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005356:	b289      	uxth	r1, r1
 8005358:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800535c:	4577      	cmp	r7, lr
 800535e:	f849 1b04 	str.w	r1, [r9], #4
 8005362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005366:	d8e2      	bhi.n	800532e <__multiply+0xb2>
 8005368:	9a01      	ldr	r2, [sp, #4]
 800536a:	f845 c002 	str.w	ip, [r5, r2]
 800536e:	9a03      	ldr	r2, [sp, #12]
 8005370:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005374:	3304      	adds	r3, #4
 8005376:	f1b9 0f00 	cmp.w	r9, #0
 800537a:	d021      	beq.n	80053c0 <__multiply+0x144>
 800537c:	6829      	ldr	r1, [r5, #0]
 800537e:	f104 0c14 	add.w	ip, r4, #20
 8005382:	46ae      	mov	lr, r5
 8005384:	f04f 0a00 	mov.w	sl, #0
 8005388:	f8bc b000 	ldrh.w	fp, [ip]
 800538c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005390:	fb09 220b 	mla	r2, r9, fp, r2
 8005394:	4452      	add	r2, sl
 8005396:	b289      	uxth	r1, r1
 8005398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800539c:	f84e 1b04 	str.w	r1, [lr], #4
 80053a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80053a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80053a8:	f8be 1000 	ldrh.w	r1, [lr]
 80053ac:	fb09 110a 	mla	r1, r9, sl, r1
 80053b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80053b4:	4567      	cmp	r7, ip
 80053b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80053ba:	d8e5      	bhi.n	8005388 <__multiply+0x10c>
 80053bc:	9a01      	ldr	r2, [sp, #4]
 80053be:	50a9      	str	r1, [r5, r2]
 80053c0:	3504      	adds	r5, #4
 80053c2:	e799      	b.n	80052f8 <__multiply+0x7c>
 80053c4:	3e01      	subs	r6, #1
 80053c6:	e79b      	b.n	8005300 <__multiply+0x84>
 80053c8:	0800633f 	.word	0x0800633f
 80053cc:	08006350 	.word	0x08006350

080053d0 <__pow5mult>:
 80053d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053d4:	4615      	mov	r5, r2
 80053d6:	f012 0203 	ands.w	r2, r2, #3
 80053da:	4606      	mov	r6, r0
 80053dc:	460f      	mov	r7, r1
 80053de:	d007      	beq.n	80053f0 <__pow5mult+0x20>
 80053e0:	4c25      	ldr	r4, [pc, #148]	; (8005478 <__pow5mult+0xa8>)
 80053e2:	3a01      	subs	r2, #1
 80053e4:	2300      	movs	r3, #0
 80053e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053ea:	f7ff fe9d 	bl	8005128 <__multadd>
 80053ee:	4607      	mov	r7, r0
 80053f0:	10ad      	asrs	r5, r5, #2
 80053f2:	d03d      	beq.n	8005470 <__pow5mult+0xa0>
 80053f4:	69f4      	ldr	r4, [r6, #28]
 80053f6:	b97c      	cbnz	r4, 8005418 <__pow5mult+0x48>
 80053f8:	2010      	movs	r0, #16
 80053fa:	f7fe f895 	bl	8003528 <malloc>
 80053fe:	4602      	mov	r2, r0
 8005400:	61f0      	str	r0, [r6, #28]
 8005402:	b928      	cbnz	r0, 8005410 <__pow5mult+0x40>
 8005404:	4b1d      	ldr	r3, [pc, #116]	; (800547c <__pow5mult+0xac>)
 8005406:	481e      	ldr	r0, [pc, #120]	; (8005480 <__pow5mult+0xb0>)
 8005408:	f240 11b3 	movw	r1, #435	; 0x1b3
 800540c:	f000 fbd4 	bl	8005bb8 <__assert_func>
 8005410:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005414:	6004      	str	r4, [r0, #0]
 8005416:	60c4      	str	r4, [r0, #12]
 8005418:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800541c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005420:	b94c      	cbnz	r4, 8005436 <__pow5mult+0x66>
 8005422:	f240 2171 	movw	r1, #625	; 0x271
 8005426:	4630      	mov	r0, r6
 8005428:	f7ff ff12 	bl	8005250 <__i2b>
 800542c:	2300      	movs	r3, #0
 800542e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005432:	4604      	mov	r4, r0
 8005434:	6003      	str	r3, [r0, #0]
 8005436:	f04f 0900 	mov.w	r9, #0
 800543a:	07eb      	lsls	r3, r5, #31
 800543c:	d50a      	bpl.n	8005454 <__pow5mult+0x84>
 800543e:	4639      	mov	r1, r7
 8005440:	4622      	mov	r2, r4
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ff1a 	bl	800527c <__multiply>
 8005448:	4639      	mov	r1, r7
 800544a:	4680      	mov	r8, r0
 800544c:	4630      	mov	r0, r6
 800544e:	f7ff fe49 	bl	80050e4 <_Bfree>
 8005452:	4647      	mov	r7, r8
 8005454:	106d      	asrs	r5, r5, #1
 8005456:	d00b      	beq.n	8005470 <__pow5mult+0xa0>
 8005458:	6820      	ldr	r0, [r4, #0]
 800545a:	b938      	cbnz	r0, 800546c <__pow5mult+0x9c>
 800545c:	4622      	mov	r2, r4
 800545e:	4621      	mov	r1, r4
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff ff0b 	bl	800527c <__multiply>
 8005466:	6020      	str	r0, [r4, #0]
 8005468:	f8c0 9000 	str.w	r9, [r0]
 800546c:	4604      	mov	r4, r0
 800546e:	e7e4      	b.n	800543a <__pow5mult+0x6a>
 8005470:	4638      	mov	r0, r7
 8005472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005476:	bf00      	nop
 8005478:	080064a0 	.word	0x080064a0
 800547c:	080062d0 	.word	0x080062d0
 8005480:	08006350 	.word	0x08006350

08005484 <__lshift>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	460c      	mov	r4, r1
 800548a:	6849      	ldr	r1, [r1, #4]
 800548c:	6923      	ldr	r3, [r4, #16]
 800548e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	4607      	mov	r7, r0
 8005496:	4691      	mov	r9, r2
 8005498:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800549c:	f108 0601 	add.w	r6, r8, #1
 80054a0:	42b3      	cmp	r3, r6
 80054a2:	db0b      	blt.n	80054bc <__lshift+0x38>
 80054a4:	4638      	mov	r0, r7
 80054a6:	f7ff fddd 	bl	8005064 <_Balloc>
 80054aa:	4605      	mov	r5, r0
 80054ac:	b948      	cbnz	r0, 80054c2 <__lshift+0x3e>
 80054ae:	4602      	mov	r2, r0
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <__lshift+0xd0>)
 80054b2:	4829      	ldr	r0, [pc, #164]	; (8005558 <__lshift+0xd4>)
 80054b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80054b8:	f000 fb7e 	bl	8005bb8 <__assert_func>
 80054bc:	3101      	adds	r1, #1
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	e7ee      	b.n	80054a0 <__lshift+0x1c>
 80054c2:	2300      	movs	r3, #0
 80054c4:	f100 0114 	add.w	r1, r0, #20
 80054c8:	f100 0210 	add.w	r2, r0, #16
 80054cc:	4618      	mov	r0, r3
 80054ce:	4553      	cmp	r3, sl
 80054d0:	db33      	blt.n	800553a <__lshift+0xb6>
 80054d2:	6920      	ldr	r0, [r4, #16]
 80054d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80054d8:	f104 0314 	add.w	r3, r4, #20
 80054dc:	f019 091f 	ands.w	r9, r9, #31
 80054e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80054e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80054e8:	d02b      	beq.n	8005542 <__lshift+0xbe>
 80054ea:	f1c9 0e20 	rsb	lr, r9, #32
 80054ee:	468a      	mov	sl, r1
 80054f0:	2200      	movs	r2, #0
 80054f2:	6818      	ldr	r0, [r3, #0]
 80054f4:	fa00 f009 	lsl.w	r0, r0, r9
 80054f8:	4310      	orrs	r0, r2
 80054fa:	f84a 0b04 	str.w	r0, [sl], #4
 80054fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005502:	459c      	cmp	ip, r3
 8005504:	fa22 f20e 	lsr.w	r2, r2, lr
 8005508:	d8f3      	bhi.n	80054f2 <__lshift+0x6e>
 800550a:	ebac 0304 	sub.w	r3, ip, r4
 800550e:	3b15      	subs	r3, #21
 8005510:	f023 0303 	bic.w	r3, r3, #3
 8005514:	3304      	adds	r3, #4
 8005516:	f104 0015 	add.w	r0, r4, #21
 800551a:	4584      	cmp	ip, r0
 800551c:	bf38      	it	cc
 800551e:	2304      	movcc	r3, #4
 8005520:	50ca      	str	r2, [r1, r3]
 8005522:	b10a      	cbz	r2, 8005528 <__lshift+0xa4>
 8005524:	f108 0602 	add.w	r6, r8, #2
 8005528:	3e01      	subs	r6, #1
 800552a:	4638      	mov	r0, r7
 800552c:	612e      	str	r6, [r5, #16]
 800552e:	4621      	mov	r1, r4
 8005530:	f7ff fdd8 	bl	80050e4 <_Bfree>
 8005534:	4628      	mov	r0, r5
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	f842 0f04 	str.w	r0, [r2, #4]!
 800553e:	3301      	adds	r3, #1
 8005540:	e7c5      	b.n	80054ce <__lshift+0x4a>
 8005542:	3904      	subs	r1, #4
 8005544:	f853 2b04 	ldr.w	r2, [r3], #4
 8005548:	f841 2f04 	str.w	r2, [r1, #4]!
 800554c:	459c      	cmp	ip, r3
 800554e:	d8f9      	bhi.n	8005544 <__lshift+0xc0>
 8005550:	e7ea      	b.n	8005528 <__lshift+0xa4>
 8005552:	bf00      	nop
 8005554:	0800633f 	.word	0x0800633f
 8005558:	08006350 	.word	0x08006350

0800555c <__mcmp>:
 800555c:	b530      	push	{r4, r5, lr}
 800555e:	6902      	ldr	r2, [r0, #16]
 8005560:	690c      	ldr	r4, [r1, #16]
 8005562:	1b12      	subs	r2, r2, r4
 8005564:	d10e      	bne.n	8005584 <__mcmp+0x28>
 8005566:	f100 0314 	add.w	r3, r0, #20
 800556a:	3114      	adds	r1, #20
 800556c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005570:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005574:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005578:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800557c:	42a5      	cmp	r5, r4
 800557e:	d003      	beq.n	8005588 <__mcmp+0x2c>
 8005580:	d305      	bcc.n	800558e <__mcmp+0x32>
 8005582:	2201      	movs	r2, #1
 8005584:	4610      	mov	r0, r2
 8005586:	bd30      	pop	{r4, r5, pc}
 8005588:	4283      	cmp	r3, r0
 800558a:	d3f3      	bcc.n	8005574 <__mcmp+0x18>
 800558c:	e7fa      	b.n	8005584 <__mcmp+0x28>
 800558e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005592:	e7f7      	b.n	8005584 <__mcmp+0x28>

08005594 <__mdiff>:
 8005594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	460c      	mov	r4, r1
 800559a:	4606      	mov	r6, r0
 800559c:	4611      	mov	r1, r2
 800559e:	4620      	mov	r0, r4
 80055a0:	4690      	mov	r8, r2
 80055a2:	f7ff ffdb 	bl	800555c <__mcmp>
 80055a6:	1e05      	subs	r5, r0, #0
 80055a8:	d110      	bne.n	80055cc <__mdiff+0x38>
 80055aa:	4629      	mov	r1, r5
 80055ac:	4630      	mov	r0, r6
 80055ae:	f7ff fd59 	bl	8005064 <_Balloc>
 80055b2:	b930      	cbnz	r0, 80055c2 <__mdiff+0x2e>
 80055b4:	4b3a      	ldr	r3, [pc, #232]	; (80056a0 <__mdiff+0x10c>)
 80055b6:	4602      	mov	r2, r0
 80055b8:	f240 2137 	movw	r1, #567	; 0x237
 80055bc:	4839      	ldr	r0, [pc, #228]	; (80056a4 <__mdiff+0x110>)
 80055be:	f000 fafb 	bl	8005bb8 <__assert_func>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80055c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055cc:	bfa4      	itt	ge
 80055ce:	4643      	movge	r3, r8
 80055d0:	46a0      	movge	r8, r4
 80055d2:	4630      	mov	r0, r6
 80055d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80055d8:	bfa6      	itte	ge
 80055da:	461c      	movge	r4, r3
 80055dc:	2500      	movge	r5, #0
 80055de:	2501      	movlt	r5, #1
 80055e0:	f7ff fd40 	bl	8005064 <_Balloc>
 80055e4:	b920      	cbnz	r0, 80055f0 <__mdiff+0x5c>
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <__mdiff+0x10c>)
 80055e8:	4602      	mov	r2, r0
 80055ea:	f240 2145 	movw	r1, #581	; 0x245
 80055ee:	e7e5      	b.n	80055bc <__mdiff+0x28>
 80055f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80055f4:	6926      	ldr	r6, [r4, #16]
 80055f6:	60c5      	str	r5, [r0, #12]
 80055f8:	f104 0914 	add.w	r9, r4, #20
 80055fc:	f108 0514 	add.w	r5, r8, #20
 8005600:	f100 0e14 	add.w	lr, r0, #20
 8005604:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005608:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800560c:	f108 0210 	add.w	r2, r8, #16
 8005610:	46f2      	mov	sl, lr
 8005612:	2100      	movs	r1, #0
 8005614:	f859 3b04 	ldr.w	r3, [r9], #4
 8005618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800561c:	fa11 f88b 	uxtah	r8, r1, fp
 8005620:	b299      	uxth	r1, r3
 8005622:	0c1b      	lsrs	r3, r3, #16
 8005624:	eba8 0801 	sub.w	r8, r8, r1
 8005628:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800562c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005630:	fa1f f888 	uxth.w	r8, r8
 8005634:	1419      	asrs	r1, r3, #16
 8005636:	454e      	cmp	r6, r9
 8005638:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800563c:	f84a 3b04 	str.w	r3, [sl], #4
 8005640:	d8e8      	bhi.n	8005614 <__mdiff+0x80>
 8005642:	1b33      	subs	r3, r6, r4
 8005644:	3b15      	subs	r3, #21
 8005646:	f023 0303 	bic.w	r3, r3, #3
 800564a:	3304      	adds	r3, #4
 800564c:	3415      	adds	r4, #21
 800564e:	42a6      	cmp	r6, r4
 8005650:	bf38      	it	cc
 8005652:	2304      	movcc	r3, #4
 8005654:	441d      	add	r5, r3
 8005656:	4473      	add	r3, lr
 8005658:	469e      	mov	lr, r3
 800565a:	462e      	mov	r6, r5
 800565c:	4566      	cmp	r6, ip
 800565e:	d30e      	bcc.n	800567e <__mdiff+0xea>
 8005660:	f10c 0203 	add.w	r2, ip, #3
 8005664:	1b52      	subs	r2, r2, r5
 8005666:	f022 0203 	bic.w	r2, r2, #3
 800566a:	3d03      	subs	r5, #3
 800566c:	45ac      	cmp	ip, r5
 800566e:	bf38      	it	cc
 8005670:	2200      	movcc	r2, #0
 8005672:	4413      	add	r3, r2
 8005674:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005678:	b17a      	cbz	r2, 800569a <__mdiff+0x106>
 800567a:	6107      	str	r7, [r0, #16]
 800567c:	e7a4      	b.n	80055c8 <__mdiff+0x34>
 800567e:	f856 8b04 	ldr.w	r8, [r6], #4
 8005682:	fa11 f288 	uxtah	r2, r1, r8
 8005686:	1414      	asrs	r4, r2, #16
 8005688:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800568c:	b292      	uxth	r2, r2
 800568e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005692:	f84e 2b04 	str.w	r2, [lr], #4
 8005696:	1421      	asrs	r1, r4, #16
 8005698:	e7e0      	b.n	800565c <__mdiff+0xc8>
 800569a:	3f01      	subs	r7, #1
 800569c:	e7ea      	b.n	8005674 <__mdiff+0xe0>
 800569e:	bf00      	nop
 80056a0:	0800633f 	.word	0x0800633f
 80056a4:	08006350 	.word	0x08006350

080056a8 <__d2b>:
 80056a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056ac:	460f      	mov	r7, r1
 80056ae:	2101      	movs	r1, #1
 80056b0:	ec59 8b10 	vmov	r8, r9, d0
 80056b4:	4616      	mov	r6, r2
 80056b6:	f7ff fcd5 	bl	8005064 <_Balloc>
 80056ba:	4604      	mov	r4, r0
 80056bc:	b930      	cbnz	r0, 80056cc <__d2b+0x24>
 80056be:	4602      	mov	r2, r0
 80056c0:	4b24      	ldr	r3, [pc, #144]	; (8005754 <__d2b+0xac>)
 80056c2:	4825      	ldr	r0, [pc, #148]	; (8005758 <__d2b+0xb0>)
 80056c4:	f240 310f 	movw	r1, #783	; 0x30f
 80056c8:	f000 fa76 	bl	8005bb8 <__assert_func>
 80056cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056d4:	bb2d      	cbnz	r5, 8005722 <__d2b+0x7a>
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	f1b8 0300 	subs.w	r3, r8, #0
 80056dc:	d026      	beq.n	800572c <__d2b+0x84>
 80056de:	4668      	mov	r0, sp
 80056e0:	9300      	str	r3, [sp, #0]
 80056e2:	f7ff fd87 	bl	80051f4 <__lo0bits>
 80056e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80056ea:	b1e8      	cbz	r0, 8005728 <__d2b+0x80>
 80056ec:	f1c0 0320 	rsb	r3, r0, #32
 80056f0:	fa02 f303 	lsl.w	r3, r2, r3
 80056f4:	430b      	orrs	r3, r1
 80056f6:	40c2      	lsrs	r2, r0
 80056f8:	6163      	str	r3, [r4, #20]
 80056fa:	9201      	str	r2, [sp, #4]
 80056fc:	9b01      	ldr	r3, [sp, #4]
 80056fe:	61a3      	str	r3, [r4, #24]
 8005700:	2b00      	cmp	r3, #0
 8005702:	bf14      	ite	ne
 8005704:	2202      	movne	r2, #2
 8005706:	2201      	moveq	r2, #1
 8005708:	6122      	str	r2, [r4, #16]
 800570a:	b1bd      	cbz	r5, 800573c <__d2b+0x94>
 800570c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005710:	4405      	add	r5, r0
 8005712:	603d      	str	r5, [r7, #0]
 8005714:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005718:	6030      	str	r0, [r6, #0]
 800571a:	4620      	mov	r0, r4
 800571c:	b003      	add	sp, #12
 800571e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005726:	e7d6      	b.n	80056d6 <__d2b+0x2e>
 8005728:	6161      	str	r1, [r4, #20]
 800572a:	e7e7      	b.n	80056fc <__d2b+0x54>
 800572c:	a801      	add	r0, sp, #4
 800572e:	f7ff fd61 	bl	80051f4 <__lo0bits>
 8005732:	9b01      	ldr	r3, [sp, #4]
 8005734:	6163      	str	r3, [r4, #20]
 8005736:	3020      	adds	r0, #32
 8005738:	2201      	movs	r2, #1
 800573a:	e7e5      	b.n	8005708 <__d2b+0x60>
 800573c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005740:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005744:	6038      	str	r0, [r7, #0]
 8005746:	6918      	ldr	r0, [r3, #16]
 8005748:	f7ff fd34 	bl	80051b4 <__hi0bits>
 800574c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005750:	e7e2      	b.n	8005718 <__d2b+0x70>
 8005752:	bf00      	nop
 8005754:	0800633f 	.word	0x0800633f
 8005758:	08006350 	.word	0x08006350

0800575c <__ssputs_r>:
 800575c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005760:	688e      	ldr	r6, [r1, #8]
 8005762:	461f      	mov	r7, r3
 8005764:	42be      	cmp	r6, r7
 8005766:	680b      	ldr	r3, [r1, #0]
 8005768:	4682      	mov	sl, r0
 800576a:	460c      	mov	r4, r1
 800576c:	4690      	mov	r8, r2
 800576e:	d82c      	bhi.n	80057ca <__ssputs_r+0x6e>
 8005770:	898a      	ldrh	r2, [r1, #12]
 8005772:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005776:	d026      	beq.n	80057c6 <__ssputs_r+0x6a>
 8005778:	6965      	ldr	r5, [r4, #20]
 800577a:	6909      	ldr	r1, [r1, #16]
 800577c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005780:	eba3 0901 	sub.w	r9, r3, r1
 8005784:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005788:	1c7b      	adds	r3, r7, #1
 800578a:	444b      	add	r3, r9
 800578c:	106d      	asrs	r5, r5, #1
 800578e:	429d      	cmp	r5, r3
 8005790:	bf38      	it	cc
 8005792:	461d      	movcc	r5, r3
 8005794:	0553      	lsls	r3, r2, #21
 8005796:	d527      	bpl.n	80057e8 <__ssputs_r+0x8c>
 8005798:	4629      	mov	r1, r5
 800579a:	f7fd fef5 	bl	8003588 <_malloc_r>
 800579e:	4606      	mov	r6, r0
 80057a0:	b360      	cbz	r0, 80057fc <__ssputs_r+0xa0>
 80057a2:	6921      	ldr	r1, [r4, #16]
 80057a4:	464a      	mov	r2, r9
 80057a6:	f000 f9f9 	bl	8005b9c <memcpy>
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b4:	81a3      	strh	r3, [r4, #12]
 80057b6:	6126      	str	r6, [r4, #16]
 80057b8:	6165      	str	r5, [r4, #20]
 80057ba:	444e      	add	r6, r9
 80057bc:	eba5 0509 	sub.w	r5, r5, r9
 80057c0:	6026      	str	r6, [r4, #0]
 80057c2:	60a5      	str	r5, [r4, #8]
 80057c4:	463e      	mov	r6, r7
 80057c6:	42be      	cmp	r6, r7
 80057c8:	d900      	bls.n	80057cc <__ssputs_r+0x70>
 80057ca:	463e      	mov	r6, r7
 80057cc:	6820      	ldr	r0, [r4, #0]
 80057ce:	4632      	mov	r2, r6
 80057d0:	4641      	mov	r1, r8
 80057d2:	f000 f9c9 	bl	8005b68 <memmove>
 80057d6:	68a3      	ldr	r3, [r4, #8]
 80057d8:	1b9b      	subs	r3, r3, r6
 80057da:	60a3      	str	r3, [r4, #8]
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	4433      	add	r3, r6
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	2000      	movs	r0, #0
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e8:	462a      	mov	r2, r5
 80057ea:	f000 fa2b 	bl	8005c44 <_realloc_r>
 80057ee:	4606      	mov	r6, r0
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d1e0      	bne.n	80057b6 <__ssputs_r+0x5a>
 80057f4:	6921      	ldr	r1, [r4, #16]
 80057f6:	4650      	mov	r0, sl
 80057f8:	f7ff fbe8 	bl	8004fcc <_free_r>
 80057fc:	230c      	movs	r3, #12
 80057fe:	f8ca 3000 	str.w	r3, [sl]
 8005802:	89a3      	ldrh	r3, [r4, #12]
 8005804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005808:	81a3      	strh	r3, [r4, #12]
 800580a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800580e:	e7e9      	b.n	80057e4 <__ssputs_r+0x88>

08005810 <_svfiprintf_r>:
 8005810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005814:	4698      	mov	r8, r3
 8005816:	898b      	ldrh	r3, [r1, #12]
 8005818:	061b      	lsls	r3, r3, #24
 800581a:	b09d      	sub	sp, #116	; 0x74
 800581c:	4607      	mov	r7, r0
 800581e:	460d      	mov	r5, r1
 8005820:	4614      	mov	r4, r2
 8005822:	d50e      	bpl.n	8005842 <_svfiprintf_r+0x32>
 8005824:	690b      	ldr	r3, [r1, #16]
 8005826:	b963      	cbnz	r3, 8005842 <_svfiprintf_r+0x32>
 8005828:	2140      	movs	r1, #64	; 0x40
 800582a:	f7fd fead 	bl	8003588 <_malloc_r>
 800582e:	6028      	str	r0, [r5, #0]
 8005830:	6128      	str	r0, [r5, #16]
 8005832:	b920      	cbnz	r0, 800583e <_svfiprintf_r+0x2e>
 8005834:	230c      	movs	r3, #12
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800583c:	e0d0      	b.n	80059e0 <_svfiprintf_r+0x1d0>
 800583e:	2340      	movs	r3, #64	; 0x40
 8005840:	616b      	str	r3, [r5, #20]
 8005842:	2300      	movs	r3, #0
 8005844:	9309      	str	r3, [sp, #36]	; 0x24
 8005846:	2320      	movs	r3, #32
 8005848:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800584c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005850:	2330      	movs	r3, #48	; 0x30
 8005852:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80059f8 <_svfiprintf_r+0x1e8>
 8005856:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800585a:	f04f 0901 	mov.w	r9, #1
 800585e:	4623      	mov	r3, r4
 8005860:	469a      	mov	sl, r3
 8005862:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005866:	b10a      	cbz	r2, 800586c <_svfiprintf_r+0x5c>
 8005868:	2a25      	cmp	r2, #37	; 0x25
 800586a:	d1f9      	bne.n	8005860 <_svfiprintf_r+0x50>
 800586c:	ebba 0b04 	subs.w	fp, sl, r4
 8005870:	d00b      	beq.n	800588a <_svfiprintf_r+0x7a>
 8005872:	465b      	mov	r3, fp
 8005874:	4622      	mov	r2, r4
 8005876:	4629      	mov	r1, r5
 8005878:	4638      	mov	r0, r7
 800587a:	f7ff ff6f 	bl	800575c <__ssputs_r>
 800587e:	3001      	adds	r0, #1
 8005880:	f000 80a9 	beq.w	80059d6 <_svfiprintf_r+0x1c6>
 8005884:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005886:	445a      	add	r2, fp
 8005888:	9209      	str	r2, [sp, #36]	; 0x24
 800588a:	f89a 3000 	ldrb.w	r3, [sl]
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80a1 	beq.w	80059d6 <_svfiprintf_r+0x1c6>
 8005894:	2300      	movs	r3, #0
 8005896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800589a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800589e:	f10a 0a01 	add.w	sl, sl, #1
 80058a2:	9304      	str	r3, [sp, #16]
 80058a4:	9307      	str	r3, [sp, #28]
 80058a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058aa:	931a      	str	r3, [sp, #104]	; 0x68
 80058ac:	4654      	mov	r4, sl
 80058ae:	2205      	movs	r2, #5
 80058b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b4:	4850      	ldr	r0, [pc, #320]	; (80059f8 <_svfiprintf_r+0x1e8>)
 80058b6:	f7fa fc8b 	bl	80001d0 <memchr>
 80058ba:	9a04      	ldr	r2, [sp, #16]
 80058bc:	b9d8      	cbnz	r0, 80058f6 <_svfiprintf_r+0xe6>
 80058be:	06d0      	lsls	r0, r2, #27
 80058c0:	bf44      	itt	mi
 80058c2:	2320      	movmi	r3, #32
 80058c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058c8:	0711      	lsls	r1, r2, #28
 80058ca:	bf44      	itt	mi
 80058cc:	232b      	movmi	r3, #43	; 0x2b
 80058ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058d2:	f89a 3000 	ldrb.w	r3, [sl]
 80058d6:	2b2a      	cmp	r3, #42	; 0x2a
 80058d8:	d015      	beq.n	8005906 <_svfiprintf_r+0xf6>
 80058da:	9a07      	ldr	r2, [sp, #28]
 80058dc:	4654      	mov	r4, sl
 80058de:	2000      	movs	r0, #0
 80058e0:	f04f 0c0a 	mov.w	ip, #10
 80058e4:	4621      	mov	r1, r4
 80058e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058ea:	3b30      	subs	r3, #48	; 0x30
 80058ec:	2b09      	cmp	r3, #9
 80058ee:	d94d      	bls.n	800598c <_svfiprintf_r+0x17c>
 80058f0:	b1b0      	cbz	r0, 8005920 <_svfiprintf_r+0x110>
 80058f2:	9207      	str	r2, [sp, #28]
 80058f4:	e014      	b.n	8005920 <_svfiprintf_r+0x110>
 80058f6:	eba0 0308 	sub.w	r3, r0, r8
 80058fa:	fa09 f303 	lsl.w	r3, r9, r3
 80058fe:	4313      	orrs	r3, r2
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	46a2      	mov	sl, r4
 8005904:	e7d2      	b.n	80058ac <_svfiprintf_r+0x9c>
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	1d19      	adds	r1, r3, #4
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	9103      	str	r1, [sp, #12]
 800590e:	2b00      	cmp	r3, #0
 8005910:	bfbb      	ittet	lt
 8005912:	425b      	neglt	r3, r3
 8005914:	f042 0202 	orrlt.w	r2, r2, #2
 8005918:	9307      	strge	r3, [sp, #28]
 800591a:	9307      	strlt	r3, [sp, #28]
 800591c:	bfb8      	it	lt
 800591e:	9204      	strlt	r2, [sp, #16]
 8005920:	7823      	ldrb	r3, [r4, #0]
 8005922:	2b2e      	cmp	r3, #46	; 0x2e
 8005924:	d10c      	bne.n	8005940 <_svfiprintf_r+0x130>
 8005926:	7863      	ldrb	r3, [r4, #1]
 8005928:	2b2a      	cmp	r3, #42	; 0x2a
 800592a:	d134      	bne.n	8005996 <_svfiprintf_r+0x186>
 800592c:	9b03      	ldr	r3, [sp, #12]
 800592e:	1d1a      	adds	r2, r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	9203      	str	r2, [sp, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	bfb8      	it	lt
 8005938:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800593c:	3402      	adds	r4, #2
 800593e:	9305      	str	r3, [sp, #20]
 8005940:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005a08 <_svfiprintf_r+0x1f8>
 8005944:	7821      	ldrb	r1, [r4, #0]
 8005946:	2203      	movs	r2, #3
 8005948:	4650      	mov	r0, sl
 800594a:	f7fa fc41 	bl	80001d0 <memchr>
 800594e:	b138      	cbz	r0, 8005960 <_svfiprintf_r+0x150>
 8005950:	9b04      	ldr	r3, [sp, #16]
 8005952:	eba0 000a 	sub.w	r0, r0, sl
 8005956:	2240      	movs	r2, #64	; 0x40
 8005958:	4082      	lsls	r2, r0
 800595a:	4313      	orrs	r3, r2
 800595c:	3401      	adds	r4, #1
 800595e:	9304      	str	r3, [sp, #16]
 8005960:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005964:	4825      	ldr	r0, [pc, #148]	; (80059fc <_svfiprintf_r+0x1ec>)
 8005966:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800596a:	2206      	movs	r2, #6
 800596c:	f7fa fc30 	bl	80001d0 <memchr>
 8005970:	2800      	cmp	r0, #0
 8005972:	d038      	beq.n	80059e6 <_svfiprintf_r+0x1d6>
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <_svfiprintf_r+0x1f0>)
 8005976:	bb1b      	cbnz	r3, 80059c0 <_svfiprintf_r+0x1b0>
 8005978:	9b03      	ldr	r3, [sp, #12]
 800597a:	3307      	adds	r3, #7
 800597c:	f023 0307 	bic.w	r3, r3, #7
 8005980:	3308      	adds	r3, #8
 8005982:	9303      	str	r3, [sp, #12]
 8005984:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005986:	4433      	add	r3, r6
 8005988:	9309      	str	r3, [sp, #36]	; 0x24
 800598a:	e768      	b.n	800585e <_svfiprintf_r+0x4e>
 800598c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005990:	460c      	mov	r4, r1
 8005992:	2001      	movs	r0, #1
 8005994:	e7a6      	b.n	80058e4 <_svfiprintf_r+0xd4>
 8005996:	2300      	movs	r3, #0
 8005998:	3401      	adds	r4, #1
 800599a:	9305      	str	r3, [sp, #20]
 800599c:	4619      	mov	r1, r3
 800599e:	f04f 0c0a 	mov.w	ip, #10
 80059a2:	4620      	mov	r0, r4
 80059a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059a8:	3a30      	subs	r2, #48	; 0x30
 80059aa:	2a09      	cmp	r2, #9
 80059ac:	d903      	bls.n	80059b6 <_svfiprintf_r+0x1a6>
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0c6      	beq.n	8005940 <_svfiprintf_r+0x130>
 80059b2:	9105      	str	r1, [sp, #20]
 80059b4:	e7c4      	b.n	8005940 <_svfiprintf_r+0x130>
 80059b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80059ba:	4604      	mov	r4, r0
 80059bc:	2301      	movs	r3, #1
 80059be:	e7f0      	b.n	80059a2 <_svfiprintf_r+0x192>
 80059c0:	ab03      	add	r3, sp, #12
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	462a      	mov	r2, r5
 80059c6:	4b0f      	ldr	r3, [pc, #60]	; (8005a04 <_svfiprintf_r+0x1f4>)
 80059c8:	a904      	add	r1, sp, #16
 80059ca:	4638      	mov	r0, r7
 80059cc:	f7fd ff08 	bl	80037e0 <_printf_float>
 80059d0:	1c42      	adds	r2, r0, #1
 80059d2:	4606      	mov	r6, r0
 80059d4:	d1d6      	bne.n	8005984 <_svfiprintf_r+0x174>
 80059d6:	89ab      	ldrh	r3, [r5, #12]
 80059d8:	065b      	lsls	r3, r3, #25
 80059da:	f53f af2d 	bmi.w	8005838 <_svfiprintf_r+0x28>
 80059de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059e0:	b01d      	add	sp, #116	; 0x74
 80059e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e6:	ab03      	add	r3, sp, #12
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	462a      	mov	r2, r5
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <_svfiprintf_r+0x1f4>)
 80059ee:	a904      	add	r1, sp, #16
 80059f0:	4638      	mov	r0, r7
 80059f2:	f7fe f999 	bl	8003d28 <_printf_i>
 80059f6:	e7eb      	b.n	80059d0 <_svfiprintf_r+0x1c0>
 80059f8:	080064ac 	.word	0x080064ac
 80059fc:	080064b6 	.word	0x080064b6
 8005a00:	080037e1 	.word	0x080037e1
 8005a04:	0800575d 	.word	0x0800575d
 8005a08:	080064b2 	.word	0x080064b2

08005a0c <__sflush_r>:
 8005a0c:	898a      	ldrh	r2, [r1, #12]
 8005a0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a12:	4605      	mov	r5, r0
 8005a14:	0710      	lsls	r0, r2, #28
 8005a16:	460c      	mov	r4, r1
 8005a18:	d458      	bmi.n	8005acc <__sflush_r+0xc0>
 8005a1a:	684b      	ldr	r3, [r1, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dc05      	bgt.n	8005a2c <__sflush_r+0x20>
 8005a20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	dc02      	bgt.n	8005a2c <__sflush_r+0x20>
 8005a26:	2000      	movs	r0, #0
 8005a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a2e:	2e00      	cmp	r6, #0
 8005a30:	d0f9      	beq.n	8005a26 <__sflush_r+0x1a>
 8005a32:	2300      	movs	r3, #0
 8005a34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a38:	682f      	ldr	r7, [r5, #0]
 8005a3a:	6a21      	ldr	r1, [r4, #32]
 8005a3c:	602b      	str	r3, [r5, #0]
 8005a3e:	d032      	beq.n	8005aa6 <__sflush_r+0x9a>
 8005a40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	075a      	lsls	r2, r3, #29
 8005a46:	d505      	bpl.n	8005a54 <__sflush_r+0x48>
 8005a48:	6863      	ldr	r3, [r4, #4]
 8005a4a:	1ac0      	subs	r0, r0, r3
 8005a4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a4e:	b10b      	cbz	r3, 8005a54 <__sflush_r+0x48>
 8005a50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a52:	1ac0      	subs	r0, r0, r3
 8005a54:	2300      	movs	r3, #0
 8005a56:	4602      	mov	r2, r0
 8005a58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a5a:	6a21      	ldr	r1, [r4, #32]
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b0      	blx	r6
 8005a60:	1c43      	adds	r3, r0, #1
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	d106      	bne.n	8005a74 <__sflush_r+0x68>
 8005a66:	6829      	ldr	r1, [r5, #0]
 8005a68:	291d      	cmp	r1, #29
 8005a6a:	d82b      	bhi.n	8005ac4 <__sflush_r+0xb8>
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <__sflush_r+0x108>)
 8005a6e:	410a      	asrs	r2, r1
 8005a70:	07d6      	lsls	r6, r2, #31
 8005a72:	d427      	bmi.n	8005ac4 <__sflush_r+0xb8>
 8005a74:	2200      	movs	r2, #0
 8005a76:	6062      	str	r2, [r4, #4]
 8005a78:	04d9      	lsls	r1, r3, #19
 8005a7a:	6922      	ldr	r2, [r4, #16]
 8005a7c:	6022      	str	r2, [r4, #0]
 8005a7e:	d504      	bpl.n	8005a8a <__sflush_r+0x7e>
 8005a80:	1c42      	adds	r2, r0, #1
 8005a82:	d101      	bne.n	8005a88 <__sflush_r+0x7c>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b903      	cbnz	r3, 8005a8a <__sflush_r+0x7e>
 8005a88:	6560      	str	r0, [r4, #84]	; 0x54
 8005a8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a8c:	602f      	str	r7, [r5, #0]
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	d0c9      	beq.n	8005a26 <__sflush_r+0x1a>
 8005a92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a96:	4299      	cmp	r1, r3
 8005a98:	d002      	beq.n	8005aa0 <__sflush_r+0x94>
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f7ff fa96 	bl	8004fcc <_free_r>
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	6360      	str	r0, [r4, #52]	; 0x34
 8005aa4:	e7c0      	b.n	8005a28 <__sflush_r+0x1c>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	47b0      	blx	r6
 8005aac:	1c41      	adds	r1, r0, #1
 8005aae:	d1c8      	bne.n	8005a42 <__sflush_r+0x36>
 8005ab0:	682b      	ldr	r3, [r5, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d0c5      	beq.n	8005a42 <__sflush_r+0x36>
 8005ab6:	2b1d      	cmp	r3, #29
 8005ab8:	d001      	beq.n	8005abe <__sflush_r+0xb2>
 8005aba:	2b16      	cmp	r3, #22
 8005abc:	d101      	bne.n	8005ac2 <__sflush_r+0xb6>
 8005abe:	602f      	str	r7, [r5, #0]
 8005ac0:	e7b1      	b.n	8005a26 <__sflush_r+0x1a>
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ac8:	81a3      	strh	r3, [r4, #12]
 8005aca:	e7ad      	b.n	8005a28 <__sflush_r+0x1c>
 8005acc:	690f      	ldr	r7, [r1, #16]
 8005ace:	2f00      	cmp	r7, #0
 8005ad0:	d0a9      	beq.n	8005a26 <__sflush_r+0x1a>
 8005ad2:	0793      	lsls	r3, r2, #30
 8005ad4:	680e      	ldr	r6, [r1, #0]
 8005ad6:	bf08      	it	eq
 8005ad8:	694b      	ldreq	r3, [r1, #20]
 8005ada:	600f      	str	r7, [r1, #0]
 8005adc:	bf18      	it	ne
 8005ade:	2300      	movne	r3, #0
 8005ae0:	eba6 0807 	sub.w	r8, r6, r7
 8005ae4:	608b      	str	r3, [r1, #8]
 8005ae6:	f1b8 0f00 	cmp.w	r8, #0
 8005aea:	dd9c      	ble.n	8005a26 <__sflush_r+0x1a>
 8005aec:	6a21      	ldr	r1, [r4, #32]
 8005aee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005af0:	4643      	mov	r3, r8
 8005af2:	463a      	mov	r2, r7
 8005af4:	4628      	mov	r0, r5
 8005af6:	47b0      	blx	r6
 8005af8:	2800      	cmp	r0, #0
 8005afa:	dc06      	bgt.n	8005b0a <__sflush_r+0xfe>
 8005afc:	89a3      	ldrh	r3, [r4, #12]
 8005afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b02:	81a3      	strh	r3, [r4, #12]
 8005b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b08:	e78e      	b.n	8005a28 <__sflush_r+0x1c>
 8005b0a:	4407      	add	r7, r0
 8005b0c:	eba8 0800 	sub.w	r8, r8, r0
 8005b10:	e7e9      	b.n	8005ae6 <__sflush_r+0xda>
 8005b12:	bf00      	nop
 8005b14:	dfbffffe 	.word	0xdfbffffe

08005b18 <_fflush_r>:
 8005b18:	b538      	push	{r3, r4, r5, lr}
 8005b1a:	690b      	ldr	r3, [r1, #16]
 8005b1c:	4605      	mov	r5, r0
 8005b1e:	460c      	mov	r4, r1
 8005b20:	b913      	cbnz	r3, 8005b28 <_fflush_r+0x10>
 8005b22:	2500      	movs	r5, #0
 8005b24:	4628      	mov	r0, r5
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	b118      	cbz	r0, 8005b32 <_fflush_r+0x1a>
 8005b2a:	6a03      	ldr	r3, [r0, #32]
 8005b2c:	b90b      	cbnz	r3, 8005b32 <_fflush_r+0x1a>
 8005b2e:	f7fe faa9 	bl	8004084 <__sinit>
 8005b32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d0f3      	beq.n	8005b22 <_fflush_r+0xa>
 8005b3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b3c:	07d0      	lsls	r0, r2, #31
 8005b3e:	d404      	bmi.n	8005b4a <_fflush_r+0x32>
 8005b40:	0599      	lsls	r1, r3, #22
 8005b42:	d402      	bmi.n	8005b4a <_fflush_r+0x32>
 8005b44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b46:	f7fe fbc4 	bl	80042d2 <__retarget_lock_acquire_recursive>
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	f7ff ff5d 	bl	8005a0c <__sflush_r>
 8005b52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b54:	07da      	lsls	r2, r3, #31
 8005b56:	4605      	mov	r5, r0
 8005b58:	d4e4      	bmi.n	8005b24 <_fflush_r+0xc>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	059b      	lsls	r3, r3, #22
 8005b5e:	d4e1      	bmi.n	8005b24 <_fflush_r+0xc>
 8005b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b62:	f7fe fbb7 	bl	80042d4 <__retarget_lock_release_recursive>
 8005b66:	e7dd      	b.n	8005b24 <_fflush_r+0xc>

08005b68 <memmove>:
 8005b68:	4288      	cmp	r0, r1
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	eb01 0402 	add.w	r4, r1, r2
 8005b70:	d902      	bls.n	8005b78 <memmove+0x10>
 8005b72:	4284      	cmp	r4, r0
 8005b74:	4623      	mov	r3, r4
 8005b76:	d807      	bhi.n	8005b88 <memmove+0x20>
 8005b78:	1e43      	subs	r3, r0, #1
 8005b7a:	42a1      	cmp	r1, r4
 8005b7c:	d008      	beq.n	8005b90 <memmove+0x28>
 8005b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b86:	e7f8      	b.n	8005b7a <memmove+0x12>
 8005b88:	4402      	add	r2, r0
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	428a      	cmp	r2, r1
 8005b8e:	d100      	bne.n	8005b92 <memmove+0x2a>
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b9a:	e7f7      	b.n	8005b8c <memmove+0x24>

08005b9c <memcpy>:
 8005b9c:	440a      	add	r2, r1
 8005b9e:	4291      	cmp	r1, r2
 8005ba0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005ba4:	d100      	bne.n	8005ba8 <memcpy+0xc>
 8005ba6:	4770      	bx	lr
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bb2:	4291      	cmp	r1, r2
 8005bb4:	d1f9      	bne.n	8005baa <memcpy+0xe>
 8005bb6:	bd10      	pop	{r4, pc}

08005bb8 <__assert_func>:
 8005bb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bba:	4614      	mov	r4, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <__assert_func+0x2c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	68d8      	ldr	r0, [r3, #12]
 8005bc6:	b14c      	cbz	r4, 8005bdc <__assert_func+0x24>
 8005bc8:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <__assert_func+0x30>)
 8005bca:	9100      	str	r1, [sp, #0]
 8005bcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005bd0:	4906      	ldr	r1, [pc, #24]	; (8005bec <__assert_func+0x34>)
 8005bd2:	462b      	mov	r3, r5
 8005bd4:	f000 f872 	bl	8005cbc <fiprintf>
 8005bd8:	f000 f882 	bl	8005ce0 <abort>
 8005bdc:	4b04      	ldr	r3, [pc, #16]	; (8005bf0 <__assert_func+0x38>)
 8005bde:	461c      	mov	r4, r3
 8005be0:	e7f3      	b.n	8005bca <__assert_func+0x12>
 8005be2:	bf00      	nop
 8005be4:	20000060 	.word	0x20000060
 8005be8:	080064c7 	.word	0x080064c7
 8005bec:	080064d4 	.word	0x080064d4
 8005bf0:	08006502 	.word	0x08006502

08005bf4 <_calloc_r>:
 8005bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005bf6:	fba1 2402 	umull	r2, r4, r1, r2
 8005bfa:	b94c      	cbnz	r4, 8005c10 <_calloc_r+0x1c>
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	9201      	str	r2, [sp, #4]
 8005c00:	f7fd fcc2 	bl	8003588 <_malloc_r>
 8005c04:	9a01      	ldr	r2, [sp, #4]
 8005c06:	4605      	mov	r5, r0
 8005c08:	b930      	cbnz	r0, 8005c18 <_calloc_r+0x24>
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	b003      	add	sp, #12
 8005c0e:	bd30      	pop	{r4, r5, pc}
 8005c10:	220c      	movs	r2, #12
 8005c12:	6002      	str	r2, [r0, #0]
 8005c14:	2500      	movs	r5, #0
 8005c16:	e7f8      	b.n	8005c0a <_calloc_r+0x16>
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f7fe facc 	bl	80041b6 <memset>
 8005c1e:	e7f4      	b.n	8005c0a <_calloc_r+0x16>

08005c20 <__ascii_mbtowc>:
 8005c20:	b082      	sub	sp, #8
 8005c22:	b901      	cbnz	r1, 8005c26 <__ascii_mbtowc+0x6>
 8005c24:	a901      	add	r1, sp, #4
 8005c26:	b142      	cbz	r2, 8005c3a <__ascii_mbtowc+0x1a>
 8005c28:	b14b      	cbz	r3, 8005c3e <__ascii_mbtowc+0x1e>
 8005c2a:	7813      	ldrb	r3, [r2, #0]
 8005c2c:	600b      	str	r3, [r1, #0]
 8005c2e:	7812      	ldrb	r2, [r2, #0]
 8005c30:	1e10      	subs	r0, r2, #0
 8005c32:	bf18      	it	ne
 8005c34:	2001      	movne	r0, #1
 8005c36:	b002      	add	sp, #8
 8005c38:	4770      	bx	lr
 8005c3a:	4610      	mov	r0, r2
 8005c3c:	e7fb      	b.n	8005c36 <__ascii_mbtowc+0x16>
 8005c3e:	f06f 0001 	mvn.w	r0, #1
 8005c42:	e7f8      	b.n	8005c36 <__ascii_mbtowc+0x16>

08005c44 <_realloc_r>:
 8005c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c48:	4680      	mov	r8, r0
 8005c4a:	4614      	mov	r4, r2
 8005c4c:	460e      	mov	r6, r1
 8005c4e:	b921      	cbnz	r1, 8005c5a <_realloc_r+0x16>
 8005c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c54:	4611      	mov	r1, r2
 8005c56:	f7fd bc97 	b.w	8003588 <_malloc_r>
 8005c5a:	b92a      	cbnz	r2, 8005c68 <_realloc_r+0x24>
 8005c5c:	f7ff f9b6 	bl	8004fcc <_free_r>
 8005c60:	4625      	mov	r5, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c68:	f000 f841 	bl	8005cee <_malloc_usable_size_r>
 8005c6c:	4284      	cmp	r4, r0
 8005c6e:	4607      	mov	r7, r0
 8005c70:	d802      	bhi.n	8005c78 <_realloc_r+0x34>
 8005c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c76:	d812      	bhi.n	8005c9e <_realloc_r+0x5a>
 8005c78:	4621      	mov	r1, r4
 8005c7a:	4640      	mov	r0, r8
 8005c7c:	f7fd fc84 	bl	8003588 <_malloc_r>
 8005c80:	4605      	mov	r5, r0
 8005c82:	2800      	cmp	r0, #0
 8005c84:	d0ed      	beq.n	8005c62 <_realloc_r+0x1e>
 8005c86:	42bc      	cmp	r4, r7
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4631      	mov	r1, r6
 8005c8c:	bf28      	it	cs
 8005c8e:	463a      	movcs	r2, r7
 8005c90:	f7ff ff84 	bl	8005b9c <memcpy>
 8005c94:	4631      	mov	r1, r6
 8005c96:	4640      	mov	r0, r8
 8005c98:	f7ff f998 	bl	8004fcc <_free_r>
 8005c9c:	e7e1      	b.n	8005c62 <_realloc_r+0x1e>
 8005c9e:	4635      	mov	r5, r6
 8005ca0:	e7df      	b.n	8005c62 <_realloc_r+0x1e>

08005ca2 <__ascii_wctomb>:
 8005ca2:	b149      	cbz	r1, 8005cb8 <__ascii_wctomb+0x16>
 8005ca4:	2aff      	cmp	r2, #255	; 0xff
 8005ca6:	bf85      	ittet	hi
 8005ca8:	238a      	movhi	r3, #138	; 0x8a
 8005caa:	6003      	strhi	r3, [r0, #0]
 8005cac:	700a      	strbls	r2, [r1, #0]
 8005cae:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005cb2:	bf98      	it	ls
 8005cb4:	2001      	movls	r0, #1
 8005cb6:	4770      	bx	lr
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4770      	bx	lr

08005cbc <fiprintf>:
 8005cbc:	b40e      	push	{r1, r2, r3}
 8005cbe:	b503      	push	{r0, r1, lr}
 8005cc0:	4601      	mov	r1, r0
 8005cc2:	ab03      	add	r3, sp, #12
 8005cc4:	4805      	ldr	r0, [pc, #20]	; (8005cdc <fiprintf+0x20>)
 8005cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cca:	6800      	ldr	r0, [r0, #0]
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	f000 f83f 	bl	8005d50 <_vfiprintf_r>
 8005cd2:	b002      	add	sp, #8
 8005cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cd8:	b003      	add	sp, #12
 8005cda:	4770      	bx	lr
 8005cdc:	20000060 	.word	0x20000060

08005ce0 <abort>:
 8005ce0:	b508      	push	{r3, lr}
 8005ce2:	2006      	movs	r0, #6
 8005ce4:	f000 fa0c 	bl	8006100 <raise>
 8005ce8:	2001      	movs	r0, #1
 8005cea:	f7fc f927 	bl	8001f3c <_exit>

08005cee <_malloc_usable_size_r>:
 8005cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cf2:	1f18      	subs	r0, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bfbc      	itt	lt
 8005cf8:	580b      	ldrlt	r3, [r1, r0]
 8005cfa:	18c0      	addlt	r0, r0, r3
 8005cfc:	4770      	bx	lr

08005cfe <__sfputc_r>:
 8005cfe:	6893      	ldr	r3, [r2, #8]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	b410      	push	{r4}
 8005d06:	6093      	str	r3, [r2, #8]
 8005d08:	da08      	bge.n	8005d1c <__sfputc_r+0x1e>
 8005d0a:	6994      	ldr	r4, [r2, #24]
 8005d0c:	42a3      	cmp	r3, r4
 8005d0e:	db01      	blt.n	8005d14 <__sfputc_r+0x16>
 8005d10:	290a      	cmp	r1, #10
 8005d12:	d103      	bne.n	8005d1c <__sfputc_r+0x1e>
 8005d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d18:	f000 b934 	b.w	8005f84 <__swbuf_r>
 8005d1c:	6813      	ldr	r3, [r2, #0]
 8005d1e:	1c58      	adds	r0, r3, #1
 8005d20:	6010      	str	r0, [r2, #0]
 8005d22:	7019      	strb	r1, [r3, #0]
 8005d24:	4608      	mov	r0, r1
 8005d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <__sfputs_r>:
 8005d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d2e:	4606      	mov	r6, r0
 8005d30:	460f      	mov	r7, r1
 8005d32:	4614      	mov	r4, r2
 8005d34:	18d5      	adds	r5, r2, r3
 8005d36:	42ac      	cmp	r4, r5
 8005d38:	d101      	bne.n	8005d3e <__sfputs_r+0x12>
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	e007      	b.n	8005d4e <__sfputs_r+0x22>
 8005d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d42:	463a      	mov	r2, r7
 8005d44:	4630      	mov	r0, r6
 8005d46:	f7ff ffda 	bl	8005cfe <__sfputc_r>
 8005d4a:	1c43      	adds	r3, r0, #1
 8005d4c:	d1f3      	bne.n	8005d36 <__sfputs_r+0xa>
 8005d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005d50 <_vfiprintf_r>:
 8005d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d54:	460d      	mov	r5, r1
 8005d56:	b09d      	sub	sp, #116	; 0x74
 8005d58:	4614      	mov	r4, r2
 8005d5a:	4698      	mov	r8, r3
 8005d5c:	4606      	mov	r6, r0
 8005d5e:	b118      	cbz	r0, 8005d68 <_vfiprintf_r+0x18>
 8005d60:	6a03      	ldr	r3, [r0, #32]
 8005d62:	b90b      	cbnz	r3, 8005d68 <_vfiprintf_r+0x18>
 8005d64:	f7fe f98e 	bl	8004084 <__sinit>
 8005d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d6a:	07d9      	lsls	r1, r3, #31
 8005d6c:	d405      	bmi.n	8005d7a <_vfiprintf_r+0x2a>
 8005d6e:	89ab      	ldrh	r3, [r5, #12]
 8005d70:	059a      	lsls	r2, r3, #22
 8005d72:	d402      	bmi.n	8005d7a <_vfiprintf_r+0x2a>
 8005d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d76:	f7fe faac 	bl	80042d2 <__retarget_lock_acquire_recursive>
 8005d7a:	89ab      	ldrh	r3, [r5, #12]
 8005d7c:	071b      	lsls	r3, r3, #28
 8005d7e:	d501      	bpl.n	8005d84 <_vfiprintf_r+0x34>
 8005d80:	692b      	ldr	r3, [r5, #16]
 8005d82:	b99b      	cbnz	r3, 8005dac <_vfiprintf_r+0x5c>
 8005d84:	4629      	mov	r1, r5
 8005d86:	4630      	mov	r0, r6
 8005d88:	f000 f93a 	bl	8006000 <__swsetup_r>
 8005d8c:	b170      	cbz	r0, 8005dac <_vfiprintf_r+0x5c>
 8005d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d90:	07dc      	lsls	r4, r3, #31
 8005d92:	d504      	bpl.n	8005d9e <_vfiprintf_r+0x4e>
 8005d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d98:	b01d      	add	sp, #116	; 0x74
 8005d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9e:	89ab      	ldrh	r3, [r5, #12]
 8005da0:	0598      	lsls	r0, r3, #22
 8005da2:	d4f7      	bmi.n	8005d94 <_vfiprintf_r+0x44>
 8005da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005da6:	f7fe fa95 	bl	80042d4 <__retarget_lock_release_recursive>
 8005daa:	e7f3      	b.n	8005d94 <_vfiprintf_r+0x44>
 8005dac:	2300      	movs	r3, #0
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
 8005db0:	2320      	movs	r3, #32
 8005db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005dba:	2330      	movs	r3, #48	; 0x30
 8005dbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005f70 <_vfiprintf_r+0x220>
 8005dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dc4:	f04f 0901 	mov.w	r9, #1
 8005dc8:	4623      	mov	r3, r4
 8005dca:	469a      	mov	sl, r3
 8005dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dd0:	b10a      	cbz	r2, 8005dd6 <_vfiprintf_r+0x86>
 8005dd2:	2a25      	cmp	r2, #37	; 0x25
 8005dd4:	d1f9      	bne.n	8005dca <_vfiprintf_r+0x7a>
 8005dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8005dda:	d00b      	beq.n	8005df4 <_vfiprintf_r+0xa4>
 8005ddc:	465b      	mov	r3, fp
 8005dde:	4622      	mov	r2, r4
 8005de0:	4629      	mov	r1, r5
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff ffa2 	bl	8005d2c <__sfputs_r>
 8005de8:	3001      	adds	r0, #1
 8005dea:	f000 80a9 	beq.w	8005f40 <_vfiprintf_r+0x1f0>
 8005dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005df0:	445a      	add	r2, fp
 8005df2:	9209      	str	r2, [sp, #36]	; 0x24
 8005df4:	f89a 3000 	ldrb.w	r3, [sl]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f000 80a1 	beq.w	8005f40 <_vfiprintf_r+0x1f0>
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e08:	f10a 0a01 	add.w	sl, sl, #1
 8005e0c:	9304      	str	r3, [sp, #16]
 8005e0e:	9307      	str	r3, [sp, #28]
 8005e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e14:	931a      	str	r3, [sp, #104]	; 0x68
 8005e16:	4654      	mov	r4, sl
 8005e18:	2205      	movs	r2, #5
 8005e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1e:	4854      	ldr	r0, [pc, #336]	; (8005f70 <_vfiprintf_r+0x220>)
 8005e20:	f7fa f9d6 	bl	80001d0 <memchr>
 8005e24:	9a04      	ldr	r2, [sp, #16]
 8005e26:	b9d8      	cbnz	r0, 8005e60 <_vfiprintf_r+0x110>
 8005e28:	06d1      	lsls	r1, r2, #27
 8005e2a:	bf44      	itt	mi
 8005e2c:	2320      	movmi	r3, #32
 8005e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e32:	0713      	lsls	r3, r2, #28
 8005e34:	bf44      	itt	mi
 8005e36:	232b      	movmi	r3, #43	; 0x2b
 8005e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8005e40:	2b2a      	cmp	r3, #42	; 0x2a
 8005e42:	d015      	beq.n	8005e70 <_vfiprintf_r+0x120>
 8005e44:	9a07      	ldr	r2, [sp, #28]
 8005e46:	4654      	mov	r4, sl
 8005e48:	2000      	movs	r0, #0
 8005e4a:	f04f 0c0a 	mov.w	ip, #10
 8005e4e:	4621      	mov	r1, r4
 8005e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e54:	3b30      	subs	r3, #48	; 0x30
 8005e56:	2b09      	cmp	r3, #9
 8005e58:	d94d      	bls.n	8005ef6 <_vfiprintf_r+0x1a6>
 8005e5a:	b1b0      	cbz	r0, 8005e8a <_vfiprintf_r+0x13a>
 8005e5c:	9207      	str	r2, [sp, #28]
 8005e5e:	e014      	b.n	8005e8a <_vfiprintf_r+0x13a>
 8005e60:	eba0 0308 	sub.w	r3, r0, r8
 8005e64:	fa09 f303 	lsl.w	r3, r9, r3
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	9304      	str	r3, [sp, #16]
 8005e6c:	46a2      	mov	sl, r4
 8005e6e:	e7d2      	b.n	8005e16 <_vfiprintf_r+0xc6>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	1d19      	adds	r1, r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	9103      	str	r1, [sp, #12]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	bfbb      	ittet	lt
 8005e7c:	425b      	neglt	r3, r3
 8005e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e82:	9307      	strge	r3, [sp, #28]
 8005e84:	9307      	strlt	r3, [sp, #28]
 8005e86:	bfb8      	it	lt
 8005e88:	9204      	strlt	r2, [sp, #16]
 8005e8a:	7823      	ldrb	r3, [r4, #0]
 8005e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e8e:	d10c      	bne.n	8005eaa <_vfiprintf_r+0x15a>
 8005e90:	7863      	ldrb	r3, [r4, #1]
 8005e92:	2b2a      	cmp	r3, #42	; 0x2a
 8005e94:	d134      	bne.n	8005f00 <_vfiprintf_r+0x1b0>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	1d1a      	adds	r2, r3, #4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	9203      	str	r2, [sp, #12]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	bfb8      	it	lt
 8005ea2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005ea6:	3402      	adds	r4, #2
 8005ea8:	9305      	str	r3, [sp, #20]
 8005eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005f80 <_vfiprintf_r+0x230>
 8005eae:	7821      	ldrb	r1, [r4, #0]
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	4650      	mov	r0, sl
 8005eb4:	f7fa f98c 	bl	80001d0 <memchr>
 8005eb8:	b138      	cbz	r0, 8005eca <_vfiprintf_r+0x17a>
 8005eba:	9b04      	ldr	r3, [sp, #16]
 8005ebc:	eba0 000a 	sub.w	r0, r0, sl
 8005ec0:	2240      	movs	r2, #64	; 0x40
 8005ec2:	4082      	lsls	r2, r0
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	3401      	adds	r4, #1
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ece:	4829      	ldr	r0, [pc, #164]	; (8005f74 <_vfiprintf_r+0x224>)
 8005ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ed4:	2206      	movs	r2, #6
 8005ed6:	f7fa f97b 	bl	80001d0 <memchr>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d03f      	beq.n	8005f5e <_vfiprintf_r+0x20e>
 8005ede:	4b26      	ldr	r3, [pc, #152]	; (8005f78 <_vfiprintf_r+0x228>)
 8005ee0:	bb1b      	cbnz	r3, 8005f2a <_vfiprintf_r+0x1da>
 8005ee2:	9b03      	ldr	r3, [sp, #12]
 8005ee4:	3307      	adds	r3, #7
 8005ee6:	f023 0307 	bic.w	r3, r3, #7
 8005eea:	3308      	adds	r3, #8
 8005eec:	9303      	str	r3, [sp, #12]
 8005eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef0:	443b      	add	r3, r7
 8005ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef4:	e768      	b.n	8005dc8 <_vfiprintf_r+0x78>
 8005ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8005efa:	460c      	mov	r4, r1
 8005efc:	2001      	movs	r0, #1
 8005efe:	e7a6      	b.n	8005e4e <_vfiprintf_r+0xfe>
 8005f00:	2300      	movs	r3, #0
 8005f02:	3401      	adds	r4, #1
 8005f04:	9305      	str	r3, [sp, #20]
 8005f06:	4619      	mov	r1, r3
 8005f08:	f04f 0c0a 	mov.w	ip, #10
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f12:	3a30      	subs	r2, #48	; 0x30
 8005f14:	2a09      	cmp	r2, #9
 8005f16:	d903      	bls.n	8005f20 <_vfiprintf_r+0x1d0>
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d0c6      	beq.n	8005eaa <_vfiprintf_r+0x15a>
 8005f1c:	9105      	str	r1, [sp, #20]
 8005f1e:	e7c4      	b.n	8005eaa <_vfiprintf_r+0x15a>
 8005f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f24:	4604      	mov	r4, r0
 8005f26:	2301      	movs	r3, #1
 8005f28:	e7f0      	b.n	8005f0c <_vfiprintf_r+0x1bc>
 8005f2a:	ab03      	add	r3, sp, #12
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4b12      	ldr	r3, [pc, #72]	; (8005f7c <_vfiprintf_r+0x22c>)
 8005f32:	a904      	add	r1, sp, #16
 8005f34:	4630      	mov	r0, r6
 8005f36:	f7fd fc53 	bl	80037e0 <_printf_float>
 8005f3a:	4607      	mov	r7, r0
 8005f3c:	1c78      	adds	r0, r7, #1
 8005f3e:	d1d6      	bne.n	8005eee <_vfiprintf_r+0x19e>
 8005f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f42:	07d9      	lsls	r1, r3, #31
 8005f44:	d405      	bmi.n	8005f52 <_vfiprintf_r+0x202>
 8005f46:	89ab      	ldrh	r3, [r5, #12]
 8005f48:	059a      	lsls	r2, r3, #22
 8005f4a:	d402      	bmi.n	8005f52 <_vfiprintf_r+0x202>
 8005f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f4e:	f7fe f9c1 	bl	80042d4 <__retarget_lock_release_recursive>
 8005f52:	89ab      	ldrh	r3, [r5, #12]
 8005f54:	065b      	lsls	r3, r3, #25
 8005f56:	f53f af1d 	bmi.w	8005d94 <_vfiprintf_r+0x44>
 8005f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f5c:	e71c      	b.n	8005d98 <_vfiprintf_r+0x48>
 8005f5e:	ab03      	add	r3, sp, #12
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	462a      	mov	r2, r5
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <_vfiprintf_r+0x22c>)
 8005f66:	a904      	add	r1, sp, #16
 8005f68:	4630      	mov	r0, r6
 8005f6a:	f7fd fedd 	bl	8003d28 <_printf_i>
 8005f6e:	e7e4      	b.n	8005f3a <_vfiprintf_r+0x1ea>
 8005f70:	080064ac 	.word	0x080064ac
 8005f74:	080064b6 	.word	0x080064b6
 8005f78:	080037e1 	.word	0x080037e1
 8005f7c:	08005d2d 	.word	0x08005d2d
 8005f80:	080064b2 	.word	0x080064b2

08005f84 <__swbuf_r>:
 8005f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f86:	460e      	mov	r6, r1
 8005f88:	4614      	mov	r4, r2
 8005f8a:	4605      	mov	r5, r0
 8005f8c:	b118      	cbz	r0, 8005f96 <__swbuf_r+0x12>
 8005f8e:	6a03      	ldr	r3, [r0, #32]
 8005f90:	b90b      	cbnz	r3, 8005f96 <__swbuf_r+0x12>
 8005f92:	f7fe f877 	bl	8004084 <__sinit>
 8005f96:	69a3      	ldr	r3, [r4, #24]
 8005f98:	60a3      	str	r3, [r4, #8]
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	071a      	lsls	r2, r3, #28
 8005f9e:	d525      	bpl.n	8005fec <__swbuf_r+0x68>
 8005fa0:	6923      	ldr	r3, [r4, #16]
 8005fa2:	b31b      	cbz	r3, 8005fec <__swbuf_r+0x68>
 8005fa4:	6823      	ldr	r3, [r4, #0]
 8005fa6:	6922      	ldr	r2, [r4, #16]
 8005fa8:	1a98      	subs	r0, r3, r2
 8005faa:	6963      	ldr	r3, [r4, #20]
 8005fac:	b2f6      	uxtb	r6, r6
 8005fae:	4283      	cmp	r3, r0
 8005fb0:	4637      	mov	r7, r6
 8005fb2:	dc04      	bgt.n	8005fbe <__swbuf_r+0x3a>
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f7ff fdae 	bl	8005b18 <_fflush_r>
 8005fbc:	b9e0      	cbnz	r0, 8005ff8 <__swbuf_r+0x74>
 8005fbe:	68a3      	ldr	r3, [r4, #8]
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	60a3      	str	r3, [r4, #8]
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	6022      	str	r2, [r4, #0]
 8005fca:	701e      	strb	r6, [r3, #0]
 8005fcc:	6962      	ldr	r2, [r4, #20]
 8005fce:	1c43      	adds	r3, r0, #1
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d004      	beq.n	8005fde <__swbuf_r+0x5a>
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	07db      	lsls	r3, r3, #31
 8005fd8:	d506      	bpl.n	8005fe8 <__swbuf_r+0x64>
 8005fda:	2e0a      	cmp	r6, #10
 8005fdc:	d104      	bne.n	8005fe8 <__swbuf_r+0x64>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	f7ff fd99 	bl	8005b18 <_fflush_r>
 8005fe6:	b938      	cbnz	r0, 8005ff8 <__swbuf_r+0x74>
 8005fe8:	4638      	mov	r0, r7
 8005fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fec:	4621      	mov	r1, r4
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f000 f806 	bl	8006000 <__swsetup_r>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d0d5      	beq.n	8005fa4 <__swbuf_r+0x20>
 8005ff8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ffc:	e7f4      	b.n	8005fe8 <__swbuf_r+0x64>
	...

08006000 <__swsetup_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	4b2a      	ldr	r3, [pc, #168]	; (80060ac <__swsetup_r+0xac>)
 8006004:	4605      	mov	r5, r0
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	460c      	mov	r4, r1
 800600a:	b118      	cbz	r0, 8006014 <__swsetup_r+0x14>
 800600c:	6a03      	ldr	r3, [r0, #32]
 800600e:	b90b      	cbnz	r3, 8006014 <__swsetup_r+0x14>
 8006010:	f7fe f838 	bl	8004084 <__sinit>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800601a:	0718      	lsls	r0, r3, #28
 800601c:	d422      	bmi.n	8006064 <__swsetup_r+0x64>
 800601e:	06d9      	lsls	r1, r3, #27
 8006020:	d407      	bmi.n	8006032 <__swsetup_r+0x32>
 8006022:	2309      	movs	r3, #9
 8006024:	602b      	str	r3, [r5, #0]
 8006026:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800602a:	81a3      	strh	r3, [r4, #12]
 800602c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006030:	e034      	b.n	800609c <__swsetup_r+0x9c>
 8006032:	0758      	lsls	r0, r3, #29
 8006034:	d512      	bpl.n	800605c <__swsetup_r+0x5c>
 8006036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006038:	b141      	cbz	r1, 800604c <__swsetup_r+0x4c>
 800603a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800603e:	4299      	cmp	r1, r3
 8006040:	d002      	beq.n	8006048 <__swsetup_r+0x48>
 8006042:	4628      	mov	r0, r5
 8006044:	f7fe ffc2 	bl	8004fcc <_free_r>
 8006048:	2300      	movs	r3, #0
 800604a:	6363      	str	r3, [r4, #52]	; 0x34
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006052:	81a3      	strh	r3, [r4, #12]
 8006054:	2300      	movs	r3, #0
 8006056:	6063      	str	r3, [r4, #4]
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f043 0308 	orr.w	r3, r3, #8
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	b94b      	cbnz	r3, 800607c <__swsetup_r+0x7c>
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800606e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006072:	d003      	beq.n	800607c <__swsetup_r+0x7c>
 8006074:	4621      	mov	r1, r4
 8006076:	4628      	mov	r0, r5
 8006078:	f000 f884 	bl	8006184 <__smakebuf_r>
 800607c:	89a0      	ldrh	r0, [r4, #12]
 800607e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006082:	f010 0301 	ands.w	r3, r0, #1
 8006086:	d00a      	beq.n	800609e <__swsetup_r+0x9e>
 8006088:	2300      	movs	r3, #0
 800608a:	60a3      	str	r3, [r4, #8]
 800608c:	6963      	ldr	r3, [r4, #20]
 800608e:	425b      	negs	r3, r3
 8006090:	61a3      	str	r3, [r4, #24]
 8006092:	6923      	ldr	r3, [r4, #16]
 8006094:	b943      	cbnz	r3, 80060a8 <__swsetup_r+0xa8>
 8006096:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800609a:	d1c4      	bne.n	8006026 <__swsetup_r+0x26>
 800609c:	bd38      	pop	{r3, r4, r5, pc}
 800609e:	0781      	lsls	r1, r0, #30
 80060a0:	bf58      	it	pl
 80060a2:	6963      	ldrpl	r3, [r4, #20]
 80060a4:	60a3      	str	r3, [r4, #8]
 80060a6:	e7f4      	b.n	8006092 <__swsetup_r+0x92>
 80060a8:	2000      	movs	r0, #0
 80060aa:	e7f7      	b.n	800609c <__swsetup_r+0x9c>
 80060ac:	20000060 	.word	0x20000060

080060b0 <_raise_r>:
 80060b0:	291f      	cmp	r1, #31
 80060b2:	b538      	push	{r3, r4, r5, lr}
 80060b4:	4604      	mov	r4, r0
 80060b6:	460d      	mov	r5, r1
 80060b8:	d904      	bls.n	80060c4 <_raise_r+0x14>
 80060ba:	2316      	movs	r3, #22
 80060bc:	6003      	str	r3, [r0, #0]
 80060be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80060c6:	b112      	cbz	r2, 80060ce <_raise_r+0x1e>
 80060c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060cc:	b94b      	cbnz	r3, 80060e2 <_raise_r+0x32>
 80060ce:	4620      	mov	r0, r4
 80060d0:	f000 f830 	bl	8006134 <_getpid_r>
 80060d4:	462a      	mov	r2, r5
 80060d6:	4601      	mov	r1, r0
 80060d8:	4620      	mov	r0, r4
 80060da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060de:	f000 b817 	b.w	8006110 <_kill_r>
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d00a      	beq.n	80060fc <_raise_r+0x4c>
 80060e6:	1c59      	adds	r1, r3, #1
 80060e8:	d103      	bne.n	80060f2 <_raise_r+0x42>
 80060ea:	2316      	movs	r3, #22
 80060ec:	6003      	str	r3, [r0, #0]
 80060ee:	2001      	movs	r0, #1
 80060f0:	e7e7      	b.n	80060c2 <_raise_r+0x12>
 80060f2:	2400      	movs	r4, #0
 80060f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80060f8:	4628      	mov	r0, r5
 80060fa:	4798      	blx	r3
 80060fc:	2000      	movs	r0, #0
 80060fe:	e7e0      	b.n	80060c2 <_raise_r+0x12>

08006100 <raise>:
 8006100:	4b02      	ldr	r3, [pc, #8]	; (800610c <raise+0xc>)
 8006102:	4601      	mov	r1, r0
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	f7ff bfd3 	b.w	80060b0 <_raise_r>
 800610a:	bf00      	nop
 800610c:	20000060 	.word	0x20000060

08006110 <_kill_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4d07      	ldr	r5, [pc, #28]	; (8006130 <_kill_r+0x20>)
 8006114:	2300      	movs	r3, #0
 8006116:	4604      	mov	r4, r0
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	602b      	str	r3, [r5, #0]
 800611e:	f7fb fefd 	bl	8001f1c <_kill>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d102      	bne.n	800612c <_kill_r+0x1c>
 8006126:	682b      	ldr	r3, [r5, #0]
 8006128:	b103      	cbz	r3, 800612c <_kill_r+0x1c>
 800612a:	6023      	str	r3, [r4, #0]
 800612c:	bd38      	pop	{r3, r4, r5, pc}
 800612e:	bf00      	nop
 8006130:	200003e4 	.word	0x200003e4

08006134 <_getpid_r>:
 8006134:	f7fb beea 	b.w	8001f0c <_getpid>

08006138 <__swhatbuf_r>:
 8006138:	b570      	push	{r4, r5, r6, lr}
 800613a:	460c      	mov	r4, r1
 800613c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006140:	2900      	cmp	r1, #0
 8006142:	b096      	sub	sp, #88	; 0x58
 8006144:	4615      	mov	r5, r2
 8006146:	461e      	mov	r6, r3
 8006148:	da0d      	bge.n	8006166 <__swhatbuf_r+0x2e>
 800614a:	89a3      	ldrh	r3, [r4, #12]
 800614c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006150:	f04f 0100 	mov.w	r1, #0
 8006154:	bf0c      	ite	eq
 8006156:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800615a:	2340      	movne	r3, #64	; 0x40
 800615c:	2000      	movs	r0, #0
 800615e:	6031      	str	r1, [r6, #0]
 8006160:	602b      	str	r3, [r5, #0]
 8006162:	b016      	add	sp, #88	; 0x58
 8006164:	bd70      	pop	{r4, r5, r6, pc}
 8006166:	466a      	mov	r2, sp
 8006168:	f000 f848 	bl	80061fc <_fstat_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	dbec      	blt.n	800614a <__swhatbuf_r+0x12>
 8006170:	9901      	ldr	r1, [sp, #4]
 8006172:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006176:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800617a:	4259      	negs	r1, r3
 800617c:	4159      	adcs	r1, r3
 800617e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006182:	e7eb      	b.n	800615c <__swhatbuf_r+0x24>

08006184 <__smakebuf_r>:
 8006184:	898b      	ldrh	r3, [r1, #12]
 8006186:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006188:	079d      	lsls	r5, r3, #30
 800618a:	4606      	mov	r6, r0
 800618c:	460c      	mov	r4, r1
 800618e:	d507      	bpl.n	80061a0 <__smakebuf_r+0x1c>
 8006190:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006194:	6023      	str	r3, [r4, #0]
 8006196:	6123      	str	r3, [r4, #16]
 8006198:	2301      	movs	r3, #1
 800619a:	6163      	str	r3, [r4, #20]
 800619c:	b002      	add	sp, #8
 800619e:	bd70      	pop	{r4, r5, r6, pc}
 80061a0:	ab01      	add	r3, sp, #4
 80061a2:	466a      	mov	r2, sp
 80061a4:	f7ff ffc8 	bl	8006138 <__swhatbuf_r>
 80061a8:	9900      	ldr	r1, [sp, #0]
 80061aa:	4605      	mov	r5, r0
 80061ac:	4630      	mov	r0, r6
 80061ae:	f7fd f9eb 	bl	8003588 <_malloc_r>
 80061b2:	b948      	cbnz	r0, 80061c8 <__smakebuf_r+0x44>
 80061b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b8:	059a      	lsls	r2, r3, #22
 80061ba:	d4ef      	bmi.n	800619c <__smakebuf_r+0x18>
 80061bc:	f023 0303 	bic.w	r3, r3, #3
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	81a3      	strh	r3, [r4, #12]
 80061c6:	e7e3      	b.n	8006190 <__smakebuf_r+0xc>
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	6020      	str	r0, [r4, #0]
 80061cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061d0:	81a3      	strh	r3, [r4, #12]
 80061d2:	9b00      	ldr	r3, [sp, #0]
 80061d4:	6163      	str	r3, [r4, #20]
 80061d6:	9b01      	ldr	r3, [sp, #4]
 80061d8:	6120      	str	r0, [r4, #16]
 80061da:	b15b      	cbz	r3, 80061f4 <__smakebuf_r+0x70>
 80061dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061e0:	4630      	mov	r0, r6
 80061e2:	f000 f81d 	bl	8006220 <_isatty_r>
 80061e6:	b128      	cbz	r0, 80061f4 <__smakebuf_r+0x70>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	f023 0303 	bic.w	r3, r3, #3
 80061ee:	f043 0301 	orr.w	r3, r3, #1
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	431d      	orrs	r5, r3
 80061f8:	81a5      	strh	r5, [r4, #12]
 80061fa:	e7cf      	b.n	800619c <__smakebuf_r+0x18>

080061fc <_fstat_r>:
 80061fc:	b538      	push	{r3, r4, r5, lr}
 80061fe:	4d07      	ldr	r5, [pc, #28]	; (800621c <_fstat_r+0x20>)
 8006200:	2300      	movs	r3, #0
 8006202:	4604      	mov	r4, r0
 8006204:	4608      	mov	r0, r1
 8006206:	4611      	mov	r1, r2
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	f7fb fee6 	bl	8001fda <_fstat>
 800620e:	1c43      	adds	r3, r0, #1
 8006210:	d102      	bne.n	8006218 <_fstat_r+0x1c>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	b103      	cbz	r3, 8006218 <_fstat_r+0x1c>
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	bd38      	pop	{r3, r4, r5, pc}
 800621a:	bf00      	nop
 800621c:	200003e4 	.word	0x200003e4

08006220 <_isatty_r>:
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4d06      	ldr	r5, [pc, #24]	; (800623c <_isatty_r+0x1c>)
 8006224:	2300      	movs	r3, #0
 8006226:	4604      	mov	r4, r0
 8006228:	4608      	mov	r0, r1
 800622a:	602b      	str	r3, [r5, #0]
 800622c:	f7fb fee5 	bl	8001ffa <_isatty>
 8006230:	1c43      	adds	r3, r0, #1
 8006232:	d102      	bne.n	800623a <_isatty_r+0x1a>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	b103      	cbz	r3, 800623a <_isatty_r+0x1a>
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	bd38      	pop	{r3, r4, r5, pc}
 800623c:	200003e4 	.word	0x200003e4

08006240 <_init>:
 8006240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006242:	bf00      	nop
 8006244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006246:	bc08      	pop	{r3}
 8006248:	469e      	mov	lr, r3
 800624a:	4770      	bx	lr

0800624c <_fini>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr
